{
  "id": 4228,
  "name": "Lagrang3",
  "username": "Lagrang3",
  "avatar_template": "/user_avatar/delvingbitcoin.org/lagrang3/{size}/377_2.png",
  "created_at": "2025-02-09T10:40:08.500Z",
  "cooked": "<p>There several options for implementing preflow-push (Goldberg-Tarjan maxflow/min-cut algorithm). The fastest theoretical bound <span class=\"math\">O(nm \\log(n^2/m))</span> is obtained using a dynamic tree data structure or alternatively one can simply use a queue to process <em>active</em> nodes in FIFO order leading to a provable <span class=\"math\">O(n^3)</span> complexity.\nThe FIFO-preflow-push is actually pretty simple to implement. See for example:\n</p><aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/Lagrang3/max-density-closure/blob/master/examples/kattis-maxflow.cpp\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/Lagrang3/max-density-closure/blob/master/examples/kattis-maxflow.cpp\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/Lagrang3/max-density-closure/blob/master/examples/kattis-maxflow.cpp\" target=\"_blank\" rel=\"noopener nofollow ugc\">Lagrang3/max-density-closure/blob/master/examples/kattis-maxflow.cpp</a></h4>\n\n\n      <pre><code class=\"lang-cpp\">// https://open.kattis.com/problems/maxflow\n\n#include &lt;cassert&gt;\n#include &lt;iostream&gt;\n#include &lt;limits&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\n\ntypedef long long flow_t;\n\n/* FIFO variant of Goldbert-Tarjan's Preflow-Push algorithm.\n * O(n^3) */\nint preflow_push(const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; node_arcs,\n\t\t std::vector&lt;flow_t&gt;&amp; residual_capacity,\n\t\t const std::vector&lt;int&gt;&amp; next_node, const int source,\n\t\t const int sink) {\n\tconst int N_nodes = node_arcs.size();\n\tstd::vector&lt;int&gt; distance(N_nodes, 0);\n\tdistance[sink] = 0;\n\tdistance[source] = N_nodes;\n</code></pre>\n\n\n\n  This file has been truncated. <a href=\"https://github.com/Lagrang3/max-density-closure/blob/master/examples/kattis-maxflow.cpp\" target=\"_blank\" rel=\"noopener nofollow ugc\">show original</a>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
  "post_number": 30,
  "post_type": 1,
  "updated_at": "2025-02-09T10:40:08.500Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 1,
  "readers_count": 0,
  "score": 0.2,
  "yours": false,
  "topic_id": 303,
  "topic_slug": "how-to-linearize-your-cluster",
  "topic_title": "How to linearize your cluster",
  "topic_html_title": "How to linearize your cluster",
  "category_id": 8,
  "display_username": "Lagrang3",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "There several options for implementing preflow-push (Goldberg-Tarjan maxflow/min-cut algorithm). The fastest theoretical bound $O(nm \\log(n^2/m))$ is obtained using a dynamic tree data structure or alternatively one can simply use a queue to process *active* nodes in FIFO order leading to a provable $O(n^3)$ complexity.\nThe FIFO-preflow-push is actually pretty simple to implement. See for example:\nhttps://github.com/Lagrang3/max-density-closure/blob/master/examples/kattis-maxflow.cpp",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 314,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}