{
  "id": 4316,
  "name": "Bastien Teinturier",
  "username": "t-bast",
  "avatar_template": "/user_avatar/delvingbitcoin.org/t-bast/{size}/98_2.png",
  "created_at": "2025-02-18T13:06:24.718Z",
  "cooked": "<p>Work is currently ongoing to add support for <a href=\"https://github.com/lightning/bolts/pull/1228\">zero-fee commitments</a> to lightning channels.</p>\n<p>In this post, I\u2019d like to share my ideas on how this commitment format can be tweaked for mobile wallets, and gather feedback from the community.</p>\n<p>This will eventually be translated into a <a href=\"https://github.com/lightning/blips\">bLIP</a> once we agree on a satisfying solution.</p>\n<p>Let\u2019s first take a look at the threat model for mobile wallets: since mobile wallets don\u2019t relay payments, they have less attack surface than routing nodes.</p>\n<p>However, most mobile wallets don\u2019t have on-chain utxos available: our challenge is to find ways to get force-close transactions confirmed using existing channel outputs only.</p>\n<h2><a name=\"p-4316-mobile-wallet-funds-safety-1\" class=\"anchor\" href=\"#p-4316-mobile-wallet-funds-safety-1\"></a>Mobile wallet funds safety</h2>\n<h3><a name=\"p-4316-revoked-commitments-2\" class=\"anchor\" href=\"#p-4316-revoked-commitments-2\"></a>Revoked commitments</h3>\n<p>Mobile wallets must be able to publish penalty transactions if their peer broadcasts a revoked commitment.</p>\n<p>This will work trivially with zero-fee commitments: channel outputs can be spent immediately (no CSV delay), so they can be used to pay the on-chain fees. We don\u2019t have to change anything here compared to the BOLTs.</p>\n<h3><a name=\"p-4316-received-htlcs-3\" class=\"anchor\" href=\"#p-4316-received-htlcs-3\"></a>Received HTLCs</h3>\n<p>When receiving HTLCs, a mobile wallet is the final recipient. The only way the peer can steal funds is:</p>\n<ul>\n<li>\n<p>the mobile wallet fulfills the HTLC (by sending <code>update_fulfill_htlc</code> with the preimage)</p>\n</li>\n<li>\n<p>the peer then forwards that preimage to its own peers, which ensures that it has been paid (the payer receives the preimage)</p>\n</li>\n<li>\n<p>they go silent and don\u2019t revoke their previous commitment (which contains the HTLC)</p>\n</li>\n<li>\n<p>they wait for the HTLC to timeout to try to claim it on-chain</p>\n</li>\n</ul>\n<p>Before the HTLC timeout, the mobile wallet must:</p>\n<ul>\n<li>\n<p>broadcast their commitment transaction</p>\n</li>\n<li>\n<p>broadcast their HTLC-success transaction</p>\n</li>\n<li>\n<p>get those two transactions confirmed</p>\n</li>\n</ul>\n<h3><a name=\"p-4316-sent-htlcs-4\" class=\"anchor\" href=\"#p-4316-sent-htlcs-4\"></a>Sent HTLCs</h3>\n<p>When sending HTLCs, a mobile wallet is the payer: funds thus can never be stolen by the peer. If the payment succeeds, the peer must reveal the preimage to claim the funds, at which point the mobile wallet has a proof of payment.</p>\n<p>An interesting thing to note is that mobile wallets are never in a rush to claim HTLCs when they timeout. They don\u2019t have funds at stake in an upstream channel since they are the payer, so they could potentially wait longer to see if their peer reveals the preimage.</p>\n<p>Even after force-closing and publishing their HTLC-timeout transaction, if their peer publishes an HTLC-success transaction, the mobile wallet has not lost any funds: the payment can instead simply be considered fulfilled.</p>\n<p>So the only thing the peer can do is griefing (not stealing):</p>\n<ul>\n<li>\n<p>the mobile wallet sends an HTLC</p>\n</li>\n<li>\n<p>this HTLC times out</p>\n</li>\n<li>\n<p>the peer never fails the HTLC, which remains in the commitment transaction</p>\n</li>\n<li>\n<p>the funds used by that HTLC cannot be re-used until the HTLC is failed</p>\n</li>\n</ul>\n<p>At that point, to recover their funds, the mobile wallet must:</p>\n<ul>\n<li>\n<p>broadcast their commitment transaction</p>\n</li>\n<li>\n<p>broadcast their HTLC-timeout transaction</p>\n</li>\n<li>\n<p>get those two transactions confirmed</p>\n</li>\n</ul>\n<p>Note that there is no deadline before which those transactions must confirm and the peer doesn\u2019t have anything to gain from this griefing.</p>\n<h3><a name=\"p-4316-unresponsive-peer-without-htlcs-5\" class=\"anchor\" href=\"#p-4316-unresponsive-peer-without-htlcs-5\"></a>Unresponsive peer without HTLCs</h3>\n<p>When there are no pending HTLCs, no funds are at risk.</p>\n<p>But the mobile wallet user can still be griefed if their peer becomes unresponsive or disappears.</p>\n<p>To recover their funds, they must be able to:</p>\n<ul>\n<li>\n<p>broadcast their commitment transaction</p>\n</li>\n<li>\n<p>claim their main output</p>\n</li>\n</ul>\n<p>Note that there is no deadline before which those transactions must confirm and the peer doesn\u2019t have anything to gain from this griefing.</p>\n<h2><a name=\"p-4316-additional-signatures-for-htlc-transactions-6\" class=\"anchor\" href=\"#p-4316-additional-signatures-for-htlc-transactions-6\"></a>Additional signatures for HTLC transactions</h2>\n<p>With zero-fee commitments <a href=\"https://github.com/lightning/bolts/pull/1228\">as proposed in the BOLTs</a>, mobile wallets will mostly rely on their peer publishing their commitment transaction. This way the mobile wallet can use their main output (or any HTLC output) to CPFP that commitment transaction and get it confirmed.</p>\n<p>The main issue arises when the peer isn\u2019t cooperative and the mobile wallet has to publish their commitment transaction. That transaction usually has a <code>0 sat</code> anchor output and the main output has a <code>to_self_delay</code> CSV. So the only option to CPFP without additional inputs is to use HTLC transactions, but they are pre-signed and don\u2019t pay fees either.</p>\n<p>A very simple proposal to fix that is to have the peer always sign two versions of HTLC transactions:</p>\n<ul>\n<li>\n<p>the default one that doesn\u2019t pay any fee and needs additional on-chain inputs</p>\n</li>\n<li>\n<p>and another one in a custom TLV of <code>commitment_signed</code> at a high feerate that matches the currently observed feerate</p>\n</li>\n<li>\n<p>if the peer doesn\u2019t provide those signatures, the mobile wallet can force-close before revoking the commitment that doesn\u2019t contain the new HTLCs</p>\n</li>\n</ul>\n<p>This way, when HTLCs are pending, the mobile wallet can always publish their commitment transaction and CPFP it using one of the HTLC transactions. Since funds can only be stolen for received HTLCs, which should expire somewhat quickly after being received, fee estimation can be somewhat accurate.</p>\n<p>With this simple addition, mobile wallets are able to unilaterally force-close when HTLCs are pending.</p>\n<p>The only scenario that isn\u2019t fixed is the \u201cUnresponsive peer without HTLCs\u201d scenario. But this scenario can never be fixed by pre-signing transactions at various feerates, because we have no idea at which point in the future the peer will become unresponsive. On top of that, funds are not at risk in this scenario, which should only happen when an LSP completely disappears without closing channels. I think it\u2019s acceptable that when this happens, mobile wallet users will need <em>someone</em> (which could be an on-chain wallet they own) to spend the anchor output to CPFP the commitment transaction.</p>\n<p>I like this proposal because it is trivial to implement and doesn\u2019t require a lot of changes compared to the default zero-fee commitment format. Please let me know what you think, and if you have other ideas on how we could make zero-fee commitments work seamlessly with mobile wallets.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2025-02-18T13:06:24.718Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 53,
  "reads": 14,
  "readers_count": 13,
  "score": 282.8,
  "yours": false,
  "topic_id": 1453,
  "topic_slug": "zero-fee-commitments-for-mobile-wallets",
  "topic_title": "Zero-fee commitments for mobile wallets",
  "topic_html_title": "Zero-fee commitments for mobile wallets",
  "category_id": 7,
  "display_username": "Bastien Teinturier",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Work is currently ongoing to add support for [zero-fee commitments](https://github.com/lightning/bolts/pull/1228) to lightning channels.\n\nIn this post, I'd like to share my ideas on how this commitment format can be tweaked for mobile wallets, and gather feedback from the community.\n\nThis will eventually be translated into a [bLIP](https://github.com/lightning/blips) once we agree on a satisfying solution.\n\nLet's first take a look at the threat model for mobile wallets: since mobile wallets don't relay payments, they have less attack surface than routing nodes.\n\nHowever, most mobile wallets don't have on-chain utxos available: our challenge is to find ways to get force-close transactions confirmed using existing channel outputs only.\n\n## Mobile wallet funds safety\n\n### Revoked commitments\n\nMobile wallets must be able to publish penalty transactions if their peer broadcasts a revoked commitment.\n\nThis will work trivially with zero-fee commitments: channel outputs can be spent immediately (no CSV delay), so they can be used to pay the on-chain fees. We don't have to change anything here compared to the BOLTs.\n\n### Received HTLCs\n\nWhen receiving HTLCs, a mobile wallet is the final recipient. The only way the peer can steal funds is:\n\n- the mobile wallet fulfills the HTLC (by sending `update_fulfill_htlc` with the preimage)\n\n- the peer then forwards that preimage to its own peers, which ensures that it has been paid (the payer receives the preimage)\n\n- they go silent and don't revoke their previous commitment (which contains the HTLC)\n\n- they wait for the HTLC to timeout to try to claim it on-chain\n\nBefore the HTLC timeout, the mobile wallet must:\n\n- broadcast their commitment transaction\n\n- broadcast their HTLC-success transaction\n\n- get those two transactions confirmed\n\n### Sent HTLCs\n\nWhen sending HTLCs, a mobile wallet is the payer: funds thus can never be stolen by the peer. If the payment succeeds, the peer must reveal the preimage to claim the funds, at which point the mobile wallet has a proof of payment.\n\nAn interesting thing to note is that mobile wallets are never in a rush to claim HTLCs when they timeout. They don't have funds at stake in an upstream channel since they are the payer, so they could potentially wait longer to see if their peer reveals the preimage.\n\nEven after force-closing and publishing their HTLC-timeout transaction, if their peer publishes an HTLC-success transaction, the mobile wallet has not lost any funds: the payment can instead simply be considered fulfilled.\n\nSo the only thing the peer can do is griefing (not stealing):\n\n- the mobile wallet sends an HTLC\n\n- this HTLC times out\n\n- the peer never fails the HTLC, which remains in the commitment transaction\n\n- the funds used by that HTLC cannot be re-used until the HTLC is failed\n\nAt that point, to recover their funds, the mobile wallet must:\n\n- broadcast their commitment transaction\n\n- broadcast their HTLC-timeout transaction\n\n- get those two transactions confirmed\n\nNote that there is no deadline before which those transactions must confirm and the peer doesn't have anything to gain from this griefing.\n\n### Unresponsive peer without HTLCs\n\nWhen there are no pending HTLCs, no funds are at risk.\n\nBut the mobile wallet user can still be griefed if their peer becomes unresponsive or disappears.\n\nTo recover their funds, they must be able to:\n\n- broadcast their commitment transaction\n\n- claim their main output\n\nNote that there is no deadline before which those transactions must confirm and the peer doesn't have anything to gain from this griefing.\n\n## Additional signatures for HTLC transactions\n\nWith zero-fee commitments [as proposed in the BOLTs](https://github.com/lightning/bolts/pull/1228), mobile wallets will mostly rely on their peer publishing their commitment transaction. This way the mobile wallet can use their main output (or any HTLC output) to CPFP that commitment transaction and get it confirmed.\n\nThe main issue arises when the peer isn't cooperative and the mobile wallet has to publish their commitment transaction. That transaction usually has a `0 sat` anchor output and the main output has a `to_self_delay` CSV. So the only option to CPFP without additional inputs is to use HTLC transactions, but they are pre-signed and don't pay fees either.\n\nA very simple proposal to fix that is to have the peer always sign two versions of HTLC transactions:\n\n- the default one that doesn't pay any fee and needs additional on-chain inputs\n\n- and another one in a custom TLV of `commitment_signed` at a high feerate that matches the currently observed feerate\n\n- if the peer doesn't provide those signatures, the mobile wallet can force-close before revoking the commitment that doesn't contain the new HTLCs\n\nThis way, when HTLCs are pending, the mobile wallet can always publish their commitment transaction and CPFP it using one of the HTLC transactions. Since funds can only be stolen for received HTLCs, which should expire somewhat quickly after being received, fee estimation can be somewhat accurate.\n\nWith this simple addition, mobile wallets are able to unilaterally force-close when HTLCs are pending.\n\nThe only scenario that isn't fixed is the \"Unresponsive peer without HTLCs\" scenario. But this scenario can never be fixed by pre-signing transactions at various feerates, because we have no idea at which point in the future the peer will become unresponsive. On top of that, funds are not at risk in this scenario, which should only happen when an LSP completely disappears without closing channels. I think it's acceptable that when this happens, mobile wallet users will need *someone* (which could be an on-chain wallet they own) to spend the anchor output to CPFP the commitment transaction.\n\nI like this proposal because it is trivial to implement and doesn't require a lot of changes compared to the default zero-fee commitment format. Please let me know what you think, and if you have other ideas on how we could make zero-fee commitments work seamlessly with mobile wallets.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 101,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "eyes",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}