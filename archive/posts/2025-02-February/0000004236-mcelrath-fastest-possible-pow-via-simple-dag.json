{
  "id": 4236,
  "name": "Bob McElrath",
  "username": "mcelrath",
  "avatar_template": "/user_avatar/delvingbitcoin.org/mcelrath/{size}/521_2.png",
  "created_at": "2025-02-09T16:43:43.392Z",
  "cooked": "<p>I have now ported my simulator code, refined and cleaned up the basic algorithms (cohorts, highest work path) with tests. You can find it here:</p>\n<aside class=\"onebox githubfolder\" data-onebox-src=\"https://github.com/mcelrath/braidpool/tree/main/tests\">\n  <header class=\"source\">\n      <img src=\"https://github.githubassets.com/favicons/favicon.svg\" class=\"site-icon\" width=\"32\" height=\"32\">\n\n      <a href=\"https://github.com/mcelrath/braidpool/tree/main/tests\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h3><a href=\"https://github.com/mcelrath/braidpool/tree/main/tests\" target=\"_blank\" rel=\"noopener nofollow ugc\">braidpool/tests at main \u00b7 mcelrath/braidpool</a></h3>\n\n\n  <p><span class=\"label1\">Braidpool - a scalable peer to peer bitcoin mining pool with support for hashrate futures.  - mcelrath/braidpool</span></p>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>The simulator randomly distributes 25 nodes by random latitude and longitude, and accurately computes distance between them on the surface of a sphere, and accurately simulates propagation latency of beads. Each node has 4 peers, but you can modify this by arguments to the script. Run <code>python simulator.py -h</code> to see the options.</p>\n<p>I find that using <a class=\"mention\" href=\"/u/zawy\">@zawy</a>\u2019s suggestion of targeting 2 parents per bead results in Nb/Nc=3.5 or so. (Number of beads per cohort) The difference between his simulation and mine is more accurate simulation of latencies, and correct calculation of cohorts. He was using an approximation where only a single-bead can close a cohort.</p>\n<p>I really like the \u201cnumber of parents\u201d target method. I find that if I bias the downward pressure when there are too many parents, I can hit Nb/Nc=2.5 or so by just doubling how much we push down the target when there are too many parents. (My <a href=\"https://github.com/braidpool/braidpool/blob/6bc7785c7ee61ea1379ae971ecf8ebca1f976332/docs/braid_consensus.md\" rel=\"noopener nofollow ugc\">analysis</a> indicated that 2.42 was optimal \u2013 sorry about this link, it looks like GitHub hosed their Latex processor since I pushed it last \u2013 this doc is a WIP)</p>\n<p>I can use the cohorts algorithm to actually target a number of cohorts, but it seems to me that this is unnecessary, and also introduces an arbitrary \u201caveraging window\u201d over which we compute cohorts. By tuning how much we push the target up or down we can hit 2.42 on average with a much simpler algorithm with fewer parameters that is extremely resistant to manipulation because it doesn\u2019t use timestamps. Note that miners will be paid proportional to their work, so having different beads with different targets slightly affects their variance, but not their expected payout.</p>\n<p>If you want to play with this, see <code>simulator.py:244</code> to change the difficulty algorithm and zawy\u2019s suggestion at <code>simulator.py:259</code> and my \u201casymmetric\u201d suggestion at <code>simulator.py:266</code>.</p>\n<p>This simulator also has two modes: one where it actually computes sha256d hashes (CPU mining only) if you pass <code>--mine</code> to the script, and one where it uses the geometric distribution to compute expected solve times and skip the CPU-intensive mining (default). The functionality is intended to be the same between the two modes, but of course using the geometric distribution is much faster. It takes about 1.5m to generate 10,000 beads on a single core. <code>python simulator.py -b 10000</code>. Doing the same with <code>--mine</code> will take about an hour.</p>\n<p>If you test this and have any interesting observations please let me know. I\u2019m porting this to Rust and will discuss this result on the <a href=\"https://x.com/bitcoinoptech/status/1887827549209645090\" rel=\"noopener nofollow ugc\">OpTech recap on Tuesday</a>. Join our <a href=\"https://discord.gg/pZYUDwkpPv\" rel=\"noopener nofollow ugc\">Discord to discuss this</a>.</p>",
  "post_number": 21,
  "post_type": 1,
  "updated_at": "2025-02-09T16:48:47.248Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 10,
  "reads": 6,
  "readers_count": 5,
  "score": 51.2,
  "yours": false,
  "topic_id": 1331,
  "topic_slug": "fastest-possible-pow-via-simple-dag",
  "topic_title": "Fastest-possible PoW via Simple DAG",
  "topic_html_title": "Fastest-possible PoW via Simple DAG",
  "category_id": 7,
  "display_username": "Bob McElrath",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I have now ported my simulator code, refined and cleaned up the basic algorithms (cohorts, highest work path) with tests. You can find it here:\n\nhttps://github.com/mcelrath/braidpool/tree/main/tests\n\nThe simulator randomly distributes 25 nodes by random latitude and longitude, and accurately computes distance between them on the surface of a sphere, and accurately simulates propagation latency of beads. Each node has 4 peers, but you can modify this by arguments to the script. Run `python simulator.py -h` to see the options.\n\nI find that using @zawy's suggestion of targeting 2 parents per bead results in Nb/Nc=3.5 or so. (Number of beads per cohort) The difference between his simulation and mine is more accurate simulation of latencies, and correct calculation of cohorts. He was using an approximation where only a single-bead can close a cohort.\n\nI really like the \"number of parents\" target method. I find that if I bias the downward pressure when there are too many parents, I can hit Nb/Nc=2.5 or so by just doubling how much we push down the target when there are too many parents. (My [analysis](https://github.com/braidpool/braidpool/blob/6bc7785c7ee61ea1379ae971ecf8ebca1f976332/docs/braid_consensus.md) indicated that 2.42 was optimal -- sorry about this link, it looks like GitHub hosed their Latex processor since I pushed it last -- this doc is a WIP)\n\nI can use the cohorts algorithm to actually target a number of cohorts, but it seems to me that this is unnecessary, and also introduces an arbitrary \"averaging window\" over which we compute cohorts. By tuning how much we push the target up or down we can hit 2.42 on average with a much simpler algorithm with fewer parameters that is extremely resistant to manipulation because it doesn't use timestamps. Note that miners will be paid proportional to their work, so having different beads with different targets slightly affects their variance, but not their expected payout.\n\nIf you want to play with this, see `simulator.py:244` to change the difficulty algorithm and zawy's suggestion at `simulator.py:259` and my \"asymmetric\" suggestion at `simulator.py:266`.\n\nThis simulator also has two modes: one where it actually computes sha256d hashes (CPU mining only) if you pass `--mine` to the script, and one where it uses the geometric distribution to compute expected solve times and skip the CPU-intensive mining (default). The functionality is intended to be the same between the two modes, but of course using the geometric distribution is much faster. It takes about 1.5m to generate 10,000 beads on a single core. `python simulator.py -b 10000`. Doing the same with `--mine` will take about an hour.\n\nIf you test this and have any interesting observations please let me know. I'm porting this to Rust and will discuss this result on the [OpTech recap on Tuesday](https://x.com/bitcoinoptech/status/1887827549209645090). Join our [Discord to discuss this](https://discord.gg/pZYUDwkpPv).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 406,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}