{
  "id": 4226,
  "name": "Adam Gibson",
  "username": "AdamISZ",
  "avatar_template": "/user_avatar/delvingbitcoin.org/adamisz/{size}/418_2.png",
  "created_at": "2025-02-08T16:10:51.500Z",
  "cooked": "<p>Very interesting set of ideas! I particularly like the hiddenness property. I believe it works, modulo <a class=\"mention\" href=\"/u/ajtowns\">@ajtowns</a> 's correction on tx-structure.</p>\n<p>One thing that strikes me: it could be that the most expensive part of this operation is putting hash160 into an arithmetic circuit (well, assuming you used something for which the EC operations are native, like bulletproofs, which of course may not actually be the best option, depending \u2026). Did you consider rewriting this in Schnorr/taproot form? Because that part would be removed.</p>\n<p>The obvious objection is that taproot does not natively come with a hashed pubkey type scriptPubKey and so it\u2019s not meaningful/useful, if you had to insert that into the tapscript anyway, in order to maintain the property that the final pay-in addresses addr_a and addr_b actually function to hide the choices made.</p>\n<p>I spent some time thinking about ways around that. The obvious starting point might be blinding addr_a,b with a third point, so e.g. <span class=\"math\">P_a + A_1 + T</span>. But on reflection it\u2019s not surprising that there\u2019s no easy way to make that work, since you\u2019re blinding with a point, not a scalar. You can always add other relations to the ZKP to prove this extra structure, but it doesn\u2019t help if what is atomically revealed in broadcast (i.e. the schnorr signature) only reveals the overall key. I looked briefly at adding in adaptors via MuSig between the parties but it didn\u2019t seem to work because of the aforementioned thing that the \u201csecret\u201d here is a point, not a scalar.</p>\n<p>Anyway, perhaps just a sidetrack - I think the core concept is very nice.</p>",
  "post_number": 5,
  "post_type": 1,
  "updated_at": "2025-02-08T16:10:51.500Z",
  "reply_count": 0,
  "reply_to_post_number": 4,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.4,
  "yours": false,
  "topic_id": 1409,
  "topic_slug": "emulating-op-rand",
  "topic_title": "Emulating OP_RAND",
  "topic_html_title": "Emulating OP_RAND",
  "category_id": 7,
  "display_username": "Adam Gibson",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "olkurbatov",
    "name": "Alex",
    "avatar_template": "/user_avatar/delvingbitcoin.org/olkurbatov/{size}/299_2.png"
  },
  "bookmarked": false,
  "raw": "Very interesting set of ideas! I particularly like the hiddenness property. I believe it works, modulo @ajtowns 's correction on tx-structure.\n\nOne thing that strikes me: it could be that the most expensive part of this operation is putting hash160 into an arithmetic circuit (well, assuming you used something for which the EC operations are native, like bulletproofs, which of course may not actually be the best option, depending ...). Did you consider rewriting this in Schnorr/taproot form? Because that part would be removed.\n\nThe obvious objection is that taproot does not natively come with a hashed pubkey type scriptPubKey and so it's not meaningful/useful, if you had to insert that into the tapscript anyway, in order to maintain the property that the final pay-in addresses addr_a and addr_b actually function to hide the choices made.\n\nI spent some time thinking about ways around that. The obvious starting point might be blinding addr_a,b with a third point, so e.g. $P_a + A_1 + T$. But on reflection it's not surprising that there's no easy way to make that work, since you're blinding with a point, not a scalar. You can always add other relations to the ZKP to prove this extra structure, but it doesn't help if what is atomically revealed in broadcast (i.e. the schnorr signature) only reveals the overall key. I looked briefly at adding in adaptors via MuSig between the parties but it didn't seem to work because of the aforementioned thing that the \"secret\" here is a point, not a scalar.\n\nAnyway, perhaps just a sidetrack - I think the core concept is very nice.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 343,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}