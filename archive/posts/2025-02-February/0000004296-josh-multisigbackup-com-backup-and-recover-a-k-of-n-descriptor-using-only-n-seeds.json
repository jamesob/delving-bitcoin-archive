{
  "id": 4296,
  "name": "",
  "username": "josh",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josh/{size}/95_2.png",
  "created_at": "2025-02-14T06:21:28.229Z",
  "cooked": "<blockquote>\n<p>I don\u2019t feel like using a globally replicated database for information that just a single person cares about is a good use of the technology. It may appear convenient at times when demand for block space is low, but I would caution against building an expectation that this is a realistic option in the long run.</p>\n</blockquote>\n<p><a class=\"mention\" href=\"/u/sipa\">@sipa</a> I\u2019ve thought long and hard about the better way to respond to this.</p>\n<p>I think we need to define, \u201cthe database.\u201d</p>\n<p>Is the Tape, on which all 1\u2019s and 0\u2019s, are passed, \u201cthe database\u201d?</p>\n<p>Or is the UTXO set, and the block headers, that determine what gets added to the Tape\u2026</p>\n<p>I do not deny that the size of the Tape is critically important to regulate.</p>\n<p>But Bitcoin already has.</p>\n<p>What I\u2019m asking is, are 1s and 0s explicitly outside of the \u201cdatabase,\u201d</p>\n<p>That governs the Machine called Core.</p>\n<p>Within the scope of the \u201cdatabase\u201d</p>\n<p>Of which you are understandably concerned.</p>\n<hr>\n<p>I failed to properly disclose, in this writeup, the precise mechanism by which data is inscribed.</p>\n<p>But intentionally built <a href=\"http://btcscribe.org\" rel=\"noopener nofollow ugc\">btcscribe.org</a>, as a separate primitive.</p>\n<p>That could enable trustless \u201cscribing\u201d without the creation of new UTXOs.</p>\n<p>Not only is this better for the user (cheaper fees, while maintaining visibility into their inscription, via mempool.space)</p>\n<p>It is better for Core, and frankly the only responsible way to place data on it.</p>\n<hr>\n<p>Understandably, there has been a lot of uneasiness, about the expansion of the size of the UTXO set, created by \u201cinscriptions.\u201d</p>\n<p>But we have to define what is causing it.</p>\n<p>It isn\u2019t the act of adding otherwise meaningless 1\u2019s and 0\u2019s to the Tape.</p>\n<p>It is the act of assigning something of Value.</p>\n<p>Which demands, at least initially, its own UTXO.</p>\n<hr>\n<p>Point being,</p>\n<p>The act of creation, of new UTXO\u2019s, is really what matters.</p>\n<p>Especially if that act of creation, is done on behalf of assets, that are not long-lived.</p>\n<hr>\n<p>That being said,</p>\n<p>Thank you for your reply. It means a lot coming from you.</p>\n<p>I hoped this would be a tool that was well-received by developers,</p>\n<p>Because it tries to solve a real pain point, associated with the act of holding, \u201cbitcoin-the-asset.\u201d</p>\n<p>Nevertheless, I acknowledge,</p>\n<p>That I could have been more direct about the care I took to remain consensus-compatible.</p>\n<hr>\n<p>I\u2019d also note, that unlike some new metaprotocols being developed,</p>\n<p>There is no long-term dependency, in the act of making the inscription.</p>\n<p>A descriptor, once placed on the Tape, is therefore forever.</p>\n<p>And there is no need, to encrypt it there twice.</p>\n<hr>\n<p>Moreover, this is really just a proof-of-concept.</p>\n<p>There are WAY better ways of packaging this data effectively, in a long-term well designed and maintainable piece of software.</p>\n<p>I built what I built in Javascript in the client, only because it was easy / AI-aided during setup.</p>\n<p>And the indexer is only built in JS because that\u2019s where the JS encryptor descriptor logic already was.</p>\n<p>In practice, you\u2019d want to build a tool like this in rust, or in some other low-dependency way.</p>\n<hr>\n<p>My point, is merely that this post was made for a tool that I believed in my heart of hearts to be consensus-compatible, and your comment was deeply discouraging, even though I\u2019m sure that is not how you meant it. I had no idea who you were, until later, when I clicked on your username.</p>\n<p>(Thank you for responding! You have no idea how giddy it made me)</p>\n<hr>\n<p>Wrapping up, I\u2019d like to acknowledge that Delving Bitcoin may have been the wrong place to post this.</p>\n<p>I didn\u2019t consider doing so, until someone from BitDevs ATL, suggested doing it.</p>\n<p>I think it\u2019s important, that Core, recognizes that it is critical to consensus,</p>\n<p>That data be recognized as important.</p>\n<p>That is not consensus compatible.</p>\n<p>Re-framing, that came out wrong,</p>\n<p>What I mean, is that I think Core, as the Machine that governs the Tape,</p>\n<p>Should intentionally, with purpose, be reserving 1s and 0s</p>\n<p>And creating ways for developers and users to do so</p>\n<p>In an incentive compatible way.</p>\n<p>This means considering \u201cofficial\u201d ways to place data in the Witness.</p>\n<p>In a single transaction.</p>\n<hr>\n<p>By my understanding, this is already possible, via the taproot annex.</p>\n<p>But, perhaps fortunately, hardly any developer knows about it.</p>\n<hr>\n<p>A proposal, though, could easily be made, however, for a preemptive soft fork,</p>\n<p>Assigning the first bit of the first byte in the annex,</p>\n<p>To designate a promise by \u201cCore\u201d</p>\n<p>To never be touched.</p>\n<p>This would, at the very least,</p>\n<p>Provide an incentive-compatible way,</p>\n<p>For 1s and 0s to be reserved in the Witness.</p>\n<hr>\n<p>Without it,</p>\n<p>Core must trust a non-explicit process</p>\n<p>Of economic actors weeding out such transactions</p>\n<p>And preventing them from showing up onchain.</p>\n<hr>\n<p>In summary,</p>\n<p>It is my sincere belief.</p>\n<p>That the act of reserving 1s and 0s</p>\n<p>With the explicit promise of never being touched by Core,</p>\n<p>Is a fundamental necessity to long-term consensus.</p>\n<hr>\n<p>In the worst case,</p>\n<p>A well-intentioned developer builds an extremely powerful new primitive that lives there,</p>\n<p>That enables legitimate, significant forms of Capital, otherwise aligned with bitcoin-the-asset,</p>\n<p>To live</p>\n<p>On the Tape</p>\n<p>But solely inside the annex</p>\n<p>And in a way that precludes Core</p>\n<p>From ever using it</p>\n<p>Without breaking the representation of Capital for everyone else.</p>\n<p>This could create enormous incentives,</p>\n<p>For actors non necessarily aligned with bitcoin-the-asset,</p>\n<p>To try to restrict Core from using the annex.</p>\n<hr>\n<p>Avoid it,</p>\n<p>it should be avoided at all costs.</p>\n<p>An explicit guarantee,</p>\n<p>A pointer to developers</p>\n<p>An indication of what is and is not safe</p>\n<p>Is so, so important.</p>\n<p>The days of bitcoin-the-asset</p>\n<p>Being the only asset of Value</p>\n<p>To live on the Tape.</p>\n<p>Are not guaranteed to last forever\u2026</p>\n<hr>\n<p>Sincerely,</p>\n<p>Josh</p>",
  "post_number": 7,
  "post_type": 1,
  "updated_at": "2025-02-14T06:21:28.229Z",
  "reply_count": 0,
  "reply_to_post_number": 3,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.4,
  "yours": false,
  "topic_id": 1430,
  "topic_slug": "multisigbackup-com-backup-and-recover-a-k-of-n-descriptor-using-only-n-seeds",
  "topic_title": "MultisigBackup.com: Backup and recover a k-of-n descriptor using only n seeds",
  "topic_html_title": "MultisigBackup.com: Backup and recover a k-of-n descriptor using only n seeds",
  "category_id": 8,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "sipa",
    "name": "Pieter Wuille",
    "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png"
  },
  "bookmarked": false,
  "raw": "> I don\u2019t feel like using a globally replicated database for information that just a single person cares about is a good use of the technology. It may appear convenient at times when demand for block space is low, but I would caution against building an expectation that this is a realistic option in the long run.\n\n@sipa I've thought long and hard about the better way to respond to this.\n\nI think we need to define, \"the database.\"\n\nIs the Tape, on which all 1's and 0's, are passed, \"the database\"?\n\nOr is the UTXO set, and the block headers, that determine what gets added to the Tape...\n\nI do not deny that the size of the Tape is critically important to regulate.\n\nBut Bitcoin already has.\n\nWhat I'm asking is, are 1s and 0s explicitly outside of the \"database,\"\n\nThat governs the Machine called Core.\n\nWithin the scope of the \"database\"\n\nOf which you are understandably concerned.\n\n----\n\nI failed to properly disclose, in this writeup, the precise mechanism by which data is inscribed.\n\nBut intentionally built btcscribe.org, as a separate primitive.\n\nThat could enable trustless \"scribing\" without the creation of new UTXOs.\n\nNot only is this better for the user (cheaper fees, while maintaining visibility into their inscription, via mempool.space)\n\nIt is better for Core, and frankly the only responsible way to place data on it.\n\n-----\nUnderstandably, there has been a lot of uneasiness, about the expansion of the size of the UTXO set, created by \"inscriptions.\"\n\nBut we have to define what is causing it.\n\nIt isn't the act of adding otherwise meaningless 1's and 0's to the Tape.\n\nIt is the act of assigning something of Value.\n\nWhich demands, at least initially, its own UTXO.\n\n----\nPoint being,\n\nThe act of creation, of new UTXO's, is really what matters.\n\nEspecially if that act of creation, is done on behalf of assets, that are not long-lived.\n\n----\nThat being said,\n\nThank you for your reply. It means a lot coming from you.\n\nI hoped this would be a tool that was well-received by developers,\n\nBecause it tries to solve a real pain point, associated with the act of holding, \"bitcoin-the-asset.\"\n\nNevertheless, I acknowledge,\n\nThat I could have been more direct about the care I took to remain consensus-compatible.\n\n---\nI'd also note, that unlike some new metaprotocols being developed,\n\nThere is no long-term dependency, in the act of making the inscription.\n\nA descriptor, once placed on the Tape, is therefore forever.\n\nAnd there is no need, to encrypt it there twice.\n\n-----\nMoreover, this is really just a proof-of-concept.\n\nThere are WAY better ways of packaging this data effectively, in a long-term well designed and maintainable piece of software.\n\nI built what I built in Javascript in the client, only because it was easy / AI-aided during setup.\n\nAnd the indexer is only built in JS because that's where the JS encryptor descriptor logic already was.\n\nIn practice, you'd want to build a tool like this in rust, or in some other low-dependency way.\n\n----\nMy point, is merely that this post was made for a tool that I believed in my heart of hearts to be consensus-compatible, and your comment was deeply discouraging, even though I'm sure that is not how you meant it. I had no idea who you were, until later, when I clicked on your username.\n\n(Thank you for responding! You have no idea how giddy it made me)\n\n-----\nWrapping up, I'd like to acknowledge that Delving Bitcoin may have been the wrong place to post this.\n\nI didn't consider doing so, until someone from BitDevs ATL, suggested doing it.\n\nI think it's important, that Core, recognizes that it is critical to consensus,\n\nThat data be recognized as important.\n\nThat is not consensus compatible.\n\nRe-framing, that came out wrong,\n\nWhat I mean, is that I think Core, as the Machine that governs the Tape,\n\nShould intentionally, with purpose, be reserving 1s and 0s\n\nAnd creating ways for developers and users to do so\n\nIn an incentive compatible way.\n\nThis means considering \"official\" ways to place data in the Witness.\n\nIn a single transaction.\n\n------\nBy my understanding, this is already possible, via the taproot annex.\n\nBut, perhaps fortunately, hardly any developer knows about it.\n\n------\nA proposal, though, could easily be made, however, for a preemptive soft fork,\n\nAssigning the first bit of the first byte in the annex,\n\nTo designate a promise by \"Core\"\n\nTo never be touched.\n\nThis would, at the very least,\n\nProvide an incentive-compatible way,\n\nFor 1s and 0s to be reserved in the Witness.\n\n-----\nWithout it,\n\nCore must trust a non-explicit process\n\nOf economic actors weeding out such transactions\n\nAnd preventing them from showing up onchain.\n\n-----\nIn summary,\n\nIt is my sincere belief.\n\nThat the act of reserving 1s and 0s\n\nWith the explicit promise of never being touched by Core,\n\nIs a fundamental necessity to long-term consensus.\n\n------\nIn the worst case,\n\nA well-intentioned developer builds an extremely powerful new primitive that lives there,\n\nThat enables legitimate, significant forms of Capital, otherwise aligned with bitcoin-the-asset,\n\nTo live \n\nOn the Tape\n\nBut solely inside the annex\n\nAnd in a way that precludes Core\n\nFrom ever using it\n\nWithout breaking the representation of Capital for everyone else.\n\nThis could create enormous incentives,\n\nFor actors non necessarily aligned with bitcoin-the-asset,\n\nTo try to restrict Core from using the annex.\n\n-----\nAvoid it,\n\nit should be avoided at all costs.\n\nAn explicit guarantee,\n\nA pointer to developers\n\nAn indication of what is and is not safe\n\nIs so, so important.\n\nThe days of bitcoin-the-asset\n\nBeing the only asset of Value\n\nTo live on the Tape.\n\nAre not guaranteed to last forever...\n\n------\nSincerely,\n\nJosh",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 98,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}