{
  "id": 4269,
  "name": "Joost",
  "username": "joostjager",
  "avatar_template": "/letter_avatar_proxy/v4/letter/j/779978/{size}.png",
  "created_at": "2025-02-10T17:01:20.154Z",
  "cooked": "<p>I wanted to revisit the idea discussed here: <a href=\"https://www.mail-archive.com/lightning-dev@lists.linuxfoundation.org/msg03094.html\" rel=\"noopener nofollow ugc\">https://www.mail-archive.com/lightning-dev@lists.linuxfoundation.org/msg03094.html</a></p>\n<h2><a name=\"p-4269-the-core-idea-1\" class=\"anchor\" href=\"#p-4269-the-core-idea-1\"></a>The core idea</h2>\n<p>The goal is to move toward a Lightning Network with zero payment failures. Currently, this is addressed using complex probabilistic scoring models \u2014 difficult to design and even harder to validate. But if the future holds a 100% success rate, probabilistic scoring becomes unnecessary. Instead, nodes could simply be skipped for an extended (nearly indefinite?) period after a single failure on a single channel. ROUTE OR OUT.</p>\n<h2><a name=\"p-4269-transitioning-2\" class=\"anchor\" href=\"#p-4269-transitioning-2\"></a>Transitioning</h2>\n<p>To adopt this approach, nodes could signal that, for specific peers, a 100% forwarding success rate can be assumed up to a certain amount. This would allow routing node operators to gradually improve their service levels rather than making abrupt, system-wide changes. They could start small\u2014offering guaranteed success with a single peer\u2014and expand from there.</p>\n<p>Senders might prioritize connections with this high availability (HA) signal and penalize aggressively if such a connection still fails. They might even be willing to pay higher fees for HA channels.</p>\n<h2><a name=\"p-4269-concerns-counterpoints-3\" class=\"anchor\" href=\"#p-4269-concerns-counterpoints-3\"></a>Concerns &amp; counterpoints</h2>\n<p>In the linked discussion, various developers raise concerns about this concept. However, the actual impact remains unknown. Moreover, nothing prevents routing nodes from modifying their software to send this signal. One could argue it\u2019s better to formalize and standardize this signaling rather than leaving it to unofficial modifications.</p>\n<p>In fact, developers aren\u2019t even in control here. Routing node operators using existing implementations can already signal high availability today. The <code>htlc_maximum_msat</code> channel update parameter still has unused bits that could be repurposed for this.</p>\n<p>For instance, in the public graph, no node currently sets <code>htlc_maximum_msat</code> to a value ending in 555. Nodes could slightly adjust their <code>htlc_maximum_msat</code> to end in 555, signaling that the channel is highly available for amounts up to that value.</p>\n<p>Interested to hear more thoughts on the concept of high availability signaling and the proposed deployment mechanism.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2025-02-10T17:01:20.154Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 9,
  "readers_count": 8,
  "score": 11.6,
  "yours": false,
  "topic_id": 1438,
  "topic_slug": "highly-available-lightning-channels-revisited-route-or-out",
  "topic_title": "Highly Available Lightning Channels Revisited \u2013 ROUTE OR OUT",
  "topic_html_title": "Highly Available Lightning Channels Revisited \u2013 ROUTE OR OUT",
  "category_id": 7,
  "display_username": "Joost",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I wanted to revisit the idea discussed here: https://www.mail-archive.com/lightning-dev@lists.linuxfoundation.org/msg03094.html\n\n## The core idea\n\nThe goal is to move toward a Lightning Network with zero payment failures. Currently, this is addressed using complex probabilistic scoring models \u2014 difficult to design and even harder to validate. But if the future holds a 100% success rate, probabilistic scoring becomes unnecessary. Instead, nodes could simply be skipped for an extended (nearly indefinite?) period after a single failure on a single channel. ROUTE OR OUT.\n\n## Transitioning\n\nTo adopt this approach, nodes could signal that, for specific peers, a 100% forwarding success rate can be assumed up to a certain amount. This would allow routing node operators to gradually improve their service levels rather than making abrupt, system-wide changes. They could start small\u2014offering guaranteed success with a single peer\u2014and expand from there.\n\nSenders might prioritize connections with this high availability (HA) signal and penalize aggressively if such a connection still fails. They might even be willing to pay higher fees for HA channels.\n\n## Concerns & counterpoints\n\nIn the linked discussion, various developers raise concerns about this concept. However, the actual impact remains unknown. Moreover, nothing prevents routing nodes from modifying their software to send this signal. One could argue it\u2019s better to formalize and standardize this signaling rather than leaving it to unofficial modifications.\n\nIn fact, developers aren\u2019t even in control here. Routing node operators using existing implementations can already signal high availability today. The `htlc_maximum_msat` channel update parameter still has unused bits that could be repurposed for this.\n\nFor instance, in the public graph, no node currently sets `htlc_maximum_msat` to a value ending in 555. Nodes could slightly adjust their `htlc_maximum_msat` to end in 555, signaling that the channel is highly available for amounts up to that value.\n\nInterested to hear more thoughts on the concept of high availability signaling and the proposed deployment mechanism.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 662,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}