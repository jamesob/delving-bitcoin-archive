{
  "id": 4351,
  "name": null,
  "username": "Purpletimez",
  "avatar_template": "/letter_avatar_proxy/v4/letter/p/7ab992/{size}.png",
  "created_at": "2025-02-20T21:21:42.149Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"morehouse\" data-post=\"8\" data-topic=\"1147\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/df705f/48.png\" class=\"avatar\"> morehouse:</div>\n<blockquote>\n<p>It\u2019s interesting that the reputation delta fluctuates so much. Once the hodling begins, the attacker\u2019s reputation should be strictly decreasing. So I presume the delta variance is entirely from fluctuations in the target node\u2019s incoming revenue?</p>\n<p>Or perhaps some variance is from the randomness of endorsed payments being sent to the attacker. It would be interesting to see at which points on the graph did new endorsed payments arrive at the attacker. We could also reduce that variance by having the attacker take a more direct approach to jamming \u2013 after building reputation, they would send themselves a payment of the maximum amount they can get endorsed and hodl.</p>\n</blockquote>\n</aside>\n<p>That\u2019s a good question. One should not exclude that an attacker might alternate between \u201cfailing\u201d jamming traffic and \u201csucceeding\u201d jamming traffic, even just to navigate around a static threshold if more than %80 traffic is jamming and can the remaining traffic being flagged as jamming.</p>\n<p>As a reminder, the decaying algorithm is currently the following:</p>\n<pre><code class=\"lang-auto\">Track the following values for each rolling window: \n* `last_update`: stores the timestamp of the last update to the decaying \n    average, expressed in seconds.\n* `decaying_average`: stores the value of the decaying average.\n* `decay_rate`: a constant rate of decay based on the rolling window chosen, \n  calculated as: `((1/2)^(2/window_length_seconds))`.\n</code></pre>\n<p>As an enhancement of the graphic, it could be interesting to add the HTLC traffic success in a discrete fashion, not continuous. Just to observe if the current decaying algorithm displayed any smoothing statistical bias, in the sense of discounting the marginal jamming HTLC temporally ordered.</p>\n<aside class=\"quote no-group\" data-username=\"morehouse\" data-post=\"8\" data-topic=\"1147\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/df705f/48.png\" class=\"avatar\"> morehouse:</div>\n<blockquote>\n<p>So with outgoing reputation the final nodes in the jamming path get compensated. And with incoming reputation the initial nodes in the jamming path get compensated. What about all the intermediate nodes in the jamming path?</p>\n</blockquote>\n</aside>\n<p>This is unclear in this simple example, if it assumes that A, T and B are running local resource conservation algorithms themselves. If they\u2019re and assuming the bi-reputation algorithm satisfies\nits transitivity property, they should be compensated by HTLC traffic on their local links, i.e M0-A and B-M1, afaiu.</p>\n<p>Of course, that would also assume that local resource conversation algorithms are tuned with the same settings as downside, otherwise I believe it might generate exploitable jamming surface.</p>\n<aside class=\"quote no-group\" data-username=\"morehouse\" data-post=\"8\" data-topic=\"1147\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/df705f/48.png\" class=\"avatar\"> morehouse:</div>\n<blockquote>\n<p>In general, the problem gets worse the more intermediate nodes there are. Not only do those intermediate nodes not get compensated, but also the attacker\u2019s cost remains fixed while the damage multiplies.</p>\n</blockquote>\n</aside>\n<p>If local resource conservation algorithms are deployed in a recursive fashion over the graph, both for entries and exit edges, this is more or less what is done today for internet DDoS ingress / outgress filtering. Now, of course, a routing node can deviate at the price of the higher jamming DoS, they might offer lower <code>fee_base_msat</code> and <code>fee_proportional_millionths</code>.</p>\n<p>In a world where onion-routing is native for payments, this is an interesting question if the payer could over-compensate routing nodes for forwarding payments along a low-reputation path. Somehow, <code>amt_to_forward</code> is part of the per-hop onion payload, I believe.</p>",
  "post_number": 10,
  "post_type": 1,
  "updated_at": "2025-02-20T21:21:42.149Z",
  "reply_count": 0,
  "reply_to_post_number": 8,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 14,
  "readers_count": 13,
  "score": 2.8,
  "yours": false,
  "topic_id": 1147,
  "topic_slug": "hybrid-jamming-mitigation-results-and-updates",
  "topic_title": "Hybrid Jamming Mitigation: Results and Updates",
  "topic_html_title": "Hybrid Jamming Mitigation: Results and Updates",
  "category_id": 7,
  "display_username": null,
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"morehouse, post:8, topic:1147\"]\nIt\u2019s interesting that the reputation delta fluctuates so much. Once the hodling begins, the attacker\u2019s reputation should be strictly decreasing. So I presume the delta variance is entirely from fluctuations in the target node\u2019s incoming revenue?\n\nOr perhaps some variance is from the randomness of endorsed payments being sent to the attacker. It would be interesting to see at which points on the graph did new endorsed payments arrive at the attacker. We could also reduce that variance by having the attacker take a more direct approach to jamming \u2013 after building reputation, they would send themselves a payment of the maximum amount they can get endorsed and hodl.\n[/quote]\n\n\nThat's a good question. One should not exclude that an attacker might alternate between \"failing\" jamming traffic and \"succeeding\" jamming traffic, even just to navigate around a static threshold if more than %80 traffic is jamming and can the remaining traffic being flagged as jamming.\n\nAs a reminder, the decaying algorithm is currently the following:\n\n```\nTrack the following values for each rolling window: \n* `last_update`: stores the timestamp of the last update to the decaying \n    average, expressed in seconds.\n* `decaying_average`: stores the value of the decaying average.\n* `decay_rate`: a constant rate of decay based on the rolling window chosen, \n  calculated as: `((1/2)^(2/window_length_seconds))`.\n```\n\nAs an enhancement of the graphic, it could be interesting to add the HTLC traffic success in a discrete fashion, not continuous. Just to observe if the current decaying algorithm displayed any smoothing statistical bias, in the sense of discounting the marginal jamming HTLC temporally ordered.\n\n[quote=\"morehouse, post:8, topic:1147\"]\nSo with outgoing reputation the final nodes in the jamming path get compensated. And with incoming reputation the initial nodes in the jamming path get compensated. What about all the intermediate nodes in the jamming path?\n[/quote]\n\nThis is unclear in this simple example, if it assumes that A, T and B are running local resource conservation algorithms themselves. If they're and assuming the bi-reputation algorithm satisfies\nits transitivity property, they should be compensated by HTLC traffic on their local links, i.e M0-A and B-M1, afaiu.\n\nOf course, that would also assume that local resource conversation algorithms are tuned with the same settings as downside, otherwise I believe it might generate exploitable jamming surface.\n\n[quote=\"morehouse, post:8, topic:1147\"]\nIn general, the problem gets worse the more intermediate nodes there are. Not only do those intermediate nodes not get compensated, but also the attacker\u2019s cost remains fixed while the damage multiplies.\n[/quote]\n\nIf local resource conservation algorithms are deployed in a recursive fashion over the graph, both for entries and exit edges, this is more or less what is done today for internet DDoS ingress / outgress filtering. Now, of course, a routing node can deviate at the price of the higher jamming DoS, they might offer lower `fee_base_msat` and `fee_proportional_millionths`.\n\nIn a world where onion-routing is native for payments, this is an interesting question if the payer could over-compensate routing nodes for forwarding payments along a low-reputation path. Somehow, `amt_to_forward` is part of the per-hop onion payload, I believe.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 660,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}