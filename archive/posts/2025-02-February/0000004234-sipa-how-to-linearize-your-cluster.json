{
  "id": 4234,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png",
  "created_at": "2025-02-09T14:28:11.882Z",
  "cooked": "<p>To demonstrate what I mean above:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/2X/f/fd9ab3a8129050f024c6905c942c585bc93ebf44.png\" data-download-href=\"https://delvingbitcoin.org/uploads/default/fd9ab3a8129050f024c6905c942c585bc93ebf44\" title=\"min_cuts\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/2X/f/fd9ab3a8129050f024c6905c942c585bc93ebf44_2_517x332.png\" alt=\"min_cuts\" data-base62-sha1=\"AbufjIH2s8rI16C4OoShtGe7NGI\" width=\"517\" height=\"332\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/2X/f/fd9ab3a8129050f024c6905c942c585bc93ebf44_2_517x332.png, https://delvingbitcoin.org/uploads/default/optimized/2X/f/fd9ab3a8129050f024c6905c942c585bc93ebf44_2_775x498.png 1.5x, https://delvingbitcoin.org/uploads/default/original/2X/f/fd9ab3a8129050f024c6905c942c585bc93ebf44.png 2x\" data-dominant-color=\"F4F1F2\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">min_cuts</span><span class=\"informations\">784\u00d7504 25.7 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<ul>\n<li>D is the feerate diagram of the optimal linearization, so each black dot on it corresponds to some topologically-valid subset, and D is the convex hull through them. The vertices of the convex hull (and the transaction sets they correspond to) are what we are trying to find.</li>\n<li><span class=\"math\">L_1</span> is the line whose slope is the <span class=\"math\">\\lambda_1</span> for the first min-cut iteration, corresponding with the feerate of the entire cluster.</li>\n<li>Then we run the min-cut algorithm, to find the closure <span class=\"math\">C_1</span> whose weight <span class=\"math\">Q_1 = \\operatorname{fee}_{C_1} - \\lambda_1 \\operatorname{size}_{C_1}</span> is maximal.</li>\n<li>Then we set <span class=\"math\">\\lambda_2</span> to the previous solution, i.e., <span class=\"math\">\\lambda_2 = \\operatorname{fee}_{C_1} /\\operatorname{size}_{C_1}</span>.</li>\n<li><span class=\"math\">L_2</span> is the line whose slope is <span class=\"math\">\\lambda_2</span>.</li>\n<li>Then we run the min-cut algorithm again, to find the closure <span class=\"math\">C_2</span> whose weight <span class=\"math\">Q_2 = \\operatorname{fee}_{C_2} - \\lambda_2 \\operatorname{size}_{C_2}</span> is maximal.</li>\n</ul>\n<p>In every iteration, one or more chunks are removed, but the solutions each correspond to a prefix of chunks of the optimal linearization. So by the time we find the first chunk <span class=\"math\">C_2</span>, we have found the next chunk already too (<span class=\"math\">C_1 \\setminus C_2</span>), but not the one after that because the first iteration skipped that one already. I\u2019m guessing that\u2019s where the contraction comes in: replace the source <span class=\"math\">s</span> with <span class=\"math\">C_1 \\cup \\{s\\}</span>, and start over, and somehow that is still possible without fully resetting the algorithm state?</p>",
  "post_number": 34,
  "post_type": 1,
  "updated_at": "2025-02-09T14:46:34.169Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 4,
  "readers_count": 3,
  "score": 0.8,
  "yours": false,
  "topic_id": 303,
  "topic_slug": "how-to-linearize-your-cluster",
  "topic_title": "How to linearize your cluster",
  "topic_html_title": "How to linearize your cluster",
  "category_id": 8,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "To demonstrate what I mean above:\n\n![min_cuts|690x443, 75%](upload://AbufjIH2s8rI16C4OoShtGe7NGI.png)\n\n* D is the feerate diagram of the optimal linearization, so each black dot on it corresponds to some topologically-valid subset, and D is the convex hull through them. The vertices of the convex hull (and the transaction sets they correspond to) are what we are trying to find.\n* $L_1$ is the line whose slope is the $\\lambda_1$ for the first min-cut iteration, corresponding with the feerate of the entire cluster.\n* Then we run the min-cut algorithm, to find the closure $C_1$ whose weight $Q_1 = \\operatorname{fee}_{C_1} - \\lambda_1 \\operatorname{size}_{C_1}$ is maximal.\n* Then we set $\\lambda_2$ to the previous solution, i.e., $\\lambda_2 = \\operatorname{fee}_{C_1} /\\operatorname{size}_{C_1}$.\n* $L_2$ is the line whose slope is $\\lambda_2$.\n* Then we run the min-cut algorithm again, to find the closure $C_2$ whose weight $Q_2 = \\operatorname{fee}_{C_2} - \\lambda_2 \\operatorname{size}_{C_2}$ is maximal.\n\nIn every iteration, one or more chunks are removed, but the solutions each correspond to a prefix of chunks of the optimal linearization. So by the time we find the first chunk $C_2$, we have found the next chunk already too ($C_1 \\setminus C_2$), but not the one after that because the first iteration skipped that one already. I'm guessing that's where the contraction comes in: replace the source $s$ with $C_1 \\cup \\{s\\}$, and start over, and somehow that is still possible without fully resetting the algorithm state?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}