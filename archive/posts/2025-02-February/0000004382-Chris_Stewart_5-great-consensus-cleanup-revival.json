{
  "id": 4382,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/user_avatar/delvingbitcoin.org/chris_stewart_5/{size}/296_2.png",
  "created_at": "2025-02-26T16:35:45.812Z",
  "cooked": "<h1><a name=\"p-4382-characteristics-of-a-64-byte-transaction-1\" class=\"anchor\" href=\"#p-4382-characteristics-of-a-64-byte-transaction-1\"></a><strong>Characteristics of a 64-byte Transaction</strong></h1>\n<p>I recently proposed <a href=\"https://github.com/Christewart/bips/blob/3f68df0ca172e2523afa809eb5d572b5a8881393/bip-XXXX.mediawiki\" rel=\"noopener nofollow ugc\">a Bitcoin Improvement Proposal (BIP)</a> to make 64-byte transactions <strong>consensus-invalid</strong> in Bitcoin. This document examines the characteristics of 64-byte transactions.</p>\n<h2><a name=\"p-4382-background-2\" class=\"anchor\" href=\"#p-4382-background-2\"></a><strong>Background</strong></h2>\n<p>According to <a href=\"https://github.com/Christewart/bips/blob/3f68df0ca172e2523afa809eb5d572b5a8881393/bip-XXXX/2-BitcoinMerkle.pdf\" rel=\"noopener nofollow ugc\">Suhas Daftuar</a>, 64-byte transactions follow this format:</p>\n<ul>\n<li>version (4 bytes)</li>\n<li>vin size (1 byte)</li>\n<li>outpoint (36 bytes)</li>\n<li>length scriptSig (1 byte)</li>\n<li>scriptSig (0\u20134 bytes, depending on the scriptPubKey in this transaction)</li>\n<li>sequence (4 bytes)</li>\n<li>vout size (1 byte)</li>\n<li>value (8 bytes)</li>\n<li>length scriptPubKey (1 byte)</li>\n<li>scriptPubKey (0\u20134 bytes, depending on the scriptSig in this transaction)</li>\n<li>locktime (4 bytes)</li>\n</ul>\n<h2><a name=\"p-4382-h-64-byte-pre-segwit-transactions-cannot-contain-a-digital-signature-in-the-scriptsig-3\" class=\"anchor\" href=\"#p-4382-h-64-byte-pre-segwit-transactions-cannot-contain-a-digital-signature-in-the-scriptsig-3\"></a><strong>64-Byte Pre-Segwit Transactions Cannot Contain a Digital Signature in the <code>scriptSig</code></strong></h2>\n<p>Since the activation of <a href=\"https://github.com/bitcoin/bips/blob/cc81fde2731546dd9185590c72661d7d620f7919/bip-0066.mediawiki#der-encoding-reference\" rel=\"noopener nofollow ugc\">BIP66</a> on the Bitcoin network, digital signatures must be at least 9 bytes long.</p>\n<p>As a result, a 64-byte pre-segwit transaction cannot spend raw scripts that contain:</p>\n<ul>\n<li><code>OP_CHECKSIG</code></li>\n<li><code>OP_CHECKSIGVERIFY</code></li>\n<li><code>OP_CHECKMULTISIG</code></li>\n<li><code>OP_CHECKMULTISIGVERIFY</code></li>\n</ul>\n<h2><a name=\"p-4382-h-64-byte-transactions-must-create-an-anyonecanspend-output-4\" class=\"anchor\" href=\"#p-4382-h-64-byte-transactions-must-create-an-anyonecanspend-output-4\"></a><strong>64-Byte Transactions Must Create an <code>ANYONECANSPEND</code> Output</strong></h2>\n<p>No known <code>scriptPubKey</code> is 4 bytes long while still being protected by a public key or a supported hash function in Bitcoin Script.</p>\n<p>Therefore, every output created by a 64-byte transaction can be trivially claimed by miners. If the goal of the transaction is to create an output claimable by miners, this can be achieved with Bitcoin transactions either smaller or larger than 64 bytes.</p>\n<h2><a name=\"p-4382-nonstandard-outputs-5\" class=\"anchor\" href=\"#p-4382-nonstandard-outputs-5\"></a><strong>Nonstandard Outputs</strong></h2>\n<p>As of block <code>00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7</code>, there are no non-standard, non-zero-value outputs that could be satisfied exclusively by a 64-byte transaction.</p>\n<h2><a name=\"p-4382-p2sh-outputs-6\" class=\"anchor\" href=\"#p-4382-p2sh-outputs-6\"></a><strong>P2SH Outputs</strong></h2>\n<p>P2SH outputs place a redeem script in the <code>scriptSig</code>. We can allocate up to 3 bytes for the <code>redeemScript</code> when spending a P2SH output.</p>\n<p>As of block <code>00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7</code>, there are no UTXOs in the blockchain with <code>redeemScripts</code> of 0\u20133 bytes.</p>\n<h2><a name=\"p-4382-segwit-outputs-7\" class=\"anchor\" href=\"#p-4382-segwit-outputs-7\"></a><strong>SegWit Outputs</strong></h2>\n<p><a href=\"https://github.com/bitcoin/bips/blob/cc81fde2731546dd9185590c72661d7d620f7919/bip-0141.mediawiki#user-content-Witness_program\" rel=\"noopener nofollow ugc\">BIP141</a> fundamentally restructures Bitcoin transactions. It introduces a new data structure called a <strong>witness</strong> that can replace the <code>scriptSig</code> for SegWit programs. This data does not count toward the 64-byte transaction limit, meaning digital signatures can be included in 64-byte SegWit transactions.</p>\n<h3><a name=\"p-4382-native-segwit-v0-and-v1-programs-8\" class=\"anchor\" href=\"#p-4382-native-segwit-v0-and-v1-programs-8\"></a><strong>Native SegWit v0 and v1 Programs</strong></h3>\n<p>64-byte transactions that spend native SegWit programs must have exactly 4-byte <code>scriptPubKeys</code>. This is because the inputs to their programs are put into the witness rather than the <code>scriptSig</code>.</p>\n<p>As a side note, when running tests for this document I realized it is <a href=\"https://github.com/bitcoin/bitcoin/blob/e486597f9a57903600656fb5106858941885852f/src/validation.cpp#L798\" rel=\"noopener nofollow ugc\">impossible to broadcast 64-byte transactions, even with <code>-acceptnonstdtxn=1</code></a> via the RPC interface without custom-compiling <code>bitcoind</code>.</p>\n<h3><a name=\"p-4382-wrapped-segwit-programs-9\" class=\"anchor\" href=\"#p-4382-wrapped-segwit-programs-9\"></a><strong>Wrapped SegWit Programs</strong></h3>\n<p>There are two types of wrapped SegWit programs:</p>\n<ul>\n<li><code>p2sh(p2wpkh)</code></li>\n<li><code>p2sh(p2wsh)</code></li>\n</ul>\n<p>Both types of outputs require witness programs in the <code>scriptSig</code>, which are larger than 4 bytes. Therefore, these types of outputs cannot be spent by 64-byte transactions.</p>\n<h3><a name=\"p-4382-future-segwit-versions-10\" class=\"anchor\" href=\"#p-4382-future-segwit-versions-10\"></a><strong>Future SegWit Versions</strong></h3>\n<p>As per <a href=\"https://github.com/bitcoin/bips/blob/cc81fde2731546dd9185590c72661d7d620f7919/bip-0141.mediawiki#witness-program\" rel=\"noopener nofollow ugc\">BIP141</a>, this is how a witness program is defined:</p>\n<blockquote>\n<p>A <code>scriptPubKey</code> (or <code>redeemScript</code> as defined in BIP16/P2SH) that consists of a 1-byte push opcode (one of <code>OP_0,OP_1,OP_2,...,OP_16</code>) followed by a direct data push between 2 and 40 bytes gets a new special meaning.</p>\n</blockquote>\n<p>If a BIP disallowing 64-byte transactions is activated, we will no longer allow <strong>1-input, 1-output</strong> SegWit transactions paying to 2-byte witness programs.</p>\n<p>Here is an example of a witness program that would no longer be possible in a <strong>1-input, 1-output</strong> transaction:</p>\n<blockquote>\n<p><code>OP_2 0x02 0xXXXX</code></p>\n</blockquote>\n<p>I am not aware of any reason why this would be a problem, but I have not seen it documented anywhere.</p>",
  "post_number": 73,
  "post_type": 1,
  "updated_at": "2025-02-26T17:50:27.221Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 7,
  "reads": 7,
  "readers_count": 6,
  "score": 36.4,
  "yours": false,
  "topic_id": 710,
  "topic_slug": "great-consensus-cleanup-revival",
  "topic_title": "Great Consensus Cleanup Revival",
  "topic_html_title": "Great Consensus Cleanup Revival",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 5,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "# **Characteristics of a 64-byte Transaction**\n\nI recently proposed [a Bitcoin Improvement Proposal (BIP)](https://github.com/Christewart/bips/blob/3f68df0ca172e2523afa809eb5d572b5a8881393/bip-XXXX.mediawiki) to make 64-byte transactions **consensus-invalid** in Bitcoin. This document examines the characteristics of 64-byte transactions.\n\n## **Background**\n\nAccording to [Suhas Daftuar](https://github.com/Christewart/bips/blob/3f68df0ca172e2523afa809eb5d572b5a8881393/bip-XXXX/2-BitcoinMerkle.pdf), 64-byte transactions follow this format:\n\n* version (4 bytes)\n* vin size (1 byte)\n* outpoint (36 bytes)\n* length scriptSig (1 byte)\n* scriptSig (0\u20134 bytes, depending on the scriptPubKey in this transaction)\n* sequence (4 bytes)\n* vout size (1 byte)\n* value (8 bytes)\n* length scriptPubKey (1 byte)\n* scriptPubKey (0\u20134 bytes, depending on the scriptSig in this transaction)\n* locktime (4 bytes)\n\n## **64-Byte Pre-Segwit Transactions Cannot Contain a Digital Signature in the `scriptSig`**\n\nSince the activation of [BIP66](https://github.com/bitcoin/bips/blob/cc81fde2731546dd9185590c72661d7d620f7919/bip-0066.mediawiki#der-encoding-reference) on the Bitcoin network, digital signatures must be at least 9 bytes long.\n\nAs a result, a 64-byte pre-segwit transaction cannot spend raw scripts that contain:\n\n* `OP_CHECKSIG`\n* `OP_CHECKSIGVERIFY`\n* `OP_CHECKMULTISIG`\n* `OP_CHECKMULTISIGVERIFY`\n\n## **64-Byte Transactions Must Create an `ANYONECANSPEND` Output**\n\nNo known `scriptPubKey` is 4 bytes long while still being protected by a public key or a supported hash function in Bitcoin Script.\n\nTherefore, every output created by a 64-byte transaction can be trivially claimed by miners. If the goal of the transaction is to create an output claimable by miners, this can be achieved with Bitcoin transactions either smaller or larger than 64 bytes.\n\n## **Nonstandard Outputs**\n\nAs of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7`, there are no non-standard, non-zero-value outputs that could be satisfied exclusively by a 64-byte transaction.\n\n## **P2SH Outputs**\n\nP2SH outputs place a redeem script in the `scriptSig`. We can allocate up to 3 bytes for the `redeemScript` when spending a P2SH output.\n\nAs of block `00000000000000000001194ae6be942619bf61aa70822b9643d01c1a441bf2b7`, there are no UTXOs in the blockchain with `redeemScripts` of 0\u20133 bytes.\n\n## **SegWit Outputs**\n\n[BIP141](https://github.com/bitcoin/bips/blob/cc81fde2731546dd9185590c72661d7d620f7919/bip-0141.mediawiki#user-content-Witness_program) fundamentally restructures Bitcoin transactions. It introduces a new data structure called a **witness** that can replace the `scriptSig` for SegWit programs. This data does not count toward the 64-byte transaction limit, meaning digital signatures can be included in 64-byte SegWit transactions.\n\n### **Native SegWit v0 and v1 Programs**\n\n64-byte transactions that spend native SegWit programs must have exactly 4-byte `scriptPubKeys`. This is because the inputs to their programs are put into the witness rather than the `scriptSig`.\n\nAs a side note, when running tests for this document I realized it is [impossible to broadcast 64-byte transactions, even with `-acceptnonstdtxn=1`](https://github.com/bitcoin/bitcoin/blob/e486597f9a57903600656fb5106858941885852f/src/validation.cpp#L798) via the RPC interface without custom-compiling `bitcoind`.\n\n### **Wrapped SegWit Programs**\n\nThere are two types of wrapped SegWit programs:\n\n* `p2sh(p2wpkh)`\n* `p2sh(p2wsh)`\n\nBoth types of outputs require witness programs in the `scriptSig`, which are larger than 4 bytes. Therefore, these types of outputs cannot be spent by 64-byte transactions.\n\n### **Future SegWit Versions**\n\nAs per [BIP141](https://github.com/bitcoin/bips/blob/cc81fde2731546dd9185590c72661d7d620f7919/bip-0141.mediawiki#witness-program), this is how a witness program is defined:\n\n> A `scriptPubKey` (or `redeemScript` as defined in BIP16/P2SH) that consists of a 1-byte push opcode (one of `OP_0,OP_1,OP_2,...,OP_16`) followed by a direct data push between 2 and 40 bytes gets a new special meaning.\n\nIf a BIP disallowing 64-byte transactions is activated, we will no longer allow **1-input, 1-output** SegWit transactions paying to 2-byte witness programs.\n\nHere is an example of a witness program that would no longer be possible in a **1-input, 1-output** transaction:\n\n> `OP_2 0x02 0xXXXX`\n\nI am not aware of any reason why this would be a problem, but I have not seen it documented anywhere.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}