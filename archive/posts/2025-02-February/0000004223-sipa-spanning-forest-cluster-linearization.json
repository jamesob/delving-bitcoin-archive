{
  "id": 4223,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png",
  "created_at": "2025-02-07T20:19:05.333Z",
  "cooked": "<p>I cleaned up my implementation a bit, and pushed it <a href=\"https://github.com/sipa/bitcoin/commits/spanning_tree_linearization\">here</a>, replacing the <code>Linearize()</code> function currently merged in Bitcoin Core.</p>\n<p>Here are benchmarks with the existing examples in the codebase. These are the timing for full, optimal, linearizations from scratch, for a rather arbitrarily-selected collections of \u201chard\u201d clusters actually seen on the network. \u201chard\u201d, of course, is based on examples that we hard with the existing approach, by a few different metric, but this may not carry over to the new approach. I entirely expect that these are not anywhere close to the worst cases for the spanning-forest algorithm.</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">\u00b5s (master)</th>\n<th style=\"text-align:right\">\u00b5s (this)</th>\n<th style=\"text-align:left\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>\n<th><span class=\"hashtag-raw\">#tx</span></th>\n<th style=\"text-align:left\">benchmark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">70.6</td>\n<td style=\"text-align:right\">21.1</td>\n<td style=\"text-align:left\"></td>\n<td>71</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample00</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">94.9</td>\n<td style=\"text-align:right\">30.4</td>\n<td style=\"text-align:left\"></td>\n<td>81</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample01</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">55.3</td>\n<td style=\"text-align:right\">29.5</td>\n<td style=\"text-align:left\"></td>\n<td>90</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample02</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">54.7</td>\n<td style=\"text-align:right\">31.1</td>\n<td style=\"text-align:left\"></td>\n<td>87</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample03</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">2.3</td>\n<td style=\"text-align:right\">4.1</td>\n<td style=\"text-align:left\"></td>\n<td>35</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample04</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">12.6</td>\n<td style=\"text-align:right\">9.7</td>\n<td style=\"text-align:left\"></td>\n<td>60</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample05</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">37.2</td>\n<td style=\"text-align:right\">35.6</td>\n<td style=\"text-align:left\"></td>\n<td>99</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample06</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">8.7</td>\n<td style=\"text-align:right\">7.5</td>\n<td style=\"text-align:left\"></td>\n<td>52</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample07</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">67.5</td>\n<td style=\"text-align:right\">22.0</td>\n<td style=\"text-align:left\"></td>\n<td>69</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample08</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">15.2</td>\n<td style=\"text-align:right\">24.9</td>\n<td style=\"text-align:left\"></td>\n<td>77</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample09</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">9.8</td>\n<td style=\"text-align:right\">9.6</td>\n<td style=\"text-align:left\"></td>\n<td>48</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample10</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">371677.6</td>\n<td style=\"text-align:right\">24.1</td>\n<td style=\"text-align:left\"></td>\n<td>77</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample11</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">491.4</td>\n<td style=\"text-align:right\">7.2</td>\n<td style=\"text-align:left\"></td>\n<td>40</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample12</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">59.5</td>\n<td style=\"text-align:right\">32.9</td>\n<td style=\"text-align:left\"></td>\n<td>96</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample13</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">361.3</td>\n<td style=\"text-align:right\">34.6</td>\n<td style=\"text-align:left\"></td>\n<td>93</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample14</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">14003.9</td>\n<td style=\"text-align:right\">9.7</td>\n<td style=\"text-align:left\"></td>\n<td>55</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample15</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">10864.3</td>\n<td style=\"text-align:right\">43.4</td>\n<td style=\"text-align:left\"></td>\n<td>76</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample16</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">13992.6</td>\n<td style=\"text-align:right\">50.6</td>\n<td style=\"text-align:left\"></td>\n<td>98</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample17</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">14029.4</td>\n<td style=\"text-align:right\">45.4</td>\n<td style=\"text-align:left\"></td>\n<td>99</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample18</code></td>\n</tr>\n<tr>\n<td style=\"text-align:right\">15198.4</td>\n<td style=\"text-align:right\">32.6</td>\n<td style=\"text-align:left\"></td>\n<td>78</td>\n<td style=\"text-align:left\"><code>LinearizeOptimallyExample19</code></td>\n</tr>\n</tbody>\n</table>\n</div>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2025-02-07T20:19:05.333Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 1,
  "readers_count": 0,
  "score": 0,
  "yours": false,
  "topic_id": 1419,
  "topic_slug": "spanning-forest-cluster-linearization",
  "topic_title": "Spanning-forest cluster linearization",
  "topic_html_title": "Spanning-forest cluster linearization",
  "category_id": 8,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I cleaned up my implementation a bit, and pushed it [here](https://github.com/sipa/bitcoin/commits/spanning_tree_linearization), replacing the `Linearize()` function currently merged in Bitcoin Core.\n\nHere are benchmarks with the existing examples in the codebase. These are the timing for full, optimal, linearizations from scratch, for a rather arbitrarily-selected collections of \"hard\" clusters actually seen on the network. \"hard\", of course, is based on examples that we hard with the existing approach, by a few different metric, but this may not carry over to the new approach. I entirely expect that these are not anywhere close to the worst cases for the spanning-forest algorithm.\n\n|               \u00b5s (master) | \u00b5s (this)  | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | #tx | benchmark\n|--------------------:|----------------------------:|:--|-|:-------\n|           70.6 |  21.1 || 71 | `LinearizeOptimallyExample00`\n|           94.9 |  30.4 || 81 | `LinearizeOptimallyExample01`\n|           55.3 |  29.5 || 90 | `LinearizeOptimallyExample02`\n|           54.7 | 31.1 ||  87 | `LinearizeOptimallyExample03`\n|            2.3 | 4.1 || 35 | `LinearizeOptimallyExample04`\n|           12.6 | 9.7 ||  60 | `LinearizeOptimallyExample05`\n|           37.2 | 35.6 ||  99 | `LinearizeOptimallyExample06`\n|            8.7 |  7.5 ||  52 | `LinearizeOptimallyExample07`\n|           67.5 | 22.0 || 69 | `LinearizeOptimallyExample08`\n|           15.2 | 24.9 || 77 | `LinearizeOptimallyExample09`\n|            9.8 | 9.6 || 48 | `LinearizeOptimallyExample10`\n|      371677.6 | 24.1 || 77 | `LinearizeOptimallyExample11`\n|          491.4 | 7.2 || 40 | `LinearizeOptimallyExample12`\n|           59.5 | 32.9 || 96 | `LinearizeOptimallyExample13`\n|          361.3 | 34.6 || 93 | `LinearizeOptimallyExample14`\n|       14003.9 | 9.7 || 55 | `LinearizeOptimallyExample15`\n|       10864.3 | 43.4 || 76 | `LinearizeOptimallyExample16`\n|       13992.6 | 50.6 || 98 | `LinearizeOptimallyExample17`\n|       14029.4 | 45.4 || 99 | `LinearizeOptimallyExample18`\n|       15198.4 | 32.6 || 78 | `LinearizeOptimallyExample19`",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}