{
  "id": 4209,
  "name": "",
  "username": "josh",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josh/{size}/95_2.png",
  "created_at": "2025-02-06T19:56:35.929Z",
  "cooked": "<p>Hi all, I\u2019ve been working on a new open source project, <a href=\"http://multisigbackup.com/\" rel=\"noopener nofollow ugc\">multisigbackup.com</a>, which is designed to make it as easy as possible to backup and recover a multisig descriptor, using nothing more than a threshold number of seeds.</p>\n<p><strong>Expectations vs. reality</strong></p>\n<p>Many new users aren\u2019t aware that in order to recover a 2-of-3 multisig wallet, you need at least 2 seed phrases <em>and</em> the output descriptor. Among other things, the descriptor contains the derivation paths and the extended public keys (xpubs), all of which are needed in order to spend from a standard 2-of-3 multisig.</p>\n<p>This runs counter to most users\u2019 expectations, because 2 seed phrases are NOT enough to recover a 2-of-3 multisig wallet. Without the descriptor, a user\u2019s funds are lost if they lose one of their seeds. This scares users off from creating a multisig and pushes others to use a collaborative custody provider like Unchained, Casa, Nunchuk, etc., who walk them through the process and keep a copy of the descriptor on their behalf.</p>\n<p><strong>How are descriptors typically stored?</strong></p>\n<p>If you\u2019re using a collaborative multisig provider like Unchained, Casa, Nunchuk, etc., the descriptor is backed up on your behalf. This makes for a smoother user experience during onboarding and easier inheritance, but you sacrifice privacy, must pay $200+ annual fees, and must trust the provider to maintain backups. For this reason, it\u2019s recommended that users still back up the descriptor themselves.</p>\n<p>A common, but dangerous, approach to back up the descriptor is to store it on a laptop or in the cloud. While essentially free, this approach makes inheritance extremely challenging and risks the descriptor getting lost or accidentally deleted.</p>\n<p>A better practice is to print out multiple copies of the descriptor or put them on USB sticks, storing one alongside each seed phrase. This is more robust and better for inheritance, but the data can still get destroyed in a fire or simply degrade.</p>\n<p>Lastly, you can purchase special equipment like a SeedHammer, which can engrave your descriptor onto steel plates. This is the most durable existing solution, but it\u2019s pricey.</p>\n<p><strong>The goal: permanent, privacy-preserving, one-click backup and recovery</strong></p>\n<p>For the best user experience, a new user should only need to physically back up their seed phrases. Anything else is an extra burden that discourages new users and creates risk.</p>\n<p>With <a href=\"http://multisigbackup.com/\" rel=\"noopener nofollow ugc\">multisigbackup.com</a>, descriptor backup is made easy. The user simply inputs their descriptor, and the tool encrypts it and generates a taproot address, which with a single payment, will inscribe the encrypted data forever on Bitcoin.</p>\n<p>Later, when a user wishes to recover it, they simply connect two hardware devices (Ledger and Trezor supported) and press recover. To recover manually, the user inputs the master fingerprints of two seed phrases, which are hashed and used to find the encrypted descriptor onchain via an open source indexer. The derivation paths, which are not encrypted, are then used by the user to derive two xpubs, which can decrypt and recover the original descriptor.</p>\n<p><strong>How it works</strong></p>\n<p>This tool encrypts the sensitive data (master fingerprints and xpubs) in a <strong>k-of-n</strong> descriptor in a way that can be decrypted with <em>any</em> <strong>k</strong> xpubs. Here\u2019s a high-level overview of how this works:</p>\n<ol>\n<li>Extract xpubs and master fingerprints</li>\n<li>Encrypt xpubs and master fingerprints using a random seed</li>\n<li>Use shamir secret sharing to split the seed into <strong>n</strong> shares, where <strong>k</strong> shares is enough to recover it</li>\n<li>Encrypt each share with a corresponding xpub</li>\n<li>Append the encrypted data to the stripped descriptor</li>\n</ol>\n<p>To facilitate recovery while preserving privacy, each pair of master fingerprints is hashed, and the first four bytes are appended to the inscribed text. These hashes are used to find the encrypted descriptor later using the indexer.</p>\n<p>If you\u2019re curious what an encrypted descriptor looks like, here\u2019s an inscribed example: <a href=\"https://mempool.space/tx/c33203c3c589affbbca8635abf90a0faf8676db8e4a5b52395b4c0f7fee4deed\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">mempool - Bitcoin Explorer</a>. The plaintext descriptor is:</p>\n<pre><code class=\"lang-auto\">wsh(sortedmulti(2,[3abf21c8/48h/0h/0h/2h]xpub6DYotmPf2kXFYhJMFDpfydjiXG1RzmH1V7Fnn2Z38DgN2oSYruczMyTFZZPz6yXq47Re8anhXWGj4yMzPTA3bjPDdpA96TLUbMehrH3sBna/&lt;0;1&gt;/*,[a1a4bd46/48h/0h/0h/2h]xpub6DvXYo8BwnRACos42ME7tNL48JQhLMQ33ENfniLM9KZmeZGbBhyh1Jkfo3hUKmmjW92o3r7BprTPPdrTr4QLQR7aRnSBfz1UFMceW5ibhTc/&lt;0;1&gt;/*,[ed91913d/48h/0h/0h/2h]xpub6EQUho4Z4pwh2UQGdPjoPrbtjd6qqseKZCEBLcZbJ7y6c9XBWHRkhERiADJfwRcUs14nQsxF3hvx7aFkbk3tfp4dnKfkcns217kBTVVN5gY/&lt;0;1&gt;/*))#hpcyqx44\n</code></pre>\n<p><strong>Summary</strong></p>\n<ul>\n<li><em>Manageable one-time cost</em> - cost to inscribe is equivalent to making ~4 multisig transactions (~400vb or 800 sats at 2 sats/vb)</li>\n<li><em>Strong data availability guarantees</em> - no risk of loss due to fire, hardware failure, vendor error, or vendor closure</li>\n<li><em>Privacy preserving</em> - no information leaked publicly nor to any vendor, not even a thief who has stolen a seed phrase would know it\u2019s part of a multisig</li>\n<li><em>Simple recovery</em> - anyone can recover simply by connecting two devices = simplified inheritance</li>\n<li><em>Enables simpler setup</em> - a wallet can present a payment link or inscribe on the user\u2019s behalf during setup = superior UX</li>\n</ul>\n<p><strong>Areas for future development</strong></p>\n<ul>\n<li>Taproot multisig support</li>\n<li>Miniscript support</li>\n<li>Support for non-standard descriptor formats (Caravan, BSMS, etc.)</li>\n<li>Further inscription size optimizations</li>\n<li>Software wallet integrations</li>\n</ul>\n<p>Happy to answer questions and appreciate any feedback!</p>\n<p>Source code: <a href=\"https://github.com/joshdoman/multisig-backup\" rel=\"noopener nofollow ugc\">https://github.com/joshdoman/multisig-backup</a></p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2025-02-06T19:56:35.929Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 2,
  "readers_count": 1,
  "score": 0.2,
  "yours": false,
  "topic_id": 1430,
  "topic_slug": "multisigbackup-com-backup-and-recover-a-k-of-n-descriptor-using-only-n-seeds",
  "topic_title": "MultisigBackup.com: Backup and recover a k-of-n descriptor using only n seeds",
  "topic_html_title": "MultisigBackup.com: Backup and recover a k-of-n descriptor using only n seeds",
  "category_id": 8,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Hi all, I've been working on a new open source project, [multisigbackup.com](http://multisigbackup.com/), which is designed to make it as easy as possible to backup and recover a multisig descriptor, using nothing more than a threshold number of seeds.\n\n**Expectations vs. reality**\n\nMany new users aren't aware that in order to recover a 2-of-3 multisig wallet, you need at least 2 seed phrases *and* the output descriptor. Among other things, the descriptor contains the derivation paths and the extended public keys (xpubs), all of which are needed in order to spend from a standard 2-of-3 multisig.\n\nThis runs counter to most users' expectations, because 2 seed phrases are NOT enough to recover a 2-of-3 multisig wallet. Without the descriptor, a user's funds are lost if they lose one of their seeds. This scares users off from creating a multisig and pushes others to use a collaborative custody provider like Unchained, Casa, Nunchuk, etc., who walk them through the process and keep a copy of the descriptor on their behalf.\n\n**How are descriptors typically stored?**\n\nIf you're using a collaborative multisig provider like Unchained, Casa, Nunchuk, etc., the descriptor is backed up on your behalf. This makes for a smoother user experience during onboarding and easier inheritance, but you sacrifice privacy, must pay $200+ annual fees, and must trust the provider to maintain backups. For this reason, it's recommended that users still back up the descriptor themselves.\n\nA common, but dangerous, approach to back up the descriptor is to store it on a laptop or in the cloud. While essentially free, this approach makes inheritance extremely challenging and risks the descriptor getting lost or accidentally deleted.\n\nA better practice is to print out multiple copies of the descriptor or put them on USB sticks, storing one alongside each seed phrase. This is more robust and better for inheritance, but the data can still get destroyed in a fire or simply degrade.\n\nLastly, you can purchase special equipment like a SeedHammer, which can engrave your descriptor onto steel plates. This is the most durable existing solution, but it's pricey.\n\n**The goal: permanent, privacy-preserving, one-click backup and recovery**\n\nFor the best user experience, a new user should only need to physically back up their seed phrases. Anything else is an extra burden that discourages new users and creates risk.\n\nWith [multisigbackup.com](http://multisigbackup.com/), descriptor backup is made easy. The user simply inputs their descriptor, and the tool encrypts it and generates a taproot address, which with a single payment, will inscribe the encrypted data forever on Bitcoin.\n\nLater, when a user wishes to recover it, they simply connect two hardware devices (Ledger and Trezor supported) and press recover. To recover manually, the user inputs the master fingerprints of two seed phrases, which are hashed and used to find the encrypted descriptor onchain via an open source indexer. The derivation paths, which are not encrypted, are then used by the user to derive two xpubs, which can decrypt and recover the original descriptor.\n\n**How it works**\n\nThis tool encrypts the sensitive data (master fingerprints and xpubs) in a **k-of-n** descriptor in a way that can be decrypted with *any* **k** xpubs. Here's a high-level overview of how this works:\n\n1. Extract xpubs and master fingerprints\n2. Encrypt xpubs and master fingerprints using a random seed\n3. Use shamir secret sharing to split the seed into **n** shares, where **k** shares is enough to recover it\n4. Encrypt each share with a corresponding xpub\n5. Append the encrypted data to the stripped descriptor\n\nTo facilitate recovery while preserving privacy, each pair of master fingerprints is hashed, and the first four bytes are appended to the inscribed text. These hashes are used to find the encrypted descriptor later using the indexer.\n\nIf you're curious what an encrypted descriptor looks like, here's an inscribed example: https://mempool.space/tx/c33203c3c589affbbca8635abf90a0faf8676db8e4a5b52395b4c0f7fee4deed. The plaintext descriptor is:\n\n```\nwsh(sortedmulti(2,[3abf21c8/48h/0h/0h/2h]xpub6DYotmPf2kXFYhJMFDpfydjiXG1RzmH1V7Fnn2Z38DgN2oSYruczMyTFZZPz6yXq47Re8anhXWGj4yMzPTA3bjPDdpA96TLUbMehrH3sBna/<0;1>/*,[a1a4bd46/48h/0h/0h/2h]xpub6DvXYo8BwnRACos42ME7tNL48JQhLMQ33ENfniLM9KZmeZGbBhyh1Jkfo3hUKmmjW92o3r7BprTPPdrTr4QLQR7aRnSBfz1UFMceW5ibhTc/<0;1>/*,[ed91913d/48h/0h/0h/2h]xpub6EQUho4Z4pwh2UQGdPjoPrbtjd6qqseKZCEBLcZbJ7y6c9XBWHRkhERiADJfwRcUs14nQsxF3hvx7aFkbk3tfp4dnKfkcns217kBTVVN5gY/<0;1>/*))#hpcyqx44\n```\n\n**Summary**\n\n* *Manageable one-time cost* - cost to inscribe is equivalent to making ~4 multisig transactions (~400vb or 800 sats at 2 sats/vb)\n* *Strong data availability guarantees* - no risk of loss due to fire, hardware failure, vendor error, or vendor closure\n* *Privacy preserving* - no information leaked publicly nor to any vendor, not even a thief who has stolen a seed phrase would know it\u2019s part of a multisig\n* *Simple recovery* - anyone can recover simply by connecting two devices = simplified inheritance\n* *Enables simpler setup* - a wallet can present a payment link or inscribe on the user\u2019s behalf during setup = superior UX\n\n**Areas for future development**\n\n* Taproot multisig support\n* Miniscript support\n* Support for non-standard descriptor formats (Caravan, BSMS, etc.)\n* Further inscription size optimizations\n* Software wallet integrations\n\nHappy to answer questions and appreciate any feedback!\n\nSource code: [https://github.com/joshdoman/multisig-backup](https://github.com/joshdoman/multisig-backup)",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 98,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}