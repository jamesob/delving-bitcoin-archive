{
  "id": 4394,
  "name": "Zawy",
  "username": "zawy",
  "avatar_template": "/user_avatar/delvingbitcoin.org/zawy/{size}/750_2.png",
  "created_at": "2025-02-27T19:57:52.004Z",
  "cooked": "<p>I was looking back over this thread and wanted to make clear the parent method I was initially excited about loses its usefulness if the \u201ctopology\u201d (hashrate-weighted latency between peers) of the network changes significantly, and creates an incentive for big miners to have lower latency between each other which would unfairly increase the number blocks they get compared to smaller miners.  I\u2019m thinking strictly in terms of a PoW DAG chain. Braidpool may be able to create incentives to negate the problem.  My grandparents and great-grandparents \u201cfix\u201d did not do as well as I had hoped, if that wasn\u2019t clear.</p>\n<p>In contrast, the \u201cNc/Nb\u201d method is very resilient to changes in network topology as I mentioned above, but I didn\u2019t explain what it is other than referring to Bob\u2019s page. In short, it targets a desired \u201cwidth\u201d of the DAG by looking recent ancestors to get a measurement.  As with the parent method, time and timestamps are not used. \u201cLatency\u201d can be viewed as the \u201cclock tick rate\u201d.  By choosing a width, \u201cblock time\u201d becomes a fixed multiple or fraction of network latency.</p>\n<p>As with the parent method, an \u201cEMA\u201d adjustment formula is probably the best of all possible methods:</p>\n<pre><code class=\"lang-auto\">D = mean_D_ancestors * (1 - width_measured/N + width_desired/N)\n</code></pre>\n<p>where N is an integer like 100 to smooth out the chances.  mean_D_ancestors is the mean difficulty of the blocks inspected to measure the width.</p>",
  "post_number": 22,
  "post_type": 1,
  "updated_at": "2025-02-27T19:57:52.004Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 1,
  "readers_count": 0,
  "score": 0,
  "yours": false,
  "topic_id": 1331,
  "topic_slug": "fastest-possible-pow-via-simple-dag",
  "topic_title": "Fastest-possible PoW via Simple DAG",
  "topic_html_title": "Fastest-possible PoW via Simple DAG",
  "category_id": 7,
  "display_username": "Zawy",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I was looking back over this thread and wanted to make clear the parent method I was initially excited about loses its usefulness if the \"topology\" (hashrate-weighted latency between peers) of the network changes significantly, and creates an incentive for big miners to have lower latency between each other which would unfairly increase the number blocks they get compared to smaller miners.  I'm thinking strictly in terms of a PoW DAG chain. Braidpool may be able to create incentives to negate the problem.  My grandparents and great-grandparents \"fix\" did not do as well as I had hoped, if that wasn't clear.\n\nIn contrast, the \"Nc/Nb\" method is very resilient to changes in network topology as I mentioned above, but I didn't explain what it is other than referring to Bob's page. In short, it targets a desired \"width\" of the DAG by looking recent ancestors to get a measurement.  As with the parent method, time and timestamps are not used. \"Latency\" can be viewed as the \"clock tick rate\".  By choosing a width, \"block time\" becomes a fixed multiple or fraction of network latency.\n\nAs with the parent method, an \"EMA\" adjustment formula is probably the best of all possible methods:\n```\nD = mean_D_ancestors * (1 - width_measured/N + width_desired/N)\n```\nwhere N is an integer like 100 to smooth out the chances.  mean_D_ancestors is the mean difficulty of the blocks inspected to measure the width.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 502,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}