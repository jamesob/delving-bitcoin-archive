{
  "id": 4157,
  "name": "Adam Gibson",
  "username": "AdamISZ",
  "avatar_template": "/user_avatar/delvingbitcoin.org/adamisz/{size}/418_2.png",
  "created_at": "2025-02-03T16:07:32.323Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"halseth\" data-post=\"13\" data-topic=\"1407\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/halseth/48/198_2.png\" class=\"avatar\"> halseth:</div>\n<blockquote>\n<p>Proof times I am not too worried about, several minutes is not a problem since you are waiting several blocks anyway before announcing it.</p>\n</blockquote>\n</aside>\n<p>I\u2019ve vacillated on this one. While in principle, yes, proofs can be slow, and 100% for sure we can allow them to be far slower than verifies, I\u2019m not convinced that times of 1min + will be viable. Consider that some hardware running LN is a lot weaker, but even if that concern can be sidestepped, there\u2019s something a bit impractical about <em>any</em> CPU intensive operation taking double digit seconds, no matter if it\u2019s non urgent. Still, I do get your argument, as per the docs:</p>\n<blockquote>\n<p>It should be noted that only nodes announcing public channels need to do this, and they usually require a certain level of hardware to be effective routers anyway.</p>\n</blockquote>\n<p>I think it is a bit debatable though. Glad to hear substantial performance improvement is a real possibility as per your optimisation comments.</p>\n<p>On to:</p>\n<blockquote>\n<p>Here we enforce uniqueness by hashing the public keys before they are aggregated to a taproot key:</p>\n</blockquote>\n<pre><code class=\"lang-auto\">pk_hash = hash(bitcoin_keys[0] || bitcoin_keys[1])\n</code></pre>\n<p>This feels a bit flaky. In the docs of the non-MuSig version I see you did hash(x) where x is privkey (for single control utxo), which to me is kind of \u201cthe\u201d way to do it; a key image is, functionally, almost exactly the same as a hash of a private key.</p>\n<p>But hashing public keys is kind of a violation of expectations that could screw up connected protocols; if the pk_hash value can leak whenever those keys are derivable or directly seen. (I\u2019m considering the nuances of BIP32, but who knows how else they could leak - public keys are public!).</p>\n<p>Here\u2019s the part that might be interesting to you (it was to me!): I didn\u2019t even <em>consider</em> the proof-creation-by-channel-parties-together idea. My thinking was (a) taproot + musig2 making channel utxos the same as other utxos and (b) 2-party construction of proof is a nightmare, so just make proofs over <em>other</em> utxos that happen not to be channels. In an ideal world it doesn\u2019t make a difference, but I neglected to consider: <strong>utxos that are not channels are extra liquidity cost</strong> for actual Lightning operators!</p>\n<p>So while that\u2019s not a slam dunk argument for \u201csupporting musig 2-party outputs is required\u201d, it\u2019s a pretty <em>good</em> argument, and if the <em>only</em> thing sacrificed is that slightly flaky version of a key image, it \u2026 may be OK?</p>\n<p>(Edited to add: another reason I forgot to mention, for <em>not</em> using channel utxos, is that updates to one\u2019s sybil-resistance ZKproof would not be correlated with channel opens/closes, and such correlation has the potential to remove the ZK-ness)</p>",
  "post_number": 16,
  "post_type": 1,
  "updated_at": "2025-02-03T21:19:50.001Z",
  "reply_count": 1,
  "reply_to_post_number": 15,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 6.6,
  "yours": false,
  "topic_id": 1407,
  "topic_slug": "zk-gossip-for-lightning-channel-announcements",
  "topic_title": "ZK-gossip for lightning channel announcements",
  "topic_html_title": "ZK-gossip for lightning channel announcements",
  "category_id": 7,
  "display_username": "Adam Gibson",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "halseth",
    "name": "Johan T. Halseth",
    "avatar_template": "/user_avatar/delvingbitcoin.org/halseth/{size}/198_2.png"
  },
  "bookmarked": false,
  "raw": "[quote=\"halseth, post:13, topic:1407\"]\nProof times I am not too worried about, several minutes is not a problem since you are waiting several blocks anyway before announcing it.\n[/quote]\n\nI've vacillated on this one. While in principle, yes, proofs can be slow, and 100% for sure we can allow them to be far slower than verifies, I'm not convinced that times of 1min + will be viable. Consider that some hardware running LN is a lot weaker, but even if that concern can be sidestepped, there's something a bit impractical about *any* CPU intensive operation taking double digit seconds, no matter if it's non urgent. Still, I do get your argument, as per the docs:\n\n> It should be noted that only nodes announcing public channels need to do this, and they usually require a certain level of hardware to be effective routers anyway.\n\nI think it is a bit debatable though. Glad to hear substantial performance improvement is a real possibility as per your optimisation comments.\n\nOn to:\n\n\n> Here we enforce uniqueness by hashing the public keys before they are aggregated to a taproot key:\n\n```\npk_hash = hash(bitcoin_keys[0] || bitcoin_keys[1])\n```\n\nThis feels a bit flaky. In the docs of the non-MuSig version I see you did hash(x) where x is privkey (for single control utxo), which to me is kind of \"the\" way to do it; a key image is, functionally, almost exactly the same as a hash of a private key.\n\nBut hashing public keys is kind of a violation of expectations that could screw up connected protocols; if the pk_hash value can leak whenever those keys are derivable or directly seen. (I'm considering the nuances of BIP32, but who knows how else they could leak - public keys are public!).\n\nHere's the part that might be interesting to you (it was to me!): I didn't even *consider* the proof-creation-by-channel-parties-together idea. My thinking was (a) taproot + musig2 making channel utxos the same as other utxos and (b) 2-party construction of proof is a nightmare, so just make proofs over *other* utxos that happen not to be channels. In an ideal world it doesn't make a difference, but I neglected to consider: **utxos that are not channels are extra liquidity cost** for actual Lightning operators!\n\nSo while that's not a slam dunk argument for \"supporting musig 2-party outputs is required\", it's a pretty *good* argument, and if the *only* thing sacrificed is that slightly flaky version of a key image, it ... may be OK?\n\n(Edited to add: another reason I forgot to mention, for *not* using channel utxos, is that updates to one's sybil-resistance ZKproof would not be correlated with channel opens/closes, and such correlation has the potential to remove the ZK-ness)",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 343,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}