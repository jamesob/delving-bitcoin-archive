{
  "id": 4295,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png",
  "created_at": "2025-02-13T13:20:56.880Z",
  "cooked": "<p>Depending on what you mean by \u201cthis work\u201d:</p>\n<ul>\n<li>The old exponential algorithm (which the first post in this thread is about) is merged in Bitcoin Core\u2019s <a href=\"https://github.com/bitcoin/bitcoin/blob/a5b0a441f85db25ca3d866185fef5d282a2efd72/src/cluster_linearize.h\">master branch</a>, along with various related things (postlinearizing, merging, LIMO, ancestor sort, \u2026). The current work is building a higher abstraction layer around it to manage clusters, and integrating it in the mempool and validation code. See the <a href=\"https://github.com/bitcoin/bitcoin/issues/30289\">tracking issue</a>. This is currently taking most of my time.</li>\n<li>The simplex-derived <a href=\"https://delvingbitcoin.org/t/spanning-forest-cluster-linearization/1419\">spanning forest algorithm</a> that I recently posted about is implemented <a href=\"https://github.com/sipa/bitcoin/commits/spanning_tree_linearization\">here</a>. I am currently no longer working on it, as the min-cut approaches being discussed here are more promising.</li>\n<li>As for min-cut based linearization approaches, my next step is experimenting with a from-scratch implementation of GGT (with FIFO or max-label strategies) as that seems to be the most promising balance between implementation complexity and worst-case asymptotic behavior to me, but I don\u2019t have any code yet.</li>\n</ul>\n<p>I expect that the min-cut work will eventually lead to a better cluster linearization algorithm that can be a drop-in replacement of the currently-merged code, but that\u2019s probably a longer-term thing than getting the existing code actually operational.</p>",
  "post_number": 48,
  "post_type": 1,
  "updated_at": "2025-02-13T13:27:24.852Z",
  "reply_count": 0,
  "reply_to_post_number": 47,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.4,
  "yours": false,
  "topic_id": 303,
  "topic_slug": "how-to-linearize-your-cluster",
  "topic_title": "How to linearize your cluster",
  "topic_html_title": "How to linearize your cluster",
  "category_id": 8,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "Lagrang3",
    "name": "Lagrang3",
    "avatar_template": "/user_avatar/delvingbitcoin.org/lagrang3/{size}/377_2.png"
  },
  "bookmarked": false,
  "raw": "Depending on what you mean by \"this work\":\n* The old exponential algorithm (which the first post in this thread is about) is merged in Bitcoin Core's [master branch](https://github.com/bitcoin/bitcoin/blob/a5b0a441f85db25ca3d866185fef5d282a2efd72/src/cluster_linearize.h), along with various related things (postlinearizing, merging, LIMO, ancestor sort, ...). The current work is building a higher abstraction layer around it to manage clusters, and integrating it in the mempool and validation code. See the [tracking issue](https://github.com/bitcoin/bitcoin/issues/30289). This is currently taking most of my time.\n* The simplex-derived [spanning forest algorithm](https://delvingbitcoin.org/t/spanning-forest-cluster-linearization/1419) that I recently posted about is implemented [here](https://github.com/sipa/bitcoin/commits/spanning_tree_linearization). I am currently no longer working on it, as the min-cut approaches being discussed here are more promising.\n* As for min-cut based linearization approaches, my next step is experimenting with a from-scratch implementation of GGT (with FIFO or max-label strategies) as that seems to be the most promising balance between implementation complexity and worst-case asymptotic behavior to me, but I don't have any code yet.\n\nI expect that the min-cut work will eventually lead to a better cluster linearization algorithm that can be a drop-in replacement of the currently-merged code, but that's probably a longer-term thing than getting the existing code actually operational.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}