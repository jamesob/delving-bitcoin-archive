{
  "id": 4283,
  "name": "Matt Corallo",
  "username": "MattCorallo",
  "avatar_template": "/letter_avatar_proxy/v4/letter/m/e47c2d/{size}.png",
  "created_at": "2025-02-11T18:03:23.763Z",
  "cooked": "<p>I think this is a really bad idea.</p>\n<p>The goal of getting payments down to reliably succeeding on the first try is, of course, critical to lightning being a successful payments platform, anything less than perfect reliability is a failure. However, the reality is pathfinding, today, is not a major barrier to that. Obviously doing pathfinding well takes a pretty nontrivial amount of work (see <a href=\"https://lightningdevkit.org/blog/ldk-pathfinding/\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Pathfinding with LDK | Lightning Dev Kit Documentation</a>) plus probing regularly, but given that work has already happened, payments <em>do</em> go through the first time (if you\u2019re willing to pay the required fee). Some of this, of course, is because of the network being fairly strongly connected, but I\u2019m confident our pathfinding logic will scale to somewhat larger networks (again, given you\u2019re doing background probing, and maybe utilizing trampoline if we get a much larger network).</p>\n<p>There are, of course, many cases where payments today <em>do</em> fail, but the reasons for that are rarely due to fundamental limitations in the pathfinding step - payments often fail if your node either doesn\u2019t regularly probe or doesn\u2019t fetch scoring information from a node that does (something which all nodes really should do by default!). Payments also often fail because nodes simply do not have the available liquidity to make the payment - often  the recipient doesn\u2019t have some JIT channel service (again something that all nodes targeting non-hobbyists really need to be doing by default!) or the sender may not have enough actual capacity (due to dust limits and poor feerate estimators, funds split across multiple channels pre-splicing, reserve values, etc, etc, etc\u2026things that are all slowly being improved, especially with an upcoming channel type based on TRUC).</p>\n<p>On the other end, this proposal has real social costs. Many senders are likely to take the \u201ceasy way out\u201d - instead of fixing their pathfinding logic they\u2019ll just assume its some fundamental issue and only route through \u201cHA Nodes\u201d. Average routing node operators will be caught between a rock and a hard place, then can:</p>\n<ul>\n<li>not signal \u201cHA\u201d, and not get any material routing volume,</li>\n<li>signal \u201cHA\u201d, and find their liquidity occasionally depleted (it happens, even on a well-balanced node sometimes you just don\u2019t have the liquidity), causing them to be marked \u201cbad signalers\u201d and lose their routing volume,</li>\n<li>signal \u201cHA\u201d and try to do JIT rebalancing, having to charge a corresponding fee increase. But of course rebalancing doesn\u2019t always work - usually if you don\u2019t have enough liquidity in one \u201cdirection\u201d someone else might not either, so you\u2019ll still fail some payments (unless you want to charge <em>dramatically</em> more than market rate for relaying), causing you again to lose your routing volume.</li>\n</ul>\n<p>But big custodial operators running big nodes won\u2019t have this issue - they can agree to open 0conf channels with each other, use that for \u201cJIT rebalancing\u201d and signal \u201cHA\u201d. They\u2019ll get all the naive sender routing volume and we\u2019ll end up with ~all \u201cend user\u201d lightning payment volume routing through big AML operators\u2026the opposite of the goal of lightning.</p>\n<p>In general, before we take actions that have substantial social implications for the network, we should seek to ensure that (a) they\u2019re actually necessary, (b) that we\u2019ve thoroughly explored other options to fix the underlying issues. I don\u2019t think that this is currently necessary, and driving it today confuses issues that are not fundamental to lightning routing with issues that are.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2025-02-11T18:03:23.763Z",
  "reply_count": 1,
  "reply_to_post_number": 3,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 11,
  "readers_count": 10,
  "score": 27.2,
  "yours": false,
  "topic_id": 1438,
  "topic_slug": "highly-available-lightning-channels-revisited-route-or-out",
  "topic_title": "Highly Available Lightning Channels Revisited \u2013 ROUTE OR OUT",
  "topic_html_title": "Highly Available Lightning Channels Revisited \u2013 ROUTE OR OUT",
  "category_id": 7,
  "display_username": "Matt Corallo",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "joostjager",
    "name": "Joost",
    "avatar_template": "/letter_avatar_proxy/v4/letter/j/779978/{size}.png"
  },
  "bookmarked": false,
  "raw": "I think this is a really bad idea.\n\nThe goal of getting payments down to reliably succeeding on the first try is, of course, critical to lightning being a successful payments platform, anything less than perfect reliability is a failure. However, the reality is pathfinding, today, is not a major barrier to that. Obviously doing pathfinding well takes a pretty nontrivial amount of work (see https://lightningdevkit.org/blog/ldk-pathfinding/) plus probing regularly, but given that work has already happened, payments *do* go through the first time (if you're willing to pay the required fee). Some of this, of course, is because of the network being fairly strongly connected, but I'm confident our pathfinding logic will scale to somewhat larger networks (again, given you're doing background probing, and maybe utilizing trampoline if we get a much larger network).\n\nThere are, of course, many cases where payments today *do* fail, but the reasons for that are rarely due to fundamental limitations in the pathfinding step - payments often fail if your node either doesn't regularly probe or doesn't fetch scoring information from a node that does (something which all nodes really should do by default!). Payments also often fail because nodes simply do not have the available liquidity to make the payment - often  the recipient doesn't have some JIT channel service (again something that all nodes targeting non-hobbyists really need to be doing by default!) or the sender may not have enough actual capacity (due to dust limits and poor feerate estimators, funds split across multiple channels pre-splicing, reserve values, etc, etc, etc...things that are all slowly being improved, especially with an upcoming channel type based on TRUC).\n\nOn the other end, this proposal has real social costs. Many senders are likely to take the \"easy way out\" - instead of fixing their pathfinding logic they'll just assume its some fundamental issue and only route through \"HA Nodes\". Average routing node operators will be caught between a rock and a hard place, then can:\n * not signal \"HA\", and not get any material routing volume,\n * signal \"HA\", and find their liquidity occasionally depleted (it happens, even on a well-balanced node sometimes you just don't have the liquidity), causing them to be marked \"bad signalers\" and lose their routing volume,\n * signal \"HA\" and try to do JIT rebalancing, having to charge a corresponding fee increase. But of course rebalancing doesn't always work - usually if you don't have enough liquidity in one \"direction\" someone else might not either, so you'll still fail some payments (unless you want to charge *dramatically* more than market rate for relaying), causing you again to lose your routing volume.\n\nBut big custodial operators running big nodes won't have this issue - they can agree to open 0conf channels with each other, use that for \"JIT rebalancing\" and signal \"HA\". They'll get all the naive sender routing volume and we'll end up with ~all \"end user\" lightning payment volume routing through big AML operators...the opposite of the goal of lightning.\n\nIn general, before we take actions that have substantial social implications for the network, we should seek to ensure that (a) they're actually necessary, (b) that we've thoroughly explored other options to fix the underlying issues. I don't think that this is currently necessary, and driving it today confuses issues that are not fundamental to lightning routing with issues that are.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 50,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}