{
  "id": 4239,
  "name": null,
  "username": "Purpletimez",
  "avatar_template": "/letter_avatar_proxy/v4/letter/p/7ab992/{size}.png",
  "created_at": "2025-02-09T20:25:01.941Z",
  "cooked": "<p><em>Re-posting the questions on original delving thread on request + idea on how to price-in worst-case sink attack in the opportunity cost.</em></p>\n<p>Browsed the \u201cHybrid Jamming Mitigation: Results and Updates\u201d, with some interrogations, which are echoing the open questions in this issue.</p>\n<h3><a name=\"p-4239-the-resource-jamming-reputation-jamming-distinction-1\" class=\"anchor\" href=\"#p-4239-the-resource-jamming-reputation-jamming-distinction-1\"></a>The \u201cResource Jamming\u201d / \u201cReputation Jamming\u201d Distinction</h3>\n<p>I got the distinction between ressource jamming, which is the classic loop attack / channel jamming attack characterization where in a simple topology (A \u2194 B \u2194 C \u2194 D and E \u2194 B), a HTLC sender (e.g E) and receiver (e.g D) are holding the resolution to jam an intermediate link (e.g B \u2194 C) to provoke a blocking or stealing of routing fees. And on the other hand, reputation jamming, where the protected resources are rendered unusable by downgrading all the peers\u2019s reputation with the target node.</p>\n<p>I think there can be attacks which are blurring the frontier between \u201cresource jamming\u201d and \u201creputation jamming\u201d. E.g, let\u2019s say you have the topology Alice \u2194 Bob \u2194 Caroll \u2194 Dave, with the additional topology segments { Alice \u2194 Eve \u2194 Caroll ; Fanny \u2194 Alice }.</p>\n<p>Here, the jamming attackers are Dave, Eve and Fanny and they do a slow jamming on the Alice \u2194 Bob link to occupy all the protected_slot_count of this channel link with cheap htlc_minimum_msat HTLCs. Indeed, they will burn all the built reputation for the link, however if Alice is a low reputation peer and she receives a consequential influx of inbound HTLC traffic from honest links to send to Caroll, this traffic will be \u201chijacked\u201d to Eve.</p>\n<p>In the described experiment on slow slot jamming, the attack has paid 1,370,485 msat in off-chain fees and the target has earned 1,875,080 msat in off-chain fees. As far as I can tell, there is no indication if hijacked traffic is included in the slow jamming experiment evaluation.</p>\n<p>Especially, as in lightning off-chain fees are paid proportionally to the routed amount (bolt7 fee_proportional_millionths) so the occupying traffic for the protected_slot_count might be very cheap while the hijacked traffic to the attacker (here Eve) can be very high, more near htlc_maximum_msat. As fact as I can tell, there is no decaying penalty to occupy high-value slots encumbered by at max low return off-chain fees HTLC.</p>\n<p>This would deserve more experiments of course, but I believe a reputation jamming can be leveraged to get a \u201cclassic\u201d jamming attack, so I think the two different approach to jamming attacks should be thought in a composable fashion, rather than dissociatively.</p>\n<h3><a name=\"p-4239-the-laddering-attack-2\" class=\"anchor\" href=\"#p-4239-the-laddering-attack-2\"></a>The Laddering Attack</h3>\n<p>If I\u2019m understanding correctly, the idea with the laddering attack is to pipeline routing nodes to acquire reputation on the targeted link to gain the endorsed flag at a lower cost than direct neighboring with the targeted link.</p>\n<p>This is interesting that the fuzzing experiment didn\u2019t yield a positive attacking result, which is a hint there might some link transitivity already assured by the local resource conservation algorithms.</p>\n<p>From browsing the spreadsheet, if I\u2019m understanding correctly the ladder is only built-in on ascending inter-peer traffic denominated in absolute satoshi denominated revenue (10,000 ; 100,000 ; 400,000 ; 800,000). I think an obvious variation could be to layout channels of varying capacity along the ladder, with some asymmetry e.g A \u2194 B: 0.5 BTC, B \u2194 C: 0.2 BTC, C \u2192 D: 0.7 BTC and C \u2194 D 0.6 BTC, contrary to the assumption that size is a proxy for activity.</p>\n<p>A well-placed routing node in the lightning topology could get highest absolute routing fee revenue for the same period with smaller capacity due to the topological location.</p>\n<p>So let\u2019s assume the same scenario than in the paragraph above, where the attack goal is to hijack honest traffic from the target link to a substitution link owned by the attacker. If you have Fanny \u2194 Alice \u2194 Bob the correct question to ask about laddering is if Fanny \u2194 Alice is 0.2 BTC and Alice \u2194 Bob is 0.5 BTC and Bob \u2194 Caroll is 0.5 BTC the reputation building cost to acquire a 1 sat of protected_slot_liquidity on the Bob \u2194 Caroll link proportional to the channel capacity ?</p>\n<p>Otherwise, I think any differential in the reputation building cost gives an advantage to the attacker in deploying a substitution link on the Alice \u2194 Bob \u2194 Caroll link. I.e now, Eve can put 0.3 BTC to capture slow jammed traffic on the ABC links, stealing routing fees income from Bob.</p>\n<h3><a name=\"p-4239-sink-attack-and-footnote-5-3\" class=\"anchor\" href=\"#p-4239-sink-attack-and-footnote-5-3\"></a>Sink Attack and Footnote 5</h3>\n<p>There is no walkthrough available for the Sink Attack, so it\u2019s hard to get the topology, though if I\u2019m understanding correctly you have a circular topology where Alice \u2194 Bob * 10 \u2194 Caroll \u2194 Alice.</p>\n<p>Alice is the attacker and self-forward HTLC to itself, while holding the resolution to downgrade the reputation on the Bob * 10 \u2194 Caroll links, until Bob * 10 do not send any honest traffic on their links with Caroll. Yes, I think this attack holds, and in fact it\u2019s similar to what is described on the local resource conservation 1071 pull request as a resolution_period drift attack (with more details and explanation on how to make the attack stealth).</p>\n<p>I think too it can be tempting to think again about monetary solutions here, where the fees is scaled on the max hold time (i.e the HTLC-timeout\u2019s nLocktime). Honest peers could get a discount for the fees based on their reputation building cost, after they have proven they\u2019re really honest.</p>\n<h3><a name=\"p-4239-htlc-resolution-in-single-time-referential-4\" class=\"anchor\" href=\"#p-4239-htlc-resolution-in-single-time-referential-4\"></a>HTLC Resolution in Single Time Referential</h3>\n<p>So if I\u2019m understanding correctly the sink attack, the main issue is arising from the fact that the <code>resolution_period</code> to compute a HTLC contribution to a channel reputation is only done on the incoming link and not the outgoing link.</p>\n<p>While still not going more into monetary solutions, I wonder if the \u201ceffective HTLC fees\u201d algorithm could not be modified to encompass in a single time referential the resolution of the HTLC on both the incoming link and the outgoing link.</p>\n<p>There would be still a single <code>resolution_period</code>, however there would be now <code>incoming_resolution_time</code> and <code>outgoing_resolution_time</code> while of course the <code>fees</code> stay the same. The <code>opportunity_cost</code> is correspondingly duplicated in <code>incoming_opportunity_cost</code> and the <code>outgoing_opportunity_cost</code>, so for the outgoing channel the idea is introduced of the best alternative channel that could have been picked up (i.e the second-one with the average fastest HTLC resolution time).</p>\n<p>The <code>outgoing_resolution_time</code> should be deduced from the <code>incoming_resolution_time</code>, to minimize coupling between the incoming and outgoing channels. In Lightning routing, the <code>scid</code> is selected by the payee, not the intermediary nodes.</p>\n<p>If I remember correctly the equations of the local resource conservation framework, the <code>incoming_opportunity_cost</code> is factored in the <code>incoming_channel_revenue</code> and the <code>outgoing_opportunity_cost</code> is factored in the <code>outgoing_channel_revenue</code>.</p>\n<p>Apart of timing issues, I believe it would already reduce some damage of the sink attacks.</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2025-02-09T20:25:01.941Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 6,
  "readers_count": 5,
  "score": 1.2,
  "yours": false,
  "topic_id": 1147,
  "topic_slug": "hybrid-jamming-mitigation-results-and-updates",
  "topic_title": "Hybrid Jamming Mitigation: Results and Updates",
  "topic_html_title": "Hybrid Jamming Mitigation: Results and Updates",
  "category_id": 7,
  "display_username": null,
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "*Re-posting the questions on original delving thread on request + idea on how to price-in worst-case sink attack in the opportunity cost.*\n\nBrowsed the \"Hybrid Jamming Mitigation: Results and Updates\", with some interrogations, which are echoing the open questions in this issue.\n\n### The \"Resource Jamming\" / \"Reputation Jamming\" Distinction\n\nI got the distinction between ressource jamming, which is the classic loop attack / channel jamming attack characterization where in a simple topology (A <-> B <-> C <-> D and E <-> B), a HTLC sender (e.g E) and receiver (e.g D) are holding the resolution to jam an intermediate link (e.g B <-> C) to provoke a blocking or stealing of routing fees. And on the other hand, reputation jamming, where the protected resources are rendered unusable by downgrading all the peers's reputation with the target node.\n\nI think there can be attacks which are blurring the frontier between \"resource jamming\" and \"reputation jamming\". E.g, let's say you have the topology Alice <-> Bob <-> Caroll <-> Dave, with the additional topology segments { Alice <-> Eve <-> Caroll ; Fanny <-> Alice }.\n\nHere, the jamming attackers are Dave, Eve and Fanny and they do a slow jamming on the Alice <-> Bob link to occupy all the protected_slot_count of this channel link with cheap htlc_minimum_msat HTLCs. Indeed, they will burn all the built reputation for the link, however if Alice is a low reputation peer and she receives a consequential influx of inbound HTLC traffic from honest links to send to Caroll, this traffic will be \"hijacked\" to Eve.\n\nIn the described experiment on slow slot jamming, the attack has paid 1,370,485 msat in off-chain fees and the target has earned 1,875,080 msat in off-chain fees. As far as I can tell, there is no indication if hijacked traffic is included in the slow jamming experiment evaluation.\n\nEspecially, as in lightning off-chain fees are paid proportionally to the routed amount (bolt7 fee_proportional_millionths) so the occupying traffic for the protected_slot_count might be very cheap while the hijacked traffic to the attacker (here Eve) can be very high, more near htlc_maximum_msat. As fact as I can tell, there is no decaying penalty to occupy high-value slots encumbered by at max low return off-chain fees HTLC.\n\nThis would deserve more experiments of course, but I believe a reputation jamming can be leveraged to get a \"classic\" jamming attack, so I think the two different approach to jamming attacks should be thought in a composable fashion, rather than dissociatively.\n\n### The Laddering Attack\n\nIf I'm understanding correctly, the idea with the laddering attack is to pipeline routing nodes to acquire reputation on the targeted link to gain the endorsed flag at a lower cost than direct neighboring with the targeted link.\n\nThis is interesting that the fuzzing experiment didn't yield a positive attacking result, which is a hint there might some link transitivity already assured by the local resource conservation algorithms.\n\nFrom browsing the spreadsheet, if I'm understanding correctly the ladder is only built-in on ascending inter-peer traffic denominated in absolute satoshi denominated revenue (10,000 ; 100,000 ; 400,000 ; 800,000). I think an obvious variation could be to layout channels of varying capacity along the ladder, with some asymmetry e.g A <-> B: 0.5 BTC, B <-> C: 0.2 BTC, C -> D: 0.7 BTC and C <-> D 0.6 BTC, contrary to the assumption that size is a proxy for activity.\n\nA well-placed routing node in the lightning topology could get highest absolute routing fee revenue for the same period with smaller capacity due to the topological location.\n\nSo let's assume the same scenario than in the paragraph above, where the attack goal is to hijack honest traffic from the target link to a substitution link owned by the attacker. If you have Fanny <-> Alice <-> Bob the correct question to ask about laddering is if Fanny <-> Alice is 0.2 BTC and Alice <-> Bob is 0.5 BTC and Bob <-> Caroll is 0.5 BTC the reputation building cost to acquire a 1 sat of protected_slot_liquidity on the Bob <-> Caroll link proportional to the channel capacity ?\n\nOtherwise, I think any differential in the reputation building cost gives an advantage to the attacker in deploying a substitution link on the Alice <-> Bob <-> Caroll link. I.e now, Eve can put 0.3 BTC to capture slow jammed traffic on the ABC links, stealing routing fees income from Bob.\n\n### Sink Attack and Footnote 5\n\nThere is no walkthrough available for the Sink Attack, so it's hard to get the topology, though if I'm understanding correctly you have a circular topology where Alice <-> Bob * 10 <-> Caroll <-> Alice.\n\nAlice is the attacker and self-forward HTLC to itself, while holding the resolution to downgrade the reputation on the Bob * 10 <-> Caroll links, until Bob * 10 do not send any honest traffic on their links with Caroll. Yes, I think this attack holds, and in fact it's similar to what is described on the local resource conservation 1071 pull request as a resolution_period drift attack (with more details and explanation on how to make the attack stealth).\n\nI think too it can be tempting to think again about monetary solutions here, where the fees is scaled on the max hold time (i.e the HTLC-timeout's nLocktime). Honest peers could get a discount for the fees based on their reputation building cost, after they have proven they're really honest.\n\n### HTLC Resolution in Single Time Referential\n\nSo if I'm understanding correctly the sink attack, the main issue is arising from the fact that the `resolution_period` to compute a HTLC contribution to a channel reputation is only done on the incoming link and not the outgoing link.\n\nWhile still not going more into monetary solutions, I wonder if the \"effective HTLC fees\" algorithm could not be modified to encompass in a single time referential the resolution of the HTLC on both the incoming link and the outgoing link.\n\nThere would be still a single `resolution_period`, however there would be now `incoming_resolution_time` and `outgoing_resolution_time` while of course the `fees` stay the same. The `opportunity_cost` is correspondingly duplicated in `incoming_opportunity_cost` and the `outgoing_opportunity_cost`, so for the outgoing channel the idea is introduced of the best alternative channel that could have been picked up (i.e the second-one with the average fastest HTLC resolution time).\n\nThe `outgoing_resolution_time` should be deduced from the `incoming_resolution_time`, to minimize coupling between the incoming and outgoing channels. In Lightning routing, the `scid` is selected by the payee, not the intermediary nodes.\n\nIf I remember correctly the equations of the local resource conservation framework, the `incoming_opportunity_cost` is factored in the `incoming_channel_revenue` and the `outgoing_opportunity_cost` is factored in the `outgoing_channel_revenue`.\n\nApart of timing issues, I believe it would already reduce some damage of the sink attacks.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 660,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}