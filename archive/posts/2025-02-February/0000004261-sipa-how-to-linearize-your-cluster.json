{
  "id": 4261,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png",
  "created_at": "2025-02-10T12:42:06.480Z",
  "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"stefanwouldgo\" data-post=\"35\" data-topic=\"303\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/stefanwouldgo/48/664_2.png\" class=\"avatar\"> stefanwouldgo:</div>\n<blockquote>\n<p>The PBST-algorithm avoids this waste and seems even faster in reality (and just as good in the worst case), and it finds all the breakpoints in ascending order (descending \\lambda\u03bb\\lambda for our case), which might be a desirable property.</p>\n</blockquote>\n</aside>\n<p>That does sound at least conceptually simpler.</p>\n<p>You mean PBFS from <a href=\"https://arxiv.org/pdf/2410.15920\">https://arxiv.org/pdf/2410.15920</a>, right? Its complexity bound seems somewhat worse than GGT.</p>\n<p>Summarizing the different algorithms I see, for sparse (<span class=\"math\">m = \\mathcal{O}(n)</span>) and dense (<span class=\"math\">m = \\mathcal{O}(n^2)</span>) graphs. FP is just the idea of solving a new min-cut from scratch for each breakpoint.</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Algorithm</th>\n<th style=\"text-align:left\">Complexity</th>\n<th style=\"text-align:left\">Sparse</th>\n<th style=\"text-align:left\">Dense</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">FP (generic)</td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^3 m)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^4)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^5)</span></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FP (FIFO)</td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^4)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^4)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^4)</span></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FP (max label)</td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^3 \\sqrt{m})</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^{3.5})</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^4)</span></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FP (dynamic trees)</td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^2m \\log(n^2/m))</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^3 \\log n)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^4)</span></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PBFS</td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^2 m)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^3)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^4)</span></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GGT (generic)</td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^2 m)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^3)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^4)</span></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GGT (FIFO)</td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^3)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^3)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^3)</span></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GGT (max label)</td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^2 \\sqrt{m})</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^{2.5})</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^3)</span></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">GGT (dynamic trees)</td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(nm \\log(n^2/m))</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^2 \\log n)</span></td>\n<td style=\"text-align:left\"><span class=\"math\">\\mathcal{O}(n^3)</span></td>\n</tr>\n</tbody>\n</table>\n</div><p>We\u2019ll need to experiment with specialized implementations though, because seeing papers talk about problems with millions of nodes means that what they consider \u201cpractical problems\u201d may be very different than what we have in mind (we\u2019ll probably prefer simpler algorithms over better complexity ones) but also that many data-structure optimizations may not apply in their settings. However, we also care more about worst-case performance than they do, presumably.</p>",
  "post_number": 36,
  "post_type": 1,
  "updated_at": "2025-02-10T13:24:25.492Z",
  "reply_count": 1,
  "reply_to_post_number": 35,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 9,
  "readers_count": 8,
  "score": 6.6,
  "yours": false,
  "topic_id": 303,
  "topic_slug": "how-to-linearize-your-cluster",
  "topic_title": "How to linearize your cluster",
  "topic_html_title": "How to linearize your cluster",
  "category_id": 8,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"stefanwouldgo, post:35, topic:303\"]\nThe PBST-algorithm avoids this waste and seems even faster in reality (and just as good in the worst case), and it finds all the breakpoints in ascending order (descending \\lambda\u03bb\\lambda for our case), which might be a desirable property.\n[/quote]\n\nThat does sound at least conceptually simpler.\n\nYou mean PBFS from https://arxiv.org/pdf/2410.15920, right? Its complexity bound seems somewhat worse than GGT.\n\nSummarizing the different algorithms I see, for sparse ($m = \\mathcal{O}(n)$) and dense ($m = \\mathcal{O}(n^2)$) graphs. FP is just the idea of solving a new min-cut from scratch for each breakpoint.\n\n| Algorithm | Complexity | Sparse | Dense |\n|:--|:--|:--|:--|\n| FP (generic) | $\\mathcal{O}(n^3 m)$ | $\\mathcal{O}(n^4)$ | $\\mathcal{O}(n^5)$ |\n| FP (FIFO) | $\\mathcal{O}(n^4)$ | $\\mathcal{O}(n^4)$ | $\\mathcal{O}(n^4)$ |\n| FP (max label) | $\\mathcal{O}(n^3 \\sqrt{m})$ | $\\mathcal{O}(n^{3.5})$ | $\\mathcal{O}(n^4)$ |\n| FP (dynamic trees) | $\\mathcal{O}(n^2m \\log(n^2/m))$ | $\\mathcal{O}(n^3 \\log n)$ | $\\mathcal{O}(n^4)$ |\n| PBFS | $\\mathcal{O}(n^2 m)$ | $\\mathcal{O}(n^3)$ | $\\mathcal{O}(n^4)$ |\n| GGT (generic) | $\\mathcal{O}(n^2 m)$ | $\\mathcal{O}(n^3)$ | $\\mathcal{O}(n^4)$ |\n| GGT (FIFO) | $\\mathcal{O}(n^3)$ | $\\mathcal{O}(n^3)$ | $\\mathcal{O}(n^3)$ |\n| GGT (max label) | $\\mathcal{O}(n^2 \\sqrt{m})$ | $\\mathcal{O}(n^{2.5})$ | $\\mathcal{O}(n^3)$ |\n| GGT (dynamic trees) | $\\mathcal{O}(nm \\log(n^2/m))$ | $\\mathcal{O}(n^2 \\log n)$ | $\\mathcal{O}(n^3)$ |\n\nWe'll need to experiment with specialized implementations though, because seeing papers talk about problems with millions of nodes means that what they consider \"practical problems\" may be very different than what we have in mind (we'll probably prefer simpler algorithms over better complexity ones) but also that many data-structure optimizations may not apply in their settings. However, we also care more about worst-case performance than they do, presumably.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}