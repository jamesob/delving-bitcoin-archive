{
  "id": 4225,
  "name": "Antoine Riard",
  "username": "ariard",
  "avatar_template": "/letter_avatar_proxy/v4/letter/a/c67d28/{size}.png",
  "created_at": "2025-02-08T04:02:33.432Z",
  "cooked": "<blockquote>\n<p>Note that you aren\u2019t stuck with one format. You could reasonably consider p2a when the anchor is 0-value, and keyed otherwise.</p>\n</blockquote>\n<p>As LN pre-signed transactions are always valid, option A should not allow you to break the tx-relay safety of option B, whatever is picked up for option A and option B.</p>\n<blockquote>\n<p>\"re:miner \u201cstealing\u201d the funds, I\u2019m not sure that\u2019s bad at all? The main new weirdness is counterparty may be tempted to ramp up the trimmed amount and take it themselves, even though in the end miners will probably do well to snipe that entire value.\u201d</p>\n</blockquote>\n<p>Max HTLC cltv_expiry_time is 2016, so a LN node operator is trusting that a miner with 1/2016 is not stealing the funds.</p>\n<blockquote>\n<p>Theft of trimmed HTLC value: options 2, 3, and 4 allow a counterparty to receive trimmed HTLC value if their force close is uncontested while it is in the mempool. Average time in the mempool is easily reduced to 10 minutes by paying a next-block fee, and it may be possible for your counterparty to make good guesses about when your node will be offline for ~10 minutes.\u201d</p>\n</blockquote>\n<p>Mining is an anonymous open set by design, so I think we can never assume that lightning counterparty != miner. So as far as i can understand of the options proposed, \u201ctheft of trimmed HTLC value\u201d is a risk we always have.</p>\n<blockquote>\n<p>\"Good point, we should definitely do something like this! When the anchor output is 0, there\u2019s no value to steal so I think P2A makes a lot of sense since it\u2019s the cheapest way to bump fees. <a class=\"mention\" href=\"/u/ariard\">@ariard</a> I don\u2019t think the issue you\u2019re describing applies in that case, does it?\u201d</p>\n</blockquote>\n<p>No it doesn\u2019t fix it, the jamming attacker can evict a honest parent transaction from the mempool with a RCA, while the CPFP is bringing to-be-captured feerate paying for the surface of said parent.</p>\n<p>To be fair, I don\u2019t think that something that LN can really fixes at this level, apart of avoiding to increase the set of can-be hijacked txn with unkeyed anchors and making the problem worst.</p>\n<p>Package malleability bad.</p>\n<blockquote>\n<p>\"HTLC delays should always be large enough to ensure that reorgs aren\u2019t an issue (e.g. cltv_expiry_delta = 144 blocks) so this shouldn\u2019t put funds at risk?\u201d</p>\n</blockquote>\n<p>No, this is not the cltv delta for a carried HTLC, it\u2019s the on-chain reorg-safety delay (rust-lightning\u2019s <code>ANTI_REORG_DELAY</code>), after which a HTLC is considered irrevocably resolved.</p>\n<blockquote>\n<p>I don\u2019t like safety tradeoffs that optimize for \u201cserious nodes\u201d. I\u2019d prefer a network that\u2019s reasonably safe even for non-experts.</p>\n</blockquote>\n<p>I agree here with Dave - Lightning protocol safety tradeoffs are already circumvoluted enough that even serious nodes configured by experts are not reasonably safe.</p>\n<blockquote>\n<p>In addition, the risk is probabilistic</p>\n</blockquote>\n<p>And even if a node max downtime is 10 min, in bitcoin block issuance is probabilistic, so you might have a spike of blocks in few lapse of time. That is something a counterparty can try to take opportunity off, as your node will have to catchup the downtime (i.e block validation), and unless you over-provision the downtime resumption, that computational overhead won\u2019t be amortize before a longer period of blocks. Not a tx propagation issue only.</p>\n<blockquote>\n<p>Six seconds is probably below propagation time to your node and back to miners if your counterparty is able to initially relay the transaction directly to large miners, meaning a clever attacker doesn\u2019t even need to wait for your node to go offline.</p>\n</blockquote>\n<p>Privacy-enhancing propagation delays are already 2 seconds for outbound links (<code>OUTBOUND_INVENTORY_BROADCAST_INTERVAL</code>).</p>\n<p>\"\"A major benefit of TRUC channels is that nodes don\u2019t have to monitor mempools anymore, since they can rely on their commitment package replacing the counterparty\u2019s once they bump to a high enough fee rate. This simplifies a lot of code and is especially good for mobile.</p>\n<p>No, the benefit to not have to monitor mempools anymore is not coming with TRUC itself per se, which is a mempool-level topological restriction policy only. The benefit of propagating one\u2019s commitment transaction and a CPFP, and getting a guarantee this can replace a current spend of the same UTXO is what normally should be achieved with ancestor package relay, atomicity of the replacement try matters. Actually, this is still good to monitor mempool, and a lightning node can see what should be the most effective feerate for a claim to be included, and not some hardcoded bumps at each X block ticks.</p>\n<blockquote>\n<p>I think we should lean into this simplification and therefore dismiss Options 3 and 4 entirely. Their main benefit is the ability to CPFP the remote commitment, which many/most nodes won\u2019t implement anyway for TRUC channels.</p>\n</blockquote>\n<p>True, with current dual anchors format, last time I checked most lightning implementations, at the exception of Eclair, didn\u2019t CPFP correctly the remote commitment.</p>\n<blockquote>\n<p>Anyone on the network can broadcast a conflicting anchor spend, potentially evicting the commitment package from the mempool (replacement cycling) or forcing the victim to spend more fees than normal (limited RBF rule <span class=\"hashtag-raw\">#3</span> pinning).</p>\n</blockquote>\n<p>If the 0-fee commitment transaction is under mempool min fee, yes it is evicted from network mempools when they\u2019re at their max size.</p>\n<p>To enhance the analysis, there should be a dissociation of a fee griefing (the LN counterparty forces to spend more fees than the average) from HTLC stealing (the LN counterparty \u201cdouble-spend\u201d a routed HTLC).</p>\n<blockquote>\n<p>In the medium-long term, unkeyed anchors are safe from dust theft attacks, since miners will claim the full anchor output as fees, preventing the channel counterparty from ever profiting from such an attack. As a result, the counterparty has no extra motivation to inflate the anchor output with dust HTLCs in the first place, beyond getting the other party to pay for the force close (which exists with current channels already).</p>\n</blockquote>\n<p>This forgets the edge situation where the counterparty is a low-hashrate miner with a direct motivation to inflate the anchor output with dust HTLCs.</p>\n<blockquote>\n<p>Current mitigations against replacement cycling (rebroadcasting and aggressive fee bumping) are enough to make such attacks very expensive for the channel counterparty or anyone else on the network, so I think we shouldn\u2019t be too worried about additional exposure due to unkeyed anchors in that regard.</p>\n</blockquote>\n<p>In the world of today where you can exploit the expiration time of mempools txn to slash the cost of a replacement cycling attack, not really:</p>\n<p><a href=\"https://groups.google.com/g/bitcoindev/c/OWxX-o4FffU\" class=\"onebox\" target=\"_blank\" rel=\"noopener\">https://groups.google.com/g/bitcoindev/c/OWxX-o4FffU</a></p>\n<blockquote>\n<p>We can limit our exposure to such griefing by using keyed anchors. But then to prevent dust HTLC theft we need to add the excess dust HTLCs to commitment fees. And to prevent UTXO bloat in that case we should probably add an anyone-can-spend path to the non-ephemeral anchor with a CSV delay (like with current anchor channels).</p>\n</blockquote>\n<p>I think it\u2019s good idea to do keyed anchors to reduce malleability of the package to the counterparty only, and not the whole world. We can never prevent dust HTLC theft in the edge situation where the counterparty is a miner.</p>\n<blockquote>\n<p>A random person indeed can\u2019t steal funds via this attack, but they can grief the victim. They don\u2019t need to risk much in fees either if they already have a low-priority ~1000vB transaction they want to get mined anyway. In fact we\u2019ve already seen a similar kind of accidental pinning in the wild with expired anchor outputs. Are you sure that no one on the network will ever want to grief in this way?</p>\n</blockquote>\n<p>A LSP fee griefing another LSP\u2019s splice-out transaction cannot be excluded, as there might be a way to capture more off-chain routing fees from doing that.</p>\n<p>A LSP fee griefing another LSP\u2019s splice-out transaction cannot be excluded, as there might be a way to capture more off-chain routing fees from doing that.</p>\n<blockquote>\n<p>the probability of the pinned transaction confirming before the victim fee bumps enough to escape the pin, and</p>\n</blockquote>\n<blockquote>\n<p>the percentage of hash rate controlled by the pool.</p>\n</blockquote>\n<p>And devil is in the details - the pinning transaction can in theory be used to pin multiple channels in parallel to maximize the EV.</p>\n<p>No guarantee that all the victims try to fee-bump at the same time point in the network.</p>\n<blockquote>\n<p>every other miner that wins a block before them sees their tx (at high fee but low feerate) instead of the user\u2019s tx (at low fee but high feerate) and doesn\u2019t mine it, slightly driving down the revenue of other mining pools\npeople routinely overpay channel close txs, driving up average close fees, of which they get the regular percentage\nTheir loss scenario is that the mempool clears out a bit too much and a different pool mines their high fee / low feerate tx, meaning they pay extra fees to another miner, and the user gets their tx mined without paying any fees. I don\u2019t think that adds up to making a nice profit.</p>\n</blockquote>\n<p>In the world of today where you can exploit the expiration time of mempools txn to kickout the low fee but high feerate of a user\u2019s transaction, that\u2019s easy to make profit:</p>\n<p><a href=\"https://groups.google.com/g/bitcoindev/c/OWxX-o4FffU\" class=\"onebox\" target=\"_blank\" rel=\"noopener\">https://groups.google.com/g/bitcoindev/c/OWxX-o4FffU</a></p>\n<p>Though of course coming up with a quantitative analysis of a \u201cnice profit\u201d in real-world mempool flows, that is the question.</p>\n<h2><a name=\"p-4225-gathering-thoughts-1\" class=\"anchor\" href=\"#p-4225-gathering-thoughts-1\"></a>Gathering Thoughts</h2>\n<p>I believe we have 4 distinct risks (at least) to consider for ephemeral anchors:</p>\n<ul>\n<li>a) miner fee griefing: where a miner seeks to optimize its block template average feerate e.g RCA a commitment\u2019s CPFP</li>\n<li>b) counterparty fee griefing: where a counterparty seeks to DoS the package propagation for an external gain</li>\n<li>c) dust theft: miner or counterparty stealing the trimmed HTLC output</li>\n<li>d) counterparty HTLC stealing: where a counterparty seeks to steal a HTLC e.g RCA the 2nd-stage HTLC-timeout</li>\n</ul>\n<p>I think one of the main open question is if we assume that a counterparty can be a miner, even before considering keyed vs unkeyed anchor, and what to do with the trimmed HTLC value.</p>\n<p>E.g for a dust theft as a counterparty inflating the dust value, and as a miner mining this dust value out-of-band.</p>\n<p>If I remember correctly, a HTLC max locktime is 2016 blocks LN-wide, so it\u2019s a bar as low as like a miner with 1/2016 of the hashrate to consider as a potential adversary targeting a LN node (though even a miner with 1/144 of the hashrate, I think it\u2019s a low bar).</p>",
  "post_number": 14,
  "post_type": 1,
  "updated_at": "2025-02-08T04:02:33.432Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 1,
  "readers_count": 0,
  "score": 0.2,
  "yours": false,
  "topic_id": 1412,
  "topic_slug": "which-ephemeral-anchor-script-should-lightning-use",
  "topic_title": "Which ephemeral anchor script should lightning use?",
  "topic_html_title": "Which ephemeral anchor script should lightning use?",
  "category_id": 7,
  "display_username": "Antoine Riard",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "> Note that you aren\u2019t stuck with one format. You could reasonably consider p2a when the anchor is 0-value, and keyed otherwise.\n\nAs LN pre-signed transactions are always valid, option A should not allow you to break the tx-relay safety of option B, whatever is picked up for option A and option B.\n\n> \"re:miner \u201cstealing\u201d the funds, I\u2019m not sure that\u2019s bad at all? The main new weirdness is counterparty may be tempted to ramp up the trimmed amount and take it themselves, even though in the end miners will probably do well to snipe that entire value.\u201d\n\nMax HTLC cltv_expiry_time is 2016, so a LN node operator is trusting that a miner with 1/2016 is not stealing the funds.\n\n> Theft of trimmed HTLC value: options 2, 3, and 4 allow a counterparty to receive trimmed HTLC value if their force close is uncontested while it is in the mempool. Average time in the mempool is easily reduced to 10 minutes by paying a next-block fee, and it may be possible for your counterparty to make good guesses about when your node will be offline for ~10 minutes.\u201d\n\nMining is an anonymous open set by design, so I think we can never assume that lightning counterparty != miner. So as far as i can understand of the options proposed, \"theft of trimmed HTLC value\" is a risk we always have.\n\n> \"Good point, we should definitely do something like this! When the anchor output is 0, there\u2019s no value to steal so I think P2A makes a lot of sense since it\u2019s the cheapest way to bump fees. @ariard I don\u2019t think the issue you\u2019re describing applies in that case, does it?\u201d\n\nNo it doesn't fix it, the jamming attacker can evict a honest parent transaction from the mempool with a RCA, while the CPFP is bringing to-be-captured feerate paying for the surface of said parent.\n\nTo be fair, I don't think that something that LN can really fixes at this level, apart of avoiding to increase the set of can-be hijacked txn with unkeyed anchors and making the problem worst.\n\nPackage malleability bad.\n\n> \"HTLC delays should always be large enough to ensure that reorgs aren\u2019t an issue (e.g. cltv_expiry_delta = 144 blocks) so this shouldn\u2019t put funds at risk?\u201d\n\nNo, this is not the cltv delta for a carried HTLC, it's the on-chain reorg-safety delay (rust-lightning\u2019s `ANTI_REORG_DELAY`), after which a HTLC is considered irrevocably resolved.\n\n> I don\u2019t like safety tradeoffs that optimize for \u201cserious nodes\u201d. I\u2019d prefer a network that\u2019s reasonably safe even for non-experts.\n\nI agree here with Dave - Lightning protocol safety tradeoffs are already circumvoluted enough that even serious nodes configured by experts are not reasonably safe.\n\n> In addition, the risk is probabilistic\n\nAnd even if a node max downtime is 10 min, in bitcoin block issuance is probabilistic, so you might have a spike of blocks in few lapse of time. That is something a counterparty can try to take opportunity off, as your node will have to catchup the downtime (i.e block validation), and unless you over-provision the downtime resumption, that computational overhead won't be amortize before a longer period of blocks. Not a tx propagation issue only.\n\n> Six seconds is probably below propagation time to your node and back to miners if your counterparty is able to initially relay the transaction directly to large miners, meaning a clever attacker doesn\u2019t even need to wait for your node to go offline.\n\nPrivacy-enhancing propagation delays are already 2 seconds for outbound links (`OUTBOUND_INVENTORY_BROADCAST_INTERVAL`).\n\n\"\"A major benefit of TRUC channels is that nodes don\u2019t have to monitor mempools anymore, since they can rely on their commitment package replacing the counterparty\u2019s once they bump to a high enough fee rate. This simplifies a lot of code and is especially good for mobile.\n\nNo, the benefit to not have to monitor mempools anymore is not coming with TRUC itself per se, which is a mempool-level topological restriction policy only. The benefit of propagating one's commitment transaction and a CPFP, and getting a guarantee this can replace a current spend of the same UTXO is what normally should be achieved with ancestor package relay, atomicity of the replacement try matters. Actually, this is still good to monitor mempool, and a lightning node can see what should be the most effective feerate for a claim to be included, and not some hardcoded bumps at each X block ticks.\n\n> I think we should lean into this simplification and therefore dismiss Options 3 and 4 entirely. Their main benefit is the ability to CPFP the remote commitment, which many/most nodes won\u2019t implement anyway for TRUC channels.\n\nTrue, with current dual anchors format, last time I checked most lightning implementations, at the exception of Eclair, didn't CPFP correctly the remote commitment.\n\n> Anyone on the network can broadcast a conflicting anchor spend, potentially evicting the commitment package from the mempool (replacement cycling) or forcing the victim to spend more fees than normal (limited RBF rule #3 pinning).\n\nIf the 0-fee commitment transaction is under mempool min fee, yes it is evicted from network mempools when they're at their max size.\n\nTo enhance the analysis, there should be a dissociation of a fee griefing (the LN counterparty forces to spend more fees than the average) from HTLC stealing (the LN counterparty \"double-spend\" a routed HTLC).\n\n> In the medium-long term, unkeyed anchors are safe from dust theft attacks, since miners will claim the full anchor output as fees, preventing the channel counterparty from ever profiting from such an attack. As a result, the counterparty has no extra motivation to inflate the anchor output with dust HTLCs in the first place, beyond getting the other party to pay for the force close (which exists with current channels already).\n\nThis forgets the edge situation where the counterparty is a low-hashrate miner with a direct motivation to inflate the anchor output with dust HTLCs.\n\n> Current mitigations against replacement cycling (rebroadcasting and aggressive fee bumping) are enough to make such attacks very expensive for the channel counterparty or anyone else on the network, so I think we shouldn\u2019t be too worried about additional exposure due to unkeyed anchors in that regard.\n\nIn the world of today where you can exploit the expiration time of mempools txn to slash the cost of a replacement cycling attack, not really:\n\nhttps://groups.google.com/g/bitcoindev/c/OWxX-o4FffU\n\n> We can limit our exposure to such griefing by using keyed anchors. But then to prevent dust HTLC theft we need to add the excess dust HTLCs to commitment fees. And to prevent UTXO bloat in that case we should probably add an anyone-can-spend path to the non-ephemeral anchor with a CSV delay (like with current anchor channels).\n\nI think it's good idea to do keyed anchors to reduce malleability of the package to the counterparty only, and not the whole world. We can never prevent dust HTLC theft in the edge situation where the counterparty is a miner.\n\n> A random person indeed can\u2019t steal funds via this attack, but they can grief the victim. They don\u2019t need to risk much in fees either if they already have a low-priority ~1000vB transaction they want to get mined anyway. In fact we\u2019ve already seen a similar kind of accidental pinning in the wild with expired anchor outputs. Are you sure that no one on the network will ever want to grief in this way?\n\nA LSP fee griefing another LSP's splice-out transaction cannot be excluded, as there might be a way to capture more off-chain routing fees from doing that.\n\nA LSP fee griefing another LSP's splice-out transaction cannot be excluded, as there might be a way to capture more off-chain routing fees from doing that.\n\n> the probability of the pinned transaction confirming before the victim fee bumps enough to escape the pin, and\n\n> the percentage of hash rate controlled by the pool.\n\nAnd devil is in the details - the pinning transaction can in theory be used to pin multiple channels in parallel to maximize the EV.\n\nNo guarantee that all the victims try to fee-bump at the same time point in the network.\n\n> every other miner that wins a block before them sees their tx (at high fee but low feerate) instead of the user\u2019s tx (at low fee but high feerate) and doesn\u2019t mine it, slightly driving down the revenue of other mining pools\n> people routinely overpay channel close txs, driving up average close fees, of which they get the regular percentage\n> Their loss scenario is that the mempool clears out a bit too much and a different pool mines their high fee / low feerate tx, meaning they pay extra fees to another miner, and the user gets their tx mined without paying any fees. I don\u2019t think that adds up to making a nice profit.\n\nIn the world of today where you can exploit the expiration time of mempools txn to kickout the low fee but high feerate of a user's transaction, that's easy to make profit:\n\nhttps://groups.google.com/g/bitcoindev/c/OWxX-o4FffU\n\nThough of course coming up with a quantitative analysis of a \"nice profit\" in real-world mempool flows, that is the question.\n\n## Gathering Thoughts\n\nI believe we have 4 distinct risks (at least) to consider for ephemeral anchors:\n- a) miner fee griefing: where a miner seeks to optimize its block template average feerate e.g RCA a commitment's CPFP\n- b) counterparty fee griefing: where a counterparty seeks to DoS the package propagation for an external gain\n- c) dust theft: miner or counterparty stealing the trimmed HTLC output\n- d) counterparty HTLC stealing: where a counterparty seeks to steal a HTLC e.g RCA the 2nd-stage HTLC-timeout\n\nI think one of the main open question is if we assume that a counterparty can be a miner, even before considering keyed vs unkeyed anchor, and what to do with the trimmed HTLC value.\n\nE.g for a dust theft as a counterparty inflating the dust value, and as a miner mining this dust value out-of-band.\n\nIf I remember correctly, a HTLC max locktime is 2016 blocks LN-wide, so it\u2019s a bar as low as like a miner with 1/2016 of the hashrate to consider as a potential adversary targeting a LN node (though even a miner with 1/144 of the hashrate, I think it\u2019s a low bar).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 5,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}