{
  "id": 4371,
  "name": "Johan T. Halseth",
  "username": "halseth",
  "avatar_template": "/user_avatar/delvingbitcoin.org/halseth/{size}/198_2.png",
  "created_at": "2025-02-25T07:58:20.234Z",
  "cooked": "<p>The way the ZK-proof was created in the original post here, is very non-intrusive and simple to apply to existing LN implementations. You simply take the gossip message, and do the verification of it in zero-knowledge, hiding all the inputs that would leak your privacy (namely the <code>bitcoin_key</code> fields).</p>\n<p>However, this requires to to the full Musig2 key aggregation and signature verification in the ZK environment, which can be expensive and slow. On my machine proving time was about 80 seconds.</p>\n<p>To speed this up, I created a variant of this that does less work in ZK, by blinding the channel output key with a tweak before funding it. The tradeoff is that the LN implementation must be aware of this tweak.</p>\n<p>It works by the channel counterparties creating a Musig2 aggregate key <code>P</code> as before, but then agreeing on a secret blinding value <code>r</code>, and <code>beta = hash(r || P)</code>. The output key will then be <code>P_out = P + beta * G</code> (optionally this key can then be given a taptweak if needed).</p>\n<p>Now channel operation can work as before, but the parties must tweak the key with <code>beta</code> before signing.</p>\n<p>When creating the gossip message, everything will be done as before, and the verifier will validate the channel announcement according to the gossip 1.75 proposal. The only difference is that the output tapkey is not found on-chain (since it has been tweaked) and hence we must attach a ZK proof to prove that the tweaked version is actually in the UTXO set.</p>\n<p>An implementation of this approach is here: <a href=\"https://github.com/halseth/output-zero/tree/blinded-tap-key\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - halseth/output-zero at blinded-tap-key</a></p>\n<p>This reduces proving time to 16-22 sec on my laptop since we are left with only 2 EC multiplications (see above pprof flamegraph).</p>",
  "post_number": 30,
  "post_type": 1,
  "updated_at": "2025-02-25T07:58:20.234Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 0.6,
  "yours": false,
  "topic_id": 1407,
  "topic_slug": "zk-gossip-for-lightning-channel-announcements",
  "topic_title": "ZK-gossip for lightning channel announcements",
  "topic_html_title": "ZK-gossip for lightning channel announcements",
  "category_id": 7,
  "display_username": "Johan T. Halseth",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "The way the ZK-proof was created in the original post here, is very non-intrusive and simple to apply to existing LN implementations. You simply take the gossip message, and do the verification of it in zero-knowledge, hiding all the inputs that would leak your privacy (namely the `bitcoin_key` fields).\n\nHowever, this requires to to the full Musig2 key aggregation and signature verification in the ZK environment, which can be expensive and slow. On my machine proving time was about 80 seconds.\n\nTo speed this up, I created a variant of this that does less work in ZK, by blinding the channel output key with a tweak before funding it. The tradeoff is that the LN implementation must be aware of this tweak.\n\nIt works by the channel counterparties creating a Musig2 aggregate key `P` as before, but then agreeing on a secret blinding value `r`, and `beta = hash(r || P)`. The output key will then be `P_out = P + beta * G` (optionally this key can then be given a taptweak if needed).\n\nNow channel operation can work as before, but the parties must tweak the key with `beta` before signing.\n\nWhen creating the gossip message, everything will be done as before, and the verifier will validate the channel announcement according to the gossip 1.75 proposal. The only difference is that the output tapkey is not found on-chain (since it has been tweaked) and hence we must attach a ZK proof to prove that the tweaked version is actually in the UTXO set.\n\nAn implementation of this approach is here: https://github.com/halseth/output-zero/tree/blinded-tap-key\n\nThis reduces proving time to 16-22 sec on my laptop since we are left with only 2 EC multiplications (see above pprof flamegraph).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 163,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}