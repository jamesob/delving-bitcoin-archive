{
  "id": 4179,
  "name": "Davidson",
  "username": "Davidson",
  "avatar_template": "/letter_avatar_proxy/v4/letter/d/9d8465/{size}.png",
  "created_at": "2025-02-05T00:35:23.038Z",
  "cooked": "<p>Hi <a class=\"mention\" href=\"/u/halseth\">@halseth</a> thanks for the impressive work you\u2019ve been putting on this zk prover.</p>\n<p>One major advantage I can think of using this approach, is that it works out-of-the-box with extremely lightweight nodes like <a href=\"https://github.com/vinteumorg/Floresta\" rel=\"noopener nofollow ugc\">floresta</a> and <a href=\"https://github.com/utreexo/utreexod\" rel=\"noopener nofollow ugc\">utreexod</a>, since the utreexo state is all context you need to verify the proof. This would be beneficial for resource-constrained lightning nodes, as they may not have full access to the UTXO set.</p>\n<p>Just out of curiosity: have you benchmarked this using an algebraic hash function? <code>rustreexo</code> now (since October last year to be precise) lets you choose your custom hash function, and algebraic hashes are waaaayyy lighter when running inside a prover. I wonder how much proving time is due to utreexo proofs.</p>\n<p>I see you\u2019re using my bridge node for proof generation, it supports Poseidon 2 as hash function and puts everything in a nice json format intended for provers (this was developed for the folks at starkware for their bitcoin zk prover), just need to toggle the <code>shinigami</code> feature (it won\u2019t build the API tho).</p>",
  "post_number": 21,
  "post_type": 1,
  "updated_at": "2025-02-05T00:35:23.038Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 15,
  "readers_count": 14,
  "score": 23.0,
  "yours": false,
  "topic_id": 1407,
  "topic_slug": "zk-gossip-for-lightning-channel-announcements",
  "topic_title": "ZK-gossip for lightning channel announcements",
  "topic_html_title": "ZK-gossip for lightning channel announcements",
  "category_id": 7,
  "display_username": "Davidson",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Hi @halseth thanks for the impressive work you've been putting on this zk prover.\n\nOne major advantage I can think of using this approach, is that it works out-of-the-box with extremely lightweight nodes like [floresta](https://github.com/vinteumorg/Floresta) and [utreexod](https://github.com/utreexo/utreexod), since the utreexo state is all context you need to verify the proof. This would be beneficial for resource-constrained lightning nodes, as they may not have full access to the UTXO set.\n\nJust out of curiosity: have you benchmarked this using an algebraic hash function? `rustreexo` now (since October last year to be precise) lets you choose your custom hash function, and algebraic hashes are waaaayyy lighter when running inside a prover. I wonder how much proving time is due to utreexo proofs. \n\nI see you're using my bridge node for proof generation, it supports Poseidon 2 as hash function and puts everything in a nice json format intended for provers (this was developed for the folks at starkware for their bitcoin zk prover), just need to toggle the `shinigami` feature (it won't build the API tho).",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 74,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}