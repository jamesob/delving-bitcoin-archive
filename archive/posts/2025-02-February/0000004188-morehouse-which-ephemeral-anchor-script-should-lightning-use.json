{
  "id": 4188,
  "name": "Matt Morehouse",
  "username": "morehouse",
  "avatar_template": "/letter_avatar_proxy/v4/letter/m/df705f/{size}.png",
  "created_at": "2025-02-05T22:13:12.442Z",
  "cooked": "<p>A major benefit of TRUC channels is that nodes don\u2019t have to monitor mempools anymore, since they can rely on their commitment package replacing the counterparty\u2019s once they bump to a high enough fee rate.  This simplifies a lot of code and is especially good for mobile.</p>\n<p>I think we should lean into this simplification and therefore dismiss Options 3 and 4 entirely.  Their main benefit is the ability to CPFP the remote commitment, which many/most nodes won\u2019t implement anyway for TRUC channels.</p>\n<p>In deciding between the remaining options, there\u2019s at least 2 issues to consider:</p>\n<ul>\n<li><a href=\"https://petertodd.org/2023/v3-txs-pinning-vulnerability\" rel=\"noopener nofollow ugc\">fee griefing</a></li>\n<li>dust theft</li>\n</ul>\n<hr>\n<p><strong>Tl;dr:</strong> We can avoid dust theft and fee griefing as follows:</p>\n<ul>\n<li>Do Option 2 with the same anchor script we already use.</li>\n<li>Make <a class=\"mention\" href=\"/u/instagibbs\">@instagibbs</a> <a href=\"https://delvingbitcoin.org/t/which-ephemeral-anchor-script-should-lightning-use/1412/2\">suggested changes</a> to dust HTLC handling.</li>\n</ul>\n<hr>\n<h2><a name=\"p-4188-option-1-unkeyed-anchor-1\" class=\"anchor\" href=\"#p-4188-option-1-unkeyed-anchor-1\"></a>Option 1: unkeyed anchor</h2>\n<h4><a name=\"p-4188-fee-griefing-2\" class=\"anchor\" href=\"#p-4188-fee-griefing-2\"></a>Fee griefing</h4>\n<p>Anyone on the network can broadcast a conflicting anchor spend, potentially evicting the commitment package from the mempool (replacement cycling) or forcing the victim to spend more fees than normal (limited RBF rule <span class=\"hashtag-raw\">#3</span> pinning).</p>\n<h4><a name=\"p-4188-dust-theft-3\" class=\"anchor\" href=\"#p-4188-dust-theft-3\"></a>Dust theft</h4>\n<p>In the medium-long term, unkeyed anchors are safe from dust theft attacks, since miners will claim the full anchor output as fees, preventing the channel counterparty from ever profiting from such an attack.  As a result, the counterparty has no extra motivation to inflate the anchor output with dust HTLCs in the first place, beyond getting the other party to pay for the force close (which exists with current channels already).</p>\n<h2><a name=\"p-4188-option-2-single-participant-keyed-anchor-4\" class=\"anchor\" href=\"#p-4188-option-2-single-participant-keyed-anchor-4\"></a>Option 2: single-participant keyed anchor</h2>\n<h4><a name=\"p-4188-fee-griefing-5\" class=\"anchor\" href=\"#p-4188-fee-griefing-5\"></a>Fee griefing</h4>\n<p>The channel counterparty can do fee griefing and replacement cycling, but no one else can.</p>\n<h4><a name=\"p-4188-dust-theft-6\" class=\"anchor\" href=\"#p-4188-dust-theft-6\"></a>Dust theft</h4>\n<p>The counterparty can steal dust HTLCs, as <a class=\"mention\" href=\"/u/t-bast\">@t-bast</a> described.</p>\n<h2><a name=\"p-4188-alternative-option-single-participant-keyed-anchor-without-anchor-value-inflation-7\" class=\"anchor\" href=\"#p-4188-alternative-option-single-participant-keyed-anchor-without-anchor-value-inflation-7\"></a>Alternative option: single-participant keyed anchor without anchor value inflation</h2>\n<p>This is Option 2, along with <a class=\"mention\" href=\"/u/instagibbs\">@instagibbs</a> idea:</p>\n<ul>\n<li>Dust HTLCs increase the value of the keyed anchor up to the dust limit.</li>\n<li>Once the anchor reaches the dust limit, further dust HTLCs increase the commitment fees.</li>\n</ul>\n<h4><a name=\"p-4188-fee-griefing-8\" class=\"anchor\" href=\"#p-4188-fee-griefing-8\"></a>Fee griefing</h4>\n<p>The channel counterparty can do fee griefing and replacement cycling, but no one else can.</p>\n<h4><a name=\"p-4188-dust-theft-9\" class=\"anchor\" href=\"#p-4188-dust-theft-9\"></a>Dust theft</h4>\n<p>The channel counterparty cannot steal dust HTLCs, since the excess always goes to miners as commitment fees.</p>\n<h2><a name=\"p-4188-thoughts-10\" class=\"anchor\" href=\"#p-4188-thoughts-10\"></a>Thoughts</h2>\n<p>Current mitigations against replacement cycling (rebroadcasting and aggressive fee bumping) are enough to make such attacks very expensive for the channel counterparty or anyone else on the network, so I think we shouldn\u2019t be too worried about additional exposure due to unkeyed anchors in that regard.</p>\n<p>However, unkeyed anchors <em>do</em> make it possible for anyone to grief lightning force closes they see in the mempool, forcing each victim to spend up to ~50% more in fees (see Peter Todd\u2019s math <a href=\"https://petertodd.org/2023/v3-txs-pinning-vulnerability\" rel=\"noopener nofollow ugc\">here</a>).</p>\n<p>We can limit our exposure to such griefing by using keyed anchors.  But then to prevent dust HTLC theft we need to add the excess dust HTLCs to commitment fees.  And to prevent UTXO bloat in that case we should probably add an anyone-can-spend path to the non-ephemeral anchor with a CSV delay (like with current anchor channels).</p>\n<p>So most of the time we could use a simple P2TR anchor script and the anchor would be considered ephemeral dust, so it would need to be spent immediately.  But once the anchor output accumulates a value of 330 sats, we\u2019d need to switch to the same P2WSH anchor script we currently have for anchor channels:</p>\n<pre><code class=\"lang-auto\">&lt;local_funding_pubkey&gt; OP_CHECKSIG OP_IFDUP\nOP_NOTIF\n    OP_16 OP_CHECKSEQUENCEVERIFY\nOP_ENDIF\n</code></pre>\n<p>Or, for simplicity, we could just always use the current anchor script and address the slight P2TR optimization later when we do taproot TRUC channels.</p>",
  "post_number": 8,
  "post_type": 1,
  "updated_at": "2025-02-05T22:13:12.442Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 4,
  "readers_count": 3,
  "score": 5.8,
  "yours": false,
  "topic_id": 1412,
  "topic_slug": "which-ephemeral-anchor-script-should-lightning-use",
  "topic_title": "Which ephemeral anchor script should lightning use?",
  "topic_html_title": "Which ephemeral anchor script should lightning use?",
  "category_id": 7,
  "display_username": "Matt Morehouse",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "A major benefit of TRUC channels is that nodes don't have to monitor mempools anymore, since they can rely on their commitment package replacing the counterparty's once they bump to a high enough fee rate.  This simplifies a lot of code and is especially good for mobile.\n\nI think we should lean into this simplification and therefore dismiss Options 3 and 4 entirely.  Their main benefit is the ability to CPFP the remote commitment, which many/most nodes won't implement anyway for TRUC channels.\n\nIn deciding between the remaining options, there's at least 2 issues to consider:\n\n- [fee griefing](https://petertodd.org/2023/v3-txs-pinning-vulnerability)\n- dust theft\n-----------------------\n\n**Tl;dr:** We can avoid dust theft and fee griefing as follows:\n- Do Option 2 with the same anchor script we already use.\n- Make @instagibbs [suggested changes](https://delvingbitcoin.org/t/which-ephemeral-anchor-script-should-lightning-use/1412/2?u=morehouse) to dust HTLC handling.\n\n--------------------------\n\n## Option 1: unkeyed anchor\n\n#### Fee griefing\n\nAnyone on the network can broadcast a conflicting anchor spend, potentially evicting the commitment package from the mempool (replacement cycling) or forcing the victim to spend more fees than normal (limited RBF rule #3 pinning).\n\n#### Dust theft\n\nIn the medium-long term, unkeyed anchors are safe from dust theft attacks, since miners will claim the full anchor output as fees, preventing the channel counterparty from ever profiting from such an attack.  As a result, the counterparty has no extra motivation to inflate the anchor output with dust HTLCs in the first place, beyond getting the other party to pay for the force close (which exists with current channels already).\n\n## Option 2: single-participant keyed anchor\n\n#### Fee griefing\n\nThe channel counterparty can do fee griefing and replacement cycling, but no one else can.\n\n#### Dust theft\n\nThe counterparty can steal dust HTLCs, as @t-bast described.\n\n## Alternative option: single-participant keyed anchor without anchor value inflation\n\nThis is Option 2, along with @instagibbs idea:\n\n- Dust HTLCs increase the value of the keyed anchor up to the dust limit.\n- Once the anchor reaches the dust limit, further dust HTLCs increase the commitment fees.\n\n#### Fee griefing\n\nThe channel counterparty can do fee griefing and replacement cycling, but no one else can.\n\n#### Dust theft\n\nThe channel counterparty cannot steal dust HTLCs, since the excess always goes to miners as commitment fees.\n\n## Thoughts\n\nCurrent mitigations against replacement cycling (rebroadcasting and aggressive fee bumping) are enough to make such attacks very expensive for the channel counterparty or anyone else on the network, so I think we shouldn't be too worried about additional exposure due to unkeyed anchors in that regard.\n\nHowever, unkeyed anchors *do* make it possible for anyone to grief lightning force closes they see in the mempool, forcing each victim to spend up to ~50% more in fees (see Peter Todd's math [here](https://petertodd.org/2023/v3-txs-pinning-vulnerability)).\n\nWe can limit our exposure to such griefing by using keyed anchors.  But then to prevent dust HTLC theft we need to add the excess dust HTLCs to commitment fees.  And to prevent UTXO bloat in that case we should probably add an anyone-can-spend path to the non-ephemeral anchor with a CSV delay (like with current anchor channels).\n\nSo most of the time we could use a simple P2TR anchor script and the anchor would be considered ephemeral dust, so it would need to be spent immediately.  But once the anchor output accumulates a value of 330 sats, we'd need to switch to the same P2WSH anchor script we currently have for anchor channels:\n\n```\n<local_funding_pubkey> OP_CHECKSIG OP_IFDUP\nOP_NOTIF\n    OP_16 OP_CHECKSEQUENCEVERIFY\nOP_ENDIF\n```\n\nOr, for simplicity, we could just always use the current anchor script and address the slight P2TR optimization later when we do taproot TRUC channels.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 47,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}