{
  "id": 4104,
  "name": "",
  "username": "roasbeef",
  "avatar_template": "/user_avatar/delvingbitcoin.org/roasbeef/{size}/160_2.png",
  "created_at": "2025-01-28T23:44:14.837Z",
  "cooked": "<blockquote>\n<p>How does this interact with lightning channel closures?</p>\n</blockquote>\n<p>IIUC, in this model, as nodes don\u2019t know which outpoint to watch, they won\u2019t be able to detect channel closures. Instead, they\u2019ll just drop <em>all</em> channels every N weeks. This is a more agressive version of the graph pruning that nodes do today (dropping channels that you haven\u2019t received a channel update for in 2 weeks). As a result, nodes will now need to continually rebroadcast the announcement data for active channels periodically (today they only rebroadcast channel updates, which contain routing policy information).</p>\n<p>To my knowledge, some Lightning implementations today already implement such behavior: they won\u2019t watch for closes at all on-chain, and just drop channels after a period of time. When/if they encounter a channel that has been permanently closed on chain, they can use a unique error (non-temp) to penalize the channel to the point that the path finding model never uses it, or to just remove it all together. Proactive probing can help to discover such channels, enabling early pruning of the graph (vs at payment attempt time).</p>\n<p>As far as what\u2019s revealed on open, as formulated the scheme still has the channel capacity in plain text, with the verifier using that as public input to verify that the committed output has a value that matches the channel capacity. This leaks a bit of information as a verifier can scan on-chain using the utreexo checkpoint height as a starting point (new channel can only be created after the checkpoint). It\u2019s possible to omit the capacity field all together (or just allow it to float all together based on some multiple as suggested in earlier Gossip 2.0 proposals). Omitting it likely has some path finding implications (read: UX) as many path finding implementations input the capacity of a channel into a model to determine the conditional success probability of a payment given the capacity and past observations.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2025-01-28T23:44:14.837Z",
  "reply_count": 1,
  "reply_to_post_number": 2,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 17,
  "readers_count": 16,
  "score": 13.4,
  "yours": false,
  "topic_id": 1407,
  "topic_slug": "zk-gossip-for-lightning-channel-announcements",
  "topic_title": "ZK-gossip for lightning channel announcements",
  "topic_html_title": "ZK-gossip for lightning channel announcements",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "sanket1729",
    "name": "Sanket Kanjalkar",
    "avatar_template": "/user_avatar/delvingbitcoin.org/sanket1729/{size}/13_2.png"
  },
  "bookmarked": false,
  "raw": "> How does this interact with lightning channel closures?\n\nIIUC, in this model, as nodes don't know which outpoint to watch, they won't be able to detect channel closures. Instead, they'll just drop _all_ channels every N weeks. This is a more agressive version of the graph pruning that nodes do today (dropping channels that you haven't received a channel update for in 2 weeks). As a result, nodes will now need to continually rebroadcast the announcement data for active channels periodically (today they only rebroadcast channel updates, which contain routing policy information). \n\nTo my knowledge, some Lightning implementations today already implement such behavior: they won't watch for closes at all on-chain, and just drop channels after a period of time. When/if they encounter a channel that has been permanently closed on chain, they can use a unique error (non-temp) to penalize the channel to the point that the path finding model never uses it, or to just remove it all together. Proactive probing can help to discover such channels, enabling early pruning of the graph (vs at payment attempt time). \n\nAs far as what's revealed on open, as formulated the scheme still has the channel capacity in plain text, with the verifier using that as public input to verify that the committed output has a value that matches the channel capacity. This leaks a bit of information as a verifier can scan on-chain using the utreexo checkpoint height as a starting point (new channel can only be created after the checkpoint). It's possible to omit the capacity field all together (or just allow it to float all together based on some multiple as suggested in earlier Gossip 2.0 proposals). Omitting it likely has some path finding implications (read: UX) as many path finding implementations input the capacity of a channel into a model to determine the conditional success probability of a payment given the capacity and past observations.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 143,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}