{
  "id": 4037,
  "name": "",
  "username": "conduition",
  "avatar_template": "/user_avatar/delvingbitcoin.org/conduition/{size}/384_2.png",
  "created_at": "2025-01-11T22:13:01.683Z",
  "cooked": "<p>Thank you! I think some newer and better approaches than DASK have been proposed since i wrote this article and which would allow us to more easily implement these changes as a soft fork without any new address formats needed. Check out <a class=\"mention\" href=\"/u/mattcorallo\">@MattCorallo</a>\u2019s post <a href=\"https://groups.google.com/g/bitcoindev/c/8O857bRSVV8\" rel=\"noopener nofollow ugc\">on the mailing list here</a>.</p>\n<p>Matt\u2019s soft-fork proposal is to disable key-spending on P2TR addresses, and define one of the <code>OP_SUCCESS</code> opcodes reserved by BIP342 to validate a post-quantum signature scheme in a taproot script-path spend branch.</p>\n<p>This implies some additional fun twists, such as the fact that one must now carefully hide this <code>OP_SUCCESS</code> script branch until activation day, otherwise it could be spent by literally anybody. But in principle it seems much more achievable to me than DASK, so i\u2019m wholeheartedly in favor. If we were going to write a BIP, i think Matt\u2019s idea would be the way to go. All power to you for writing that draft BIP but I think we should try to reuse P2TR if we can, so that we can get the space saving benefits of taproot for as long as possible.</p>\n<p>He suggests using SPHINCS right off the bat for this, but i think a WOTS certification layer would be way better for future-proofing. Surely SPHINCS isn\u2019t the best we will ever have. We could also use WOTS or FORS to directly sign a transaction instead, which would be even more efficient but less flexible/safe. So there\u2019s still some kinks to iron out.</p>\n<p>The action steps i can see would be:</p>\n<ul>\n<li>Find consensus on a flavor of hash-based signatures (i\u2019m partial to Compact WOTS+C personally)</li>\n<li>Determine whether to use it as a certification layer or to sign transactions directly</li>\n<li>Create a reference implementation of the signature scheme (specifically key-generation)</li>\n<li>Define the ground rules for how validation of the new opcode should work (following past BIPs as examples should help). New rules, such as the specific signature scheme to certify with WOTS, can be added later, since we\u2019re not planning to activate this upgrade for a long time.</li>\n<li>Write it all down in a BIP and start collecting feedback</li>\n</ul>\n<p>A separate client-side BIP could be written to define deterministic key-gen of the HBS keypair, safe and future-proof taptree structure, etc.</p>\n<p>I\u2019m unfortunately tied up helping a full-time client at the moment and can\u2019t spare the time to pursue these things myself, but I\u2019d be happy to review if this is something you\u2019re interested in.</p>",
  "post_number": 5,
  "post_type": 1,
  "updated_at": "2025-01-11T22:13:01.683Z",
  "reply_count": 0,
  "reply_to_post_number": 4,
  "quote_count": 0,
  "incoming_link_count": 5,
  "reads": 17,
  "readers_count": 16,
  "score": 23.4,
  "yours": false,
  "topic_id": 956,
  "topic_slug": "proposing-a-p2qrh-bip-towards-a-quantum-resistant-soft-fork",
  "topic_title": "Proposing a P2QRH BIP towards a quantum resistant soft fork",
  "topic_html_title": "Proposing a P2QRH BIP towards a quantum resistant soft fork",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "reply_to_user": {
    "username": "cryptoquick",
    "name": "Hunter Beast",
    "avatar_template": "/user_avatar/delvingbitcoin.org/cryptoquick/{size}/977_2.png"
  },
  "bookmarked": false,
  "raw": "Thank you! I think some newer and better approaches than DASK have been proposed since i wrote this article and which would allow us to more easily implement these changes as a soft fork without any new address formats needed. Check out @MattCorallo's post [on the mailing list here](https://groups.google.com/g/bitcoindev/c/8O857bRSVV8).\n\nMatt's soft-fork proposal is to disable key-spending on P2TR addresses, and define one of the `OP_SUCCESS` opcodes reserved by BIP342 to validate a post-quantum signature scheme in a taproot script-path spend branch.\n\nThis implies some additional fun twists, such as the fact that one must now carefully hide this `OP_SUCCESS` script branch until activation day, otherwise it could be spent by literally anybody. But in principle it seems much more achievable to me than DASK, so i'm wholeheartedly in favor. If we were going to write a BIP, i think Matt's idea would be the way to go. All power to you for writing that draft BIP but I think we should try to reuse P2TR if we can, so that we can get the space saving benefits of taproot for as long as possible.\n\nHe suggests using SPHINCS right off the bat for this, but i think a WOTS certification layer would be way better for future-proofing. Surely SPHINCS isn't the best we will ever have. We could also use WOTS or FORS to directly sign a transaction instead, which would be even more efficient but less flexible/safe. So there's still some kinks to iron out. \n\nThe action steps i can see would be:\n- Find consensus on a flavor of hash-based signatures (i'm partial to Compact WOTS+C personally)\n- Determine whether to use it as a certification layer or to sign transactions directly\n- Create a reference implementation of the signature scheme (specifically key-generation)\n- Define the ground rules for how validation of the new opcode should work (following past BIPs as examples should help). New rules, such as the specific signature scheme to certify with WOTS, can be added later, since we're not planning to activate this upgrade for a long time.\n- Write it all down in a BIP and start collecting feedback\n\n\n\nA separate client-side BIP could be written to define deterministic key-gen of the HBS keypair, safe and future-proof taptree structure, etc.\n\nI'm unfortunately tied up helping a full-time client at the moment and can't spare the time to pursue these things myself, but I'd be happy to review if this is something you're interested in.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 129,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}