{
  "id": 3943,
  "name": "Sjors Provoost",
  "username": "sjors",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sjors/{size}/59_2.png",
  "created_at": "2025-01-03T15:25:34.285Z",
  "cooked": "<p>As an aside, fully validating a DAG chain is quite difficult with the current Bitcoin Core architecture. The benefit of fully validating weak blocks is that it lets you safely distribute rewards weighted by fees, using a scheme similar to <a href=\"https://delvingbitcoin.org/t/pplns-with-job-declaration/1099/\" class=\"inline-onebox\">PPLNS with job declaration</a></p>\n<p>It has to update its UTXO set database at every block. If there\u2019s multiple branches it would need to keep a cache around for each branch. And it needs to store each cache on disk on shutdown. It would also need to track multiple copies of the mempool, at least if it wants to process new blocks as quickly as possible.</p>\n<p>Interestingly a <a href=\"https://bitcoinops.org/en/topics/utreexo/\">Utreexo</a> based node won\u2019t have this problem. Its UTXO set is a tiny 1kb Merkle forest. The node can store a copy along with every block so there\u2019s almost no overhead for tracking multiple branches.</p>\n<p>Multiple mempool branches might still be problematic though, not for storage but because it\u2019s computationally expensive to update. Though perhaps with cluster mempool that\u2019s not a problem either.</p>\n<p>I would imagine that Libbitcoin can also handle a DAG structure more easily because of its different architecture, see e.g. <a href=\"https://delvingbitcoin.org/t/libbitcoin-for-core-people/1222\" class=\"inline-onebox\">Libbitcoin for Core people</a></p>",
  "post_number": 13,
  "post_type": 1,
  "updated_at": "2025-01-03T15:27:10.650Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 9,
  "readers_count": 8,
  "score": 6.8,
  "yours": false,
  "topic_id": 1331,
  "topic_slug": "fastest-possible-pow-via-simple-dag",
  "topic_title": "Fastest-possible PoW via Simple DAG",
  "topic_html_title": "Fastest-possible PoW via Simple DAG",
  "category_id": 7,
  "display_username": "Sjors Provoost",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "As an aside, fully validating a DAG chain is quite difficult with the current Bitcoin Core architecture. The benefit of fully validating weak blocks is that it lets you safely distribute rewards weighted by fees, using a scheme similar to https://delvingbitcoin.org/t/pplns-with-job-declaration/1099/\n\nIt has to update its UTXO set database at every block. If there's multiple branches it would need to keep a cache around for each branch. And it needs to store each cache on disk on shutdown. It would also need to track multiple copies of the mempool, at least if it wants to process new blocks as quickly as possible.\n\nInterestingly a [Utreexo](https://bitcoinops.org/en/topics/utreexo/) based node won't have this problem. Its UTXO set is a tiny 1kb Merkle forest. The node can store a copy along with every block so there's almost no overhead for tracking multiple branches.\n\nMultiple mempool branches might still be problematic though, not for storage but because it's computationally expensive to update. Though perhaps with cluster mempool that's not a problem either.\n\nI would imagine that Libbitcoin can also handle a DAG structure more easily because of its different architecture, see e.g. https://delvingbitcoin.org/t/libbitcoin-for-core-people/1222",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 71,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}