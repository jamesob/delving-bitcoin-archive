{
  "id": 3947,
  "name": "Bob McElrath",
  "username": "mcelrath",
  "avatar_template": "/user_avatar/delvingbitcoin.org/mcelrath/{size}/521_2.png",
  "created_at": "2025-01-03T17:05:07.824Z",
  "cooked": "<p>Thanks for the input <a class=\"mention\" href=\"/u/sjors\">@sjors</a> \u2013 I\u2019m aware of these issues and am planning to use deterministic block templates, as <a href=\"https://github.com/braidpool/braidpool/discussions/69\" rel=\"noopener nofollow ugc\">described here</a>.</p>\n<p>Each bead (share-chain block) will be able to add bitcoin transactions to a \u201ccommitted mempool\u201d. From there we will use a deterministic algorithm to select from this committed mempool (e.g. \u201chighest fees\u201d or \u201clexical ordering on txid\u201d). This way we don\u2019t need to propagate transaction or block template data in shares, as it can be computed independently by all nodes. We don\u2019t have to actually update the UTXO set though, since most shares are not bitcoin blocks.</p>\n<p>Yes this means each bead has its own mempool, though most transactions will be shared among them. So we need to be able to do a fast diff/merge between the mempools of different beads.</p>\n<p>We\u2019re going to have to deeply investigate the cluster mempool and thanks for the UTreeXO pointer, I\u2019ll take a look. Contributions welcome <img src=\"https://delvingbitcoin.org/images/emoji/twitter/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>If we have to write our own UTXO management code instead of calling bitcoind\u2026then that\u2019s just what we\u2019re going to have to do. I\u2019m a big fan of libbitcoin\u2019s approach and will emulate it as much as possible.</p>",
  "post_number": 14,
  "post_type": 1,
  "posts_count": 21,
  "updated_at": "2025-01-03T17:05:07.824Z",
  "reply_count": 0,
  "reply_to_post_number": 13,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 26,
  "readers_count": 25,
  "score": 10.2,
  "yours": false,
  "topic_id": 1331,
  "topic_slug": "fastest-possible-pow-via-simple-dag",
  "topic_title": "Fastest-possible PoW via Simple DAG",
  "topic_html_title": "Fastest-possible PoW via Simple DAG",
  "category_id": 7,
  "display_username": "Bob McElrath",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 71,
    "username": "sjors",
    "name": "Sjors Provoost",
    "avatar_template": "/user_avatar/delvingbitcoin.org/sjors/{size}/59_2.png"
  },
  "bookmarked": false,
  "raw": "Thanks for the input @sjors -- I'm aware of these issues and am planning to use deterministic block templates, as [described here](https://github.com/braidpool/braidpool/discussions/69).\n\nEach bead (share-chain block) will be able to add bitcoin transactions to a \"committed mempool\". From there we will use a deterministic algorithm to select from this committed mempool (e.g. \"highest fees\" or \"lexical ordering on txid\"). This way we don't need to propagate transaction or block template data in shares, as it can be computed independently by all nodes. We don't have to actually update the UTXO set though, since most shares are not bitcoin blocks.\n\nYes this means each bead has its own mempool, though most transactions will be shared among them. So we need to be able to do a fast diff/merge between the mempools of different beads.\n\nWe're going to have to deeply investigate the cluster mempool and thanks for the UTreeXO pointer, I'll take a look. Contributions welcome ;-)\n\nIf we have to write our own UTXO management code instead of calling bitcoind...then that's just what we're going to have to do. I'm a big fan of libbitcoin's approach and will emulate it as much as possible.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 406,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Thanks for the input <a class=\"mention\" href=\"/u/sjors\">@sjors</a> \u2013 I\u2019m aware of these issues and am planning to use deterministic block templates, as <a href=\"https://github.com/braidpool/braidpool/discussions/69\" rel=\"noopener nofollow ugc\">described here</a>. \nEach bead (share-chain block) will be able to add bitcoin transactions to a \u201ccommitted mempool\u201d. From there we will use a deterministic algorithm to select from this comm&hellip;",
  "truncated": true,
  "post_url": "/t/fastest-possible-pow-via-simple-dag/1331/14",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}