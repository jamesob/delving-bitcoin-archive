{
  "id": 3998,
  "name": "Christian Decker",
  "username": "cdecker",
  "avatar_template": "/user_avatar/delvingbitcoin.org/cdecker/{size}/99_2.png",
  "created_at": "2025-01-07T09:18:59.566Z",
  "cooked": "<p>I might be missing the point here, but how can an attacker delay the finalization of the channel? For any update the attacker may drop we have a response that is not encumbered by a timelock or CSV, thus all the transactions can end up in a single block. I always thought of it as this: attacker publishes an old update, the victim takes its latest update, creates two versions: a) bound to the funding and b) bound to the update the attacker broadcast.</p>\n<p>We have several outcomes:</p>\n<ol>\n<li>the attacker succeeds in confirming its old update, in which case we have already submitted the response, and it might have been confirmed along with the first, i.e., the attacker just lost some funds, but did not succeed in claiming or delaying anything, since our own transactions were just as valid before as after the attacker published them.</li>\n</ol>\n<ol start=\"2\">\n<li>Our latest update is confirmed, the attacker doesn\u2019t lose anything, but he also doesn\u2019t gain anything.</li>\n</ol>\n<p>This game can be iterated (unless the attacker can fill the block on its own he doesn\u2019t have an advantage) and we just create and broadcast a matching response to anything the attacker does.</p>\n<p>A variant of this that I could see is if a miner and the attacker collude to attack silently, not giving the victim time to response, forcing them into the next block, but unless the attacker has a majority and the timeouts are chosen correctly, the attacker cannot censor indefinitely. It\u2019s also worth noting that in this case no system using timelocks or CSV can be safe anyway.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2025-01-07T09:18:59.566Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 7.2,
  "yours": false,
  "topic_id": 1364,
  "topic_slug": "broken-multi-party-eltoo-with-bounded-settlement",
  "topic_title": "[BROKEN] Multi-Party Eltoo with bounded settlement",
  "topic_html_title": "[BROKEN] Multi-Party Eltoo with bounded settlement",
  "category_id": 7,
  "display_username": "Christian Decker",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I might be missing the point here, but how can an attacker delay the finalization of the channel? For any update the attacker may drop we have a response that is not encumbered by a timelock or CSV, thus all the transactions can end up in a single block. I always thought of it as this: attacker publishes an old update, the victim takes its latest update, creates two versions: a) bound to the funding and b) bound to the update the attacker broadcast.\n\nWe have several outcomes:\n\n 1) the attacker succeeds in confirming its old update, in which case we have already submitted the response, and it might have been confirmed along with the first, i.e., the attacker just lost some funds, but did not succeed in claiming or delaying anything, since our own transactions were just as valid before as after the attacker published them.\n 2. Our latest update is confirmed, the attacker doesn't lose anything, but he also doesn't gain anything.\n\nThis game can be iterated (unless the attacker can fill the block on its own he doesn't have an advantage) and we just create and broadcast a matching response to anything the attacker does.\n\nA variant of this that I could see is if a miner and the attacker collude to attack silently, not giving the victim time to response, forcing them into the next block, but unless the attacker has a majority and the timeouts are chosen correctly, the attacker cannot censor indefinitely. It's also worth noting that in this case no system using timelocks or CSV can be safe anyway.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 103,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}