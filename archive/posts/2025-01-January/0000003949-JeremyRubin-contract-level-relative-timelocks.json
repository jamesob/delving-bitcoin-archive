{
  "id": 3949,
  "name": "Jeremy Rubin",
  "username": "JeremyRubin",
  "avatar_template": "/user_avatar/delvingbitcoin.org/jeremyrubin/{size}/264_2.png",
  "created_at": "2025-01-03T17:32:57.946Z",
  "cooked": "<p>MUON has an interesting interplay here\u2026 <a href=\"https://x.com/JeremyRubin/status/1782220444185116883\" class=\"inline-onebox\">x.com</a></p>\n<p><em>Note that you still end up needing some sort of recursive proof inside R here. But MUON does the job of ensuring that no Tx Update can be broadcast without the right R being created for it, and makes Tx Update non-malleable.</em></p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/1X/499025c5007133cbc1e131035da640fa52a5b9fc.jpeg\" data-download-href=\"https://delvingbitcoin.org/uploads/default/499025c5007133cbc1e131035da640fa52a5b9fc\" title=\"20250103_115444\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/1X/499025c5007133cbc1e131035da640fa52a5b9fc_2_481x500.jpeg\" alt=\"20250103_115444\" data-base62-sha1=\"auLGMqnpFyQgW9kZLNUfygy2Ygs\" width=\"481\" height=\"500\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/1X/499025c5007133cbc1e131035da640fa52a5b9fc_2_481x500.jpeg, https://delvingbitcoin.org/uploads/default/optimized/1X/499025c5007133cbc1e131035da640fa52a5b9fc_2_721x750.jpeg 1.5x, https://delvingbitcoin.org/uploads/default/optimized/1X/499025c5007133cbc1e131035da640fa52a5b9fc_2_962x1000.jpeg 2x\" data-dominant-color=\"E4E4E4\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">20250103_115444</span><span class=\"informations\">1532\u00d71590 165 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Describing the above graph:</p>\n<p>Tx Open:</p>\n<ul>\n<li>Inputs: \u2026</li>\n<li>Outputs: V_O \u2190 N Sats</li>\n</ul>\n<p>V_O.program \u2190 tr(musig(A, B), {CTVHASH(kickoff) CTV})</p>\n<p>Tx Kickoff:</p>\n<ul>\n<li>Inputs: V_O</li>\n<li>Outputs:\n<ul>\n<li>R[0] \u2190 0 sats / dust</li>\n<li>V_K \u2190 N Sats</li>\n</ul>\n</li>\n</ul>\n<p>V_K.program = tr(musig(A, B), {})</p>\n<p>Updates are setup as follows:</p>\n<p>Tx Update[i]:</p>\n<ul>\n<li>Sequence: 2 weeks</li>\n<li>Inputs V_K</li>\n<li>Outputs\n<ul>\n<li>MUON X_i \u2190 0 Sats</li>\n<li>Alice \u2190 k*N</li>\n<li>Bob \u2190 (1-k) *N</li>\n</ul>\n</li>\n</ul>\n<p>Tx Ratchet i:</p>\n<ul>\n<li>nLockTime i</li>\n<li>Input R[i]</li>\n<li>Output\n<ul>\n<li>R[i+1]</li>\n</ul>\n</li>\n</ul>\n<p>R[i]'s program:</p>\n<p>tr(NUMS_H, {\nratchet,\ncospend\n})</p>\n<p>ratchet: &lt;CTVHASH(Ratchet TX i+1)&gt; CTV &lt;musig(a,b)&gt; CSFS [i] CLTV</p>\n<p>cospend: 1 GETINPUT &lt;COutpoint(MUON X_i)&gt; EQUALVERIFY &lt;CTVHash(Tx Exit)&gt; CTV</p>\n<p>Tx Exit:</p>\n<ul>\n<li>nSequence: 1 day (min time between last update?)</li>\n<li>Inputs: R[i] (via cospend path), MUON X_i</li>\n<li>Outputs: OP_RETURN Update[i].details_to_reconstruct</li>\n</ul>\n<p>muon X_i.program: tr(NUMS_H, {&lt;CTVHash(Tx Exit)&gt; CTV 0 GETINPUT  &lt;R[i]&gt; EQUALVERIFY })</p>\n<hr>\n<p>How signing works:</p>\n<p>First you open the protocol to create V_O.</p>\n<p>Then you create the updates off of V_K (go ahead and sign \u2013 MUON X means a spend must exit).</p>\n<p>You then create the ratchet update off of R, and exchange the sigs.</p>\n<p><em>Note that you still end up needing some sort of recursive proof inside R here. But MUON does the job of ensuring that no Tx Update can be broadcast without the right R being created for it, and makes Tx Update non-malleable.</em></p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2025-01-03T17:32:57.946Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 12,
  "readers_count": 11,
  "score": 2.4,
  "yours": false,
  "topic_id": 1353,
  "topic_slug": "contract-level-relative-timelocks",
  "topic_title": "Contract-level Relative Timelocks",
  "topic_html_title": "Contract-level Relative Timelocks",
  "category_id": 7,
  "display_username": "Jeremy Rubin",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "MUON has an interesting interplay here... https://x.com/JeremyRubin/status/1782220444185116883\n\n_Note that you still end up needing some sort of recursive proof inside R here. But MUON does the job of ensuring that no Tx Update can be broadcast without the right R being created for it, and makes Tx Update non-malleable._\n\n\n![20250103_115444|481x500](upload://auLGMqnpFyQgW9kZLNUfygy2Ygs.jpeg)\n\n\nDescribing the above graph:\n\n\nTx Open:\n- Inputs: ...\n- Outputs: V_O <- N Sats\n\nV_O.program <- tr(musig(A, B), {CTVHASH(kickoff) CTV})\n\nTx Kickoff:\n- Inputs: V_O\n- Outputs:\n  - R[0] <- 0 sats / dust\n  - V_K <- N Sats\n\nV_K.program = tr(musig(A, B), {})\n\nUpdates are setup as follows:\n\nTx Update[i]:\n- Sequence: 2 weeks\n- Inputs V_K\n- Outputs\n    - MUON X_i <- 0 Sats\n    - Alice <- k*N\n    - Bob <- (1-k) *N\n\n\n\nTx Ratchet i:\n - nLockTime i\n - Input R[i]\n - Output\n   - R[i+1]\n\nR[i]'s program:\n\ntr(NUMS_H, {\nratchet,\ncospend\n})\n\nratchet: <CTVHASH(Ratchet TX i+1)> CTV <musig(a,b)> CSFS [i] CLTV\n\ncospend: 1 GETINPUT <COutpoint(MUON X_i)> EQUALVERIFY <CTVHash(Tx Exit)> CTV\n\n\nTx Exit:\n  - nSequence: 1 day (min time between last update?)\n  - Inputs: R[i] (via cospend path), MUON X_i\n  - Outputs: OP_RETURN Update[i].details_to_reconstruct\n\nmuon X_i.program: tr(NUMS_H, {<CTVHash(Tx Exit)> CTV 0 GETINPUT  <R[i]> EQUALVERIFY })\n\n\n\n\n\n\n------------\n\n\nHow signing works:\n\n\nFirst you open the protocol to create V_O.\n\nThen you create the updates off of V_K (go ahead and sign -- MUON X means a spend must exit).\n\nYou then create the ratchet update off of R, and exchange the sigs.\n\n\n_Note that you still end up needing some sort of recursive proof inside R here. But MUON does the job of ensuring that no Tx Update can be broadcast without the right R being created for it, and makes Tx Update non-malleable._",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 224,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}