{
  "id": 3951,
  "name": "David A. Harding",
  "username": "harding",
  "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/925_2.png",
  "created_at": "2025-01-03T21:22:38.354Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"8\" data-topic=\"1333\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>Isn\u2019t \u201ccovenant-less Ark\u201d <a href=\"https://ark-protocol.org/intro/clark/index.html\">[0]</a> <a href=\"https://arkdev.info/blog/ark-release-v0.2#covenant-less-ark\">[1]</a> an example of this approach?</p>\n</blockquote>\n</aside>\n<p>Nifty!  It certainly meets most of my definition.  I like the idea of a pseudo-covenant that only requires a single successful interaction to create and is secure if you find a single honest third-party.  clArk is efficient about that because it already has a bunch of third parties in a multisignature who are ready to sign, but it doesn\u2019t add much cost to generalize it:</p>\n<ol>\n<li>Lots of people run signing oracles.  For example, a setting which allows every relaying full node to be a signer.</li>\n<li>Alice wants to pay a precommitted transaction tree paying Bob and Carol, like would be possible with CTV.  She asks Bob and Carol for a list of oracles and asks each oracle for an ephemeral pubkey (for which each oracle attests ownership).</li>\n<li>Alice aggregates the pubkeys and creates (but does not sign) a transaction paying that aggregate pubkey in a P2TR output.  She gives the PSBT to the oracles.</li>\n<li>The oracles create a 1-input, 1-output keypath spend from that PSBT that pays to the transaction tree and gives all the presigned transactions to Alice.</li>\n<li>Alice signs, broadcasts, and gets confirmed her PSBT and gives the presigned transactions to Bob and Carol along with the attestations.  As long as at least one oracle signed honestly and destroyed their ephemeral privkeys, the pseudo-covenant is secure.</li>\n</ol>\n<p>I think the overhead compared to base CTV is 111 vbytes for the 1-in-1-out transaction plus 18 vbytes (a witness-data signature plus overhead) for each precommitted transaction.  Obviously it doesn\u2019t give you the cheap optionality of CTV in tapleaves, but it seems like an adequate solution for many CTV use cases like congestion control, channel factories, and coin pools.</p>",
  "post_number": 9,
  "post_type": 1,
  "posts_count": 11,
  "updated_at": "2025-01-03T21:22:38.354Z",
  "reply_count": 0,
  "reply_to_post_number": 8,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 22,
  "readers_count": 21,
  "score": 4.4,
  "yours": false,
  "topic_id": 1333,
  "topic_slug": "transitory-soft-forks-for-consensus-cleanup-forks",
  "topic_title": "Transitory Soft Forks for Consensus Cleanup Forks",
  "topic_html_title": "Transitory Soft Forks for Consensus Cleanup Forks",
  "category_id": 7,
  "display_username": "David A. Harding",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"ajtowns, post:8, topic:1333\"]\nIsn\u2019t \u201ccovenant-less Ark\u201d [[0]](https://ark-protocol.org/intro/clark/index.html) [[1]](https://arkdev.info/blog/ark-release-v0.2#covenant-less-ark) an example of this approach?\n[/quote]\n\nNifty!  It certainly meets most of my definition.  I like the idea of a pseudo-covenant that only requires a single successful interaction to create and is secure if you find a single honest third-party.  clArk is efficient about that because it already has a bunch of third parties in a multisignature who are ready to sign, but it doesn't add much cost to generalize it:\n\n1. Lots of people run signing oracles.  For example, a setting which allows every relaying full node to be a signer.\n2. Alice wants to pay a precommitted transaction tree paying Bob and Carol, like would be possible with CTV.  She asks Bob and Carol for a list of oracles and asks each oracle for an ephemeral pubkey (for which each oracle attests ownership).\n3. Alice aggregates the pubkeys and creates (but does not sign) a transaction paying that aggregate pubkey in a P2TR output.  She gives the PSBT to the oracles.\n4. The oracles create a 1-input, 1-output keypath spend from that PSBT that pays to the transaction tree and gives all the presigned transactions to Alice.  \n5. Alice signs, broadcasts, and gets confirmed her PSBT and gives the presigned transactions to Bob and Carol along with the attestations.  As long as at least one oracle signed honestly and destroyed their ephemeral privkeys, the pseudo-covenant is secure.\n\nI think the overhead compared to base CTV is 111 vbytes for the 1-in-1-out transaction plus 18 vbytes (a witness-data signature plus overhead) for each precommitted transaction.  Obviously it doesn't give you the cheap optionality of CTV in tapleaves, but it seems like an adequate solution for many CTV use cases like congestion control, channel factories, and coin pools.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 6,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Nifty!  It certainly meets most of my definition.  I like the idea of a pseudo-covenant that only requires a single successful interaction to create and is secure if you find a single honest third-party.  clArk is efficient about that because it already has a bunch of third parties in a multisignat&hellip;",
  "truncated": true,
  "post_url": "/t/transitory-soft-forks-for-consensus-cleanup-forks/1333/9",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}