{
  "id": 3942,
  "name": "Bob McElrath",
  "username": "mcelrath",
  "avatar_template": "/user_avatar/delvingbitcoin.org/mcelrath/{size}/521_2.png",
  "created_at": "2025-01-03T13:52:30.984Z",
  "cooked": "<p>I\u2019m fairly skeptical of using graph structure alone and the DAA here to handle high latency. High latency is already observed and accounted for using the Nc/Nb method (because high latency generates large cohorts). I don\u2019t want to create incentives for miners to do anything other than naming all known tips. So, I think we need to pull in another timing measurement to decide whether beads have abnormally high latency or not. Remember that just due to the statistics of the Poisson distribution, large cohorts and excessive grandparents will naturally be generated some calculable fraction of the time, and doesn\u2019t represent a problem for the system or evidence of an attack. Adjusting the difficulty due to these infrequent large naturally-occurring cohorts biases the difficulty algorithm relative to the naive Nb/Nc=2.42 algorithm.</p>\n<p>Let me elaborate on my alternative here where instead of adjusting the difficulty, we will decide to not pay high-latency beads.</p>\n<p>First, assume that Braidpool commits to a millisecond resolution timestamp in its committed metadata that we will use. Second, consider the following diagram of a high-latency bead:</p>\n<pre><code class=\"lang-auto\">       /-------o---------\\\n  o-o-o                   o-o-o\n       \\o-o-o-o-o-o-o-o-o/\n</code></pre>\n<p>Where the bead on the top has high latency and the chain of beads on the bottom is the \u201chighest work path\u201d through the DAG. This is the most common example of what a high latency bead will do the DAG. In its absence you\u2019d just have the chain on the bottom. The lower chain will in general have higher order structures and e.g. Nb/Nc=2.42 if we ignore the high latency bead. This example does not have excessive grandparents.</p>\n<p>A good measure of latency of any bead is:</p>\n<pre><code class=\"lang-auto\">bead_latency = median({t_c}) - median({t_p})\n</code></pre>\n<p>where <code>{t_c}</code> is the set of the timestamps of children, and <code>{t_p}</code> is the set of timestamps of parents of that bead. This measure has the advantage that it is not influenced by the miner\u2019s own timestamp, only by timestamps reported by other miners, so is very difficult to game. A miner also doesn\u2019t know what his own latency will be until children of his bead appear, so it\u2019s in his best interest to broadcast his bead as quickly as possible, to collect those children.</p>\n<p>We want to pay everyone \u201cclose\u201d to the main highest-work path and not pay the high-latency bead here. We also don\u2019t want the presence of the high-latency bead to affect <em>other</em> miner\u2019s rewards, as this constitutes an attack vector. Therefore the simplest thing to do is have a hard cutoff on <code>bead_latency</code>, probably around 5s, above which the bead won\u2019t receive a reward. We can allow cohorts to be as large as necessary to include all known beads without orphans/stale beads, so as to get an accurate measure of global latency, even if an extended network split occurs, and without biasing for rare but naturally-occurring largeish cohorts.</p>\n<p>This means:</p>\n<ol>\n<li>The DAA is using <code>a</code> as its (only) timing measure through Nb/Nc</li>\n<li>Payment decisions are using <em>other</em> miners timestamps</li>\n</ol>\n<p><a class=\"mention\" href=\"/u/zawy\">@zawy</a> has been killing it with his simulations over the holidays, but I\u2019ll present some similar simulations soon now that the holidays are over <img src=\"https://delvingbitcoin.org/images/emoji/twitter/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>P.S. if you want to discuss this in real time, join our <a href=\"https://discord.gg/pZYUDwkpPv\" rel=\"noopener nofollow ugc\">Braidpool Discord</a></p>",
  "post_number": 12,
  "post_type": 1,
  "updated_at": "2025-01-03T13:52:30.984Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 17.0,
  "yours": false,
  "topic_id": 1331,
  "topic_slug": "fastest-possible-pow-via-simple-dag",
  "topic_title": "Fastest-possible PoW via Simple DAG",
  "topic_html_title": "Fastest-possible PoW via Simple DAG",
  "category_id": 7,
  "display_username": "Bob McElrath",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I'm fairly skeptical of using graph structure alone and the DAA here to handle high latency. High latency is already observed and accounted for using the Nc/Nb method (because high latency generates large cohorts). I don't want to create incentives for miners to do anything other than naming all known tips. So, I think we need to pull in another timing measurement to decide whether beads have abnormally high latency or not. Remember that just due to the statistics of the Poisson distribution, large cohorts and excessive grandparents will naturally be generated some calculable fraction of the time, and doesn't represent a problem for the system or evidence of an attack. Adjusting the difficulty due to these infrequent large naturally-occurring cohorts biases the difficulty algorithm relative to the naive Nb/Nc=2.42 algorithm.\n\nLet me elaborate on my alternative here where instead of adjusting the difficulty, we will decide to not pay high-latency beads.\n\nFirst, assume that Braidpool commits to a millisecond resolution timestamp in its committed metadata that we will use. Second, consider the following diagram of a high-latency bead:\n```\n       /-------o---------\\\n  o-o-o                   o-o-o\n       \\o-o-o-o-o-o-o-o-o/\n```\nWhere the bead on the top has high latency and the chain of beads on the bottom is the \"highest work path\" through the DAG. This is the most common example of what a high latency bead will do the DAG. In its absence you'd just have the chain on the bottom. The lower chain will in general have higher order structures and e.g. Nb/Nc=2.42 if we ignore the high latency bead. This example does not have excessive grandparents.\n\nA good measure of latency of any bead is:\n```\nbead_latency = median({t_c}) - median({t_p})\n```\nwhere `{t_c}` is the set of the timestamps of children, and `{t_p}` is the set of timestamps of parents of that bead. This measure has the advantage that it is not influenced by the miner's own timestamp, only by timestamps reported by other miners, so is very difficult to game. A miner also doesn't know what his own latency will be until children of his bead appear, so it's in his best interest to broadcast his bead as quickly as possible, to collect those children.\n\nWe want to pay everyone \"close\" to the main highest-work path and not pay the high-latency bead here. We also don't want the presence of the high-latency bead to affect *other* miner's rewards, as this constitutes an attack vector. Therefore the simplest thing to do is have a hard cutoff on `bead_latency`, probably around 5s, above which the bead won't receive a reward. We can allow cohorts to be as large as necessary to include all known beads without orphans/stale beads, so as to get an accurate measure of global latency, even if an extended network split occurs, and without biasing for rare but naturally-occurring largeish cohorts.\n\nThis means:\n1. The DAA is using `a` as its (only) timing measure through Nb/Nc\n2. Payment decisions are using *other* miners timestamps\n\n@zawy has been killing it with his simulations over the holidays, but I'll present some similar simulations soon now that the holidays are over ;-)\n\nP.S. if you want to discuss this in real time, join our [Braidpool Discord](https://discord.gg/pZYUDwkpPv)",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 406,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}