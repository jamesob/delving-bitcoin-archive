{
  "id": 3964,
  "name": "Gregory Sanders",
  "username": "instagibbs",
  "avatar_template": "/user_avatar/delvingbitcoin.org/instagibbs/{size}/28_2.png",
  "created_at": "2025-01-04T20:43:15.979Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"cguida\" data-post=\"4\" data-topic=\"1353\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/c/87869e/48.png\" class=\"avatar\"> cguida:</div>\n<blockquote>\n<p>What is the precise vulnerability the CLRT is trying to mitigate?</p>\n</blockquote>\n</aside>\n<p>CLRT is mitigating the amount of time liquidity is locked up in protocols.</p>\n<aside class=\"quote no-group\" data-username=\"cguida\" data-post=\"4\" data-topic=\"1353\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/c/87869e/48.png\" class=\"avatar\"> cguida:</div>\n<blockquote>\n<p>The only time I can see the delay taking longer than 2x the delay is if both parties publish a state they know is not the newest state, which would be kind of silly, wouldn\u2019t it?</p>\n</blockquote>\n</aside>\n<p>The 2 times <code>shared_delay</code> is when, f.e., ln-symmetry already has a <code>shared_delay</code> for the channel\u2019s settlement transaction via <code>nsequence</code>. Alice adds an incoming HTLC to an otherwise quiet channel at channel update <code>T-1</code>. Alice sends a signature for the newest state <code>T</code> to Bob. Bob simply doesn\u2019t respond with his signature. Alice needs to claim the incoming HTLC, so she goes to chain with her latest state, <code>T-1</code>. <code>shared_delay-1</code> blocks pass, and Bob then gets <code>T</code> mined. Another <code>shared_delay</code> must pass.</p>\n<p>Both of these <code>shared_delay</code>s must be built into the HTLC expiry delta for safety.</p>\n<p>CLRT output would drop this to a single <code>shared_delay</code> for ln-symmetry.</p>\n<aside class=\"quote no-group\" data-username=\"moonsettler\" data-post=\"5\" data-topic=\"1353\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/moonsettler/48/38_2.png\" class=\"avatar\"> moonsettler:</div>\n<blockquote>\n<p>CLRT does not really mitigate this afaik, in fact makes it more dangerous.</p>\n</blockquote>\n</aside>\n<p>It means you have to pick your <code>shared_delay</code> as something you deem secure, as its a liveliness security parameter. With or without CLRT if an adversary outbids you <code>shared_delay</code> times, your funds can be at risk for HTLC theft.</p>\n<p>Also, it does not preclude someone developing a modification to eltoo that bounds the number of updates. This is meant to be a modular piece usable in any context desired. It\u2019s not practical yet anyways, but this is why I opened the thread!</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2025-01-04T20:43:29.758Z",
  "reply_count": 0,
  "reply_to_post_number": 4,
  "quote_count": 2,
  "incoming_link_count": 1,
  "reads": 11,
  "readers_count": 10,
  "score": 37.2,
  "yours": false,
  "topic_id": 1353,
  "topic_slug": "contract-level-relative-timelocks",
  "topic_title": "Contract-level Relative Timelocks",
  "topic_html_title": "Contract-level Relative Timelocks",
  "category_id": 7,
  "display_username": "Gregory Sanders",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"cguida, post:4, topic:1353\"]\nWhat is the precise vulnerability the CLRT is trying to mitigate?\n[/quote]\n\nCLRT is mitigating the amount of time liquidity is locked up in protocols.\n\n[quote=\"cguida, post:4, topic:1353\"]\nThe only time I can see the delay taking longer than 2x the delay is if both parties publish a state they know is not the newest state, which would be kind of silly, wouldn\u2019t it?\n[/quote]\n\nThe 2 times `shared_delay` is when, f.e., ln-symmetry already has a `shared_delay` for the channel's settlement transaction via `nsequence`. Alice adds an incoming HTLC to an otherwise quiet channel at channel update `T-1`. Alice sends a signature for the newest state `T` to Bob. Bob simply doesn't respond with his signature. Alice needs to claim the incoming HTLC, so she goes to chain with her latest state, `T-1`. `shared_delay-1` blocks pass, and Bob then gets `T` mined. Another `shared_delay` must pass.\n\nBoth of these `shared_delay`s must be built into the HTLC expiry delta for safety.\n\nCLRT output would drop this to a single `shared_delay` for ln-symmetry.\n\n[quote=\"moonsettler, post:5, topic:1353\"]\nCLRT does not really mitigate this afaik, in fact makes it more dangerous.\n[/quote]\n\nIt means you have to pick your `shared_delay` as something you deem secure, as its a liveliness security parameter. With or without CLRT if an adversary outbids you `shared_delay` times, your funds can be at risk for HTLC theft.\n\nAlso, it does not preclude someone developing a modification to eltoo that bounds the number of updates. This is meant to be a modular piece usable in any context desired. It's not practical yet anyways, but this is why I opened the thread!",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 31,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 2
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}