{
  "id": 3970,
  "name": "salvatoshi",
  "username": "salvatoshi",
  "avatar_template": "/user_avatar/delvingbitcoin.org/salvatoshi/{size}/72_2.png",
  "created_at": "2025-01-05T09:34:34.931Z",
  "cooked": "<p>Very interesting to see this concept distilled so cleanly!</p>\n<p><a class=\"mention\" href=\"/u/rijndael\">@rijndael</a> sketched what seems to me exactly the same idea in this thread describing a possible <a href=\"https://x.com/rot13maxi/status/1833667750469804315\" rel=\"noopener nofollow ugc\">token standard using CAT called CatNip</a>. Once you remove the \u2018token\u2019 parts, I think the singleton is precisely what\u2019s left - and indeed, constant-size proof of ancestry was the goal.</p>\n<p>There, he used CAT in (at least) two ways:</p>\n<ul>\n<li>carrying state via extra outputs (using introspection with the Schnorr trick)</li>\n<li>introspecting the parent\u2019s Script based on its txid.</li>\n</ul>\n<p>An opcode that allows a clean way of carrying state (like OP_CHECKCONTRACTERIFY) would avoid the Schnorr trick, but of course reading \u2018inside\u2019 a txid is trickier (perhaps not crazily so, though). There might be other ways of creating the singleton that do not require the txid.</p>\n<p>The singleton primitive seems very interesting to me, as it would allow to generalize the concept of the \u2018connector outputs\u2019 (which are essentially a proof of ancestry at depth zero) used for example in Ark. I expect this will be very useful in trying to combine state-carrying UTXOs with Ark and other shared UTXO constructions.</p>",
  "post_number": 8,
  "post_type": 1,
  "updated_at": "2025-01-05T09:34:34.931Z",
  "reply_count": 1,
  "reply_to_post_number": 7,
  "quote_count": 0,
  "incoming_link_count": 8,
  "reads": 11,
  "readers_count": 10,
  "score": 62.2,
  "yours": false,
  "topic_id": 1353,
  "topic_slug": "contract-level-relative-timelocks",
  "topic_title": "Contract-level Relative Timelocks",
  "topic_html_title": "Contract-level Relative Timelocks",
  "category_id": 7,
  "display_username": "salvatoshi",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "ajtowns",
    "name": "Anthony Towns",
    "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png"
  },
  "bookmarked": false,
  "raw": "Very interesting to see this concept distilled so cleanly!\n\n@rijndael sketched what seems to me exactly the same idea in this thread describing a possible [token standard using CAT called CatNip](https://x.com/rot13maxi/status/1833667750469804315). Once you remove the 'token' parts, I think the singleton is precisely what's left - and indeed, constant-size proof of ancestry was the goal.\n\nThere, he used CAT in (at least) two ways:\n- carrying state via extra outputs (using introspection with the Schnorr trick)\n- introspecting the parent's Script based on its txid.\n\nAn opcode that allows a clean way of carrying state (like OP_CHECKCONTRACTERIFY) would avoid the Schnorr trick, but of course reading 'inside' a txid is trickier (perhaps not crazily so, though). There might be other ways of creating the singleton that do not require the txid.\n\nThe singleton primitive seems very interesting to me, as it would allow to generalize the concept of the 'connector outputs' (which are essentially a proof of ancestry at depth zero) used for example in Ark. I expect this will be very useful in trying to combine state-carrying UTXOs with Ark and other shared UTXO constructions.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 81,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}