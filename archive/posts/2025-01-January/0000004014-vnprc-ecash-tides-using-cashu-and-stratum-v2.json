{
  "id": 4014,
  "name": "",
  "username": "vnprc",
  "avatar_template": "/letter_avatar_proxy/v4/letter/v/ecae2f/{size}.png",
  "created_at": "2025-01-07T18:03:11.056Z",
  "cooked": "<p><strong>Open Questions</strong></p>\n<ol>\n<li>What should the Proof of Assets a.k.a. hashrate validation protocol look like?</li>\n</ol>\n<p>Can we build something that works for hashpool and traditional mining pools? Can we get some help from existing pools? <img src=\"https://delvingbitcoin.org/images/emoji/twitter/pray.png?v=12\" title=\":pray:\" class=\"emoji\" alt=\":pray:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<ol start=\"2\">\n<li>What payout formula should we use? Basic PPLNS, TIDES, or some other tweaked PPLNS algorithm?</li>\n</ol>\n<p>If the pool uses authentication I think we could even go back to proportional payouts. PPLNS was invented to prevent pool hopping but it would seem that an eHash free market could also solve this problem. So can we go back to proportional payouts in this scenario? What are the benefits? Is the juice worth the squeeze?</p>\n<p><strong>Post 1.0 Questions</strong></p>\n<ol>\n<li>How to build a block template selection market?</li>\n</ol>\n<p>The solution probably involves mining a share and selling it to the \u2018block template purchaser\u2019 (or transaction accelerator customer if you like to think in those terms) along with a merkle proof of the mining share.</p>\n<ol start=\"2\">\n<li>How do we minimize MEV or MEVil risk?</li>\n</ol>\n<p>You can\u2019t solve a problem that is poorly defined. I think we first need to do some fundamental research into the causes of MEV (or MEVil). I am confident that with the right foundational research we can put some basic restrictions in place to limit this possibility.</p>\n<p><code>&lt;soapbox&gt;</code> I <em>do not</em> believe the solution is to avoid building any software that could possibly enable spooky, undefined behavior. Bitcoin is permissionless, someone will build it (they might even get a free wizard NFT for their efforts). We are better off building it the right way first and setting the example to emulate. <code>&lt;/soapbox&gt;</code></p>\n<ol start=\"3\">\n<li>How to build a coinbase output market?</li>\n</ol>\n<p>I have concluded that you can\u2019t trustlessly pay for a coinbase output with eHash tokens because the tokens are indelibly tied to past block templates. How does one ensure that future block templates include the right coinbase output? Furthermore, how do you ensure the coinbase output has the right amount if eHash tokens have indeterminate value?</p>\n<p>The only remaining option is for the pool to sell coinbase outputs directly for bitcoin. Which leads to my next question:</p>\n<ol start=\"4\">\n<li>How do we trustlessly and transparently funnel (most of) the profits from selling coinbase output to the miners?</li>\n</ol>\n<p>If the purchaser is paying with an on-chain UTXO they can craft a transaction that pays the right amount directly to mining fees. This way all miners who contribute to the pool get to share in the profits. But how to prevent other pools from mining that transaction and stealing those fees? Easy peasy, put a connector output in the coinbase.</p>\n<p>Well\u2026it seems easy peasy but I can imagine a consensus rule that might prevent a graph cycle where a coinbase output pays to a transaction that pays fees into the coinbase. Has anyone ever tried to build something like this? Does such a rule exist?</p>\n<p>I haven\u2019t worked out a solution for coinbase output purchasers paying in ecash. Maybe the mint simply creates the transaction that flows entirely to fees? This is a half-baked idea. Let me know if you can think of a way to break it.</p>",
  "post_number": 33,
  "post_type": 1,
  "updated_at": "2025-01-07T22:41:04.066Z",
  "reply_count": 1,
  "reply_to_post_number": 32,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 12,
  "readers_count": 11,
  "score": 12.4,
  "yours": false,
  "topic_id": 870,
  "topic_slug": "ecash-tides-using-cashu-and-stratum-v2",
  "topic_title": "Ecash TIDES using Cashu and Stratum v2",
  "topic_html_title": "Ecash TIDES using Cashu and Stratum v2",
  "category_id": 8,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "vnprc",
    "name": "",
    "avatar_template": "/letter_avatar_proxy/v4/letter/v/ecae2f/{size}.png"
  },
  "bookmarked": false,
  "raw": "**Open Questions**\n\n1. What should the Proof of Assets a.k.a. hashrate validation protocol look like?\n\nCan we build something that works for hashpool and traditional mining pools? Can we get some help from existing pools? \ud83d\ude4f\n\n2. What payout formula should we use? Basic PPLNS, TIDES, or some other tweaked PPLNS algorithm?\n\nIf the pool uses authentication I think we could even go back to proportional payouts. PPLNS was invented to prevent pool hopping but it would seem that an eHash free market could also solve this problem. So can we go back to proportional payouts in this scenario? What are the benefits? Is the juice worth the squeeze?\n\n**Post 1.0 Questions**\n1. How to build a block template selection market?\n\nThe solution probably involves mining a share and selling it to the 'block template purchaser' (or transaction accelerator customer if you like to think in those terms) along with a merkle proof of the mining share.\n\n2. How do we minimize MEV or MEVil risk?\n\nYou can't solve a problem that is poorly defined. I think we first need to do some fundamental research into the causes of MEV (or MEVil). I am confident that with the right foundational research we can put some basic restrictions in place to limit this possibility.\n\n`<soapbox>` I *do not* believe the solution is to avoid building any software that could possibly enable spooky, undefined behavior. Bitcoin is permissionless, someone will build it (they might even get a free wizard NFT for their efforts). We are better off building it the right way first and setting the example to emulate. `</soapbox>`\n\n3. How to build a coinbase output market?\n\nI have concluded that you can't trustlessly pay for a coinbase output with eHash tokens because the tokens are indelibly tied to past block templates. How does one ensure that future block templates include the right coinbase output? Furthermore, how do you ensure the coinbase output has the right amount if eHash tokens have indeterminate value?\n\nThe only remaining option is for the pool to sell coinbase outputs directly for bitcoin. Which leads to my next question:\n\n4. How do we trustlessly and transparently funnel (most of) the profits from selling coinbase output to the miners?\n\nIf the purchaser is paying with an on-chain UTXO they can craft a transaction that pays the right amount directly to mining fees. This way all miners who contribute to the pool get to share in the profits. But how to prevent other pools from mining that transaction and stealing those fees? Easy peasy, put a connector output in the coinbase.\n\nWell...it seems easy peasy but I can imagine a consensus rule that might prevent a graph cycle where a coinbase output pays to a transaction that pays fees into the coinbase. Has anyone ever tried to build something like this? Does such a rule exist?\n\nI haven't worked out a solution for coinbase output purchasers paying in ecash. Maybe the mint simply creates the transaction that flows entirely to fees? This is a half-baked idea. Let me know if you can think of a way to break it.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 503,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}