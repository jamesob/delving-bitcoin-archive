{
  "id": 4587,
  "name": "Antoine Riard",
  "username": "ariard",
  "avatar_template": "/letter_avatar_proxy/v4/letter/a/c67d28/{size}.png",
  "created_at": "2025-03-22T00:51:53.089Z",
  "cooked": "<p>The problem is with the \"<em>MUST fulfill the corresponding incoming HTLC (if any)</em>\u201d.</p>\n<p>Per-BOLT3 Appendix A, the overall weight is given by the following equation: <code>900 + 172 * num-htlc-outputs + 224</code> WU. If you assume a <code>max_accepted_htlcs</code> of 50 (i.e default value for LDK\u2019s <code>our_max_accepted_htlcs</code>), the max weight unit of a commitment tx is 900 + 172 * 533 + 224 = 92800. If for simplifying the demonstration, you assume 1 sat / vbyte = 1 sat / 4 weight units.</p>\n<p>Let\u2019s assume the commitment transaction signed at 1 sat / byte under the <code>update_fee</code> mechanism, and the burden fee is on counterparty as the opener.</p>\n<p>All commitment transaction feerate beyond that 1 sat / byte will be paid by the routing LN node via an anchor output.</p>\n<p>Let\u2019s assume the \u201cmissing\u201d HTLC\u2019s <code>amount_msat</code> is of 50_000 satoshis.</p>\n<p>At 5 sat / vbyte, the feerate cost of the commitment transaction is (92800 / 4) * 4 = 92800, the absolute fee cost of the commitment tx is of 92800 satoshis. If the routing LN node goes on-chain for a single HTLC, there is a loss of 42_800 satoshis.</p>\n<p>At 10 sat / vbyte, the feerate cost of the commitment transaction is (92800 / 4) * 9 = 208800, the absolute fee cost of the commitment tx is of 208800 satoshis. If the routing LN node goes on-chain for a single HTLC, there is a loss of 158_800 satoshis.</p>\n<p>At 15 sat / vbyte, the feerate cost of the commitment transaction is (92800 / 4) * 14 = 324_800, the absolute fee cost of the commitment tx is of 324800 satoshis. If the routing LN nodes goes on-chain for a single HTLC, there is a loss of 324_800 satoshis.</p>\n<p>Before this change to BOLT5 specification, a LN node should have gone on-chain on the downstream link when the commitment transaction on the upstream link has reached enough sufficient depth (e.g for LDK the value is <code>ANTI_REORG_DELAY=6</code>). For an upstream counterparty confirming on-chain a commitment transaction has an absolute fee cost (either effective if no-hashrate capabilities or potential if hashrate capabilities).</p>\n<p>After this change to BOLT5 specification, a LN node can goes on-chain whatever the status of the upstream link commitment transaction of the counterparty and whatever the absolute fee cost paid by the LN node.</p>\n<p>If implemented, this opens the door to that kind of exploitation, where you have Mallory \u2194 Alice \u2194 Mallet, where Mallory is routing max HTLC=482 to Mallet through Alice to inflate the commitment transaction.</p>\n<p>Mallory routes a single HTLC through Alice to Mallet of worth 10_000 sats. Mallet releases the preimage for the HTLC and Alice - Mallet do a revoke and commit dance, however Mallet withhold the latest <code>revoke_and_ack</code> so from the PoV of Alice, Mallet has two valid commitment transaction, one with the preimage. Alice has a single valid commitment transaction, with no HTLC output for the 10k sats HTLC.</p>\n<p>Applying the \u201c<em>if the payment preimage is known: - MUST fulfill the corresponding incoming HTLC</em>\u201d, if Mallet do not cooperate to update the downstream link, Alice should go on-chain to claim the 10k sats preimage. If Alice\u2019s commitment transaction is of weight 84200, at 10 sat / vbyte, Alice loss is of 240600 satoshis.</p>\n<p>This on-chain fee can be snipped by a miner collaborating with Mallet or Mallory. This behavior can be also done by Mallet or Mallory just to do pure fee griefing of the LSPs they don\u2019t like.</p>\n<p>Now, enters the devil, what if Alice does not go on-chain with her commitment transaction on the downstream link ? As Mallet still have a valid commitment transaction on the upstream link, Mallory can goes on-chain with 482 HTLC-timeout on the downstream link and Mallet can goes on-chain with 482 HTLC-success on the upstream link, double-spending Alice for 482 HTLCs.</p>\n<p>The timelock orders for the single 10k sats and the remaining 482 HTLCs can be adjusted by Mallet and Mallory to the double, e.g HTLC 10k sats = 144 and 482 low-value HTLC = 1008. At T+144, either Alice goes on-chain both downstream or upstream, or Mallet and Mallory starts to gain adverserial optionality.</p>\n<p>To be checked and correct me if I\u2019m wrong. I think the main subtlety is on the <code>revoke_and_ack</code> dance Alice-Mallet:</p>\n<p> \u2190 <code>update_fulfill_htlc</code></p>\n<p> \u2190 <code>commitment_signed</code></p>\n<p> \u2192 <code>revoke_and_ack</code></p>\n<p> \u2192 <code>commitment_signed</code></p>\n<p>*Mallet withheld <code>revoke_and_ack</code></p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2025-03-22T00:51:53.089Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 3,
  "readers_count": 2,
  "score": 5.6,
  "yours": false,
  "topic_id": 1493,
  "topic_slug": "disclosure-lnd-excessive-failback-exploit",
  "topic_title": "Disclosure: LND Excessive Failback Exploit",
  "topic_html_title": "Disclosure: LND Excessive Failback Exploit",
  "category_id": 8,
  "display_username": "Antoine Riard",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "The problem is with the \"*MUST fulfill the corresponding incoming HTLC (if any)*\u201d.\n\nPer-BOLT3 Appendix A, the overall weight is given by the following equation: `900 + 172 * num-htlc-outputs + 224` WU. If you assume a `max_accepted_htlcs` of 50 (i.e default value for LDK's `our_max_accepted_htlcs`), the max weight unit of a commitment tx is 900 + 172 * 533 + 224 = 92800. If for simplifying the demonstration, you assume 1 sat / vbyte = 1 sat / 4 weight units.\n\nLet's assume the commitment transaction signed at 1 sat / byte under the `update_fee` mechanism, and the burden fee is on counterparty as the opener.\n\nAll commitment transaction feerate beyond that 1 sat / byte will be paid by the routing LN node via an anchor output.\n\nLet's assume the \"missing\" HTLC's `amount_msat` is of 50_000 satoshis.\n\nAt 5 sat / vbyte, the feerate cost of the commitment transaction is (92800 / 4) * 4 = 92800, the absolute fee cost of the commitment tx is of 92800 satoshis. If the routing LN node goes on-chain for a single HTLC, there is a loss of 42_800 satoshis.\n\nAt 10 sat / vbyte, the feerate cost of the commitment transaction is (92800 / 4) * 9 = 208800, the absolute fee cost of the commitment tx is of 208800 satoshis. If the routing LN node goes on-chain for a single HTLC, there is a loss of 158_800 satoshis.\n\nAt 15 sat / vbyte, the feerate cost of the commitment transaction is (92800 / 4) * 14 = 324_800, the absolute fee cost of the commitment tx is of 324800 satoshis. If the routing LN nodes goes on-chain for a single HTLC, there is a loss of 324_800 satoshis.\n\nBefore this change to BOLT5 specification, a LN node should have gone on-chain on the downstream link when the commitment transaction on the upstream link has reached enough sufficient depth (e.g for LDK the value is `ANTI_REORG_DELAY=6`). For an upstream counterparty confirming on-chain a commitment transaction has an absolute fee cost (either effective if no-hashrate capabilities or potential if hashrate capabilities).\n\nAfter this change to BOLT5 specification, a LN node can goes on-chain whatever the status of the upstream link commitment transaction of the counterparty and whatever the absolute fee cost paid by the LN node.\n\nIf implemented, this opens the door to that kind of exploitation, where you have Mallory <-> Alice <-> Mallet, where Mallory is routing max HTLC=482 to Mallet through Alice to inflate the commitment transaction. \n\nMallory routes a single HTLC through Alice to Mallet of worth 10_000 sats. Mallet releases the preimage for the HTLC and Alice - Mallet do a revoke and commit dance, however Mallet withhold the latest `revoke_and_ack` so from the PoV of Alice, Mallet has two valid commitment transaction, one with the preimage. Alice has a single valid commitment transaction, with no HTLC output for the 10k sats HTLC.\n\nApplying the \"*if the payment preimage is known: - MUST fulfill the corresponding incoming HTLC*\", if Mallet do not cooperate to update the downstream link, Alice should go on-chain to claim the 10k sats preimage. If Alice's commitment transaction is of weight 84200, at 10 sat / vbyte, Alice loss is of 240600 satoshis.\n\nThis on-chain fee can be snipped by a miner collaborating with Mallet or Mallory. This behavior can be also done by Mallet or Mallory just to do pure fee griefing of the LSPs they don't like.\n\nNow, enters the devil, what if Alice does not go on-chain with her commitment transaction on the downstream link ? As Mallet still have a valid commitment transaction on the upstream link, Mallory can goes on-chain with 482 HTLC-timeout on the downstream link and Mallet can goes on-chain with 482 HTLC-success on the upstream link, double-spending Alice for 482 HTLCs.\n\nThe timelock orders for the single 10k sats and the remaining 482 HTLCs can be adjusted by Mallet and Mallory to the double, e.g HTLC 10k sats = 144 and 482 low-value HTLC = 1008. At T+144, either Alice goes on-chain both downstream or upstream, or Mallet and Mallory starts to gain adverserial optionality.\n\nTo be checked and correct me if I\u2019m wrong. I think the main subtlety is on the `revoke_and_ack` dance Alice-Mallet:\n\n<- `update_fulfill_htlc`\n\n<- `commitment_signed`\n\n-> `revoke_and_ack`\n\n-> `commitment_signed`\n\n*Mallet withheld `revoke_and_ack`",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 5,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}