{
  "id": 4502,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2025-03-13T00:41:46.302Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"josh\" data-post=\"1\" data-topic=\"1517\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/josh/48/95_2.png\" class=\"avatar\"> josh:</div>\n<blockquote>\n<p>My interest in runes is chiefly as a protocol that could facilitate the issuance of stocks and other securities natively on Bitcoin.</p>\n</blockquote>\n</aside>\n<p>Stocks and securities seem like a perfect case for centralised management \u2013 whichever company issued the stocks or physically controls whatever is being securitised has a strong interest in managing this stuff properly and if you can switch from a decentralised model to a centralised one you can make things much more efficient. Doing this via an \u201cecash\u201d model would allow anonymous trades if that\u2019s desired, having wrapped BTC or stablecoins available on the same platform would allow automated market makers, and aggregating multiple securities onto a single \u201cstock exchange\u201d platform would make for easy cross-security trades. So personally, my expectation is that doing these things on bitcoin will end up out-competed by custom solutions.</p>\n<aside class=\"quote no-group\" data-username=\"josh\" data-post=\"1\" data-topic=\"1517\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/josh/48/95_2.png\" class=\"avatar\"> josh:</div>\n<blockquote>\n<p>For context, I\u2019ve been thinking about how to create multiple buy offers for multiple UTXOs at once, in a single PSBT. As it stands, it is impossible to do this without creating a separately signed PSBT for every UTXO you wish to make an offer for.</p>\n<p>This is a pressing problem faced by the runes protocol. Users can make a trustless PSBT offer, which anyone can accept, but users cannot make the equivalent PSBT buy offer. Doing so would require making a separate PSBT offer for every single UTXO holding the rune the user wishes to make an offer for.</p>\n</blockquote>\n</aside>\n<p>I\u2019m not sure I understand the problem statement here. I think what you\u2019re saying is essentially \u201cI know of a dozen existing txids, each of which imply control of a different rune R1 \u2026 R12, and I am happy to buy any one of those runes for X BTC\u201d.</p>\n<p>Because rune transfers can be modified by the presence of an OP_RETURN output, and you obviously also want to specify your own output, I don\u2019t think a SIGHASH_SINGLE signature is sufficient when creating an offer to buy a rune, but a SIGHASH_ALL signature (or CTV hash) would also need to commit to an receiving address for whoever you\u2019re paying for the rune, which is almost certainly a different signature for each of different runes you\u2019re willing to purchase.</p>\n<p>Perhaps using <a href=\"https://github.com/ElementsProject/elements/blob/abbc17048a320910e68e347fa3ebbea770539cda/doc/tapscript_opcodes.md\">elements-style introspection</a> you could solve that (writing a script that asserts there are only 2 outputs, that the first is your address, and the second is not an OP_RETURN), but you would still need to differentiate the 12 acceptable txids as inputs from any other random input. Doing that via a single PSBT would require a custom field (\u201cI\u2019ve used this complicated script, which can be satisfied by any of these utxos as the second input along with including one of these [signatures/merkle paths] in the witness\u201d), which doesn\u2019t seem much better/different than just having separate PSBTs in the first place.</p>\n<aside class=\"quote no-group\" data-username=\"josh\" data-post=\"1\" data-topic=\"1517\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/josh/48/95_2.png\" class=\"avatar\"> josh:</div>\n<blockquote>\n<p>My understanding is that OP_CTV was explicitly designed to avoid recursive covenants, which is why users of OP_CTV can commit to the outputs of a transaction, but not the inputs.</p>\n</blockquote>\n</aside>\n<p>If the CTV hash committed to the inputs, then you couldn\u2019t construct a (spendable) scriptPubKey that included a CTV hash \u2013 the CTV hash would be <code>H=hash(SPK, outputs, nlocktime, etc...)</code>, but the scriptPubKey would be <code>SPK=hash(H CTV ...)</code> so every time you calculate H you have to recalculate SPK which means you have to recalculate H, and repeat. Because they\u2019re 256-bit hashes, you would have to do about <span class=\"math\">2^{128}</span> calculations to come up with a pair of values that are consistent (<a href=\"https://gnusha.org/pi/bitcoindev/20160108153329.GA15731@sapphire.erisian.com.au/\">related discussion</a>), at which point you\u2019ve essentially solved mining, and are probably able to guess everyone\u2019s private key.</p>\n<p>(The same loop doesn\u2019t occur for signatures (which do commit to the inputs) because the signature is included in the witness rather than scriptPubKey)</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2025-03-13T00:46:49.028Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 0.2,
  "yours": false,
  "topic_id": 1517,
  "topic_slug": "question-about-op-ctv-and-non-recursive-covenants",
  "topic_title": "Question about OP_CTV and Non-Recursive Covenants",
  "topic_html_title": "Question about OP_CTV and Non-Recursive Covenants",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"josh, post:1, topic:1517\"]\nMy interest in runes is chiefly as a protocol that could facilitate the issuance of stocks and other securities natively on Bitcoin.\n[/quote]\n\nStocks and securities seem like a perfect case for centralised management -- whichever company issued the stocks or physically controls whatever is being securitised has a strong interest in managing this stuff properly and if you can switch from a decentralised model to a centralised one you can make things much more efficient. Doing this via an \"ecash\" model would allow anonymous trades if that's desired, having wrapped BTC or stablecoins available on the same platform would allow automated market makers, and aggregating multiple securities onto a single \"stock exchange\" platform would make for easy cross-security trades. So personally, my expectation is that doing these things on bitcoin will end up out-competed by custom solutions.\n\n[quote=\"josh, post:1, topic:1517\"]\nFor context, I\u2019ve been thinking about how to create multiple buy offers for multiple UTXOs at once, in a single PSBT. As it stands, it is impossible to do this without creating a separately signed PSBT for every UTXO you wish to make an offer for.\n\nThis is a pressing problem faced by the runes protocol. Users can make a trustless PSBT offer, which anyone can accept, but users cannot make the equivalent PSBT buy offer. Doing so would require making a separate PSBT offer for every single UTXO holding the rune the user wishes to make an offer for.\n[/quote]\n\nI'm not sure I understand the problem statement here. I think what you're saying is essentially \"I know of a dozen existing txids, each of which imply control of a different rune R1 .. R12, and I am happy to buy any one of those runes for X BTC\".\n\nBecause rune transfers can be modified by the presence of an OP_RETURN output, and you obviously also want to specify your own output, I don't think a SIGHASH_SINGLE signature is sufficient when creating an offer to buy a rune, but a SIGHASH_ALL signature (or CTV hash) would also need to commit to an receiving address for whoever you're paying for the rune, which is almost certainly a different signature for each of different runes you're willing to purchase.\n\nPerhaps using [elements-style introspection](https://github.com/ElementsProject/elements/blob/abbc17048a320910e68e347fa3ebbea770539cda/doc/tapscript_opcodes.md) you could solve that (writing a script that asserts there are only 2 outputs, that the first is your address, and the second is not an OP_RETURN), but you would still need to differentiate the 12 acceptable txids as inputs from any other random input. Doing that via a single PSBT would require a custom field (\"I've used this complicated script, which can be satisfied by any of these utxos as the second input along with including one of these [signatures/merkle paths] in the witness\"), which doesn't seem much better/different than just having separate PSBTs in the first place.\n\n[quote=\"josh, post:1, topic:1517\"]\nMy understanding is that OP_CTV was explicitly designed to avoid recursive covenants, which is why users of OP_CTV can commit to the outputs of a transaction, but not the inputs.\n[/quote]\n\nIf the CTV hash committed to the inputs, then you couldn't construct a (spendable) scriptPubKey that included a CTV hash -- the CTV hash would be `H=hash(SPK, outputs, nlocktime, etc...)`, but the scriptPubKey would be `SPK=hash(H CTV ...)` so every time you calculate H you have to recalculate SPK which means you have to recalculate H, and repeat. Because they're 256-bit hashes, you would have to do about $2^{128}$ calculations to come up with a pair of values that are consistent ([related discussion](https://gnusha.org/pi/bitcoindev/20160108153329.GA15731@sapphire.erisian.com.au/)), at which point you've essentially solved mining, and are probably able to guess everyone's private key.\n\n(The same loop doesn't occur for signatures (which do commit to the inputs) because the signature is included in the witness rather than scriptPubKey)",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}