{
  "id": 4586,
  "name": null,
  "username": "JohnLaw",
  "avatar_template": "/letter_avatar_proxy/v4/letter/j/58956e/{size}.png",
  "created_at": "2025-03-21T21:08:20.002Z",
  "cooked": "<p>Dave,</p>\n<p>Thanks for your thoughtful response.</p>\n<p>You\u2019re right that there\u2019s a problem with the Hold Fee if the downstream node ignores an offered HTLC.</p>\n<p>I believe the fix is to update the downstream node\u2019s Commitment transaction in two separate steps:</p>\n<ul>\n<li>increase the burn funds to include Upfront and Hold Fees (plus matching funds) for the offered HTLC, and</li>\n<li>add the HTLC output to the downstream node\u2019s Commitment transaction.</li>\n</ul>\n<p>The downstream node performs the first step (increasing burn funds), and revokes its previous Commitment transaction, before the second step is performed.\nIt\u2019s safe for the downstream node to commit to the first update (with increased burn funds), as the this update includes the upstream node\u2019s matching funds (and its Upfront funds).</p>\n<p>From the Bolt 02 spec, the current flow for adding an HTLC goes through the following states:</p>\n<ul>\n<li>pending on the receiver</li>\n<li>in the receiver\u2019s latest commitment transaction</li>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked, and the update is pending on the sender</li>\n<li>\u2026 and in the sender\u2019s latest commitment transaction</li>\n<li>\u2026 and the sender\u2019s previous commitment transaction has been revoked</li>\n</ul>\n<p>In order to fix the bug you found, we need to change this to:</p>\n<ul>\n<li>pending on the receiver</li>\n<li>increased burn funds (but no HTLC output) in the receiver\u2019s latest commitment transaction</li>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked, and the update is pending on the sender</li>\n<li>\u2026 and increased burn funds and HTLC output in the sender\u2019s latest commitment transaction</li>\n<li>\u2026 and the sender\u2019s previous commitment transaction has been revoked</li>\n<li>\u2026 and increased burn funds and HTLC output in the receiver\u2019s latest commitment transaction</li>\n<li>\u2026 and the receiver\u2019s previous commitment transaction (with the increased burn amount but no HTLC output) has been revoked</li>\n</ul>\n<p>Thus the upstream node sends an update_add_htlc packet and then a commitment_signed packet, where the new signatures cover the increased burn funds for the new HTLC (but not a new HTLC output).\nThen, once the downstream node has sent a revoke_and_ack committing to the increased burn amount, the next commitment_signed transaction sent by the upstream node includes new increased burn funds and the new HTLC output.</p>\n<p>Note that there\u2019s still just one update to the upstream node\u2019s Commitment transaction that adds both the increased burn funds and the HTLC output.\nIt\u2019s only the downstream node\u2019s Commitment transaction that needs to be updated in two steps.</p>\n<p>The downstream node commits to paying the Hold fee for the new HTLC when it commits to the increased burn funds by revoking its previous Commitment transaction (that did not have the increased burn funds).</p>\n<p>If the downstream node hasn\u2019t revoked its previous Commitment transaction before the new HTLC\u2019s grace period expires, the upstream node fails the HTLC by never updating the downstream node\u2019s Commitment transaction to include an output for the HTLC.\nIn this case, the upstream node can fail the HTLC with its upstream partner prior to the HTLC\u2019s grace period in that channel, so it doesn\u2019t have to pay any Hold Fees.</p>\n<p>For example, Bob offers an HTLC to Mallory by signing a new Commitment transaction for Mallory that increases the burn funds for the new HTLC (but doesn\u2019t include a new HTLC output).\nIf Mallory fails to revoke his previous Commitment transaction prior to the HTLC\u2019s grace period in the channel with Bob, Bob fails the HTLC with Alice (Bob\u2019s upstream partner) prior to the HTLC\u2019s grace period in that channel.\nAs a result, Bob doesn\u2019t owe any Hold Fees to Alice.</p>\n<p>Also, note that Bob doesn\u2019t run the risk of having to pay the HTLC to Mallory, as Bob still has a Commitment transaction without the HTLC (and without increased burn funds).\nThus, if Mallory never wakes up, Bob can close the channel by putting that transaction on-chain.\nIf Mallory does wake up before the channel is closed, Bob and Mallory resolve blame for the failure of the latest HTLC as described in the post and the paper (e.g., using nonvolalite logs, timestampted messages, etc.).</p>\n<p>Please let me know if you agree that this fixes the bug.\nIf so, there\u2019s still work to do in defining the exact set of changes to the protocol for updating the channel state.\nIt\u2019s probably possible to define these changes while supporting asynchronous updates to both parties\u2019 Commitment transactions.\nHowever, I believe Rusty proposed simplifying the protocol to eliminate races between updates to the parties\u2019 Commitment transations.\nIt should be much easier to implement the 2-stage update to the downstream party\u2019s Commitment transaction in such a race-free channel.</p>\n<p>Regarding the \u201choly grail\u201d of charging fees as a function of how long the HTLC was held, I believe using a burn output (with matching funds) provides the missing ingredient.\nIn particular, once both nodes have devoted funds to a burn output, they each individually want to determine the correct division of those funds so that they won\u2019t be burned.\nThis is what gets around the need to \u201cprove\u201d to one\u2019s partner that a message was sent.</p>\n<p>I acknowledge that there are some limitations to using burn outputs, such as the risk of having one\u2019s partner fail completely, in which case the funds in the burn output are lost.\nHowever, this proposal (with the fix described above) does charge fees that depend on how long an HTLC was held, and it does so in a way that prevents the theft of those fees.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2025-03-21T21:08:20.002Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 1.6,
  "yours": false,
  "topic_id": 1524,
  "topic_slug": "fee-based-spam-prevention-for-lightning",
  "topic_title": "Fee-Based Spam Prevention For Lightning",
  "topic_html_title": "Fee-Based Spam Prevention For Lightning",
  "category_id": 7,
  "display_username": null,
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "harding",
    "name": "David A. Harding",
    "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/925_2.png"
  },
  "bookmarked": false,
  "raw": "Dave,\n\nThanks for your thoughtful response.\n\nYou're right that there's a problem with the Hold Fee if the downstream node ignores an offered HTLC.\n\nI believe the fix is to update the downstream node's Commitment transaction in two separate steps:\n* increase the burn funds to include Upfront and Hold Fees (plus matching funds) for the offered HTLC, and\n* add the HTLC output to the downstream node's Commitment transaction.\n\nThe downstream node performs the first step (increasing burn funds), and revokes its previous Commitment transaction, before the second step is performed.\nIt's safe for the downstream node to commit to the first update (with increased burn funds), as the this update includes the upstream node's matching funds (and its Upfront funds).\n\nFrom the Bolt 02 spec, the current flow for adding an HTLC goes through the following states:\n\n* pending on the receiver\n* in the receiver's latest commitment transaction\n* ... and the receiver's previous commitment transaction has been revoked, and the update is pending on the sender\n* ... and in the sender's latest commitment transaction\n* ... and the sender's previous commitment transaction has been revoked\n\nIn order to fix the bug you found, we need to change this to:\n\n* pending on the receiver\n* increased burn funds (but no HTLC output) in the receiver's latest commitment transaction\n* ... and the receiver's previous commitment transaction has been revoked, and the update is pending on the sender\n* ... and increased burn funds and HTLC output in the sender's latest commitment transaction\n* ... and the sender's previous commitment transaction has been revoked\n* ... and increased burn funds and HTLC output in the receiver's latest commitment transaction\n* ... and the receiver's previous commitment transaction (with the increased burn amount but no HTLC output) has been revoked\n\nThus the upstream node sends an update_add_htlc packet and then a commitment_signed packet, where the new signatures cover the increased burn funds for the new HTLC (but not a new HTLC output).\nThen, once the downstream node has sent a revoke_and_ack committing to the increased burn amount, the next commitment_signed transaction sent by the upstream node includes new increased burn funds and the new HTLC output.\n\nNote that there's still just one update to the upstream node's Commitment transaction that adds both the increased burn funds and the HTLC output.\nIt's only the downstream node's Commitment transaction that needs to be updated in two steps.\n\nThe downstream node commits to paying the Hold fee for the new HTLC when it commits to the increased burn funds by revoking its previous Commitment transaction (that did not have the increased burn funds).\n\nIf the downstream node hasn't revoked its previous Commitment transaction before the new HTLC's grace period expires, the upstream node fails the HTLC by never updating the downstream node's Commitment transaction to include an output for the HTLC.\nIn this case, the upstream node can fail the HTLC with its upstream partner prior to the HTLC's grace period in that channel, so it doesn't have to pay any Hold Fees.\n\nFor example, Bob offers an HTLC to Mallory by signing a new Commitment transaction for Mallory that increases the burn funds for the new HTLC (but doesn't include a new HTLC output).\nIf Mallory fails to revoke his previous Commitment transaction prior to the HTLC's grace period in the channel with Bob, Bob fails the HTLC with Alice (Bob's upstream partner) prior to the HTLC's grace period in that channel.\nAs a result, Bob doesn't owe any Hold Fees to Alice.\n\nAlso, note that Bob doesn't run the risk of having to pay the HTLC to Mallory, as Bob still has a Commitment transaction without the HTLC (and without increased burn funds).\nThus, if Mallory never wakes up, Bob can close the channel by putting that transaction on-chain.\nIf Mallory does wake up before the channel is closed, Bob and Mallory resolve blame for the failure of the latest HTLC as described in the post and the paper (e.g., using nonvolalite logs, timestampted messages, etc.).\n\nPlease let me know if you agree that this fixes the bug.\nIf so, there's still work to do in defining the exact set of changes to the protocol for updating the channel state.\nIt's probably possible to define these changes while supporting asynchronous updates to both parties' Commitment transactions.\nHowever, I believe Rusty proposed simplifying the protocol to eliminate races between updates to the parties' Commitment transations.\nIt should be much easier to implement the 2-stage update to the downstream party's Commitment transaction in such a race-free channel.\n\nRegarding the \"holy grail\" of charging fees as a function of how long the HTLC was held, I believe using a burn output (with matching funds) provides the missing ingredient.\nIn particular, once both nodes have devoted funds to a burn output, they each individually want to determine the correct division of those funds so that they won't be burned.\nThis is what gets around the need to \"prove\" to one's partner that a message was sent.\n\nI acknowledge that there are some limitations to using burn outputs, such as the risk of having one's partner fail completely, in which case the funds in the burn output are lost.\nHowever, this proposal (with the fix described above) does charge fees that depend on how long an HTLC was held, and it does so in a way that prevents the theft of those fees.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 279,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}