{
  "id": 4485,
  "name": "Steven Roose",
  "username": "stevenroose",
  "avatar_template": "/user_avatar/delvingbitcoin.org/stevenroose/{size}/1087_2.png",
  "created_at": "2025-03-12T12:31:58.924Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"14\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>CTV+CSFS isn\u2019t equivalent to APO, it\u2019s somewhat more costly by requiring you to explicitly include the CTV hash in the witness data. The <a href=\"https://gnusha.org/pi/bitcoindev/CAMZUoK=pkZuovtifBzdqhoyegzG+9hRTFEc7fG9nZPDK4KbU3w@mail.gmail.com/\" rel=\"noopener nofollow ugc\">TXHASH</a> approach is (in my opinion) a substantial improvement on that.</p>\n</blockquote>\n</aside>\n<p>I think it\u2019s fair to call something equivalent even if it\u2019s a little more costly but achieves the same functionality. (Of course I wouldn\u2019t go as far to make the same argument for things like CAT where you have to dump the entire tx on stack including several dozen opcodes.) A better argument would be that CTV+CSFS can only emulate APO|ALL and not the other APO flags. Though it seems that the APO|ALL variant of APO has the most interest.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"14\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>The TXHASH approach would be a taproot-only solution (as is CSFS), which would have the benefit of both simplifying the change (removing policy considerations for relay of bare-CTV txs, not having to consider the CTV in P2SH being unsatisfiable)</p>\n</blockquote>\n</aside>\n<p>The TXHASH BIP explicitly also specifies to enable CHECKTXHASHVERIFY in legacy and segwit context and outlines how hashes should be calculated for those contexts. This is specifically done so to enable \u201cbare CTXHV\u201d which is about a 70 witness bytes saving over p2tr and 30-something bytes over p2wsh. Having implemented TXHASH, I would definitely not say that it \u201csimplifies the change\u201d. The difference in both technical debt and potential for bugs is an order of magnitude bigger for TXHASH than for CTV. (Not to say that I don\u2019t think TXHASH would be worthwhile, but I will definitely say that it has not received the attention I had expected, so I would definitely not want to put it on the table anytime soon.)</p>\n<p>When it comes to IBD slowdown, I believe that was before the CTV cache was made lazy? All TXHASH caches are already implemented to be lazy, so they shouldn\u2019t affect IBD or any tx validation without TXHASH opcodes.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"14\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>It also used APO, the annex, and some custom relay rules, not CTV or CSFS</p>\n</blockquote>\n</aside>\n<p>It actually explicitly mentions some additional benefits from CTV on top of its use of APO:</p>\n<aside class=\"quote no-group\" data-username=\"instagibbs\" data-post=\"1\" data-topic=\"359\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/instagibbs/48/28_2.png\" class=\"avatar\"><a href=\"https://delvingbitcoin.org/t/ln-symmetry-project-recap/359/1\">LN-Symmetry Project Recap</a></div>\n<blockquote>\n<p>CTV(emulation) ended up being useful! It removed the necessity of round-trips from the payment protocol, allowing for \u201cfast forwards\u201d that are extremely simple, and would likely reduce payment times if widely adopted.</p>\n</blockquote>\n</aside>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"14\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>Unfortunately, eltoo/ln-symmetry doesn\u2019t seem to be a very high priority in the lightning space from what I can see \u2013 eg, see the <a href=\"https://x.com/TheBlueMatt/status/1859070516956389704\" rel=\"noopener nofollow ugc\">priorities from LDK</a>.</p>\n</blockquote>\n</aside>\n<p>An argument could be made that the lack of prioritization of eltoo in Lightning land is no proxy for a lack of enthusiasm for it. Lightning is not a moonshot industry, it has actual products and users, so they have to be pragmatic and build what can improve user experience tomorrow and not in several years.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"14\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>When I looked into this, <a href=\"https://x.com/ajtowns/status/1856635064941166753\" rel=\"noopener nofollow ugc\">as far as I could tell</a> Ark has been built based on the elements introspection opcodes and on pre-signed transactions, but there has been no practical exploration into actually using it with CTV.</p>\n</blockquote>\n</aside>\n<p>Like already mentioned, I did the experiment <a href=\"https://x.com/stevenroose3/status/1899651611385057519\" rel=\"noopener nofollow ugc\">last night</a> and it was remarkably straightforward.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"16\" data-topic=\"1509\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>It\u2019s great that Steven has apparently been working on this in the last hour, but maybe it\u2019s even better to let the code bake a little while before trying to use it in a debate.</p>\n</blockquote>\n</aside>\n<p>I wouldn\u2019t go so far as to dismiss this experiment based on its age. The code is obviously not to be deployed in the state it is in, because I hackishly used conditional compilation to swap out our musig-cosigned transaction trees with ctv-based trees and for deployment you\u2019d just pick one and not have the conditional compilation.</p>\n<p>But we have been working on this implementation for over 6 months, it is working on bitcoin\u2019s vanilla signet, we have ample integration tests that test various unilateral exit scenarios and all of these are passing for the ctv-based trees. From the looks of it, it seems like we could net remove about 900 lines of code if we would delete the cosigning code in favor of ctv and reduce our own round protocol to just two rounds of interactions instead of three. (Not to speak of the bandwidth improvement for not having to pass around signing nonces and partial signatures.)</p>\n<p>Anyway, while this experiment shows that ctv is a practical primitive to use as a developer, I think it is still mostly off topic and I\u2019d prefer to stick to the topic at hand.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"14\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>Doesn\u2019t having CSFS available on its own give you equally efficient and much more flexible simplifications of DLCs? I think having CAT available as well would probably also be fairly powerful here.</p>\n</blockquote>\n</aside>\n<p>I would assume so, but they would make the protocols a lot less \u201cdiscreet\u201d, I guess. The whole \u201chide the tweak inside the output key\u201d feature is I think one of the main draws to DLCs and why they\u2019re called \u201cdiscreet\u201d log contracts. Obviously not arguing against CAT adding a lot of value in most protocols <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
  "post_number": 17,
  "post_type": 1,
  "updated_at": "2025-03-12T14:50:44.632Z",
  "reply_count": 1,
  "reply_to_post_number": 14,
  "quote_count": 2,
  "incoming_link_count": 0,
  "reads": 22,
  "readers_count": 21,
  "score": 9.4,
  "yours": false,
  "topic_id": 1509,
  "topic_slug": "ctv-csfs-can-we-reach-consensus-on-a-first-step-towards-covenants",
  "topic_title": "CTV+CSFS: Can we reach consensus on a first step towards covenants?",
  "topic_html_title": "CTV+CSFS: Can we reach consensus on a first step towards covenants?",
  "category_id": 7,
  "display_username": "Steven Roose",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"ajtowns, post:14, topic:1509\"]\nCTV+CSFS isn\u2019t equivalent to APO, it\u2019s somewhat more costly by requiring you to explicitly include the CTV hash in the witness data. The [TXHASH](https://gnusha.org/pi/bitcoindev/CAMZUoK=pkZuovtifBzdqhoyegzG+9hRTFEc7fG9nZPDK4KbU3w@mail.gmail.com/) approach is (in my opinion) a substantial improvement on that.\n[/quote]\n\nI think it's fair to call something equivalent even if it's a little more costly but achieves the same functionality. (Of course I wouldn't go as far to make the same argument for things like CAT where you have to dump the entire tx on stack including several dozen opcodes.) A better argument would be that CTV+CSFS can only emulate APO|ALL and not the other APO flags. Though it seems that the APO|ALL variant of APO has the most interest.\n\n[quote=\"ajtowns, post:14, topic:1509\"]\nThe TXHASH approach would be a taproot-only solution (as is CSFS), which would have the benefit of both simplifying the change (removing policy considerations for relay of bare-CTV txs, not having to consider the CTV in P2SH being unsatisfiable)\n[/quote]\n\nThe TXHASH BIP explicitly also specifies to enable CHECKTXHASHVERIFY in legacy and segwit context and outlines how hashes should be calculated for those contexts. This is specifically done so to enable \"bare CTXHV\" which is about a 70 witness bytes saving over p2tr and 30-something bytes over p2wsh. Having implemented TXHASH, I would definitely not say that it \"simplifies the change\". The difference in both technical debt and potential for bugs is an order of magnitude bigger for TXHASH than for CTV. (Not to say that I don't think TXHASH would be worthwhile, but I will definitely say that it has not received the attention I had expected, so I would definitely not want to put it on the table anytime soon.)\n\nWhen it comes to IBD slowdown, I believe that was before the CTV cache was made lazy? All TXHASH caches are already implemented to be lazy, so they shouldn't affect IBD or any tx validation without TXHASH opcodes.\n\n[quote=\"ajtowns, post:14, topic:1509\"]\nIt also used APO, the annex, and some custom relay rules, not CTV or CSFS\n[/quote]\n\nIt actually explicitly mentions some additional benefits from CTV on top of its use of APO:\n\n[quote=\"instagibbs, post:1, topic:359\"]\nCTV(emulation) ended up being useful! It removed the necessity of round-trips from the payment protocol, allowing for \u201cfast forwards\u201d that are extremely simple, and would likely reduce payment times if widely adopted.\n[/quote]\n\n[quote=\"ajtowns, post:14, topic:1509\"]\nUnfortunately, eltoo/ln-symmetry doesn\u2019t seem to be a very high priority in the lightning space from what I can see \u2013 eg, see the [priorities from LDK](https://x.com/TheBlueMatt/status/1859070516956389704).\n[/quote]\n\nAn argument could be made that the lack of prioritization of eltoo in Lightning land is no proxy for a lack of enthusiasm for it. Lightning is not a moonshot industry, it has actual products and users, so they have to be pragmatic and build what can improve user experience tomorrow and not in several years.\n\n[quote=\"ajtowns, post:14, topic:1509\"]\nWhen I looked into this, [as far as I could tell](https://x.com/ajtowns/status/1856635064941166753) Ark has been built based on the elements introspection opcodes and on pre-signed transactions, but there has been no practical exploration into actually using it with CTV.\n[/quote]\n\nLike already mentioned, I did the experiment [last night](https://x.com/stevenroose3/status/1899651611385057519) and it was remarkably straightforward.\n\n[quote=\"ajtowns, post:16, topic:1509, full:true\"]\nIt\u2019s great that Steven has apparently been working on this in the last hour, but maybe it\u2019s even better to let the code bake a little while before trying to use it in a debate.\n[/quote]\n\nI wouldn't go so far as to dismiss this experiment based on its age. The code is obviously not to be deployed in the state it is in, because I hackishly used conditional compilation to swap out our musig-cosigned transaction trees with ctv-based trees and for deployment you'd just pick one and not have the conditional compilation.\n\nBut we have been working on this implementation for over 6 months, it is working on bitcoin's vanilla signet, we have ample integration tests that test various unilateral exit scenarios and all of these are passing for the ctv-based trees. From the looks of it, it seems like we could net remove about 900 lines of code if we would delete the cosigning code in favor of ctv and reduce our own round protocol to just two rounds of interactions instead of three. (Not to speak of the bandwidth improvement for not having to pass around signing nonces and partial signatures.)\n\nAnyway, while this experiment shows that ctv is a practical primitive to use as a developer, I think it is still mostly off topic and I'd prefer to stick to the topic at hand.\n\n[quote=\"ajtowns, post:14, topic:1509\"]\nDoesn\u2019t having CSFS available on its own give you equally efficient and much more flexible simplifications of DLCs? I think having CAT available as well would probably also be fairly powerful here.\n[/quote]\n\nI would assume so, but they would make the protocols a lot less \"discreet\", I guess. The whole \"hide the tweak inside the output key\" feature is I think one of the main draws to DLCs and why they're called \"discreet\" log contracts. Obviously not arguing against CAT adding a lot of value in most protocols :slight_smile:",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 76,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}