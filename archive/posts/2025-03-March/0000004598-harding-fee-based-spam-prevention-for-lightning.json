{
  "id": 4598,
  "name": "David A. Harding",
  "username": "harding",
  "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/925_2.png",
  "created_at": "2025-03-25T06:09:28.646Z",
  "cooked": "<p>Hi John,</p>\n<p>AFAICT, your solution does eliminate the immediate issue.  However, it\nseems to significantly increase link-layer latency, as described below.</p>\n<blockquote>\n<p>From the Bolt 02 spec [\u2026]</p>\n</blockquote>\n<p>I think we can simplify by ignoring <code>update_add_htlc</code> messages and\nassuming that the commitment transaction is symmetric.  In that version\nof the current protocol:</p>\n<ol>\n<li>\n<p>Alice sends Bob a new half-signed commitment transaction containing a\nnew HTLC.</p>\n</li>\n<li>\n<p>Bob replies with his half of the signature and his revocation secret\nfor the previous commitment transaction.</p>\n</li>\n<li>\n<p>Alice replies with her revocation secret for the previous commitment\ntransaction.</p>\n</li>\n</ol>\n<p>Besides simplification, phrasing it this way showcases one of the\nadvantages of the current commitment protocol: even though the full\nprocess requires 1.5 network round-trip time (RTT), Bob receives\neverything he needs in Step 1 to be able to safely able to forward the\nHTLC to the next hop after just 0.5 RTT.  So for an <em>n</em>-hop payment, the\nbest-case forwarding time can be said to be <code>n*0.5</code> RTT.</p>\n<blockquote>\n<p>In order to fix the bug you found, we need to change this to:</p>\n</blockquote>\n<p>Using the simplification described above, I think this is what you\u2019re\nproposing:</p>\n<ol>\n<li>\n<p>Alice sends Bob a new half-signed commitment transaction committing\nfunds from both of them to a burn output.</p>\n</li>\n<li>\n<p>Bob replies his half of the signature for Step 1 and his revocation\nsecret for the previous commitment transaction.</p>\n</li>\n<li>\n<p>Alice sends Bob her revocation secret for the previous commitment\ntransaction and a new half-signed commitment transaction containing\nthe new HTLC.</p>\n</li>\n<li>\n<p>Bob replies with his half of the signature for Step 3 and his\nrevocation for the commitment transaction created in Step 1.</p>\n</li>\n<li>\n<p>Alice replies with her revocation secret for the transaction created\nin Step 1.</p>\n</li>\n</ol>\n<p>We immediately see that the proposed protocol increases full resolution\ntime to 2.5 RTT.  That\u2019s not concerning AFAIK, but what\u2019s notable is\nthat the critical path increases to 1.5 RTT.  That\u2019s potentially a 3x\nslow down in LN payments as seen by the ultimate receiver.  Proof of\npayment in both the current and proposed protocols takes an additional\n<code>n*0.5</code> RTT, so the spender-observed slow down is 2x.</p>\n<p>More generally, although I still feel uneasy about MAD-based OPR-style\nprotocols, I do clearly see the benefits of hold fees.\nAlthough described here for spam mitigation (something for which other\nsolutions might work roughly as well), I think there could additionally\nbe significant demand for <a href=\"https://bitcoinops.org/en/topics/hold-invoices/\">not-immediately-settled\npayments</a>\u2014but that\u2019s\nsomething we can only encourage if forwarding nodes are fairly\ncompensated for the delay.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2025-03-25T06:09:28.646Z",
  "reply_count": 0,
  "reply_to_post_number": 3,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 1.6,
  "yours": false,
  "topic_id": 1524,
  "topic_slug": "fee-based-spam-prevention-for-lightning",
  "topic_title": "Fee-Based Spam Prevention For Lightning",
  "topic_html_title": "Fee-Based Spam Prevention For Lightning",
  "category_id": 7,
  "display_username": "David A. Harding",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "JohnLaw",
    "name": null,
    "avatar_template": "/letter_avatar_proxy/v4/letter/j/58956e/{size}.png"
  },
  "bookmarked": false,
  "raw": "Hi John,\n\nAFAICT, your solution does eliminate the immediate issue.  However, it\nseems to significantly increase link-layer latency, as described below.\n\n> From the Bolt 02 spec [...]\n\nI think we can simplify by ignoring `update_add_htlc` messages and\nassuming that the commitment transaction is symmetric.  In that version\nof the current protocol:\n\n1. Alice sends Bob a new half-signed commitment transaction containing a\n   new HTLC.\n\n2. Bob replies with his half of the signature and his revocation secret\n   for the previous commitment transaction.\n\n3. Alice replies with her revocation secret for the previous commitment\n   transaction.\n\nBesides simplification, phrasing it this way showcases one of the\nadvantages of the current commitment protocol: even though the full\nprocess requires 1.5 network round-trip time (RTT), Bob receives\neverything he needs in Step 1 to be able to safely able to forward the\nHTLC to the next hop after just 0.5 RTT.  So for an _n_-hop payment, the\nbest-case forwarding time can be said to be `n*0.5` RTT.\n\n> In order to fix the bug you found, we need to change this to:\n\nUsing the simplification described above, I think this is what you're\nproposing:\n\n1. Alice sends Bob a new half-signed commitment transaction committing\nfunds from both of them to a burn output.\n\n2. Bob replies his half of the signature for Step 1 and his revocation\nsecret for the previous commitment transaction.\n\n3. Alice sends Bob her revocation secret for the previous commitment\ntransaction and a new half-signed commitment transaction containing\nthe new HTLC.\n\n4. Bob replies with his half of the signature for Step 3 and his\nrevocation for the commitment transaction created in Step 1.\n\n5. Alice replies with her revocation secret for the transaction created\nin Step 1.\n\nWe immediately see that the proposed protocol increases full resolution\ntime to 2.5 RTT.  That's not concerning AFAIK, but what's notable is\nthat the critical path increases to 1.5 RTT.  That's potentially a 3x\nslow down in LN payments as seen by the ultimate receiver.  Proof of\npayment in both the current and proposed protocols takes an additional\n`n*0.5` RTT, so the spender-observed slow down is 2x.\n\nMore generally, although I still feel uneasy about MAD-based OPR-style\nprotocols, I do clearly see the benefits of hold fees.\nAlthough described here for spam mitigation (something for which other\nsolutions might work roughly as well), I think there could additionally\nbe significant demand for [not-immediately-settled\npayments](https://bitcoinops.org/en/topics/hold-invoices/)---but that's\nsomething we can only encourage if forwarding nodes are fairly\ncompensated for the delay.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 6,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}