{
  "id": 4637,
  "name": "Garlo Nicon",
  "username": "garlonicon",
  "avatar_template": "/letter_avatar_proxy/v4/letter/g/278dde/{size}.png",
  "created_at": "2025-03-27T05:19:09.309Z",
  "cooked": "<blockquote>\n<p>Just to clarify, you\u2019re talking about tweaking signatures in the input(s), correct?</p>\n</blockquote>\n<p>You can tweak things in two places: in your output, or in your input. I think it is better to tweak inputs, because changing your output will change your address, which may confuse some users. And it is harder to handle commitments in outputs, because you have to always carry your commitment in your output descriptor, to properly derive your address.</p>\n<blockquote>\n<p>My understanding is that a P2TR UTXO is the only type of UTXO where a commitment can be made in the output script.</p>\n</blockquote>\n<p>No, you can commit data to any public key, no matter where it is located, and in which address type it is wrapped. No matter if you pick Taproot or not, you should not push your committed data on-chain now, because it is not enforced by the current consensus (just like you should not push witness data on-chain before 2017).</p>\n<blockquote>\n<p>for backing up outputs created in the same transaction, or outputs that exist elsewhere.</p>\n</blockquote>\n<p>First, the whole way of committing to any data should be standardized. And then, we can decide, how to interpret committed data, and how they should be revealed (and should they be stripped before sending to non-upgraded nodes, like we handle witness data).</p>\n<p>Today, if you encounter OP_CHECKSIG anywhere, you can see any valid signature, and then it is accepted. In the new consensus, when it will be possible to go from public to private key, not all signatures will be accepted. You will need a regular signature, as it is today, and some commitment to prove, that you are the true owner, and not someone, who only recovered the private key.</p>\n<p>Which means, that after a future soft-fork, you will be able to move P2PK in the same way as today, but additional commitment will be required, and attached in a similar way, like witness is attached today. And then, non-upgraded nodes will just see everything in the current format, but upgraded ones will accept a new format, and a valid commitment data for each OP_CHECKSIG call.</p>\n<p>Which also means, that old address types would not be \u201cburned\u201d, like \u201cremoved from the UTXO set\u201d. Instead, they would be just \u201ctrapped\u201d, so you would need more conditions to move them (signature + commitment). And decades later, commitments may also become unsafe, so we will upgrade into (signature + commitment + something). And so on, and so forth.</p>\n<p>And I guess hash functions can be upgraded in a similar way: if SHA-256 will ever be broken, then the new hash function should produce identical hashes for all old data, but new 256-bit values for some broken edge cases, like it is done today with hardened SHA-1.</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2025-03-27T05:19:09.309Z",
  "reply_count": 0,
  "reply_to_post_number": 5,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 1.6,
  "yours": false,
  "topic_id": 1537,
  "topic_slug": "is-there-a-social-approach-to-the-quantum-problem",
  "topic_title": "Is there a social approach to the quantum problem?",
  "topic_html_title": "Is there a social approach to the quantum problem?",
  "category_id": 5,
  "display_username": "Garlo Nicon",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "josh",
    "name": "",
    "avatar_template": "/user_avatar/delvingbitcoin.org/josh/{size}/95_2.png"
  },
  "bookmarked": false,
  "raw": "> Just to clarify, you\u2019re talking about tweaking signatures in the input(s), correct?\n\nYou can tweak things in two places: in your output, or in your input. I think it is better to tweak inputs, because changing your output will change your address, which may confuse some users. And it is harder to handle commitments in outputs, because you have to always carry your commitment in your output descriptor, to properly derive your address.\n\n> My understanding is that a P2TR UTXO is the only type of UTXO where a commitment can be made in the output script.\n\nNo, you can commit data to any public key, no matter where it is located, and in which address type it is wrapped. No matter if you pick Taproot or not, you should not push your committed data on-chain now, because it is not enforced by the current consensus (just like you should not push witness data on-chain before 2017).\n\n> for backing up outputs created in the same transaction, or outputs that exist elsewhere.\n\nFirst, the whole way of committing to any data should be standardized. And then, we can decide, how to interpret committed data, and how they should be revealed (and should they be stripped before sending to non-upgraded nodes, like we handle witness data).\n\nToday, if you encounter OP_CHECKSIG anywhere, you can see any valid signature, and then it is accepted. In the new consensus, when it will be possible to go from public to private key, not all signatures will be accepted. You will need a regular signature, as it is today, and some commitment to prove, that you are the true owner, and not someone, who only recovered the private key.\n\nWhich means, that after a future soft-fork, you will be able to move P2PK in the same way as today, but additional commitment will be required, and attached in a similar way, like witness is attached today. And then, non-upgraded nodes will just see everything in the current format, but upgraded ones will accept a new format, and a valid commitment data for each OP_CHECKSIG call.\n\nWhich also means, that old address types would not be \"burned\", like \"removed from the UTXO set\". Instead, they would be just \"trapped\", so you would need more conditions to move them (signature + commitment). And decades later, commitments may also become unsafe, so we will upgrade into (signature + commitment + something). And so on, and so forth.\n\nAnd I guess hash functions can be upgraded in a similar way: if SHA-256 will ever be broken, then the new hash function should produce identical hashes for all old data, but new 256-bit values for some broken edge cases, like it is done today with hardened SHA-1.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 372,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}