{
  "id": 4582,
  "name": "Antoine Riard",
  "username": "ariard",
  "avatar_template": "/letter_avatar_proxy/v4/letter/a/c67d28/{size}.png",
  "created_at": "2025-03-21T00:12:17.671Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"instagibbs\" data-post=\"53\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/instagibbs/48/28_2.png\" class=\"avatar\"> instagibbs:</div>\n<blockquote>\n<p>I believe for the very understandable reason that it was prior to the taproot BIP being written.</p>\n</blockquote>\n</aside>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"55\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/925_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>I believe the original idea was indeed developed before publication of the taproot and tapscript BIPs, but drafts of those BIPs were <a href=\"https://gnusha.org/pi/bitcoindev/CAPg+sBg6Gg8b7hPogC==fehY3ZTHHpQReqym2fb4XXWFpMM-pQ@mail.gmail.com/\">published</a> about two weeks before <a href=\"https://mailing-list.bitcoindevs.xyz/bitcoindev/CAD5xwhgHyR5qdd09ikvA_vgepj4o+Aqb0JA_T6FuqX56ZNe1RQ@mail.gmail.com/\">OP_COSHV</a>, the predecessor for CTV. Versions of both the <a href=\"https://github.com/JeremyRubin/bips-archive/blob/87ae732da28346515be9049ea2d2b548f81812e8/bip-coshv.mediawiki#deployment\">COSHV</a> and <a href=\"https://github.com/JeremyRubin/bips-archive/blob/e2b34bd59986bd2b173a89ac969b4728170fa8fa/bip-secure-the-bag.mediawiki#deployment\">STB</a> BIPs linked to the draft Tapscript BIP and depended on it making <code>OP_RESERVED1</code> (0x89) opcode into an <code>OP_SUCCESSx</code> in tapscript.</p>\n</blockquote>\n</aside>\n<p>I always thought the original author of BIP119  (<a class=\"mention\" href=\"/u/jeremyrubin\">@JeremyRubin</a>) had or did a version on top of Taproot. But didn\u2019t read the BIP recently.</p>\n<p>Anyway, try a quick-didn\u2019t-check-it-compiles-because-im-too-lazy version of OP_CHECKTEMPLATEVERIFY on top of bitcoin-inquisition 28.x (cf. <a href=\"https://github.com/ariard/bitcoin/commit/f8820e583a3d0d819955e2177ead95789a6317f1\">the full branch</a>).</p>\n<pre><code class=\"lang-auto\">case OP_CTV:\n{\n    if (flags &amp; SCRIPT_VERIFY_DISCOURAGE_CHECK_TEMPLATE_VERIFY_HASH) {\n        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_CTV);\n    }\n\n    // if flags not enabled; treat as a NOP4\n    if (!(flags &amp; SCRIPT_VERIFY_OP_CTV)) {\n        break;\n    }\n\n    if (stack.size() &lt; 1) {\n        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n    }\n\n    // If the argument was not 32 bytes, treat as OP_NOP4:\n    switch (stack.back().size()) {\n        case 32:\n        {\n            const Span&lt;const unsigned char&gt; hash{stack.back()};\n            if (!checker.CheckDefaultCheckTemplateVerifyHash(hash)) {\n                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n            }\n            break;\n        }\n        default:\n            // future upgrade can add semantics for this opcode with different length args\n            // so discourage use when applicable\n            if (flags &amp; SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_CHECK_TEMPLATE_VERIFY_HASH) {\n                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_TEMPLATE);\n            }\n    }\n}\nbreak;\n</code></pre>\n<p>I think other upgradable paths could be tested for CTV, e.g upgradable tapscript version, to something that is not <em>0xC0</em> as a leaf head byte.</p>\n<aside class=\"quote no-group\" data-username=\"moonsettler\" data-post=\"54\" data-topic=\"1509\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/moonsettler/48/38_2.png\" class=\"avatar\"> moonsettler:</div>\n<blockquote>\n<p>Also bare CTV seems pretty useful and economic for certain cases. Has no \u201caddress\u201d to send to by accident from wallets which could result in burned funds.</p>\n</blockquote>\n</aside>\n<p>This point deserves better discussions, as I think it\u2019s the opposite. Due to the <em>immutability</em> of any chain of transactions generated with CTV (i.e with a sig-based escape path), the whole chain of transaction should be verified by any recipient (e.g verify that intermediary tx in a congestion control tree is not nLocktime=&lt;year_2109&gt; i.e practically <em>freezing</em> your funds). It\u2019s more likely that good practice of using CTV should come with <em>enhanced</em> \u201caddress\u201d carrying enough info to any recipient to verify the semantic of the chain of transaction, which is in itself a use-case specific thing.</p>\n<aside class=\"quote no-group\" data-username=\"instagibbs\" data-post=\"56\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/instagibbs/48/28_2.png\" class=\"avatar\"> instagibbs:</div>\n<blockquote>\n<p>there\u2019s not much to be done with a \u201cpush to stack\u201d variant except equality checks.</p>\n</blockquote>\n</aside>\n<p>So if you can do equality checks on a template and one can pre-compute the result of equality checks on an outpoint (txid:output_index) and pre-commit them in a <em>redeemScript</em>, it\u2019s already an interesting primitive to do adversarial <a href=\"https://blog.bitmex.com/txwithhold-smart-contracts/\">tx-withholding</a>. However, I don\u2019t think this is still a <em>non-collaborative</em> utxo oracle, as the templated tx would have been to be built with a valid witness for the probed utxo. So somehow there is an opt-in of the owner of the probed utxo for the spend to be integated in the CTV template. But I\u2019m not sure.</p>",
  "post_number": 57,
  "post_type": 1,
  "updated_at": "2025-03-21T00:13:23.968Z",
  "reply_count": 0,
  "reply_to_post_number": 56,
  "quote_count": 4,
  "incoming_link_count": 1,
  "reads": 16,
  "readers_count": 15,
  "score": 8.2,
  "yours": false,
  "topic_id": 1509,
  "topic_slug": "ctv-csfs-can-we-reach-consensus-on-a-first-step-towards-covenants",
  "topic_title": "CTV+CSFS: Can we reach consensus on a first step towards covenants?",
  "topic_html_title": "CTV+CSFS: Can we reach consensus on a first step towards covenants?",
  "category_id": 7,
  "display_username": "Antoine Riard",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"instagibbs, post:53, topic:1509\"]\nI believe for the very understandable reason that it was prior to the taproot BIP being written.\n[/quote]\n[quote=\"harding, post:55, topic:1509\"]\nI believe the original idea was indeed developed before publication of the taproot and tapscript BIPs, but drafts of those BIPs were [published](https://gnusha.org/pi/bitcoindev/CAPg+sBg6Gg8b7hPogC==fehY3ZTHHpQReqym2fb4XXWFpMM-pQ@mail.gmail.com/) about two weeks before [OP_COSHV](https://mailing-list.bitcoindevs.xyz/bitcoindev/CAD5xwhgHyR5qdd09ikvA_vgepj4o+Aqb0JA_T6FuqX56ZNe1RQ@mail.gmail.com/), the predecessor for CTV. Versions of both the [COSHV](https://github.com/JeremyRubin/bips-archive/blob/87ae732da28346515be9049ea2d2b548f81812e8/bip-coshv.mediawiki#deployment) and [STB](https://github.com/JeremyRubin/bips-archive/blob/e2b34bd59986bd2b173a89ac969b4728170fa8fa/bip-secure-the-bag.mediawiki#deployment) BIPs linked to the draft Tapscript BIP and depended on it making `OP_RESERVED1` (0x89) opcode into an `OP_SUCCESSx` in tapscript.\n[/quote]\n\nI always thought the original author of BIP119  (@JeremyRubin) had or did a version on top of Taproot. But didn\u2019t read the BIP recently.\n\nAnyway, try a quick-didn\u2019t-check-it-compiles-because-im-too-lazy version of OP_CHECKTEMPLATEVERIFY on top of bitcoin-inquisition 28.x (cf. [the full branch](https://github.com/ariard/bitcoin/commit/f8820e583a3d0d819955e2177ead95789a6317f1)).\n\n```\ncase OP_CTV:\n{\n    if (flags & SCRIPT_VERIFY_DISCOURAGE_CHECK_TEMPLATE_VERIFY_HASH) {\n        return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_CTV);\n    }\n\n    // if flags not enabled; treat as a NOP4\n    if (!(flags & SCRIPT_VERIFY_OP_CTV)) {\n        break;\n    }\n\n    if (stack.size() < 1) {\n        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n    }\n\n    // If the argument was not 32 bytes, treat as OP_NOP4:\n    switch (stack.back().size()) {\n        case 32:\n        {\n            const Span<const unsigned char> hash{stack.back()};\n            if (!checker.CheckDefaultCheckTemplateVerifyHash(hash)) {\n                return set_error(serror, SCRIPT_ERR_TEMPLATE_MISMATCH);\n            }\n            break;\n        }\n        default:\n            // future upgrade can add semantics for this opcode with different length args\n            // so discourage use when applicable\n            if (flags & SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_CHECK_TEMPLATE_VERIFY_HASH) {\n                return set_error(serror, SCRIPT_ERR_DISCOURAGE_UPGRADABLE_TEMPLATE);\n            }\n    }\n}\nbreak;\n```\n\nI think other upgradable paths could be tested for CTV, e.g upgradable tapscript version, to something that is not *0xC0* as a leaf head byte.\n\n[quote=\"moonsettler, post:54, topic:1509, full:true\"]\nAlso bare CTV seems pretty useful and economic for certain cases. Has no \u201caddress\u201d to send to by accident from wallets which could result in burned funds.\n[/quote]\n\nThis point deserves better discussions, as I think it\u2019s the opposite. Due to the *immutability* of any chain of transactions generated with CTV (i.e with a sig-based escape path), the whole chain of transaction should be verified by any recipient (e.g verify that intermediary tx in a congestion control tree is not nLocktime=<year_2109> i.e practically *freezing* your funds). It\u2019s more likely that good practice of using CTV should come with *enhanced* \u201caddress\u201d carrying enough info to any recipient to verify the semantic of the chain of transaction, which is in itself a use-case specific thing.\n\n[quote=\"instagibbs, post:56, topic:1509\"]\nthere\u2019s not much to be done with a \u201cpush to stack\u201d variant except equality checks.\n[/quote]\n\nSo if you can do equality checks on a template and one can pre-compute the result of equality checks on an outpoint (txid:output_index) and pre-commit them in a *redeemScript*, it\u2019s already an interesting primitive to do adversarial [tx-withholding](https://blog.bitmex.com/txwithhold-smart-contracts/). However, I don\u2019t think this is still a *non-collaborative* utxo oracle, as the templated tx would have been to be built with a valid witness for the probed utxo. So somehow there is an opt-in of the owner of the probed utxo for the spend to be integated in the CTV template. But I\u2019m not sure.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 5,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}