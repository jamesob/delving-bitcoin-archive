{
  "id": 4596,
  "name": "0xB10C",
  "username": "0xB10C",
  "avatar_template": "/user_avatar/delvingbitcoin.org/0xb10c/{size}/15_2.png",
  "created_at": "2025-03-24T19:20:26.621Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"0xB10C\" data-post=\"21\" data-topic=\"1052\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/0xb10c/48/15_2.png\" class=\"avatar\"> 0xB10C:</div>\n<blockquote>\n<p>Also, I\u2019ve changed one of my nodes to run with <code>blockreconstructionextratxn=10000</code> and updated two nodes to a <code>master</code> that includes <a href=\"https://github.com/bitcoin/bitcoin/pull/31397\">p2p: track and use all potential peers for orphan resolution #31397</a>. Probably need to wait until the mempool fills up again to see the effects of this.</p>\n</blockquote>\n</aside>\n<ul>\n<li>I\u2019ve changed node <code>alice</code> to run with <code>blockreconstructionextratxn=10000</code> early February. This had a noticeable effect the following days with slightly higher scores starting 2025-02-06. During the increased mempool activity between 2025-02-21 and 2025-03-06 it performed significantly better than my other nodes.</li>\n<li>Node <code>charlie</code> and node <code>erin</code> were switched to a branch that includes <a href=\"https://github.com/bitcoin/bitcoin/pull/31397\">p2p: track and use all potential peers for orphan resolution #31397</a> at the same time in early February. I don\u2019t see any immediate improvement for these two nodes.</li>\n<li>Node <code>ian</code> was running Bitcoin Core <code>v26.1</code> until I switched all nodes to run <code>v29.0rc1</code> release candidate. <code>ian</code> clearly performed worse than the other nodes before the update, which is expected as e.g. <code>mempoolfullrbf</code> wasn\u2019t default in <code>v26.1</code>.</li>\n<li>Node <code>mike</code> doesn\u2019t allow inbound connections (while the other nodes do and usually have full inbound slots). This is noticeable in the reconstruction performance. Only having eight peers that inform <code>mike</code> about transactions is probably likely worse than having close to 100 peers that inform you about new transactions.</li>\n</ul>\n<p>The stats from <code>alice</code>, <code>charlie</code>, and <code>erin</code> could indicate that orphans aren\u2019t the problem, but conflicts, replacements, and policy invalid transactions (i.e. extra pool txns) cause low performance during high mempool activity. Although, I\u2019m not sure if these three moths of data are enough to be certain yet.</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/2X/3/3c766504cb6c58ed81cb642bdd6cc45447c3a01e.png\" data-download-href=\"https://delvingbitcoin.org/uploads/default/3c766504cb6c58ed81cb642bdd6cc45447c3a01e\" title=\"image\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/2X/3/3c766504cb6c58ed81cb642bdd6cc45447c3a01e_2_366x500.png\" alt=\"image\" data-base62-sha1=\"8CSj419oYeckv0IIiXCsKbPbnIy\" width=\"366\" height=\"500\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/2X/3/3c766504cb6c58ed81cb642bdd6cc45447c3a01e_2_366x500.png, https://delvingbitcoin.org/uploads/default/optimized/2X/3/3c766504cb6c58ed81cb642bdd6cc45447c3a01e_2_549x750.png 1.5x, https://delvingbitcoin.org/uploads/default/optimized/2X/3/3c766504cb6c58ed81cb642bdd6cc45447c3a01e_2_732x1000.png 2x\" data-dominant-color=\"89BC82\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">983\u00d71341 281 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<aside class=\"quote no-group quote-modified\" data-username=\"0xB10C\" data-post=\"21\" data-topic=\"1052\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/0xb10c/48/15_2.png\" class=\"avatar\"> 0xB10C:</div>\n<blockquote>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"18\" data-topic=\"1052\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>One thing that could be worth looking into is doing a better job of populating prefilledtxns \u2013 ie, \u201cI\u2019m pretty sure my peers don\u2019t know about these txs in the block, so I\u2019ll send them straight away\u201d.</p>\n</blockquote>\n</aside>\n<p>I\u2019ve started recording the contents of inbound and outbound <code>getblocktxn</code> messages a week ago. This should allow for some insights into \u201care peers often missing the same transactions?\u201d and \u201ccan we pre-fill the transactions we had to request our self?\u201d. I haven\u2019t taken a closer look at the data yet.</p>\n</blockquote>\n</aside>\n<p>I\u2019ve started to look at the data I\u2019ve been recording. It seems that many of my peers I announced a compact block to end up requesting very different sets of transactions (and usually larger sets) than I request from my peers. I assume many of them might be non-listening nodes like <code>mike</code> or run with a non-default configuration. This needs more work, but I hope to post more stats on requested transactions here at some point.</p>\n<p>I\u2019ve also noticed that my listening nodes running with the default configuration often independently request similar sets of transactions. This seems promising in regards to predictably prefilling transactions in our compact block announcements. My assumption would be that if we prefill:</p>\n<ul>\n<li>transactions we had to request</li>\n<li>transactions we took from our extra pool</li>\n<li>and prefilled transactions we didn\u2019t have in our mempool (i.e. prefilled txns that were announced to use and ended up being useful)</li>\n</ul>\n<p>we can improve the propagation time among nodes that accept inbound connections and use a \u201cBitcoin Core\u201d default policy. This in turn should improve block propagation time of the complete network as now more nodes know about the block earlier. Additionally, useful prefilled transactions don\u2019t end up wasting bandwidth, only transactions that a peer already knew about would waste bandwidth. These improvements would probably be most noticeable during high mempool activity: the (main) goal wouldn\u2019t be to bring the days with 93% (of reconstructions not needing to request a transaction) to 98% but rather the days with 45% to something like 90% for well-connected nodes.</p>\n<p>Since Bitcoin Core only high-bandwidth/fast announces compact blocks to peers that specifically requested it from us (because we quickly gave them new blocks in the past), non-listening nodes that are badly connected won\u2019t start sending wasteful announcements with many prefilled, well-known transactions to their peers.</p>\n<p>I\u2019ve started implementing this in <a href=\"https://github.com/0xB10C/bitcoin/commits/2025-03-prefill-compactblocks/\">2025-03-prefill-compactblocks</a> but its still work-in-progress:</p>\n<ul>\n<li>limit the prefill amount to something like 10kB worth of transactions as per <a href=\"https://github.com/bitcoin/bips/blob/02ad0e01c2a9189124e05a52afe97ef90a3b7f1f/bip-0152.mediawiki#implementation-notes\">BIP152 implementation note #5</a>. I think this is useful to avoid wasting too much bandwidth if a node does a high-bandwidth announcement but, for some reason, prefills a lot of well-known transactions in the announcement</li>\n<li><code>cmpctblock</code> debug logging on wasted bandwidth: log the number of bytes of transactions we already knew about when receiving a prefilled compact block. This can be tracked/monitored to determine if were wasting too much bandwidth by prefilling</li>\n<li>since the positive effect on the network is only measurable with a wide(r) deployment of the prefilling patch, it\u2019s probably worthwhile to do some Warnet simulations on this and test the improvement under different scenarios.</li>\n</ul>",
  "post_number": 24,
  "post_type": 1,
  "updated_at": "2025-03-24T19:26:58.876Z",
  "reply_count": 0,
  "reply_to_post_number": 21,
  "quote_count": 2,
  "incoming_link_count": 1,
  "reads": 10,
  "readers_count": 9,
  "score": 21.8,
  "yours": false,
  "topic_id": 1052,
  "topic_slug": "stats-on-compact-block-reconstructions",
  "topic_title": "Stats on compact block reconstructions",
  "topic_html_title": "Stats on compact block reconstructions",
  "category_id": 7,
  "display_username": "0xB10C",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"0xB10C, post:21, topic:1052\"]\nAlso, I\u2019ve changed one of my nodes to run with `blockreconstructionextratxn=10000` and updated two nodes to a `master` that includes [p2p: track and use all potential peers for orphan resolution #31397](https://github.com/bitcoin/bitcoin/pull/31397). Probably need to wait until the mempool fills up again to see the effects of this.\n[/quote]\n\n- I've changed node `alice` to run with `blockreconstructionextratxn=10000` early February. This had a noticeable effect the following days with slightly higher scores starting 2025-02-06. During the increased mempool activity between 2025-02-21 and 2025-03-06 it performed significantly better than my other nodes.\n- Node `charlie` and node `erin` were switched to a branch that includes [p2p: track and use all potential peers for orphan resolution #31397](https://github.com/bitcoin/bitcoin/pull/31397) at the same time in early February. I don't see any immediate improvement for these two nodes.\n- Node `ian` was running Bitcoin Core `v26.1` until I switched all nodes to run `v29.0rc1` release candidate. `ian` clearly performed worse than the other nodes before the update, which is expected as e.g. `mempoolfullrbf` wasn't default in `v26.1`.\n- Node `mike` doesn't allow inbound connections (while the other nodes do and usually have full inbound slots). This is noticeable in the reconstruction performance. Only having eight peers that inform `mike` about transactions is probably likely worse than having close to 100 peers that inform you about new transactions.\n\nThe stats from `alice`, `charlie`, and `erin` could indicate that orphans aren't the problem, but conflicts, replacements, and policy invalid transactions (i.e. extra pool txns) cause low performance during high mempool activity. Although, I'm not sure if these three moths of data are enough to be certain yet.\n\n![image](upload://8CSj419oYeckv0IIiXCsKbPbnIy.png)\n\n[quote=\"0xB10C, post:21, topic:1052\"]\n[quote=\"ajtowns, post:18, topic:1052\"]\nOne thing that could be worth looking into is doing a better job of populating prefilledtxns \u2013 ie, \u201cI\u2019m pretty sure my peers don\u2019t know about these txs in the block, so I\u2019ll send them straight away\u201d.\n[/quote]\n\nI\u2019ve started recording the contents of inbound and outbound `getblocktxn` messages a week ago. This should allow for some insights into \u201care peers often missing the same transactions?\u201d and \u201ccan we pre-fill the transactions we had to request our self?\u201d. I haven\u2019t taken a closer look at the data yet.\n[/quote]\n\nI've started to look at the data I've been recording. It seems that many of my peers I announced a compact block to end up requesting very different sets of transactions (and usually larger sets) than I request from my peers. I assume many of them might be non-listening nodes like `mike` or run with a non-default configuration. This needs more work, but I hope to post more stats on requested transactions here at some point.\n\nI've also noticed that my listening nodes running with the default configuration often independently request similar sets of transactions. This seems promising in regards to predictably prefilling transactions in our compact block announcements. My assumption would be that if we prefill:\n- transactions we had to request\n- transactions we took from our extra pool\n- and prefilled transactions we didn't have in our mempool (i.e. prefilled txns that were announced to use and ended up being useful)\n\nwe can improve the propagation time among nodes that accept inbound connections and use a \"Bitcoin Core\" default policy. This in turn should improve block propagation time of the complete network as now more nodes know about the block earlier. Additionally, useful prefilled transactions don't end up wasting bandwidth, only transactions that a peer already knew about would waste bandwidth. These improvements would probably be most noticeable during high mempool activity: the (main) goal wouldn't be to bring the days with 93% (of reconstructions not needing to request a transaction) to 98% but rather the days with 45% to something like 90% for well-connected nodes. \n\nSince Bitcoin Core only high-bandwidth/fast announces compact blocks to peers that specifically requested it from us (because we quickly gave them new blocks in the past), non-listening nodes that are badly connected won't start sending wasteful announcements with many prefilled, well-known transactions to their peers.        \n\nI've started implementing this in [2025-03-prefill-compactblocks](https://github.com/0xB10C/bitcoin/commits/2025-03-prefill-compactblocks/) but its still work-in-progress:\n- limit the prefill amount to something like 10kB worth of transactions as per [BIP152 implementation note #5](https://github.com/bitcoin/bips/blob/02ad0e01c2a9189124e05a52afe97ef90a3b7f1f/bip-0152.mediawiki#implementation-notes). I think this is useful to avoid wasting too much bandwidth if a node does a high-bandwidth announcement but, for some reason, prefills a lot of well-known transactions in the announcement\n- `cmpctblock` debug logging on wasted bandwidth: log the number of bytes of transactions we already knew about when receiving a prefilled compact block. This can be tracked/monitored to determine if were wasting too much bandwidth by prefilling\n- since the positive effect on the network is only measurable with a wide(r) deployment of the prefilling patch, it's probably worthwhile to do some Warnet simulations on this and test the improvement under different scenarios.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 16,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}