{
  "id": 4423,
  "name": "David A. Harding",
  "username": "harding",
  "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/925_2.png",
  "created_at": "2025-03-07T02:58:07.596Z",
  "cooked": "<blockquote>\n<p>I don\u2019t think users interacting directly with the software should be\nprioritized over those interacting with the network in a different\nmanner.</p>\n</blockquote>\n<p>IMO, each contributor to Bitcoin Core should prefer prioritization of\ndevelopment that benefits the type of user that they most want to use\nBitcoin Core.</p>\n<p>I\u2019m not a Bitcoin Core contributor, but as a user of Bitcoin Core and\nauthor of Bitcoin documentation, the type of user that\u2019s most important\nto me are individuals who strongly desire preservation of Bitcoin\u2019s\ncurrent core principles, such as confiscation resistance, censorship\nresistance, and monetary supply consistency.  The security of <strong>my</strong>\nbitcoins, and <strong>my</strong> ability to spend them autonomously, depends on\nenough of those highly motivated individuals connecting their wallets to\ntheir own personal full nodes so that there\u2019s no question that the\ncurrent consensus rules will be enforced with 100% reliability.</p>\n<p>I can see how non-validating and partially validating users (\u201cweak\nvalidators\u201d) may benefit me in multiple ways, such as increasing the\neconomic reach of Bitcoin and potentially increasing the market value of\nthe currency.  But even universally accepted bitcoins at a high market\nprice are not what I want if weak validators become economically\npredominate and allow the third-parties who control the remote nodes\nthey use to accept changes to the protocol that allow theft, censorship,\nor siphoning of <strong>my</strong> value.</p>\n<blockquote>\n<p>Keeping the code for the wallet and GUI imposes significant costs on\nthe node project, which really cannot afford it right now.</p>\n</blockquote>\n<p>Why is that?  Nakamoto developed the initial wallet and GUI alongside\nthe node as a single individual with no funding (AFAIK).  Ten years ago,\nwhen only a handful of Bitcoin Core developers had funding, I created a\n<a href=\"https://web.archive.org/web/20150930013906/https://bitcoin.org/en/bitcoin-core/\">marketing\nwebsite</a>\nfor Bitcoin Core that highlighted a <a href=\"https://web.archive.org/web/20150930021614/https://bitcoin.org/en/bitcoin-core/features/user-interface\">wallet and\nGUI</a>\nthat were comparable to many other contemporary wallets (and better than\nany in at least a few ways).  Today, there\u2019s more highly active Bitcoin\nCore developers than ever before and every one of them that wants\nfunding has it.  There are also dozens (hundreds?) of other projects\nwith GUI-based wallets, almost none of them with a significant fraction\nof the funding that\u2019s overall provided to Bitcoin Core contributors.</p>\n<p>It looks to me like Bitcoin Core development is well funded, at least\ncompared to historic norms, and that developing a wallet and GUI isn\u2019t\nan extraordinary undertaking.  Why do you think the project in such dire\nstraits that it cannot support continued development of its wallet and\nGUI components?</p>\n<blockquote>\n<p>If Bitcoin Core releases buggy software, it will likely impact Phoenix\nusers.</p>\n</blockquote>\n<p>I agree, but it\u2019s also the case that if everyone with a wallet connects\nto Bitcoin Core through a third party, even if just for a brief period\nof time, then those third parties will be able to arbitrarily change\nBitcoin\u2019s consensus rules.  Ultimately, does it matter to Phoenix users\nwhether their bitcoins were stolen due to a bug in Bitcoin Core or\nbecause not enough individuals connected their wallets to Bitcoin Core?</p>\n<blockquote>\n<p>It\u2019s also completely misrepresenting the situation: the way you\npresent it sounds like Core contributors would reject adding any new\ninterface regardless on the merit of having the interface at all.</p>\n</blockquote>\n<p>In the past decade, the main Bitcoin Core project has added almost no\ninterfaces that downstream wallets would find useful and has removed\nseveral interfaces that were used by millions of wallet users.  In each\ncase, the rejection or removal was made with a reasonable explanation,\nbut the net effect has been that I do not expect Bitcoin Core to provide\ninterfaces useful for connected wallets.  I think many downstream wallet\ndevs may share my view.</p>\n<p>If it\u2019s not a priority to change that in the near future after years of\nfailing to provide widely used interfaces, then I think it\u2019s fair for me\nto argue against a claim that <a href=\"https://en.wikipedia.org/wiki/The_purpose_of_a_system_is_what_it_does\">the purpose of the system is what it\nconstantly fails to\ndo</a>.</p>\n<blockquote>\n<p>Could you point to some examples? The ones you give strike me as bad\nideas that fortunately did not make it in (spk index, SSL for remote\nRPC access).</p>\n</blockquote>\n<p>Let\u2019s look at those examples in detail.  A scriptPubKey (spk) index has\nbeen proposed multiple times (AJ linked the [most recent\nattempt][bitcoin core <span class=\"hashtag-raw\">#14053</span>] from 2018) and represents a few hundred\nlines of code before tests.  It would allow wallets currently used by\nmillions of users to connect to those user\u2019s full nodes (with either\nsome small modification to the wallet software or by Bitcoin Core adding\nsome more code to support mature spk-requesting protocols).</p>\n<p>AFAIK, the main\n<a href=\"https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747648440\">argument</a>\nagainst it has been that \u201cit\u2019s a bad idea for any infrastructure to be\nbuilt all that relies on having fully-indexed blockchain data available\n(this also applies to txindex, but we can\u2019t just remove support\u2026).\u201d\nThat quote is from 2020, but I recall essentially the same argument\nbeing made years earlier.  I personally agree that relying on full spk\nindexing is not scalable in perpetuity and significantly increases the\ncost of operating a wallet for all users who chose this model due to the\ndisk space requirements.  But it seems worse to either prevent millions\nof users from privately validating using their own node or to require\nthem to install separate software in order to use an spk index anyway.</p>\n<p>SSL for remote RPC access was always problematic on multiple levels, but\ndespite that some wallets implemented support for it, indicating demand.\nAfter RPC-SSL support was\n<a href=\"https://github.com/bitcoin/bitcoin/blob/d6a92dd0ea42ec64f15b81843b4db62c7b186bdb/doc/release-notes.md#ssl-support-for-rpc-dropped\">removed</a>,\ndemand remained and some of those wallets instead\n<a href=\"https://x.com/hrdng/status/1053629086617223168\">recommended</a> users bind\nRPC to a their public IP to accept any incoming connections, which was\n<a href=\"https://bitcoinops.org/en/newsletters/2018/10/23/#over-1-100-listening-nodes-have-open-rpc-ports\">worse</a>.\nDespite this demonstrated demand from wallet users to remotely connect\nto their own personal node for RPC access, no secure interface in\nBitcoin Core for doing so has ever been provided.  The best that\u2019s been\noffered is a recommendation to use stunnel or an httpd reverse proxy,\nwhich is not something I expect everyday users to do.</p>\n<p>If you would like, I can cite at least a half-dozen other examples of\ninterfaces that would have allowed individual wallet users to validate\ntransactions against Bitcoin Core without requiring any additional\nsoftware or complicated set up.  In every case, the interface was either\nrejected, brainstormed but never fully developed, or (if it already\nexisted) removed or neutered.  As I wrote earlier, each occasion was\naccompanied by a reasonable explanation, but the net effect has been\nthat almost no wallets today can be connected to Bitcoin Core by a\ntypical user unless that user operates a third-party-maintained software\nstack (like the NodeBox mentioned by <a class=\"mention\" href=\"/u/ajtowns\">@ajtowns</a> above).</p>\n<p>You mentioned Sparrow wallet and Liana as examples of wallets people\nprefer to use to Bitcoin Core GUI, but I note that they both appear to\nuse a watch-only Bitcoin Core wallet in the background, similar to the\napproach pioneered by Electrum Personal Server (EPS) and advanced by\nBitcoin Wallet Tracker (bwt).  I take this as further evidence that the\nnode itself does not currently provide useful interfaces for personal\nfull validation.</p>\n<blockquote>\n<p>there is plenty of examples of new indexes and interfaces being added\nin recent years: on the top of my head block filters and coinstats for\ninstance.</p>\n</blockquote>\n<p>How does coinstats help people validate their wallet transactions with\ntheir personal full node?  My understanding is that the main advantage\nof coinstats is that it makes it easier to validate UTXO files for\nassumeutxo, which is something almost entirely done by devs and power\nusers.</p>\n<p>IIRC, adding support for compact block filters to Bitcoin Core was an\nuphill battle.  It took almost three years from when the <a href=\"https://github.com/bitcoin/bitcoin/pull/12254\">first\nPR</a> for it was opened\nuntil the final <a href=\"https://github.com/bitcoin/bitcoin/pull/19070\">main PR</a>\nwas merged.  By the time it was merged, one of its early and significant\ncontributors (Tamas Blummer) had died and the primary developer (Jim\nPosen) had retired from Bitcoin protocol development.</p>\n<p>I would be interested in any other examples you have of interfaces being\nadded to Bitcoin Core node in the past decade that are useful for\nexternal wallets to validate against a user\u2019s personal full node.\nWithout some much more positive examples, I continue to maintain that\nthe modern Bitcoin Core project is hostile to the introduction of the\ntypes of new interfaces that wallet authors want.</p>\n<blockquote>\n<p>I don\u2019t see how you could infer from my posts that i would argue for\npruning interfaces that would be consumed by wallets (or object to\nintroducing more if there is a good reason to).</p>\n</blockquote>\n<p>What the heck!  Just two paragraphs before you wrote this, you discussed\na pruned interface (RPC over SSL) and objections to adding an interface\n(an spk index).  In both cases you argued exactly the way you now say\nyou wouldn\u2019t argue!</p>\n<blockquote>\n<p>multiprocess will give them access to an enhanced interface to get\ninformation and signals from the node</p>\n</blockquote>\n<p>Is that a guarantee, or will we be back here in a year or two talking\nabout how it would simplify maintenance of the node to remove\nmultiprocess\u2019s privileged interface for wallets?  If no wallet today is\ncurrently using the new interface, except for Bitcoin Core Wallet, how\ndo we know it\u2019s actually a useful interface for other wallets?</p>\n<p>In conclusion, I\u2019m genuinely concerned that narrowing the scope of the\nBitcoin Core project will accelerate the longstanding trend of making it\nincreasingly difficult for individuals to validate their wallet\ntransactions with Bitcoin Core.  I don\u2019t understand why you think that\nscope reduction is necessary or useful.  It\u2019s also clear to me that you\nand I disagree about the utility of Bitcoin Core\u2019s external interfaces\nand the likelihood of those interfaces being maintained (or even\nimproved) if the project scope is narrowed.  Rather than prioritize the\nproduction of bug-free software, I think it would be great to see the\nproject prioritize getting (say) a million users to validate their\nwallet transactions with their own full nodes (hopefully along a path\nthat\u2019s still reasonably good at minimizing the number of bugs).</p>\n<p>Thank you for the opportunity to discuss this subject.</p>",
  "post_number": 19,
  "post_type": 1,
  "updated_at": "2025-03-07T02:58:07.596Z",
  "reply_count": 0,
  "reply_to_post_number": 18,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 62.0,
  "yours": false,
  "topic_id": 1470,
  "topic_slug": "antoine-poinsot-on-bitcoin-cores-priorities",
  "topic_title": "Antoine Poinsot on Bitcoin Core's Priorities",
  "topic_html_title": "Antoine Poinsot on Bitcoin Core&rsquo;s Priorities",
  "category_id": 8,
  "display_username": "David A. Harding",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "AntoineP",
    "name": "Antoine Poinsot",
    "avatar_template": "/user_avatar/delvingbitcoin.org/antoinep/{size}/483_2.png"
  },
  "bookmarked": false,
  "raw": "> I don\u2019t think users interacting directly with the software should be\n> prioritized over those interacting with the network in a different\n> manner.\n\nIMO, each contributor to Bitcoin Core should prefer prioritization of\ndevelopment that benefits the type of user that they most want to use\nBitcoin Core.\n\nI'm not a Bitcoin Core contributor, but as a user of Bitcoin Core and\nauthor of Bitcoin documentation, the type of user that's most important\nto me are individuals who strongly desire preservation of Bitcoin's\ncurrent core principles, such as confiscation resistance, censorship\nresistance, and monetary supply consistency.  The security of **my**\nbitcoins, and **my** ability to spend them autonomously, depends on\nenough of those highly motivated individuals connecting their wallets to\ntheir own personal full nodes so that there's no question that the\ncurrent consensus rules will be enforced with 100% reliability.\n\nI can see how non-validating and partially validating users (\"weak\nvalidators\") may benefit me in multiple ways, such as increasing the\neconomic reach of Bitcoin and potentially increasing the market value of\nthe currency.  But even universally accepted bitcoins at a high market\nprice are not what I want if weak validators become economically\npredominate and allow the third-parties who control the remote nodes\nthey use to accept changes to the protocol that allow theft, censorship,\nor siphoning of **my** value.\n\n> Keeping the code for the wallet and GUI imposes significant costs on\n> the node project, which really cannot afford it right now.\n\nWhy is that?  Nakamoto developed the initial wallet and GUI alongside\nthe node as a single individual with no funding (AFAIK).  Ten years ago,\nwhen only a handful of Bitcoin Core developers had funding, I created a\n[marketing\nwebsite](https://web.archive.org/web/20150930013906/https://bitcoin.org/en/bitcoin-core/)\nfor Bitcoin Core that highlighted a [wallet and\nGUI](https://web.archive.org/web/20150930021614/https://bitcoin.org/en/bitcoin-core/features/user-interface)\nthat were comparable to many other contemporary wallets (and better than\nany in at least a few ways).  Today, there's more highly active Bitcoin\nCore developers than ever before and every one of them that wants\nfunding has it.  There are also dozens (hundreds?) of other projects\nwith GUI-based wallets, almost none of them with a significant fraction\nof the funding that's overall provided to Bitcoin Core contributors.\n\nIt looks to me like Bitcoin Core development is well funded, at least\ncompared to historic norms, and that developing a wallet and GUI isn't\nan extraordinary undertaking.  Why do you think the project in such dire\nstraits that it cannot support continued development of its wallet and\nGUI components?\n\n> If Bitcoin Core releases buggy software, it will likely impact Phoenix\n> users.\n\nI agree, but it's also the case that if everyone with a wallet connects\nto Bitcoin Core through a third party, even if just for a brief period\nof time, then those third parties will be able to arbitrarily change\nBitcoin's consensus rules.  Ultimately, does it matter to Phoenix users\nwhether their bitcoins were stolen due to a bug in Bitcoin Core or\nbecause not enough individuals connected their wallets to Bitcoin Core?\n\n> It\u2019s also completely misrepresenting the situation: the way you\n> present it sounds like Core contributors would reject adding any new\n> interface regardless on the merit of having the interface at all.\n\nIn the past decade, the main Bitcoin Core project has added almost no\ninterfaces that downstream wallets would find useful and has removed\nseveral interfaces that were used by millions of wallet users.  In each\ncase, the rejection or removal was made with a reasonable explanation,\nbut the net effect has been that I do not expect Bitcoin Core to provide\ninterfaces useful for connected wallets.  I think many downstream wallet\ndevs may share my view.\n\nIf it's not a priority to change that in the near future after years of\nfailing to provide widely used interfaces, then I think it's fair for me\nto argue against a claim that [the purpose of the system is what it\nconstantly fails to\ndo](https://en.wikipedia.org/wiki/The_purpose_of_a_system_is_what_it_does).\n\n> Could you point to some examples? The ones you give strike me as bad\n> ideas that fortunately did not make it in (spk index, SSL for remote\n> RPC access).\n\nLet's look at those examples in detail.  A scriptPubKey (spk) index has\nbeen proposed multiple times (AJ linked the [most recent\nattempt][bitcoin core #14053] from 2018) and represents a few hundred\nlines of code before tests.  It would allow wallets currently used by\nmillions of users to connect to those user's full nodes (with either\nsome small modification to the wallet software or by Bitcoin Core adding\nsome more code to support mature spk-requesting protocols).  \n\nAFAIK, the main\n[argument](https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-747648440)\nagainst it has been that \"it's a bad idea for any infrastructure to be\nbuilt all that relies on having fully-indexed blockchain data available\n(this also applies to txindex, but we can't just remove support...).\"\nThat quote is from 2020, but I recall essentially the same argument\nbeing made years earlier.  I personally agree that relying on full spk\nindexing is not scalable in perpetuity and significantly increases the\ncost of operating a wallet for all users who chose this model due to the\ndisk space requirements.  But it seems worse to either prevent millions\nof users from privately validating using their own node or to require\nthem to install separate software in order to use an spk index anyway.\n\nSSL for remote RPC access was always problematic on multiple levels, but\ndespite that some wallets implemented support for it, indicating demand.\nAfter RPC-SSL support was\n[removed](https://github.com/bitcoin/bitcoin/blob/d6a92dd0ea42ec64f15b81843b4db62c7b186bdb/doc/release-notes.md#ssl-support-for-rpc-dropped),\ndemand remained and some of those wallets instead\n[recommended](https://x.com/hrdng/status/1053629086617223168) users bind\nRPC to a their public IP to accept any incoming connections, which was\n[worse](https://bitcoinops.org/en/newsletters/2018/10/23/#over-1-100-listening-nodes-have-open-rpc-ports).\nDespite this demonstrated demand from wallet users to remotely connect\nto their own personal node for RPC access, no secure interface in\nBitcoin Core for doing so has ever been provided.  The best that's been\noffered is a recommendation to use stunnel or an httpd reverse proxy,\nwhich is not something I expect everyday users to do.\n\nIf you would like, I can cite at least a half-dozen other examples of\ninterfaces that would have allowed individual wallet users to validate\ntransactions against Bitcoin Core without requiring any additional\nsoftware or complicated set up.  In every case, the interface was either\nrejected, brainstormed but never fully developed, or (if it already\nexisted) removed or neutered.  As I wrote earlier, each occasion was\naccompanied by a reasonable explanation, but the net effect has been\nthat almost no wallets today can be connected to Bitcoin Core by a\ntypical user unless that user operates a third-party-maintained software\nstack (like the NodeBox mentioned by @ajtowns above).\n\nYou mentioned Sparrow wallet and Liana as examples of wallets people\nprefer to use to Bitcoin Core GUI, but I note that they both appear to\nuse a watch-only Bitcoin Core wallet in the background, similar to the\napproach pioneered by Electrum Personal Server (EPS) and advanced by\nBitcoin Wallet Tracker (bwt).  I take this as further evidence that the\nnode itself does not currently provide useful interfaces for personal\nfull validation.\n\n> there is plenty of examples of new indexes and interfaces being added\n> in recent years: on the top of my head block filters and coinstats for\n> instance.\n\nHow does coinstats help people validate their wallet transactions with\ntheir personal full node?  My understanding is that the main advantage\nof coinstats is that it makes it easier to validate UTXO files for\nassumeutxo, which is something almost entirely done by devs and power\nusers.\n\nIIRC, adding support for compact block filters to Bitcoin Core was an\nuphill battle.  It took almost three years from when the [first\nPR](https://github.com/bitcoin/bitcoin/pull/12254) for it was opened\nuntil the final [main PR](https://github.com/bitcoin/bitcoin/pull/19070)\nwas merged.  By the time it was merged, one of its early and significant\ncontributors (Tamas Blummer) had died and the primary developer (Jim\nPosen) had retired from Bitcoin protocol development.\n\nI would be interested in any other examples you have of interfaces being\nadded to Bitcoin Core node in the past decade that are useful for\nexternal wallets to validate against a user's personal full node.\nWithout some much more positive examples, I continue to maintain that\nthe modern Bitcoin Core project is hostile to the introduction of the\ntypes of new interfaces that wallet authors want.\n\n> I don\u2019t see how you could infer from my posts that i would argue for\n> pruning interfaces that would be consumed by wallets (or object to\n> introducing more if there is a good reason to).\n\nWhat the heck!  Just two paragraphs before you wrote this, you discussed\na pruned interface (RPC over SSL) and objections to adding an interface\n(an spk index).  In both cases you argued exactly the way you now say\nyou wouldn't argue!  \n\n> multiprocess will give them access to an enhanced interface to get\n> information and signals from the node \n\nIs that a guarantee, or will we be back here in a year or two talking\nabout how it would simplify maintenance of the node to remove\nmultiprocess's privileged interface for wallets?  If no wallet today is\ncurrently using the new interface, except for Bitcoin Core Wallet, how\ndo we know it's actually a useful interface for other wallets?\n\nIn conclusion, I'm genuinely concerned that narrowing the scope of the\nBitcoin Core project will accelerate the longstanding trend of making it\nincreasingly difficult for individuals to validate their wallet\ntransactions with Bitcoin Core.  I don't understand why you think that\nscope reduction is necessary or useful.  It's also clear to me that you\nand I disagree about the utility of Bitcoin Core's external interfaces\nand the likelihood of those interfaces being maintained (or even\nimproved) if the project scope is narrowed.  Rather than prioritize the\nproduction of bug-free software, I think it would be great to see the\nproject prioritize getting (say) a million users to validate their\nwallet transactions with their own full nodes (hopefully along a path\nthat's still reasonably good at minimizing the number of bugs).\n\nThank you for the opportunity to discuss this subject.",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 6,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    },
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}