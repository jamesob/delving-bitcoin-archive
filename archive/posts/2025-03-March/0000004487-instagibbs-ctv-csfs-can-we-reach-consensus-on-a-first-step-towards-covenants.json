{
  "id": 4487,
  "name": "Gregory Sanders",
  "username": "instagibbs",
  "avatar_template": "/user_avatar/delvingbitcoin.org/instagibbs/{size}/28_2.png",
  "created_at": "2025-03-12T15:36:31.830Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"14\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>suspect TXHASH, CAT and CSFS would actually be a good combination here, as that would allow for a single signature to easily commit to both the tx and publication of some data while minimising wasted bytes and without needing to allow relay of random data in the annex.</p>\n</blockquote>\n</aside>\n<p>Yes, getting the tx hash you want on the stack, sticking it to whatever data you want published onto it, and signing it does the trick.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"14\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>(Doing an adaptor signature rather than forcing publication of data would be more efficient on-chain, but seems to still be hard to convert from a whiteboard spec to an actual implementation)</p>\n</blockquote>\n</aside>\n<p>This probably needs to be rewritten on a whiteboard because I don\u2019t remember it saving much and being much harder to reason about in multiparty settings vs 32 WU. I\u2019m guessing this is getting a bit off topic though <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"14\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>Not simple per se, but separates out the PTLC calculation for the signing of the tx as a whole (avoiding the need for adaptor signatures), and only needs to be calculated once, not once per channel update. I can\u2019t see a way to get the same result from just CSFS alone.</p>\n</blockquote>\n</aside>\n<p>One signature per PTLC also falls out of using APO/(CTV/TXHASH+CSFS), just to be clear. Not needing adaptor signatures (and binding it to a specific sighash?) is kinda cool.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"14\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>Otherwise, discarding BIP 119 entirely and starting from scratch with an equally expressive and more efficient simplified TXHASH BIP could be a good option.</p>\n</blockquote>\n</aside>\n<p>Current TXHASH BIP has \u201csepcial\u201d TxFieldSelector options, with 0-length argument being CTV mode, and 1-byte allowing BIP118 emulation. I think it\u2019s pretty straight forward to investigate that direction.</p>\n<aside class=\"quote no-group\" data-username=\"stevenroose\" data-post=\"17\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/stevenroose/48/1087_2.png\" class=\"avatar\"> stevenroose:</div>\n<blockquote>\n<p>This is specifically done so to enable \u201cbare CTXHV\u201d which is about a 70 witness bytes saving over p2tr and 30-something bytes over p2wsh.</p>\n</blockquote>\n</aside>\n<p>I\u2019ve found this use-case the least compelling part, especially at the cost of having to reason about legacy scripting. If it\u2019s really important one idea I\u2019d suggest it be included it as a new segwit output type as a separate feature that lives and dies in a proposal on its own merits. I ended up doing this with P2A for the exact same two reasons.</p>",
  "post_number": 18,
  "post_type": 1,
  "updated_at": "2025-03-12T15:36:31.830Z",
  "reply_count": 1,
  "reply_to_post_number": 14,
  "quote_count": 2,
  "incoming_link_count": 0,
  "reads": 26,
  "readers_count": 25,
  "score": 10.2,
  "yours": false,
  "topic_id": 1509,
  "topic_slug": "ctv-csfs-can-we-reach-consensus-on-a-first-step-towards-covenants",
  "topic_title": "CTV+CSFS: Can we reach consensus on a first step towards covenants?",
  "topic_html_title": "CTV+CSFS: Can we reach consensus on a first step towards covenants?",
  "category_id": 7,
  "display_username": "Gregory Sanders",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"ajtowns, post:14, topic:1509\"]\nsuspect TXHASH, CAT and CSFS would actually be a good combination here, as that would allow for a single signature to easily commit to both the tx and publication of some data while minimising wasted bytes and without needing to allow relay of random data in the annex.\n[/quote]\n\nYes, getting the tx hash you want on the stack, sticking it to whatever data you want published onto it, and signing it does the trick.\n\n[quote=\"ajtowns, post:14, topic:1509\"]\n(Doing an adaptor signature rather than forcing publication of data would be more efficient on-chain, but seems to still be hard to convert from a whiteboard spec to an actual implementation)\n[/quote]\n\nThis probably needs to be rewritten on a whiteboard because I don't remember it saving much and being much harder to reason about in multiparty settings vs 32 WU. I'm guessing this is getting a bit off topic though :) \n\n[quote=\"ajtowns, post:14, topic:1509\"]\nNot simple per se, but separates out the PTLC calculation for the signing of the tx as a whole (avoiding the need for adaptor signatures), and only needs to be calculated once, not once per channel update. I can\u2019t see a way to get the same result from just CSFS alone.\n[/quote]\n\nOne signature per PTLC also falls out of using APO/(CTV/TXHASH+CSFS), just to be clear. Not needing adaptor signatures (and binding it to a specific sighash?) is kinda cool.\n\n[quote=\"ajtowns, post:14, topic:1509\"]\nOtherwise, discarding BIP 119 entirely and starting from scratch with an equally expressive and more efficient simplified TXHASH BIP could be a good option.\n[/quote]\n\nCurrent TXHASH BIP has \"sepcial\" TxFieldSelector options, with 0-length argument being CTV mode, and 1-byte allowing BIP118 emulation. I think it's pretty straight forward to investigate that direction.\n\n[quote=\"stevenroose, post:17, topic:1509\"]\nThis is specifically done so to enable \u201cbare CTXHV\u201d which is about a 70 witness bytes saving over p2tr and 30-something bytes over p2wsh.\n[/quote]\n\nI've found this use-case the least compelling part, especially at the cost of having to reason about legacy scripting. If it's really important one idea I'd suggest it be included it as a new segwit output type as a separate feature that lives and dies in a proposal on its own merits. I ended up doing this with P2A for the exact same two reasons.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 31,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "-1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}