{
  "id": 4510,
  "name": "Abubakar Sadiq Ismail",
  "username": "ismaelsadeeq",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ismaelsadeeq/{size}/151_2.png",
  "created_at": "2025-03-13T10:57:18.218Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"morehouse\" data-post=\"1\" data-topic=\"1512\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/df705f/48.png\" class=\"avatar\"> morehouse:</div>\n<blockquote>\n<p>By default, a linear fee function is used which starts at a low fee (determined by the minimum relay fee rate or an external estimator) and ends with the total budget being allocated to fees when the deadline is one block away. The initial batched transaction is published and a \u201cfee bumper\u201d is assigned to monitor confirmation status in the background. For each block the transaction remains unconfirmed, the fee bumper broadcasts a new transaction with a higher fee rate determined by the fee function.</p>\n</blockquote>\n</aside>\n<blockquote>\n<p>This fee estimator is called using the deadline as the conf target</p>\n</blockquote>\n<p>It seems that nodes are calling the long-term fee estimator (<code>conf_target &gt; 2</code>) while expecting the transaction to confirm as soon as possible.</p>\n<p>When you call <code>estimateSmartFee</code> with a confirmation target of <code>n</code>, you should not expect the transaction to confirm in the next block but rather within <code>n</code> blocks.</p>\n<p>However, in this case, the transaction is time-sensitive, and you strictly want it to confirm before <code>n</code> blocks have elapsed.</p>\n<p>Calling <code>estimateSmartFee</code> with <code>n</code>, and expecting it to confirm ASAP is not not ideal, and would likely not confirm ASAP.\nInstead, they should call <code>estimateSmartFee</code> with a <code>conf_target</code> of <code>1</code>. If the transaction does not confirm within the next 1\u20132 blocks, they can then call the fee function to determine the fee rate they are willing to pay at that target based on the available budget (curve).</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"morehouse\" data-post=\"1\" data-topic=\"1512\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/df705f/48.png\" class=\"avatar\"> morehouse:</div>\n<blockquote>\n<p><strong>Problems</strong></p>\n<blockquote>\n<p>While external fee rate estimators can be helpful, they\u2019re not perfect. And relying on them too much can lead to missed deadlines when unusual things are happening in the mempool or with miners (e.g., increasing mempool congestion, pinning, replacement cycling, miner censorship).</p>\n</blockquote>\n</blockquote>\n</aside>\n<p>See the API proposal for Bitcoin Core\u2019s improved fee estimator response, which provides the state of the mempool in the past with respect to miner\u2019s mempool. This information could help clients make more informed decisions: <a href=\"https://github.com/bitcoin/bitcoin/issues/30392#issuecomment-2717491587\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Fee Estimation via Fee rate Forecasters tracking issue \u00b7 Issue #30392 \u00b7 bitcoin/bitcoin \u00b7 GitHub</a></p>\n<p>cc <a class=\"mention\" href=\"/u/clarashk\">@ClaraShk</a></p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2025-03-13T10:58:51.690Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 4,
  "reads": 17,
  "readers_count": 16,
  "score": 28.4,
  "yours": false,
  "topic_id": 1512,
  "topic_slug": "lnds-deadline-aware-budget-sweeper",
  "topic_title": "LND's Deadline-Aware Budget Sweeper",
  "topic_html_title": "LND&rsquo;s Deadline-Aware Budget Sweeper",
  "category_id": 8,
  "display_username": "Abubakar Sadiq Ismail",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"morehouse, post:1, topic:1512\"]\nBy default, a linear fee function is used which starts at a low fee (determined by the minimum relay fee rate or an external estimator) and ends with the total budget being allocated to fees when the deadline is one block away. The initial batched transaction is published and a \u201cfee bumper\u201d is assigned to monitor confirmation status in the background. For each block the transaction remains unconfirmed, the fee bumper broadcasts a new transaction with a higher fee rate determined by the fee function.\n[/quote]\n\n\n> This fee estimator is called using the deadline as the conf target\n\nIt seems that nodes are calling the long-term fee estimator (`conf_target > 2`) while expecting the transaction to confirm as soon as possible.\n\nWhen you call `estimateSmartFee` with a confirmation target of `n`, you should not expect the transaction to confirm in the next block but rather within `n` blocks.\n\nHowever, in this case, the transaction is time-sensitive, and you strictly want it to confirm before `n` blocks have elapsed.\n\nCalling `estimateSmartFee` with `n`, and expecting it to confirm ASAP is not not ideal, and would likely not confirm ASAP.\nInstead, they should call `estimateSmartFee` with a `conf_target` of `1`. If the transaction does not confirm within the next 1\u20132 blocks, they can then call the fee function to determine the fee rate they are willing to pay at that target based on the available budget (curve).\n\n[quote=\"morehouse, post:1, topic:1512\"]\n **Problems**\n>While external fee rate estimators can be helpful, they\u2019re not perfect. And relying on them too much can lead to missed deadlines when unusual things are happening in the mempool or with miners (e.g., increasing mempool congestion, pinning, replacement cycling, miner censorship).\n[/quote]\n\nSee the API proposal for Bitcoin Core\u2019s improved fee estimator response, which provides the state of the mempool in the past with respect to miner's mempool. This information could help clients make more informed decisions: https://github.com/bitcoin/bitcoin/issues/30392#issuecomment-2717491587\n\n\n\ncc @ClaraShk",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 135,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}