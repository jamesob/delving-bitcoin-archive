{
  "id": 4607,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/1100_2.png",
  "created_at": "2025-03-25T18:01:16.331Z",
  "cooked": "<p>Ok, taking a step back.</p>\n<p>I\u2019m interpreting your suggestion as follows:</p>\n<blockquote>\n<p>Instead of computing linearizations locally every time a cluster changes, require peers to give you a better linearization than what you had before, along with the new transaction, in order for it to be acceptable.</p>\n</blockquote>\n<p>This is nice, because it means the cost of computing linearizations can be deduplicated, and the responsibility to find it lands on the relayer, who probably already has it anyway or they wouldn\u2019t have accepted/relayed it.</p>\n<p>But what if someone wants to send you a transaction to attach to your cluster (incl. a linearization for the result), but you already have in the cluster a transaction that conflicts with the newly relayed one (and this conflicting one, for DoS-protection reasons, can\u2019t be evicted)?</p>\n<p>The rule cannot be \u201cif the linearization received isn\u2019t for the <em>exact</em> cluster you\u2019re considering, reject it\u201d, because that would make it in some cases trivial for an attack to make a transaction to relay at all (spam the network simultaneously with many different transactions attaching to the same cluster, so everyone has a different cluster).</p>\n<p>The rule could be \u201cmerge the linearization received with the linearization you already have, for the part that overlaps, and if the result is better than the cluster you had, and it doesn\u2019t conflict with anti-DoS rules, accept it\u201d. However, I think this can still be used by attacker to thwart relay, by attaching different other transactions to the cluster that offer significant linearization opportunities when combined with the new honest transaction being relayed. E.g., the honest transaction and the attacker\u2019s attachment both fee-bump a parent, but the attacker\u2019s transaction can bump more than the honest transaction alone. In this case, when the honest transaction is relayed along with a linearization, which does not include the already-accepted attacker transaction, it may appear worse (or not strictly better) than what the receiver already had.</p>\n<p>Note that all of this is about using network-relayed linearization as <strong>replacement</strong> for requiring nodes to compute their own good from-scratch linearizations/improvements, which I fear could be exploited. If we\u2019re just talking about <strong>additionally</strong> relaying linearizations and incorporating their linearizations along with self-computed ones, there is no problem.</p>",
  "post_number": 60,
  "post_type": 1,
  "posts_count": 78,
  "updated_at": "2025-03-25T18:01:16.331Z",
  "reply_count": 1,
  "reply_to_post_number": 58,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 34,
  "readers_count": 33,
  "score": 11.8,
  "yours": false,
  "topic_id": 303,
  "topic_slug": "how-to-linearize-your-cluster",
  "topic_title": "How to linearize your cluster",
  "topic_html_title": "How to linearize your cluster",
  "category_id": 8,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 479,
    "username": "stefanwouldgo",
    "name": "Stefanwouldgo",
    "avatar_template": "/user_avatar/delvingbitcoin.org/stefanwouldgo/{size}/664_2.png"
  },
  "bookmarked": false,
  "raw": "Ok, taking a step back.\n\nI'm interpreting your suggestion as follows:\n\n> Instead of computing linearizations locally every time a cluster changes, require peers to give you a better linearization than what you had before, along with the new transaction, in order for it to be acceptable.\n\nThis is nice, because it means the cost of computing linearizations can be deduplicated, and the responsibility to find it lands on the relayer, who probably already has it anyway or they wouldn't have accepted/relayed it.\n\nBut what if someone wants to send you a transaction to attach to your cluster (incl. a linearization for the result), but you already have in the cluster a transaction that conflicts with the newly relayed one (and this conflicting one, for DoS-protection reasons, can't be evicted)?\n\nThe rule cannot be \"if the linearization received isn't for the _exact_ cluster you're considering, reject it\", because that would make it in some cases trivial for an attack to make a transaction to relay at all (spam the network simultaneously with many different transactions attaching to the same cluster, so everyone has a different cluster).\n\nThe rule could be \"merge the linearization received with the linearization you already have, for the part that overlaps, and if the result is better than the cluster you had, and it doesn't conflict with anti-DoS rules, accept it\". However, I think this can still be used by attacker to thwart relay, by attaching different other transactions to the cluster that offer significant linearization opportunities when combined with the new honest transaction being relayed. E.g., the honest transaction and the attacker's attachment both fee-bump a parent, but the attacker's transaction can bump more than the honest transaction alone. In this case, when the honest transaction is relayed along with a linearization, which does not include the already-accepted attacker transaction, it may appear worse (or not strictly better) than what the receiver already had.\n\nNote that all of this is about using network-relayed linearization as **replacement** for requiring nodes to compute their own good from-scratch linearizations/improvements, which I fear could be exploited. If we're just talking about **additionally** relaying linearizations and incorporating their linearizations along with self-computed ones, there is no problem.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Ok, taking a step back. \nI\u2019m interpreting your suggestion as follows: \n\nInstead of computing linearizations locally every time a cluster changes, require peers to give you a better linearization than what you had before, along with the new transaction, in order for it to be acceptable. \n\nThis is nic&hellip;",
  "truncated": true,
  "post_url": "/t/how-to-linearize-your-cluster/303/60",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}