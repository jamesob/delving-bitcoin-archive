{
  "id": 4472,
  "name": "Matt Morehouse",
  "username": "morehouse",
  "avatar_template": "/letter_avatar_proxy/v4/letter/m/df705f/{size}.png",
  "created_at": "2025-03-11T16:33:45.966Z",
  "cooked": "<p><em>The following is copied verbatim from a <a href=\"https://morehouse.github.io/lightning/lnd-deadline-aware-budget-sweeper/\" rel=\"noopener nofollow ugc\">blog post</a> on <a href=\"http://morehouse.github.io\" rel=\"noopener nofollow ugc\">morehouse.github.io</a>, reproduced here to facilitate discussion.  Special thanks to <a class=\"mention\" href=\"/u/yyforyongyu\">@yyforyongyu</a> for contributing to this post.</em></p>\n<p>Starting with <a href=\"https://github.com/lightningnetwork/lnd/releases/tag/v0.18.0-beta\" rel=\"noopener nofollow ugc\">v0.18.0</a>, LND has a completely rewritten <em>sweeper</em> subsystem for managing transaction batching and fee bumping.\nThe new sweeper uses HTLC deadlines and fee budgets to compute a <em>fee rate curve</em>, dynamically adjusting fees (fee bumping) to prioritize urgent transactions.\nThis new fee bumping strategy has some nice security benefits and is something other Lightning implementations should consider adopting.</p>\n<h1><a name=\"p-4472-background-1\" class=\"anchor\" href=\"#p-4472-background-1\"></a>Background</h1>\n<p>When an unreliable (or malicious) Lightning node goes offline while HTLCs are in flight, the other node in the channel can no longer claim the HTLCs <em>off chain</em> and will eventually have to force close and claim the HTLCs <em>on chain</em>.\nWhen this happens, it is critical that all HTLCs are claimed before certain deadlines:</p>\n<ul>\n<li>Incoming HTLCs need to be claimed before their timelocks expire; otherwise, the channel counterparty can submit a competing timeout claim.</li>\n<li>Outgoing HTLCs need to be claimed before their corresponding upstream HTLCs expire; otherwise, the upstream node can reclaim them on chain.</li>\n</ul>\n<p>If HTLCs are not claimed before their deadlines, they can be entirely lost (or stolen).</p>\n<p>Thus Lightning nodes need to pay enough transaction fees to ensure timely confirmation of their commitment and HTLC transactions.\nAt the same time, nodes don\u2019t want to <em>overpay</em> the fees, as these fees can become a major cost for node operators.</p>\n<p>The solution implemented by all Lightning nodes is to start with a relatively low fee rate for these transactions and then use RBF to increase the fee rate as deadlines get closer.</p>\n<h1><a name=\"p-4472-rbf-strategies-2\" class=\"anchor\" href=\"#p-4472-rbf-strategies-2\"></a>RBF Strategies</h1>\n<p>Each node implementation uses a slightly different algorithm for choosing RBF fee rates, but in general there\u2019s two main strategies:</p>\n<ul>\n<li>external fee rate estimators</li>\n<li>exponential bumping</li>\n</ul>\n<h2><a name=\"p-4472-external-fee-rate-estimators-3\" class=\"anchor\" href=\"#p-4472-external-fee-rate-estimators-3\"></a>External Fee Rate Estimators</h2>\n<p>This strategy chooses fee rates based on Bitcoin Core\u2019s (or some other) fee rate estimator.\nThe estimator is queried with the HTLC deadline as the confirmation target, and the returned fee rate is used for commitment and HTLC transactions.\nTypically the estimator is requeried every block to update fee rates and RBF any unconfirmed transactions.</p>\n<p><a href=\"https://github.com/ElementsProject/lightning/blob/b5eef8af4db9f2a58f435bb5beb54299b2800e67/lightningd/chaintopology.c#L419-L440\" rel=\"noopener nofollow ugc\">CLN</a> and <a href=\"https://github.com/lightningnetwork/lnd/blob/f8211a2c3b3d2112159cd119bd7674743336c661/sweep/sweeper.go#L470-L493\" rel=\"noopener nofollow ugc\">LND</a> prior to v0.18.0 use this strategy exclusively.\n<a href=\"https://github.com/ACINQ/eclair/blob/95bbf063c9283b525c2bf9f37184cfe12c860df1/eclair-core/src/main/scala/fr/acinq/eclair/channel/publish/ReplaceableTxPublisher.scala#L221-L248\" rel=\"noopener nofollow ugc\">eclair</a> uses this strategy until deadlines are within 6 blocks, after which it switches to exponential bumping.\n<a href=\"https://github.com/lightningdevkit/rust-lightning/blob/3a5f4282468e6148e592e324c2a72405bdb4b193/lightning/src/chain/package.rs#L1361-L1369\" rel=\"noopener nofollow ugc\">LDK</a> uses a combined strategy that sometimes uses the fee rate from the estimator and other times uses exponential bumping.</p>\n<h2><a name=\"p-4472-exponential-bumping-4\" class=\"anchor\" href=\"#p-4472-exponential-bumping-4\"></a>Exponential Bumping</h2>\n<p>In this strategy, the fee rate estimator is used to determine the initial fee rate, after which a fixed multiplier is used to increase fee rates for each RBF transaction.</p>\n<p><a href=\"https://github.com/ACINQ/eclair/blob/95bbf063c9283b525c2bf9f37184cfe12c860df1/eclair-core/src/main/scala/fr/acinq/eclair/channel/publish/ReplaceableTxPublisher.scala#L221-L248\" rel=\"noopener nofollow ugc\">eclair</a> uses this strategy when deadlines are within 6 blocks, increasing fee rates by 20% each block while capping the total fees paid at the value of the HTLC being claimed.\nWhen <a href=\"https://github.com/lightningdevkit/rust-lightning/blob/3a5f4282468e6148e592e324c2a72405bdb4b193/lightning/src/chain/package.rs#L1361-L1369\" rel=\"noopener nofollow ugc\">LDK</a> uses this strategy, it increases fee rates by 25% on each RBF.</p>\n<h2><a name=\"p-4472-problems-5\" class=\"anchor\" href=\"#p-4472-problems-5\"></a>Problems</h2>\n<p>While external fee rate estimators can be helpful, they\u2019re not perfect.\nAnd relying on them too much can lead to missed deadlines when unusual things are happening in the mempool or with miners (e.g., increasing mempool congestion, pinning, replacement cycling, miner censorship).\nIn such situations, higher-than-estimated fee rates may be needed to actually get transactions confirmed.\nExponential bumping strategies help here but can still be ineffective if the original fee rate was too low.</p>\n<h1><a name=\"p-4472-the-deadline-and-budget-aware-rbf-strategy-6\" class=\"anchor\" href=\"#p-4472-the-deadline-and-budget-aware-rbf-strategy-6\"></a>The Deadline and Budget Aware RBF Strategy</h1>\n<p>LND\u2019s new sweeper subsystem, released in v0.18.0, takes a novel approach to RBFing commitment and HTLC transactions.\nThe system was designed around a key observation: for each HTLC on a commitment transaction, there are specific <em>deadline</em> and <em>budget</em> constraints for claiming that HTLC.\nThe <strong>deadline</strong> is the block height by which the node needs to confirm the claim transaction for the HTLC.\nThe <strong>budget</strong> is the maximum absolute fee the node operator is willing to pay to sweep the HTLC by the deadline.\nIn practice, the budget is likely to be a fixed proportion of the HTLC value (i.e. operators are willing to pay more fees for larger HTLCs), so LND\u2019s budget <a href=\"https://docs.lightning.engineering/lightning-network-tools/lnd/sweeper\" rel=\"noopener nofollow ugc\">configuration parameters</a> are based on proportions.</p>\n<p>The sweeper operates by aggregating HTLC claims with matching deadlines into a single batched transaction.\nThe budget for the batched transaction is calculated as the sum of the budgets for the individual HTLCs in the transaction.\nBased on the transaction budget and deadline, a <strong>fee function</strong> is computed that determines how much of the budget is spent as the deadline approaches.\nBy default, a linear fee function is used which starts at a low fee (determined by the minimum relay fee rate or an external estimator) and ends with the total budget being allocated to fees when the deadline is one block away.\nThe initial batched transaction is published and a \u201cfee bumper\u201d is assigned to monitor confirmation status in the background.\nFor each block the transaction remains unconfirmed, the fee bumper broadcasts a new transaction with a higher fee rate determined by the fee function.</p>\n<p>The sweeper architecture looks like this:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/2X/5/5a58915949c5031b540b255e09cb7a51c02d79db.png\" data-download-href=\"https://delvingbitcoin.org/uploads/default/5a58915949c5031b540b255e09cb7a51c02d79db\" title=\"LND's sweeper architecture\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/2X/5/5a58915949c5031b540b255e09cb7a51c02d79db_2_690x253.png\" alt=\"LND's sweeper architecture\" data-base62-sha1=\"cTeJ85fOpYsxxHktlGr2GHK50kH\" width=\"690\" height=\"253\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/2X/5/5a58915949c5031b540b255e09cb7a51c02d79db_2_690x253.png, https://delvingbitcoin.org/uploads/default/optimized/2X/5/5a58915949c5031b540b255e09cb7a51c02d79db_2_1035x379.png 1.5x, https://delvingbitcoin.org/uploads/default/original/2X/5/5a58915949c5031b540b255e09cb7a51c02d79db.png 2x\" data-dominant-color=\"ECEDF2\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">LND's sweeper architecture</span><span class=\"informations\">1370\u00d7503 38.6 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>For more details about LND\u2019s new sweeper, see the <a href=\"https://github.com/lightningnetwork/lnd/blob/04c76101dd53696dc0c527d1b58eb4647df315d1/sweep/README.md\" rel=\"noopener nofollow ugc\">technical documentation</a>.\nIn this blog post, we\u2019ll focus mostly on the sweeper\u2019s deadline and budget aware RBF strategy.</p>\n<h2><a name=\"p-4472-benefits-7\" class=\"anchor\" href=\"#p-4472-benefits-7\"></a>Benefits</h2>\n<p>LND\u2019s new sweeper system provides greater security against replacement cycling, pinning, and other adversarial or unexpected scenarios.\nIt also fixed some bad bugs and vulnerabilities present with LND\u2019s previous sweeper system.</p>\n<h3><a name=\"p-4472-replacement-cycling-defense-8\" class=\"anchor\" href=\"#p-4472-replacement-cycling-defense-8\"></a>Replacement Cycling Defense</h3>\n<p>Transaction rebroadcasting is a simple mitigation against <a href=\"https://bitcoinops.org/en/topics/replacement-cycling/\" rel=\"noopener nofollow ugc\">replacement cycling attacks</a> that has been adopted by all implementations.\nHowever, rebroadcasting alone does not guarantee that such attacks become uneconomical, especially when HTLC values are much larger than the fees Lightning nodes are willing to pay when claiming them on chain.\nBy setting fee budgets in proportion to HTLC values, LND\u2019s new sweeper is able to provide much stronger guarantees that any replacement cycling attacks will be uneconomical.</p>\n<h4><a name=\"p-4472-cost-of-replacement-cycling-attacks-9\" class=\"anchor\" href=\"#p-4472-cost-of-replacement-cycling-attacks-9\"></a>Cost of Replacement Cycling Attacks</h4>\n<p>With LND\u2019s default parameters an attacker must generally spend at least 20x the value of the HTLC to successfully carry out a replacement cycling attack.</p>\n<p>Default parameters:</p>\n<ul>\n<li>fee budget: 50% of HTLC value</li>\n<li>CLTV delta: 80 blocks</li>\n</ul>\n<p>Assuming the attacker must do a minimum of one replacement per block:</p>\n<div class=\"math\">\nattack\\_cost \\ge \\sum_{t = 0}^{80} fee\\_function(t) \\\\\nattack\\_cost \\ge \\sum_{t = 0}^{80} 0.5 \\cdot htlc\\_value \\cdot \\frac{t}{80} \\\\\nattack\\_cost \\ge 20 \\cdot htlc\\_value\n</div>\n<p>LND also rebroadcasts transactions every minute by default, so in practice the attacker must do ~10 replacements per block, making the cost closer to 200x the HTLC value.</p>\n<h3><a name=\"p-4472-partial-pinning-defense-10\" class=\"anchor\" href=\"#p-4472-partial-pinning-defense-10\"></a>Partial Pinning Defense</h3>\n<p>Because LND\u2019s new default RBF strategy pays up to 50% of the HTLC value, LND now has a much greater ability to outbid <a href=\"https://bitcoinops.org/en/topics/transaction-pinning/\" rel=\"noopener nofollow ugc\">pinning attacks</a>, especially for larger HTLCs.\nIt is unfortunate that significant fees need to be burned in this case, but the end result is still better than losing the full value of the HTLC.</p>\n<h3><a name=\"p-4472-reduced-reliance-on-fee-rate-estimators-11\" class=\"anchor\" href=\"#p-4472-reduced-reliance-on-fee-rate-estimators-11\"></a>Reduced Reliance on Fee Rate Estimators</h3>\n<p>As explained earlier, fee rate estimators are not always accurate, especially when mempool conditions are changing rapidly.\nIn these situations, it can be very beneficial to use a simpler RBF strategy, especially when deadlines are approaching.\nLDK and eclair use exponential bumping in these scenarios, which helps in many cases.\nBut ultimately the fee rate curve for an exponential bumping strategy still depends heavily on the starting fee rate, and if that fee rate is too low then deadlines can be missed.\nThe exponential bumping strategy also ignores the value of the HTLC being claimed, which means that larger HTLCs get the same fee rates as smaller HTLCs, even when deadlines are getting close.</p>\n<p>LND\u2019s budget-based approach takes HTLC values into consideration when establishing the fee rate curve, ensuring that budgets are never exceeded and that HTLCs are never lost before an attempt to spend the full budget has been made.\nAs such, the budget-based approach provides more consistent results and greater security in unexpected or adversarial situations.</p>\n<h3><a name=\"p-4472-lnd-specific-bug-and-vulnerability-fixes-12\" class=\"anchor\" href=\"#p-4472-lnd-specific-bug-and-vulnerability-fixes-12\"></a>LND-Specific Bug and Vulnerability Fixes</h3>\n<p>LND\u2019s new sweeper fixed some bad bugs and vulnerabilities that existed with the previous sweeper.</p>\n<h4><a name=\"p-4472-fee-bump-failures-13\" class=\"anchor\" href=\"#p-4472-fee-bump-failures-13\"></a>Fee Bump Failures</h4>\n<p>Previously, LND had an inconsistent approach to broadcasting and fee bumping urgent transactions.\nIn some places transactions would get broadcast with a specific confirmation target and would never be fee bumped again.\nIn other places transactions would be RBF\u2019d if the fee rate estimator determined that mempool fee rates had gone up, but the <em>confirmation target</em> given to the estimator would not be adjusted as deadlines approached.</p>\n<p>Perhaps the worst of these fee bumping failures was a <a href=\"https://github.com/lightningnetwork/lnd/issues/8522\" rel=\"noopener nofollow ugc\">bug</a> reported by <a href=\"https://github.com/C-Otto\" rel=\"noopener nofollow ugc\">Carsten Otto</a>, where LND would fail to use the anchor output to CPFP a commitment transaction if the initial HTLC deadlines were far enough in the future.\nWhile this behavior is desirable to save on fees initially, it becomes a major problem when deadlines get closer and the commitment hasn\u2019t confirmed on its own.\nBecause LND did not adjust confirmation targets as deadlines approached, the commitment transaction would remain un-CPFP\u2019d and could fail to confirm before HTLCs expired and funds could be lost.\nTo make matters worse, the bug was trivial for an attacker to exploit.</p>\n<p>LND\u2019s sweeper rewrite took the opportunity to correct and unify all the transaction broadcasting and fee bumping logic in one place and fix all of these fee bumping failures at once.</p>\n<h4><a name=\"p-4472-invalid-batching-14\" class=\"anchor\" href=\"#p-4472-invalid-batching-14\"></a>Invalid Batching</h4>\n<p>LND\u2019s previous sweeper also sometimes generated invalid or unsafe transactions when batching inputs together.\nThis could happen in a couple ways:</p>\n<ul>\n<li>Inputs that were invalid or had been double-spent could be batched with urgent HTLC claims, making the whole transaction invalid.</li>\n<li>Anchor spends could be <a href=\"https://github.com/lightningnetwork/lnd/issues/8433\" rel=\"noopener nofollow ugc\">batched together</a>, thereby violating the CPFP carve out and enabling channel counterparties to pin commitment transactions.</li>\n</ul>\n<p>Rather than addressing these issues directly, the previous sweeper would use <em>exponential backoff</em> to regroup inputs after random delays and hope for a valid transaction.\nIf another invalid transaction occurred, longer delays would be used before the next regrouping.\nEventually, deadlines could be missed and funds lost.</p>\n<p>LND\u2019s new sweeper fixed these issues by being more careful about which inputs could be grouped together and by removing double-spent inputs from transactions that failed to broadcast.</p>\n<h2><a name=\"p-4472-risks-15\" class=\"anchor\" href=\"#p-4472-risks-15\"></a>Risks</h2>\n<p>The security of a Lightning node depends heavily on its ability to resolve HTLCs on chain when necessary.\nAnd unfortunately proper on-chain resolution can be tricky to get right (see <a href=\"https://morehouse.github.io/lightning/ldk-invalid-claims-liquidity-griefing/\" rel=\"noopener nofollow ugc\">1</a>, <a href=\"https://morehouse.github.io/lightning/ldk-duplicate-htlc-force-close-griefing/\" rel=\"noopener nofollow ugc\">2</a>, <a href=\"https://morehouse.github.io/lightning/lnd-excessive-failback-exploit/\" rel=\"noopener nofollow ugc\">3</a>).\nMaking changes to the existing on-chain logic runs the risk of introducing new bugs and vulnerabilities.</p>\n<p>For example, during code reviews of LND\u2019s new sweeper there were many serious bugs discovered and fixed, ranging from catastrophic <a href=\"https://github.com/lightningnetwork/lnd/issues/8738\" rel=\"noopener nofollow ugc\">fee function failures</a> to new <a href=\"https://github.com/lightningnetwork/lnd/pull/8514#discussion_r1554270229\" rel=\"noopener nofollow ugc\">fund-stealing exploits</a> and more (<a href=\"https://github.com/lightningnetwork/lnd/pull/8148#discussion_r1542012530\" rel=\"noopener nofollow ugc\">1</a>, <a href=\"https://github.com/lightningnetwork/lnd/pull/8424#pullrequestreview-1961358576\" rel=\"noopener nofollow ugc\">2</a>, <a href=\"https://github.com/lightningnetwork/lnd/pull/8422#discussion_r1528832418\" rel=\"noopener nofollow ugc\">3</a>, <a href=\"https://github.com/lightningnetwork/lnd/issues/8715\" rel=\"noopener nofollow ugc\">4</a>, <a href=\"https://github.com/lightningnetwork/lnd/issues/8737\" rel=\"noopener nofollow ugc\">5</a>, <a href=\"https://github.com/lightningnetwork/lnd/issues/8741\" rel=\"noopener nofollow ugc\">6</a>).\nNode implementers should tread carefully when touching these parts of the codebase and remember that simplicity is often the best security.</p>\n<h1><a name=\"p-4472-conclusion-16\" class=\"anchor\" href=\"#p-4472-conclusion-16\"></a>Conclusion</h1>\n<p>LND\u2019s new deadline-aware budget sweeper provides more secure fee bumping in adversarial situations and more consistent behavior when mempools are rapidly changing.\nOther implementations should consider incorporating budget awareness into their fee bumping strategies to improve defenses against replacement cycling and pinning attacks, and to reduce reliance on external fee estimators.\nAt the same time, implementers would do well to avoid complete rewrites of the on-chain logic and instead keep the changes small and review them well.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2025-03-11T16:38:50.003Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 3,
  "reads": 10,
  "readers_count": 9,
  "score": 47.0,
  "yours": false,
  "topic_id": 1512,
  "topic_slug": "lnds-deadline-aware-budget-sweeper",
  "topic_title": "LND's Deadline-Aware Budget Sweeper",
  "topic_html_title": "LND&rsquo;s Deadline-Aware Budget Sweeper",
  "category_id": 8,
  "display_username": "Matt Morehouse",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "*The following is copied verbatim from a [blog post](https://morehouse.github.io/lightning/lnd-deadline-aware-budget-sweeper/) on [morehouse.github.io](http://morehouse.github.io), reproduced here to facilitate discussion.  Special thanks to @yyforyongyu for contributing to this post.*\n\nStarting with [v0.18.0](https://github.com/lightningnetwork/lnd/releases/tag/v0.18.0-beta), LND has a completely rewritten *sweeper* subsystem for managing transaction batching and fee bumping.\nThe new sweeper uses HTLC deadlines and fee budgets to compute a *fee rate curve*, dynamically adjusting fees (fee bumping) to prioritize urgent transactions.\nThis new fee bumping strategy has some nice security benefits and is something other Lightning implementations should consider adopting.\n\n# Background\n\nWhen an unreliable (or malicious) Lightning node goes offline while HTLCs are in flight, the other node in the channel can no longer claim the HTLCs *off chain* and will eventually have to force close and claim the HTLCs *on chain*.\nWhen this happens, it is critical that all HTLCs are claimed before certain deadlines:\n\n- Incoming HTLCs need to be claimed before their timelocks expire; otherwise, the channel counterparty can submit a competing timeout claim.\n- Outgoing HTLCs need to be claimed before their corresponding upstream HTLCs expire; otherwise, the upstream node can reclaim them on chain.\n\nIf HTLCs are not claimed before their deadlines, they can be entirely lost (or stolen).\n\nThus Lightning nodes need to pay enough transaction fees to ensure timely confirmation of their commitment and HTLC transactions.\nAt the same time, nodes don't want to *overpay* the fees, as these fees can become a major cost for node operators.\n\nThe solution implemented by all Lightning nodes is to start with a relatively low fee rate for these transactions and then use RBF to increase the fee rate as deadlines get closer.\n\n# RBF Strategies\n\nEach node implementation uses a slightly different algorithm for choosing RBF fee rates, but in general there's two main strategies:\n\n- external fee rate estimators\n- exponential bumping\n\n## External Fee Rate Estimators\n\nThis strategy chooses fee rates based on Bitcoin Core's (or some other) fee rate estimator.\nThe estimator is queried with the HTLC deadline as the confirmation target, and the returned fee rate is used for commitment and HTLC transactions.\nTypically the estimator is requeried every block to update fee rates and RBF any unconfirmed transactions.\n\n[CLN](https://github.com/ElementsProject/lightning/blob/b5eef8af4db9f2a58f435bb5beb54299b2800e67/lightningd/chaintopology.c#L419-L440) and [LND](https://github.com/lightningnetwork/lnd/blob/f8211a2c3b3d2112159cd119bd7674743336c661/sweep/sweeper.go#L470-L493) prior to v0.18.0 use this strategy exclusively.\n[eclair](https://github.com/ACINQ/eclair/blob/95bbf063c9283b525c2bf9f37184cfe12c860df1/eclair-core/src/main/scala/fr/acinq/eclair/channel/publish/ReplaceableTxPublisher.scala#L221-L248) uses this strategy until deadlines are within 6 blocks, after which it switches to exponential bumping.\n[LDK](https://github.com/lightningdevkit/rust-lightning/blob/3a5f4282468e6148e592e324c2a72405bdb4b193/lightning/src/chain/package.rs#L1361-L1369) uses a combined strategy that sometimes uses the fee rate from the estimator and other times uses exponential bumping.\n\n## Exponential Bumping\n\nIn this strategy, the fee rate estimator is used to determine the initial fee rate, after which a fixed multiplier is used to increase fee rates for each RBF transaction.\n\n[eclair](https://github.com/ACINQ/eclair/blob/95bbf063c9283b525c2bf9f37184cfe12c860df1/eclair-core/src/main/scala/fr/acinq/eclair/channel/publish/ReplaceableTxPublisher.scala#L221-L248) uses this strategy when deadlines are within 6 blocks, increasing fee rates by 20% each block while capping the total fees paid at the value of the HTLC being claimed.\nWhen [LDK](https://github.com/lightningdevkit/rust-lightning/blob/3a5f4282468e6148e592e324c2a72405bdb4b193/lightning/src/chain/package.rs#L1361-L1369) uses this strategy, it increases fee rates by 25% on each RBF.\n\n## Problems\n\nWhile external fee rate estimators can be helpful, they're not perfect.\nAnd relying on them too much can lead to missed deadlines when unusual things are happening in the mempool or with miners (e.g., increasing mempool congestion, pinning, replacement cycling, miner censorship).\nIn such situations, higher-than-estimated fee rates may be needed to actually get transactions confirmed.\nExponential bumping strategies help here but can still be ineffective if the original fee rate was too low.\n\n# The Deadline and Budget Aware RBF Strategy\n\nLND's new sweeper subsystem, released in v0.18.0, takes a novel approach to RBFing commitment and HTLC transactions.\nThe system was designed around a key observation: for each HTLC on a commitment transaction, there are specific *deadline* and *budget* constraints for claiming that HTLC.\nThe **deadline** is the block height by which the node needs to confirm the claim transaction for the HTLC.\nThe **budget** is the maximum absolute fee the node operator is willing to pay to sweep the HTLC by the deadline.\nIn practice, the budget is likely to be a fixed proportion of the HTLC value (i.e. operators are willing to pay more fees for larger HTLCs), so LND's budget [configuration parameters](https://docs.lightning.engineering/lightning-network-tools/lnd/sweeper) are based on proportions.\n\nThe sweeper operates by aggregating HTLC claims with matching deadlines into a single batched transaction.\nThe budget for the batched transaction is calculated as the sum of the budgets for the individual HTLCs in the transaction.\nBased on the transaction budget and deadline, a **fee function** is computed that determines how much of the budget is spent as the deadline approaches.\nBy default, a linear fee function is used which starts at a low fee (determined by the minimum relay fee rate or an external estimator) and ends with the total budget being allocated to fees when the deadline is one block away.\nThe initial batched transaction is published and a \"fee bumper\" is assigned to monitor confirmation status in the background.\nFor each block the transaction remains unconfirmed, the fee bumper broadcasts a new transaction with a higher fee rate determined by the fee function.\n\nThe sweeper architecture looks like this:\n\n![LND's sweeper architecture|690x253, 100%](upload://cTeJ85fOpYsxxHktlGr2GHK50kH.png)\n\nFor more details about LND's new sweeper, see the [technical documentation](https://github.com/lightningnetwork/lnd/blob/04c76101dd53696dc0c527d1b58eb4647df315d1/sweep/README.md).\nIn this blog post, we'll focus mostly on the sweeper's deadline and budget aware RBF strategy.\n\n## Benefits\n\nLND's new sweeper system provides greater security against replacement cycling, pinning, and other adversarial or unexpected scenarios.\nIt also fixed some bad bugs and vulnerabilities present with LND's previous sweeper system.\n\n### Replacement Cycling Defense\n\nTransaction rebroadcasting is a simple mitigation against [replacement cycling attacks](https://bitcoinops.org/en/topics/replacement-cycling/) that has been adopted by all implementations.\nHowever, rebroadcasting alone does not guarantee that such attacks become uneconomical, especially when HTLC values are much larger than the fees Lightning nodes are willing to pay when claiming them on chain.\nBy setting fee budgets in proportion to HTLC values, LND's new sweeper is able to provide much stronger guarantees that any replacement cycling attacks will be uneconomical.\n\n#### Cost of Replacement Cycling Attacks\n\nWith LND's default parameters an attacker must generally spend at least 20x the value of the HTLC to successfully carry out a replacement cycling attack.\n\nDefault parameters:\n\n- fee budget: 50% of HTLC value\n- CLTV delta: 80 blocks\n\nAssuming the attacker must do a minimum of one replacement per block:\n\n$$\nattack\\_cost \\ge \\sum_{t = 0}^{80} fee\\_function(t) \\\\\nattack\\_cost \\ge \\sum_{t = 0}^{80} 0.5 \\cdot htlc\\_value \\cdot \\frac{t}{80} \\\\\nattack\\_cost \\ge 20 \\cdot htlc\\_value\n$$\n\nLND also rebroadcasts transactions every minute by default, so in practice the attacker must do ~10 replacements per block, making the cost closer to 200x the HTLC value.\n\n### Partial Pinning Defense\n\nBecause LND's new default RBF strategy pays up to 50% of the HTLC value, LND now has a much greater ability to outbid [pinning attacks](https://bitcoinops.org/en/topics/transaction-pinning/), especially for larger HTLCs.\nIt is unfortunate that significant fees need to be burned in this case, but the end result is still better than losing the full value of the HTLC.\n\n### Reduced Reliance on Fee Rate Estimators\n\nAs explained earlier, fee rate estimators are not always accurate, especially when mempool conditions are changing rapidly.\nIn these situations, it can be very beneficial to use a simpler RBF strategy, especially when deadlines are approaching.\nLDK and eclair use exponential bumping in these scenarios, which helps in many cases.\nBut ultimately the fee rate curve for an exponential bumping strategy still depends heavily on the starting fee rate, and if that fee rate is too low then deadlines can be missed.\nThe exponential bumping strategy also ignores the value of the HTLC being claimed, which means that larger HTLCs get the same fee rates as smaller HTLCs, even when deadlines are getting close.\n\nLND's budget-based approach takes HTLC values into consideration when establishing the fee rate curve, ensuring that budgets are never exceeded and that HTLCs are never lost before an attempt to spend the full budget has been made.\nAs such, the budget-based approach provides more consistent results and greater security in unexpected or adversarial situations.\n\n### LND-Specific Bug and Vulnerability Fixes\n\nLND's new sweeper fixed some bad bugs and vulnerabilities that existed with the previous sweeper.\n\n#### Fee Bump Failures\n\nPreviously, LND had an inconsistent approach to broadcasting and fee bumping urgent transactions.\nIn some places transactions would get broadcast with a specific confirmation target and would never be fee bumped again.\nIn other places transactions would be RBF'd if the fee rate estimator determined that mempool fee rates had gone up, but the *confirmation target* given to the estimator would not be adjusted as deadlines approached.\n\nPerhaps the worst of these fee bumping failures was a [bug](https://github.com/lightningnetwork/lnd/issues/8522) reported by [Carsten Otto](https://github.com/C-Otto), where LND would fail to use the anchor output to CPFP a commitment transaction if the initial HTLC deadlines were far enough in the future.\nWhile this behavior is desirable to save on fees initially, it becomes a major problem when deadlines get closer and the commitment hasn't confirmed on its own.\nBecause LND did not adjust confirmation targets as deadlines approached, the commitment transaction would remain un-CPFP'd and could fail to confirm before HTLCs expired and funds could be lost.\nTo make matters worse, the bug was trivial for an attacker to exploit.\n\nLND's sweeper rewrite took the opportunity to correct and unify all the transaction broadcasting and fee bumping logic in one place and fix all of these fee bumping failures at once.\n\n#### Invalid Batching\n\nLND's previous sweeper also sometimes generated invalid or unsafe transactions when batching inputs together.\nThis could happen in a couple ways:\n\n- Inputs that were invalid or had been double-spent could be batched with urgent HTLC claims, making the whole transaction invalid.\n- Anchor spends could be [batched together](https://github.com/lightningnetwork/lnd/issues/8433), thereby violating the CPFP carve out and enabling channel counterparties to pin commitment transactions.\n\nRather than addressing these issues directly, the previous sweeper would use *exponential backoff* to regroup inputs after random delays and hope for a valid transaction.\nIf another invalid transaction occurred, longer delays would be used before the next regrouping.\nEventually, deadlines could be missed and funds lost.\n\nLND's new sweeper fixed these issues by being more careful about which inputs could be grouped together and by removing double-spent inputs from transactions that failed to broadcast.\n\n## Risks\n\nThe security of a Lightning node depends heavily on its ability to resolve HTLCs on chain when necessary.\nAnd unfortunately proper on-chain resolution can be tricky to get right (see [1](https://morehouse.github.io/lightning/ldk-invalid-claims-liquidity-griefing/), [2](https://morehouse.github.io/lightning/ldk-duplicate-htlc-force-close-griefing/), [3](https://morehouse.github.io/lightning/lnd-excessive-failback-exploit/)).\nMaking changes to the existing on-chain logic runs the risk of introducing new bugs and vulnerabilities.\n\nFor example, during code reviews of LND's new sweeper there were many serious bugs discovered and fixed, ranging from catastrophic [fee function failures](https://github.com/lightningnetwork/lnd/issues/8738) to new [fund-stealing exploits](https://github.com/lightningnetwork/lnd/pull/8514#discussion_r1554270229) and more ([1](https://github.com/lightningnetwork/lnd/pull/8148#discussion_r1542012530), [2](https://github.com/lightningnetwork/lnd/pull/8424#pullrequestreview-1961358576), [3](https://github.com/lightningnetwork/lnd/pull/8422#discussion_r1528832418), [4](https://github.com/lightningnetwork/lnd/issues/8715), [5](https://github.com/lightningnetwork/lnd/issues/8737), [6](https://github.com/lightningnetwork/lnd/issues/8741)).\nNode implementers should tread carefully when touching these parts of the codebase and remember that simplicity is often the best security.\n\n# Conclusion\n\nLND's new deadline-aware budget sweeper provides more secure fee bumping in adversarial situations and more consistent behavior when mempools are rapidly changing.\nOther implementations should consider incorporating budget awareness into their fee bumping strategies to improve defenses against replacement cycling and pinning attacks, and to reduce reliance on external fee estimators.\nAt the same time, implementers would do well to avoid complete rewrites of the on-chain logic and instead keep the changes small and review them well.",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 47,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "eyes",
      "type": "emoji",
      "count": 1
    },
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}