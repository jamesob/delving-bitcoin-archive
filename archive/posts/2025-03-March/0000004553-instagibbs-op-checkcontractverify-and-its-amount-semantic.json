{
  "id": 4553,
  "name": "Gregory Sanders",
  "username": "instagibbs",
  "avatar_template": "/user_avatar/delvingbitcoin.org/instagibbs/{size}/28_2.png",
  "created_at": "2025-03-17T13:42:37.277Z",
  "cooked": "<p>Thanks for finally writing a real life BIP!</p>\n<p>Given the value forwarding piece is the most bike-sheddy part, I\u2019m going to pick on that for now.</p>\n<aside class=\"quote no-group\" data-username=\"salvatoshi\" data-post=\"1\" data-topic=\"1527\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/salvatoshi/48/72_2.png\" class=\"avatar\"> salvatoshi:</div>\n<blockquote>\n<p>(however, this would likely require a <code>CHECKSIG</code> or additional introspection on the exact amount going to X, which <code>CCV</code> alone can\u2019t provide).</p>\n</blockquote>\n</aside>\n<p>An alternative, which IIRC I proposed for OP_VAULT, was having explicit ability to introspect the (aggregate) output amounts.</p>\n<p>Something like:</p>\n<ol>\n<li>OP_IN_AMOUNT: pushes input amount on stack</li>\n<li>CCV with value introspection: takes value off stack (can be &gt;4 bytes), allocates to an output, and pushes residual of input back on stack, where residual is always the full amount minus the specified amount</li>\n</ol>\n<p>This way value forwarding is always explicit when desired, no there\u2019s no default/deduct mode split, you can do math checks on the values (below a certain value), rate-limiting / collateral is pretty straight forward. Obviously it has downsides including that Bitcoin Script math is probably more footgun than feature in practice\u2026 but muh GSR?</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2025-03-17T13:42:37.277Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 1,
  "reads": 9,
  "readers_count": 8,
  "score": 6.8,
  "yours": false,
  "topic_id": 1527,
  "topic_slug": "op-checkcontractverify-and-its-amount-semantic",
  "topic_title": "OP_CHECKCONTRACTVERIFY and its amount semantic",
  "topic_html_title": "OP_CHECKCONTRACTVERIFY and its amount semantic",
  "category_id": 7,
  "display_username": "Gregory Sanders",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thanks for finally writing a real life BIP!\n\nGiven the value forwarding piece is the most bike-sheddy part, I'm going to pick on that for now.\n\n[quote=\"salvatoshi, post:1, topic:1527\"]\n(however, this would likely require a `CHECKSIG` or additional introspection on the exact amount going to X, which `CCV` alone can\u2019t provide).\n[/quote]\n\nAn alternative, which IIRC I proposed for OP_VAULT, was having explicit ability to introspect the (aggregate) output amounts.\n\nSomething like:\n1) OP_IN_AMOUNT: pushes input amount on stack\n2) CCV with value introspection: takes value off stack (can be >4 bytes), allocates to an output, and pushes residual of input back on stack, where residual is always the full amount minus the specified amount\n\nThis way value forwarding is always explicit when desired, no there's no default/deduct mode split, you can do math checks on the values (below a certain value), rate-limiting / collateral is pretty straight forward. Obviously it has downsides including that Bitcoin Script math is probably more footgun than feature in practice... but muh GSR?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 31,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}