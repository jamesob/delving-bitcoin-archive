{
  "id": 4655,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/1100_2.png",
  "created_at": "2025-03-31T22:14:21.871Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"stefanwouldgo\" data-post=\"1\" data-topic=\"1548\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/stefanwouldgo/48/664_2.png\" class=\"avatar\"> stefanwouldgo:</div>\n<blockquote>\n<p>it seems to me that this is the only scenario where we are time limited during relay. Please let me know if that\u2019s a false assumption!</p>\n</blockquote>\n</aside>\n<p>There is another one: after processing a block, we need to relinearize all clusters affected by it (by having includes mempool transactions or by having included transactions that conflict with it). And in that setting, we obviously can\u2019t require linearization information for the clusters - we must accept valid blocks. It\u2019s even more complicated when there is a reorg involved, as the re-added transactions (those that were in disconnected blocks, and are being moved back to mempool) may cause us to temporarily violate cluster count/size limits. Fixing that is, due to the amount of transactions involved, even more of a best-effort thing compared to transaction relay.</p>\n<aside class=\"quote no-group\" data-username=\"stefanwouldgo\" data-post=\"1\" data-topic=\"1548\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/stefanwouldgo/48/664_2.png\" class=\"avatar\"> stefanwouldgo:</div>\n<blockquote>\n<p>the rule that RBF requires strictly improving the diagram means that the attacker can keep me from relaying any RBF tx in this cluster, because I don\u2019t even get to know all the versions I would have to improve upon.</p>\n</blockquote>\n</aside>\n<p>There are many reasons why transaction relay on the network (today, but also post cluster-mempool) is non-confluent. Even just hearing about the exact same transactions, but in a different order, may result in a different set of actually accepted ones. This is due to several reasons:</p>\n<ul>\n<li><strong>DoS protection</strong> not all policy rules boil down to incentive compatibility; there are other ones involving resource limits (e.g. cluster size/count), and ones to prevent free relay (generally, we expect all RBF transactions to pay some marginal fee in addition to normal requirements, which pay for the relay of the transactions they evicted).</li>\n<li><strong>Dealing with conflicts</strong> While we have nice theoretical results about the linearization of a single set of transactions having a global and object optimum, this does not hold once replacements are introduced. Once you\u2019re considering an optimal choice/order of transaction among a set with dependencies <em>and</em> conflicts, it is not a well defined problem what the better one is even, let alone having an algorithm for picking the best one.</li>\n</ul>\n<p>However, our general thinking is that this isn\u2019t really a problem, because people in practice don\u2019t reason about replacement fees. Even today, with the relatively simple (compared to post cluster mempool RBF) BIP125 rules, people just fire and forget: if a transaction doesn\u2019t look like it\u2019s confirming, retry with a higher fee, repeat. With cluster mempool the process would become a lot more opaque, but for more consistent.</p>\n<p>My concern with requiring linearization for relay is however something in addition to problems with general non-confluence of relay. At least with the proposed cluster mempool RBF rules (and nodes individually computing near-optimal cluster linearizations for it), the transaction <em>will</em> relay and confirm once its feerate makes it incentive compatible to do. If senders are additionally required to come up with good linearizations themselves, for whatever clusters it may attach to in peers, you\u2019re requiring wallets/node to not only decide for themselves, but also for others.</p>\n<blockquote>\n<p>Is this still the current proposal for RBF in a cluster mempool world?</p>\n</blockquote>\n<p>It\u2019s not, but I don\u2019t think the change invalidates anything you said here. Here is a writeup for what post-cluster mempool RBF would become (it focuses on package RBF, which is even more complicated, but just imagine the transactions are submitted one by one now): <a href=\"https://delvingbitcoin.org/t/post-clustermempool-package-rbf-per-chunk-processing/190\" class=\"inline-onebox\">Post-clustermempool package RBF: per-chunk processing</a></p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2025-04-01T01:34:34.599Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 16.8,
  "yours": false,
  "topic_id": 1548,
  "topic_slug": "cluster-mempool-partitioning-attacks",
  "topic_title": "Cluster mempool partitioning attacks",
  "topic_html_title": "Cluster mempool partitioning attacks",
  "category_id": 8,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"stefanwouldgo, post:1, topic:1548\"]\nit seems to me that this is the only scenario where we are time limited during relay. Please let me know if that\u2019s a false assumption!\n[/quote]\n\nThere is another one: after processing a block, we need to relinearize all clusters affected by it (by having includes mempool transactions or by having included transactions that conflict with it). And in that setting, we obviously can't require linearization information for the clusters - we must accept valid blocks. It's even more complicated when there is a reorg involved, as the re-added transactions (those that were in disconnected blocks, and are being moved back to mempool) may cause us to temporarily violate cluster count/size limits. Fixing that is, due to the amount of transactions involved, even more of a best-effort thing compared to transaction relay.\n[quote=\"stefanwouldgo, post:1, topic:1548\"]\nthe rule that RBF requires strictly improving the diagram means that the attacker can keep me from relaying any RBF tx in this cluster, because I don\u2019t even get to know all the versions I would have to improve upon.\n[/quote]\n\nThere are many reasons why transaction relay on the network (today, but also post cluster-mempool) is non-confluent. Even just hearing about the exact same transactions, but in a different order, may result in a different set of actually accepted ones. This is due to several reasons:\n* **DoS protection** not all policy rules boil down to incentive compatibility; there are other ones involving resource limits (e.g. cluster size/count), and ones to prevent free relay (generally, we expect all RBF transactions to pay some marginal fee in addition to normal requirements, which pay for the relay of the transactions they evicted).\n* **Dealing with conflicts** While we have nice theoretical results about the linearization of a single set of transactions having a global and object optimum, this does not hold once replacements are introduced. Once you're considering an optimal choice/order of transaction among a set with dependencies *and* conflicts, it is not a well defined problem what the better one is even, let alone having an algorithm for picking the best one.\n\nHowever, our general thinking is that this isn't really a problem, because people in practice don't reason about replacement fees. Even today, with the relatively simple (compared to post cluster mempool RBF) BIP125 rules, people just fire and forget: if a transaction doesn't look like it's confirming, retry with a higher fee, repeat. With cluster mempool the process would become a lot more opaque, but for more consistent.\n\nMy concern with requiring linearization for relay is however something in addition to problems with general non-confluence of relay. At least with the proposed cluster mempool RBF rules (and nodes individually computing near-optimal cluster linearizations for it), the transaction *will* relay and confirm once its feerate makes it incentive compatible to do. If senders are additionally required to come up with good linearizations themselves, for whatever clusters it may attach to in peers, you're requiring wallets/node to not only decide for themselves, but also for others.\n\n> Is this still the current proposal for RBF in a cluster mempool world?\n\nIt's not, but I don't think the change invalidates anything you said here. Here is a writeup for what post-cluster mempool RBF would become (it focuses on package RBF, which is even more complicated, but just imagine the transactions are submitted one by one now): https://delvingbitcoin.org/t/post-clustermempool-package-rbf-per-chunk-processing/190",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}