{
  "id": 4508,
  "name": "",
  "username": "josh",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josh/{size}/95_2.png",
  "created_at": "2025-03-13T03:10:13.658Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"JeremyRubin\" data-post=\"7\" data-topic=\"1517\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/jeremyrubin/48/264_2.png\" class=\"avatar\"> JeremyRubin:</div>\n<blockquote>\n<p>Just the sequences, ScriptSigs, input index, and the input count are committed to. So if you have an \u201coffer\u201d branch where funds need to be added, it can bind to a payment to a particular user.</p>\n<p>But if the other input is a p2sh or legacy, the commitment to scriptsig containing a signature will commit to the specific inputs.</p>\n<p>So if you gather the signature, e.g., using ANYONECANPAY, then you can get it to work because you avoid the hash cycle and commit to your input and can form a CTV, the CTV would be able to commit to the other inputs.</p>\n</blockquote>\n</aside>\n<p>Oh I got it! That\u2019s pretty cool, but sadly I don\u2019t think it will help with my use case.</p>\n<p>You can create a rune buy offer today for a single UTXO holding <span class=\"math\">X</span> runes of type <span class=\"math\">R</span> by creating a PSBT with SIGHASH_ALL committing to the entire transaction, leaving the seller\u2019s input for them to sign. This is how <code>ord</code> implements <a href=\"https://github.com/ordinals/ord/blob/ca9950a1dc702bad082ba016c62eaa88456e99fa/src/subcommand/wallet/offer/create.rs\" rel=\"noopener nofollow ugc\">inscription buy offers</a>.</p>\n<p>The problem is that you can\u2019t realistically do this at scale, without creating a ridiculous number of signatures. You would need to sign a distinct PSBT for each UTXO with a balance of at least <span class=\"math\">X</span> runes of type <span class=\"math\">R</span>, which could number in the 1000s or 10s of 1000s, or more.</p>\n<p>Unless I\u2019m missing something, CTV can\u2019t help here.</p>\n<p>My idea was for the bidder to first create a transaction <span class=\"math\">T_0</span> that commits to a P2TR output that has a unique script spend path <span class=\"math\">S_i</span> for each UTXO <span class=\"math\">U_i</span> they\u2019re bidding on. There would be no signatures in the script spend path, just a commitment to a transaction <span class=\"math\">T_i</span> that has the buyer\u2019s output, the seller\u2019s output, and an <code>OP_RETURN</code> that sends <span class=\"math\">X</span> runes to the buyer\u2019s output.</p>\n<p>The transaction <span class=\"math\">T_0</span> could then be easily broadcast, and any owner of rune <span class=\"math\">R</span> at <span class=\"math\">U_i</span> could create and sign the \u201creveal\u201d transaction <span class=\"math\">T_i</span> that sends the runes to the bidder and claims the sats for themselves.</p>\n<p>This though would require some way to commit to the spent outpoint <span class=\"math\">U_i</span>, but I\u2019m afraid there\u2019s no way to do that with CTV.</p>",
  "post_number": 8,
  "post_type": 1,
  "updated_at": "2025-03-13T03:15:16.270Z",
  "reply_count": 0,
  "reply_to_post_number": 7,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 0.6,
  "yours": false,
  "topic_id": 1517,
  "topic_slug": "question-about-op-ctv-and-non-recursive-covenants",
  "topic_title": "Question about OP_CTV and Non-Recursive Covenants",
  "topic_html_title": "Question about OP_CTV and Non-Recursive Covenants",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"JeremyRubin, post:7, topic:1517, full:true\"]\nJust the sequences, ScriptSigs, input index, and the input count are committed to. So if you have an \"offer\" branch where funds need to be added, it can bind to a payment to a particular user.\n\nBut if the other input is a p2sh or legacy, the commitment to scriptsig containing a signature will commit to the specific inputs.\n\nSo if you gather the signature, e.g., using ANYONECANPAY, then you can get it to work because you avoid the hash cycle and commit to your input and can form a CTV, the CTV would be able to commit to the other inputs.\n[/quote]\nOh I got it! That's pretty cool, but sadly I don't think it will help with my use case.\n\nYou can create a rune buy offer today for a single UTXO holding $X$ runes of type $R$ by creating a PSBT with SIGHASH_ALL committing to the entire transaction, leaving the seller's input for them to sign. This is how `ord` implements [inscription buy offers](https://github.com/ordinals/ord/blob/ca9950a1dc702bad082ba016c62eaa88456e99fa/src/subcommand/wallet/offer/create.rs).\n\nThe problem is that you can't realistically do this at scale, without creating a ridiculous number of signatures. You would need to sign a distinct PSBT for each UTXO with a balance of at least $X$ runes of type $R$, which could number in the 1000s or 10s of 1000s, or more.\n\nUnless I'm missing something, CTV can't help here.\n\nMy idea was for the bidder to first create a transaction $T_0$ that commits to a P2TR output that has a unique script spend path $S_i$ for each UTXO $U_i$ they're bidding on. There would be no signatures in the script spend path, just a commitment to a transaction $T_i$ that has the buyer's output, the seller's output, and an `OP_RETURN` that sends $X$ runes to the buyer's output.\n\nThe transaction $T_0$ could then be easily broadcast, and any owner of rune $R$ at $U_i$ could create and sign the \"reveal\" transaction $T_i$ that sends the runes to the bidder and claims the sats for themselves.\n\nThis though would require some way to commit to the spent outpoint $U_i$, but I'm afraid there's no way to do that with CTV.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 98,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}