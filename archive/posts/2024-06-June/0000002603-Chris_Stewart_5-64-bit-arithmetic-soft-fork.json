{
  "id": 2603,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/user_avatar/delvingbitcoin.org/chris_stewart_5/{size}/296_2.png",
  "created_at": "2024-06-02T16:50:39.758Z",
  "cooked": "<p>Hi everyone, a new update:</p>\n<aside class=\"onebox githubfolder\" data-onebox-src=\"https://github.com/Christewart/bitcoin/tree/64bit-arith-implicit\">\n  <header class=\"source\">\n      <img src=\"https://github.githubassets.com/favicons/favicon.svg\" class=\"site-icon\" width=\"32\" height=\"32\">\n\n      <a href=\"https://github.com/Christewart/bitcoin/tree/64bit-arith-implicit\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h3><a href=\"https://github.com/Christewart/bitcoin/tree/64bit-arith-implicit\" target=\"_blank\" rel=\"noopener nofollow ugc\">GitHub - Christewart/bitcoin at 64bit-arith-implicit</a></h3>\n\n  <p><a href=\"https://github.com/Christewart/bitcoin/tree/64bit-arith-implicit\" target=\"_blank\" rel=\"noopener nofollow ugc\">64bit-arith-implicit</a></p>\n\n  <p><span class=\"label1\">Bitcoin Core integration/staging tree. Contribute to Christewart/bitcoin development by creating an account on GitHub.</span></p>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>This version of 64bit arithmetic</p>\n<ul>\n<li>Removes 64bit specific opcodes in favor repurposing existing opcodes (<code>OP_ADD64</code> \u2192 <code>OP_ADD</code>, <code>OP_SUB64</code> \u2192 <code>OP_SUB</code>, <code>OP_MUL64</code> \u2192 <code>OP_MUL</code>, <code>OP_DIV64</code> \u2192 <code>OP_DIV</code> etc).</li>\n<li>Every opcode in <code>interpreter.cpp</code> that use to accept a <code>CScriptNum</code> input now accepts a <code>int64_t</code> stack parameter. For instance, <code>OP_1ADD</code> accepts a <code>int64_t</code> stack top argument, and pushes a <code>int64_t</code> back onto the stack along with a bool indicating if the <code>OP_1ADD</code> execution was successful.</li>\n<li>Removes casting opcodes (<code>OP_SCRIPTNUMTOLE64</code>, <code>OP_LE64TOSCRIPTNUM</code>, <code>OP_LE32TOLE64</code>)</li>\n</ul>\n<p>I think this PR provides for a better developer experience as Script developers</p>\n<ol>\n<li>No longer have to think about which opcode to use (<code>OP_ADD</code> or <code>OP_ADD64</code>, <code>OP_LESSTHAN</code> or <code>OP_LESSTHAN64</code>, etc)</li>\n<li>No longer have to worry about casting the stack top with previous casting op codes (<code>OP_SCRIPTNUMTOLE64</code>, <code>OP_LE64TOSCRIPTNUM</code>, <code>OP_LE32TOLE64</code>)</li>\n</ol>\n<p>This 64bit implementation would mean existing Scripts that typically use <em>constant</em> numeric arguments \u2013 such as <code>OP_CHECKLOCKTIMEVERIFY</code>/<code>OP_CHECKSEQUENCEVERIFY</code> would need to be rewritten to pass in 8 byte parameters rather than 5 byte parameters.</p>\n<p>This PR heavily relies on pattern matching on <code>SigVersion</code> to determine what the implementation of the opcode should do.</p>\n<p>For instance, here is the implementation of <code>OP_DEPTH</code></p>\n<aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/Christewart/bitcoin/blob/019907039c7d342f3c1fe3c7f3dd9db879661c9e/src/script/interpreter.cpp#L1185\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/Christewart/bitcoin/blob/019907039c7d342f3c1fe3c7f3dd9db879661c9e/src/script/interpreter.cpp#L1185\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/Christewart/bitcoin/blob/019907039c7d342f3c1fe3c7f3dd9db879661c9e/src/script/interpreter.cpp#L1185\" target=\"_blank\" rel=\"noopener nofollow ugc\">Christewart/bitcoin/blob/019907039c7d342f3c1fe3c7f3dd9db879661c9e/src/script/interpreter.cpp#L1185</a></h4>\n\n\n\n    <pre class=\"onebox\"><code class=\"lang-cpp\">\n      <ol class=\"start lines\" start=\"1175\" style=\"counter-reset: li-counter 1174 ;\">\n          <li>{</li>\n          <li>    // (x - 0 | x x)</li>\n          <li>    if (stack.size() &lt; 1)</li>\n          <li>        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);</li>\n          <li>    valtype vch = stacktop(-1);</li>\n          <li>    if (CastToBool(vch))</li>\n          <li>        stack.push_back(vch);</li>\n          <li>}</li>\n          <li>break;</li>\n          <li></li>\n          <li class=\"selected\">case OP_DEPTH:</li>\n          <li>{</li>\n          <li>    switch (sigversion)</li>\n          <li>    {</li>\n          <li>        case SigVersion::BASE:</li>\n          <li>        case SigVersion::WITNESS_V0:</li>\n          <li>        case SigVersion::TAPROOT:</li>\n          <li>        case SigVersion::TAPSCRIPT:</li>\n          <li>        {</li>\n          <li>            // -- stacksize</li>\n          <li>            CScriptNum bn(stack.size());</li>\n      </ol>\n    </code></pre>\n\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>In the future, if we want to redefine semantics of <code>OP_DEPTH</code> we can now pattern match on the <code>SigVersion</code> and substitute the new implementation.</p>\n<p>I think this provides us a nice framework for upgrading the interpreter in the future. We will have the compiler give errors in places where we aren\u2019t handling a new <code>SigVersion</code> introduced in the codebase (exhaustiveness checks), and force us to handle that case.</p>",
  "post_number": 49,
  "post_type": 1,
  "updated_at": "2024-06-02T17:07:11.430Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 0.6,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Hi everyone, a new update:\n\nhttps://github.com/Christewart/bitcoin/tree/64bit-arith-implicit\n\nThis version of 64bit arithmetic\n\n* Removes 64bit specific opcodes in favor repurposing existing opcodes (`OP_ADD64` -> `OP_ADD`, `OP_SUB64` -> `OP_SUB`, `OP_MUL64` -> `OP_MUL`, `OP_DIV64` -> `OP_DIV` etc).\n* Every opcode in `interpreter.cpp` that use to accept a `CScriptNum` input now accepts a `int64_t` stack parameter. For instance, `OP_1ADD` accepts a `int64_t` stack top argument, and pushes a `int64_t` back onto the stack along with a bool indicating if the `OP_1ADD` execution was successful.\n* Removes casting opcodes (`OP_SCRIPTNUMTOLE64`, `OP_LE64TOSCRIPTNUM`, `OP_LE32TOLE64`)\n\nI think this PR provides for a better developer experience as Script developers \n\n1. No longer have to think about which opcode to use (`OP_ADD` or `OP_ADD64`, `OP_LESSTHAN` or `OP_LESSTHAN64`, etc)\n2. No longer have to worry about casting the stack top with previous casting op codes (`OP_SCRIPTNUMTOLE64`, `OP_LE64TOSCRIPTNUM`, `OP_LE32TOLE64`)\n\nThis 64bit implementation would mean existing Scripts that typically use _constant_ numeric arguments -- such as `OP_CHECKLOCKTIMEVERIFY`/`OP_CHECKSEQUENCEVERIFY` would need to be rewritten to pass in 8 byte parameters rather than 5 byte parameters.\n\nThis PR heavily relies on pattern matching on `SigVersion` to determine what the implementation of the opcode should do.\n\nFor instance, here is the implementation of `OP_DEPTH`\n\nhttps://github.com/Christewart/bitcoin/blob/019907039c7d342f3c1fe3c7f3dd9db879661c9e/src/script/interpreter.cpp#L1185\n\nIn the future, if we want to redefine semantics of `OP_DEPTH` we can now pattern match on the `SigVersion` and substitute the new implementation.\n\nI think this provides us a nice framework for upgrading the interpreter in the future. We will have the compiler give errors in places where we aren't handling a new `SigVersion` introduced in the codebase (exhaustiveness checks), and force us to handle that case.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}