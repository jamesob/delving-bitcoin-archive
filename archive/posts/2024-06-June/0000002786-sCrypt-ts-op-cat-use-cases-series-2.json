{
  "id": 2786,
  "name": "sCrypt",
  "username": "sCrypt-ts",
  "avatar_template": "/letter_avatar_proxy/v4/letter/s/94ad74/{size}.png",
  "created_at": "2024-06-25T13:31:43.619Z",
  "cooked": "<h1><a name=\"bitcoin-op_cat-use-cases-series-2-merkle-trees-1\" class=\"anchor\" href=\"#bitcoin-op_cat-use-cases-series-2-merkle-trees-1\"></a>Bitcoin OP_CAT Use Cases Series <span class=\"hashtag-raw\">#2:</span> Merkle Trees</h1>\n<p>Following our <a href=\"https://scryptplatform.medium.com/trustless-ordinal-sales-using-op-cat-enabled-covenants-on-bitcoin-0318052f02b2\" rel=\"noopener nofollow ugc\">series #1</a>, we demonstrate how to construct and verify Merkle trees using OP_CAT.</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/1X/031cd42f15d5197efc9ae588acec532884296c69.jpeg\" data-download-href=\"https://delvingbitcoin.org/uploads/default/031cd42f15d5197efc9ae588acec532884296c69\" title=\"\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/1X/031cd42f15d5197efc9ae588acec532884296c69_2_690x394.jpeg\" alt=\"\" data-base62-sha1=\"rxcgOJLu6Q7xijDjZsjxrBhnAJ\" width=\"690\" height=\"394\" role=\"presentation\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/1X/031cd42f15d5197efc9ae588acec532884296c69_2_690x394.jpeg, https://delvingbitcoin.org/uploads/default/original/1X/031cd42f15d5197efc9ae588acec532884296c69.jpeg 1.5x, https://delvingbitcoin.org/uploads/default/original/1X/031cd42f15d5197efc9ae588acec532884296c69.jpeg 2x\" data-dominant-color=\"BEB9B2\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\"></span><span class=\"informations\">700\u00d7400 94 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>In Bitcoin, Merkle trees are utilized as the data structure for verifying data, synchronization, and effectively linking the blockchain\u2019s transactions and blocks together. The OP_CAT opcode, which allows for the concatenation of two stack variables, can be used with SHA256 hashes of public keys to streamline the Merkle tree verification process within Bitcoin Script. OP_CAT uniquely allows for the creation and opening of entries in Merkle trees, as the fundamental operation for building and verifying Merkle trees involves concatenating two values and then hashing them.</p>\n<p>There are numerous applications for Merkle trees. We list a few prominent examples below.</p>\n<h2><a name=\"merkle-proof-2\" class=\"anchor\" href=\"#merkle-proof-2\"></a>Merkle proof</h2>\n<p>A Merkle proof is a cryptographic method used to verify that a specific transaction is included in a Merkle tree without needing to download the entire blockchain. This is particularly useful for lightweight clients and enhancing the efficiency of data verification.</p>\n<h2><a name=\"tree-signature-3\" class=\"anchor\" href=\"#tree-signature-3\"></a>Tree signature</h2>\n<p>A <a href=\"https://scryptplatform.medium.com/tree-signatures-8d03a8dd3077\" rel=\"noopener nofollow ugc\">tree signature</a> is a cryptographic method that enhances the security and efficiency of digital signatures using tree structures, particularly Merkle trees. Compared to regular Multisig, this approach is used to generate a more compact and private proof that a message or a set of messages has been signed by a specific key.</p>\n<h2><a name=\"zero-knowledge-proof-4\" class=\"anchor\" href=\"#zero-knowledge-proof-4\"></a>Zero-Knowledge Proof</h2>\n<p>STARK (Succinct Transparent Arguments of Knowledge) is a type of zero-knowledge proof system. STARKs are designed to allow a prover to demonstrate the validity of a computation to a verifier without revealing any sensitive information about the computation itself. If OP_CAT were to be added to Bitcoin, it could potentially enable the implementation of a <a href=\"https://starkware.co/scaling-bitcoin-for-mass-use\" rel=\"noopener nofollow ugc\">STARK verifier</a> in Bitcoin Script, with <a href=\"https://github.com/Bitcoin-Wildlife-Sanctuary/bitcoin-circle-stark/\" rel=\"noopener nofollow ugc\">work already ongoing</a>. This would allow for secure and private transactions on the Bitcoin network. Compared to pairing-based proof systems such as SNARK, STARK is considered to be <a href=\"https://hackmd.io/@l2iterative/bitcoin-polyhedra\" rel=\"noopener nofollow ugc\">more Bitcoin-friendly</a>.</p>\n<h1><a name=\"implementation-5\" class=\"anchor\" href=\"#implementation-5\"></a>Implementation</h1>\n<p>The implementation of the merkle tree using sCrypt is trivial. The following code calculates the root hash of a merkle tree, given a leaf and its merkle path, commonly used in verifying a merkle proof.</p>\n<pre><code class=\"lang-auto\">/**\n * According to the given leaf node and merkle path, calculate the hash of the root node of the merkle tree.\n*/\n@method()\nstatic calcMerkleRoot(\n    leaf: Sha256,\n    merkleProof: MerkleProof\n): Sha256 {\n    let root = leaf\n\n    for (let i = 0; i &lt; MERKLE_PROOF_MAX_DEPTH; i++) {\n        const node = merkleProof[i]\n        if (node.pos != NodePos.Invalid) {\n            // s is valid\n            root =\n                node.pos == NodePos.Left\n                    ? Sha256(hash256(node.hash + root))\n                    : Sha256(hash256(root + node.hash))\n        }\n    }\n\n    return root\n}\n</code></pre>\n<p>Full code is at <a href=\"https://github.com/sCrypt-Inc/scrypt-btc-merkle\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - sCrypt-Inc/scrypt-btc-merkle</a>.</p>\n<p>A single run results in the following transactions:</p>\n<ul>\n<li><strong>Deploying Transaction ID</strong>:</li>\n</ul>\n<p>[</p>\n<h2><a name=\"bitcoin-signet-transaction-c9c421b556458e0be9ec4043e1804d951011047b4cc75c991842b91b11bae006-6\" class=\"anchor\" href=\"#bitcoin-signet-transaction-c9c421b556458e0be9ec4043e1804d951011047b4cc75c991842b91b11bae006-6\"></a>Bitcoin Signet Transaction: c9c421b556458e0be9ec4043e1804d951011047b4cc75c991842b91b11bae006</h2>\n<h3><a name=\"explore-the-full-bitcoin-ecosystem-with-the-mempool-open-source-project-see-the-real-time-status-of-your-7\" class=\"anchor\" href=\"#explore-the-full-bitcoin-ecosystem-with-the-mempool-open-source-project-see-the-real-time-status-of-your-7\"></a>Explore the full Bitcoin ecosystem with The Mempool Open Source Project\u00ae. See the real-time status of your\u2026</h3>\n<p>mempool.space\n](<a href=\"https://mempool.space/signet/tx/c9c421b556458e0be9ec4043e1804d951011047b4cc75c991842b91b11bae006?source=post_page-----8e7c3f7afe8d--------------------------------\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">mempool - Bitcoin Explorer</a>)</p>\n<ul>\n<li><strong>Spending Transaction ID</strong></li>\n</ul>\n<p>[</p>\n<h2><a name=\"bitcoin-signet-transaction-e9ac5444d7d20a20011f6dcac04419e2c5581e79bf0692ccd2dc4bbb9bd74e28-8\" class=\"anchor\" href=\"#bitcoin-signet-transaction-e9ac5444d7d20a20011f6dcac04419e2c5581e79bf0692ccd2dc4bbb9bd74e28-8\"></a>Bitcoin Signet Transaction: e9ac5444d7d20a20011f6dcac04419e2c5581e79bf0692ccd2dc4bbb9bd74e28</h2>\n<h3><a name=\"explore-the-full-bitcoin-ecosystem-with-the-mempool-open-source-project-see-the-real-time-status-of-your-9\" class=\"anchor\" href=\"#explore-the-full-bitcoin-ecosystem-with-the-mempool-open-source-project-see-the-real-time-status-of-your-9\"></a>Explore the full Bitcoin ecosystem with The Mempool Open Source Project\u00ae. See the real-time status of your\u2026</h3>\n<p>mempool.space\n](<a href=\"https://mempool.space/signet/tx/e9ac5444d7d20a20011f6dcac04419e2c5581e79bf0692ccd2dc4bbb9bd74e28?source=post_page-----8e7c3f7afe8d--------------------------------\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">mempool - Bitcoin Explorer</a>)</p>\n<p><a href=\"https://mempool.space/signet/tx/e9ac5444d7d20a20011f6dcac04419e2c5581e79bf0692ccd2dc4bbb9bd74e28#vin=0\" rel=\"noopener nofollow ugc\">Many OP_CATs</a></p>\n<h2><a name=\"script-versions-10\" class=\"anchor\" href=\"#script-versions-10\"></a>Script versions</h2>\n<p>There are alternative implementations in bare scripts, like the one below. One significant advantage of using sCrypt for implementing merkle trees is its readability and maintainability. Scripts are often extremely hard to read and work on.</p>\n<pre><code class=\"lang-auto\">OP_TOALTSTACK\nOP_CAT\nOP_CAT\nOP_TOALTSTACK\nOP_CAT\nOP_TOALTSTACK\n\n&lt;0x8743daaedb34ef07d3296d279003603c45af71018431fd26e4957e772df122cb&gt;\nOP_CAT\nOP_CAT\nOP_HASH256\n\nOP_DEPTH\nOP_1SUB\nOP_NOT\nOP_NOTIF\nOP_SWAP\nOP_CAT\nOP_CAT\nOP_HASH256\n\nOP_DEPTH\nOP_1SUB\nOP_NOT\nOP_NOTIF\nOP_SWAP\nOP_CAT\nOP_CAT\nOP_HASH256\n\nOP_DEPTH\nOP_1SUB\nOP_NOT\nOP_NOTIF\nOP_SWAP\nOP_CAT\nOP_CAT\nOP_HASH256\n\nOP_DEPTH\nOP_1SUB\nOP_NOT\nOP_NOTIF\nOP_SWAP\nOP_CAT\nOP_CAT\nOP_HASH256\n\nOP_DEPTH\nOP_1SUB\nOP_NOT\nOP_NOTIF\nOP_SWAP\nOP_CAT\nOP_CAT\nOP_HASH256\n\n...\n</code></pre>\n<p>Stay tuned for more OP_CAT use cases.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-06-25T13:36:48.616Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 5,
  "reads": 4,
  "readers_count": 3,
  "score": 25.8,
  "yours": false,
  "topic_id": 988,
  "topic_slug": "op-cat-use-cases-series-2",
  "topic_title": "OP_CAT Use Cases series 2",
  "topic_html_title": "OP_CAT Use Cases series 2",
  "category_id": 8,
  "display_username": "sCrypt",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "# Bitcoin OP_CAT Use Cases Series #2: Merkle Trees\n\nFollowing our [series #1](https://scryptplatform.medium.com/trustless-ordinal-sales-using-op-cat-enabled-covenants-on-bitcoin-0318052f02b2), we demonstrate how to construct and verify Merkle trees using OP_CAT.\n\n![|700x400](upload://rxcgOJLu6Q7xijDjZsjxrBhnAJ.jpeg)\n\nIn Bitcoin, Merkle trees are utilized as the data structure for verifying data, synchronization, and effectively linking the blockchain\u2019s transactions and blocks together. The OP_CAT opcode, which allows for the concatenation of two stack variables, can be used with SHA256 hashes of public keys to streamline the Merkle tree verification process within Bitcoin Script. OP_CAT uniquely allows for the creation and opening of entries in Merkle trees, as the fundamental operation for building and verifying Merkle trees involves concatenating two values and then hashing them.\n\nThere are numerous applications for Merkle trees. We list a few prominent examples below.\n\n## Merkle proof\n\nA Merkle proof is a cryptographic method used to verify that a specific transaction is included in a Merkle tree without needing to download the entire blockchain. This is particularly useful for lightweight clients and enhancing the efficiency of data verification.\n\n## Tree signature\n\nA [tree signature](https://scryptplatform.medium.com/tree-signatures-8d03a8dd3077) is a cryptographic method that enhances the security and efficiency of digital signatures using tree structures, particularly Merkle trees. Compared to regular Multisig, this approach is used to generate a more compact and private proof that a message or a set of messages has been signed by a specific key.\n\n## Zero-Knowledge Proof\n\nSTARK (Succinct Transparent Arguments of Knowledge) is a type of zero-knowledge proof system. STARKs are designed to allow a prover to demonstrate the validity of a computation to a verifier without revealing any sensitive information about the computation itself. If OP_CAT were to be added to Bitcoin, it could potentially enable the implementation of a [STARK verifier](https://starkware.co/scaling-bitcoin-for-mass-use) in Bitcoin Script, with [work already ongoing](https://github.com/Bitcoin-Wildlife-Sanctuary/bitcoin-circle-stark/). This would allow for secure and private transactions on the Bitcoin network. Compared to pairing-based proof systems such as SNARK, STARK is considered to be [more Bitcoin-friendly](https://hackmd.io/@l2iterative/bitcoin-polyhedra).\n\n# Implementation\n\nThe implementation of the merkle tree using sCrypt is trivial. The following code calculates the root hash of a merkle tree, given a leaf and its merkle path, commonly used in verifying a merkle proof.\n\n```\n/**\n * According to the given leaf node and merkle path, calculate the hash of the root node of the merkle tree.\n*/\n@method()\nstatic calcMerkleRoot(\n    leaf: Sha256,\n    merkleProof: MerkleProof\n): Sha256 {\n    let root = leaf\n\n    for (let i = 0; i < MERKLE_PROOF_MAX_DEPTH; i++) {\n        const node = merkleProof[i]\n        if (node.pos != NodePos.Invalid) {\n            // s is valid\n            root =\n                node.pos == NodePos.Left\n                    ? Sha256(hash256(node.hash + root))\n                    : Sha256(hash256(root + node.hash))\n        }\n    }\n\n    return root\n}\n```\n\nFull code is at https://github.com/sCrypt-Inc/scrypt-btc-merkle.\n\nA single run results in the following transactions:\n\n* **Deploying Transaction ID**:\n\n[\n## Bitcoin Signet Transaction: c9c421b556458e0be9ec4043e1804d951011047b4cc75c991842b91b11bae006\n### Explore the full Bitcoin ecosystem with The Mempool Open Source Project\u00ae. See the real-time status of your\u2026\nmempool.space\n](https://mempool.space/signet/tx/c9c421b556458e0be9ec4043e1804d951011047b4cc75c991842b91b11bae006?source=post_page-----8e7c3f7afe8d--------------------------------)\n\n* **Spending Transaction ID**\n\n[\n## Bitcoin Signet Transaction: e9ac5444d7d20a20011f6dcac04419e2c5581e79bf0692ccd2dc4bbb9bd74e28\n### Explore the full Bitcoin ecosystem with The Mempool Open Source Project\u00ae. See the real-time status of your\u2026\nmempool.space\n](https://mempool.space/signet/tx/e9ac5444d7d20a20011f6dcac04419e2c5581e79bf0692ccd2dc4bbb9bd74e28?source=post_page-----8e7c3f7afe8d--------------------------------)\n\n[Many OP_CATs](https://mempool.space/signet/tx/e9ac5444d7d20a20011f6dcac04419e2c5581e79bf0692ccd2dc4bbb9bd74e28#vin=0)\n\n## Script versions\n\nThere are alternative implementations in bare scripts, like the one below. One significant advantage of using sCrypt for implementing merkle trees is its readability and maintainability. Scripts are often extremely hard to read and work on.\n\n```\nOP_TOALTSTACK\nOP_CAT\nOP_CAT\nOP_TOALTSTACK\nOP_CAT\nOP_TOALTSTACK\n\n<0x8743daaedb34ef07d3296d279003603c45af71018431fd26e4957e772df122cb>\nOP_CAT\nOP_CAT\nOP_HASH256\n\nOP_DEPTH\nOP_1SUB\nOP_NOT\nOP_NOTIF\nOP_SWAP\nOP_CAT\nOP_CAT\nOP_HASH256\n\nOP_DEPTH\nOP_1SUB\nOP_NOT\nOP_NOTIF\nOP_SWAP\nOP_CAT\nOP_CAT\nOP_HASH256\n\nOP_DEPTH\nOP_1SUB\nOP_NOT\nOP_NOTIF\nOP_SWAP\nOP_CAT\nOP_CAT\nOP_HASH256\n\nOP_DEPTH\nOP_1SUB\nOP_NOT\nOP_NOTIF\nOP_SWAP\nOP_CAT\nOP_CAT\nOP_HASH256\n\nOP_DEPTH\nOP_1SUB\nOP_NOT\nOP_NOTIF\nOP_SWAP\nOP_CAT\nOP_CAT\nOP_HASH256\n\n...\n```\n\nStay tuned for more OP_CAT use cases.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 477,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "downloaded local copies of images",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}