{
  "id": 2813,
  "name": "",
  "username": "roasbeef",
  "avatar_template": "/user_avatar/delvingbitcoin.org/roasbeef/{size}/160_2.png",
  "created_at": "2024-06-27T20:51:12.782Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"t-bast\" data-post=\"5\" data-topic=\"991\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/t-bast/48/98_2.png\" class=\"avatar\"> t-bast:</div>\n<blockquote>\n<p>but if I had to choose between adding blinded paths to Bolt 11 invoices or exposing Bolt 12 invoice, I\u2019d rather expose Bolt 12 invoices. This requires less code and less additional spec work.</p>\n</blockquote>\n</aside>\n<p>IIUC, we would still need spec modifications, in order to allow fields that are currently considered mandatory (fields referencing the offer ID, etc) to now be optional. Most of the text above is also an Appendix re how to estimate the size of the BOLT11 invoice with blinded paths, which would still be needed for BOLT 12 invoice.</p>\n<aside class=\"quote no-group\" data-username=\"t-bast\" data-post=\"5\" data-topic=\"991\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/t-bast/48/98_2.png\" class=\"avatar\"> t-bast:</div>\n<blockquote>\n<p>To be honest, I don\u2019t think we should waste time with such intermediate steps (that will need to be maintained for a long time, create technical debt and confusion for users). I find it more useful to focus that time on shipping Bolt 12 code, but that\u2019s just my opinion.</p>\n</blockquote>\n</aside>\n<p>As it\u2019s just a bLIP, so implementations are free to take it or leave it. IMO long term, this helps to make the whole Offers flow more robust, as we\u2019re able to get more experience with blinded paths, find edge cases, implement the new path finding from the receiver, etc, etc. Personally, I prefer to work a small component, and refine that as much as possible before moving onto the next. Otherwise you have all these components which are only partially refined, which may actually <em>extend</em> the full deployment timeline.</p>\n<aside class=\"quote no-group\" data-username=\"t-bast\" data-post=\"5\" data-topic=\"991\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/t-bast/48/98_2.png\" class=\"avatar\"> t-bast:</div>\n<blockquote>\n<p>I don\u2019t think this is very useful\u2026I don\u2019t believe this will prompt users to ask wallet developers to implement stuff, and the only result of that is a bad UX where users scan a QR code and they\u2019re told it doesn\u2019t work.</p>\n</blockquote>\n</aside>\n<p>When presented with an encoded Offer, what does Phoenix/Eclair do today? Does it let the user know that it\u2019s about to try to fetch the offer (retries, fallback, etc) and ask for confirmation, or does it just go ahead in the background with some loading UI? Or is it <em>always</em> direct connect?</p>\n<p>Also in terms of the ultimate switch over to Offers for everything, won\u2019t wallet developers still need to gracefully handle being presented with <em>either</em> a BOLT11 invoice or an Offer? What\u2019s the latest thinking here re UX?</p>\n<p>FWIW, AMP invoice also exist in the wild, and wallets seem to be able to handle detecting if they can or cannot pay it.</p>\n<aside class=\"quote no-group\" data-username=\"t-bast\" data-post=\"5\" data-topic=\"991\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/t-bast/48/98_2.png\" class=\"avatar\"> t-bast:</div>\n<blockquote>\n<p>I haven\u2019t looked at the details in a while, but at a high-level it seems to me that L402 would benefit a lot from using offers rather than hacking blinded paths on top of Bolt 11 invoices? That requires more work to upgrade L402, but I\u2019m a strong believer that doing short-term intermediate \u201chacks\u201d is always a waste of time in the long term because of the maintenance cost.</p>\n</blockquote>\n</aside>\n<p>So L402 is itself an invoice negotiation protocol, the client hits the endpoint, gets the L402 along with the invoice, then pays it. Therefore, Offers doesn\u2019t have much of a role here, as we get an invoice in the HTTP response from the server. This invoice can ofc use blinded paths.</p>\n<hr>\n<p>With all that said, I don\u2019t consider this a hack, as it\u2019s using an existing extension vector in an existing invoice format. This can also be applied to the new invoice format as well. The bulk of the logic and code comes after/before (path finding, blinded hop construction and processing, etc) the invoice is encoded in the first place. Blinded paths itself is also primarily the concern of the onion/routing layer, the encoding/presentation layer is independent of the core component. The fact that people tend to bundle it in their minds with Offers is primarily due to opinionated protocol packaging.</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2024-06-27T20:53:27.553Z",
  "reply_count": 1,
  "reply_to_post_number": 5,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 9,
  "readers_count": 8,
  "score": 6.8,
  "yours": false,
  "topic_id": 991,
  "topic_slug": "blip-bolt-11-invoice-blinded-path-tagged-field",
  "topic_title": "bLIP: BOLT 11 Invoice Blinded Path Tagged Field",
  "topic_html_title": "bLIP: BOLT 11 Invoice Blinded Path Tagged Field",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"t-bast, post:5, topic:991\"]\nbut if I had to choose between adding blinded paths to Bolt 11 invoices or exposing Bolt 12 invoice, I\u2019d rather expose Bolt 12 invoices. This requires less code and less additional spec work.\n[/quote]\n\nIIUC, we would still need spec modifications, in order to allow fields that are currently considered mandatory (fields referencing the offer ID, etc) to now be optional. Most of the text above is also an Appendix re how to estimate the size of the BOLT11 invoice with blinded paths, which would still be needed for BOLT 12 invoice. \n\n[quote=\"t-bast, post:5, topic:991\"]\nTo be honest, I don\u2019t think we should waste time with such intermediate steps (that will need to be maintained for a long time, create technical debt and confusion for users). I find it more useful to focus that time on shipping Bolt 12 code, but that\u2019s just my opinion.\n[/quote]\n\nAs it's just a bLIP, so implementations are free to take it or leave it. IMO long term, this helps to make the whole Offers flow more robust, as we're able to get more experience with blinded paths, find edge cases, implement the new path finding from the receiver, etc, etc. Personally, I prefer to work a small component, and refine that as much as possible before moving onto the next. Otherwise you have all these components which are only partially refined, which may actually _extend_ the full deployment timeline. \n\n[quote=\"t-bast, post:5, topic:991\"]\nI don\u2019t think this is very useful\u2026I don\u2019t believe this will prompt users to ask wallet developers to implement stuff, and the only result of that is a bad UX where users scan a QR code and they\u2019re told it doesn\u2019t work.\n[/quote]\n\nWhen presented with an encoded Offer, what does Phoenix/Eclair do today? Does it let the user know that it's about to try to fetch the offer (retries, fallback, etc) and ask for confirmation, or does it just go ahead in the background with some loading UI? Or is it _always_ direct connect? \n\nAlso in terms of the ultimate switch over to Offers for everything, won't wallet developers still need to gracefully handle being presented with _either_ a BOLT11 invoice or an Offer? What's the latest thinking here re UX?\n\nFWIW, AMP invoice also exist in the wild, and wallets seem to be able to handle detecting if they can or cannot pay it. \n\n[quote=\"t-bast, post:5, topic:991\"]\nI haven\u2019t looked at the details in a while, but at a high-level it seems to me that L402 would benefit a lot from using offers rather than hacking blinded paths on top of Bolt 11 invoices? That requires more work to upgrade L402, but I\u2019m a strong believer that doing short-term intermediate \u201chacks\u201d is always a waste of time in the long term because of the maintenance cost.\n[/quote]\n\nSo L402 is itself an invoice negotiation protocol, the client hits the endpoint, gets the L402 along with the invoice, then pays it. Therefore, Offers doesn't have much of a role here, as we get an invoice in the HTTP response from the server. This invoice can ofc use blinded paths. \n\n---\n\nWith all that said, I don't consider this a hack, as it's using an existing extension vector in an existing invoice format. This can also be applied to the new invoice format as well. The bulk of the logic and code comes after/before (path finding, blinded hop construction and processing, etc) the invoice is encoded in the first place. Blinded paths itself is also primarily the concern of the onion/routing layer, the encoding/presentation layer is independent of the core component. The fact that people tend to bundle it in their minds with Offers is primarily due to opinionated protocol packaging.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 143,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}