{
  "id": 2712,
  "name": "Ava Chow",
  "username": "achow101",
  "avatar_template": "/user_avatar/delvingbitcoin.org/achow101/{size}/200_2.png",
  "created_at": "2024-06-13T23:11:18.592Z",
  "cooked": "<p>I had a call with <a class=\"mention\" href=\"/u/josibake\">@josibake</a> last week discussing this, and I have a different proposal that I think is more efficient and also covers all of the edge cases.</p>\n<p>There would be the following new input fields:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>Field name</th>\n<th><code>&lt;keydata&gt;</code></th>\n<th>key description</th>\n<th><code>&lt;valuedata&gt;</code></th>\n<th>value description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PSBT_IN_SP_ECDH_SHARE</code></td>\n<td><code>&lt;33 byte scan key&gt;</code></td>\n<td>The scan key this ECDH share is for</td>\n<td><code>&lt;32 byte share&gt;</code></td>\n<td>ECDH share for a scan key, computed with <code>a * B_scan</code> where <code>a</code> is this input\u2019s private key and <code>B_scan</code> is the scan key of a recipient</td>\n</tr>\n<tr>\n<td><code>PSBT_IN_SP_DLEQ</code></td>\n<td><code>&lt;33 byte scan key&gt;</code></td>\n<td>The scan key this proof covers</td>\n<td><code>&lt;64 byte dleq proof&gt;</code></td>\n<td>The DLEQ proof computed with this input\u2019s private key and the scan key of the recipient</td>\n</tr>\n</tbody>\n</table>\n</div><p>and the following new output field:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>Field name</th>\n<th><code>&lt;keydata&gt;</code></th>\n<th>key description</th>\n<th><code>&lt;valuedata&gt;</code></th>\n<th>value description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>PSBT_OUT_SP_V0_INFO</code></td>\n<td>None</td>\n<td>No key data</td>\n<td><code>&lt;33 byte scan key&gt; &lt;33 byte spend key&gt;</code></td>\n<td>The silent payments scan and spend pubkeys from the silent payments address</td>\n</tr>\n</tbody>\n</table>\n</div><p>With these fields, I believe it is okay to use PSBTv2 instead of defining a PSBTv3, with one modification to PSBTv2\u2019s invariats: at least one of <code>PSBT_OUT_SCRIPT</code> or <code>PSBT_OUT_SP_V0_INFO</code> must be present; both can also be included. For silent payment\u2019s aware parsers, the <code>PSBT_OUT_SP_V0_INFO</code> lets them compute the output script once all of the inputs are set and the ECDH shares are computed. For unaware parsers, the lack of <code>PSBT_OUT_SCRIPT</code> means that the PSBT will be seen as invalid and therefore abort and not do anything that could be problematic. Once all information is available, both could be set, in which case both silent payment\u2019s aware and unaware parsers will be able to handle the PSBT correctly.</p>\n<p>The silent payments signers must check that the <code>PSBT_OUT_SCRIPT</code> is as expected if both <code>PSBT_OUT_SCRIPT</code> and <code>PSBT_OUT_SP_V0_INFO</code> are present. I suppose there is some risk of being tricked if you have an unaware signer, but that seems unlikely as they should be validating that the output script is as expected, and what would an unaware parser be expecting for this kind of output?</p>\n<p>I also don\u2019t think there is a need for any changes to <code>PSBT_GLOBAL_TX_MODIFIABLE</code>.</p>\n<p>In particular, constructors adding silent payments outputs need there to be either no inputs in the transaction, or that no inputs use a segwit version greater than 1. Signers will also need to validate that if there are any silent payments v0 outputs, there are no segwit v2+ inputs.</p>\n<hr>\n<p>I\u2019m probably forgetting a few things, but <a class=\"mention\" href=\"/u/josibake\">@josibake</a> has notes so hopefully those can cover whatever it is I\u2019ve forgotten.</p>",
  "post_number": 13,
  "post_type": 1,
  "updated_at": "2024-06-13T23:11:18.592Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 6,
  "readers_count": 5,
  "score": 0.8,
  "yours": false,
  "topic_id": 877,
  "topic_slug": "bip352-psbt-support",
  "topic_title": "BIP352: PSBT support",
  "topic_html_title": "BIP352: PSBT support",
  "category_id": 12,
  "display_username": "Ava Chow",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I had a call with @josibake last week discussing this, and I have a different proposal that I think is more efficient and also covers all of the edge cases.\n\nThere would be the following new input fields:\n\n| Field name | `<keydata>` | key description | `<valuedata>` | value description |\n|---|---|---|---|---|\n| `PSBT_IN_SP_ECDH_SHARE` | `<33 byte scan key>` | The scan key this ECDH share is for | `<32 byte share>`| ECDH share for a scan key, computed with `a * B_scan` where `a` is this input's private key and `B_scan` is the scan key of a recipient |\n| `PSBT_IN_SP_DLEQ` | `<33 byte scan key>` | The scan key this proof covers | `<64 byte dleq proof>` | The DLEQ proof computed with this input's private key and the scan key of the recipient |\n\nand the following new output field:\n\n| Field name | `<keydata>` | key description | `<valuedata>` | value description |\n|---|---|---|---|---|\n| `PSBT_OUT_SP_V0_INFO` | None | No key data | `<33 byte scan key> <33 byte spend key>` | The silent payments scan and spend pubkeys from the silent payments address |\n\nWith these fields, I believe it is okay to use PSBTv2 instead of defining a PSBTv3, with one modification to PSBTv2's invariats: at least one of `PSBT_OUT_SCRIPT` or `PSBT_OUT_SP_V0_INFO` must be present; both can also be included. For silent payment's aware parsers, the `PSBT_OUT_SP_V0_INFO` lets them compute the output script once all of the inputs are set and the ECDH shares are computed. For unaware parsers, the lack of `PSBT_OUT_SCRIPT` means that the PSBT will be seen as invalid and therefore abort and not do anything that could be problematic. Once all information is available, both could be set, in which case both silent payment's aware and unaware parsers will be able to handle the PSBT correctly.\n\nThe silent payments signers must check that the `PSBT_OUT_SCRIPT` is as expected if both `PSBT_OUT_SCRIPT` and `PSBT_OUT_SP_V0_INFO` are present. I suppose there is some risk of being tricked if you have an unaware signer, but that seems unlikely as they should be validating that the output script is as expected, and what would an unaware parser be expecting for this kind of output?\n\nI also don't think there is a need for any changes to `PSBT_GLOBAL_TX_MODIFIABLE`.\n\nIn particular, constructors adding silent payments outputs need there to be either no inputs in the transaction, or that no inputs use a segwit version greater than 1. Signers will also need to validate that if there are any silent payments v0 outputs, there are no segwit v2+ inputs.\n\n***\n\nI'm probably forgetting a few things, but @josibake has notes so hopefully those can cover whatever it is I've forgotten.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 165,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}