{
  "id": 2626,
  "name": "Garlo Nicon",
  "username": "garlonicon",
  "avatar_template": "/letter_avatar_proxy/v4/letter/g/278dde/{size}.png",
  "created_at": "2024-06-04T13:57:36.086Z",
  "cooked": "<aside class=\"quote no-group\">\n<blockquote>\n<p>Just as you don\u2019t want other people to reuse your proof of work, you don\u2019t want the same person to be able to use a single proof of work twice</p>\n</blockquote>\n</aside>\n<p>All of those problems could be solved, if instead of using Proof of Work from the Script, you check your Proof of Work from your <a href=\"https://mempool.space/tx/000000000fdf0c619cd8e0d512c7e2c0da5a5808e60f12f1e0d01522d2986a51\" data-bbcode=\"true\" rel=\"noopener nofollow ugc\">transaction hash</a>. Then:</p>\n<ol>\n<li>It cannot be stolen, because modifying the transaction in any way (when it comes to legacy parts) will lead to a different transaction hash.</li>\n<li>It can be used once, or thrown away. If you include transaction with one hash, you cannot include it again (there are some quirks, when you reuse the same coinbase transaction in some future block numbers, but most of the time, the system is resistant to duplicated future transaction hashes: if you can duplicate transactions, then there are more serious issues ongoing, like \u201chistory flood attack\u201d).</li>\n<li>If the size of the whole transaction will take 80 bytes, it will be compatible with ASICs. That part can be achieved for example by using different sighashes, like <code>SIGHASH_SINGLE | SIGHASH_ANYONECANPAY</code>, and then require for example z-value of the transaction (hash of the signed message) to contain some leading zeroes.</li>\n<li>Also note, that it may be possible to claim N coins at once, by producing a sufficiently huge Proof of Work. Then, you share for example <a href=\"https://mempool.space/tx/00000000c0747ece95852c2b7d37b09770873ed8b50fb7be2ba3d400defab06c\" data-bbcode=\"true\" rel=\"noopener nofollow ugc\">transaction like this one</a>, and then you claim 10 coins instantly, without providing separate proofs for each and every input. You just claim them all by providing sufficiently low hash in the whole transaction.</li>\n</ol>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-06-04T14:02:59.571Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 1.4,
  "yours": false,
  "topic_id": 937,
  "topic_slug": "proof-of-work-based-signet-faucet",
  "topic_title": "Proof-of-work based signet faucet",
  "topic_html_title": "Proof-of-work based signet faucet",
  "category_id": 8,
  "display_username": "Garlo Nicon",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote]Just as you don\u2019t want other people to reuse your proof of work, you don\u2019t want the same person to be able to use a single proof of work twice[/quote]\nAll of those problems could be solved, if instead of using Proof of Work from the Script, you check your Proof of Work from your [url=https://mempool.space/tx/000000000fdf0c619cd8e0d512c7e2c0da5a5808e60f12f1e0d01522d2986a51]transaction hash[/url]. Then:\n1. It cannot be stolen, because modifying the transaction in any way (when it comes to legacy parts) will lead to a different transaction hash.\n2. It can be used once, or thrown away. If you include transaction with one hash, you cannot include it again (there are some quirks, when you reuse the same coinbase transaction in some future block numbers, but most of the time, the system is resistant to duplicated future transaction hashes: if you can duplicate transactions, then there are more serious issues ongoing, like \"history flood attack\").\n3. If the size of the whole transaction will take 80 bytes, it will be compatible with ASICs. That part can be achieved for example by using different sighashes, like `SIGHASH_SINGLE | SIGHASH_ANYONECANPAY`, and then require for example z-value of the transaction (hash of the signed message) to contain some leading zeroes.\n4. Also note, that it may be possible to claim N coins at once, by producing a sufficiently huge Proof of Work. Then, you share for example [url=https://mempool.space/tx/00000000c0747ece95852c2b7d37b09770873ed8b50fb7be2ba3d400defab06c]transaction like this one[/url], and then you claim 10 coins instantly, without providing separate proofs for each and every input. You just claim them all by providing sufficiently low hash in the whole transaction.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 372,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}