{
  "id": 2724,
  "name": "Bruno Garcia",
  "username": "bruno",
  "avatar_template": "/user_avatar/delvingbitcoin.org/bruno/{size}/60_2.png",
  "created_at": "2024-06-17T16:15:50.793Z",
  "cooked": "<p>Updates!</p>\n<p>We recently added support for <code>btcd</code> and we discovered and could reproduce more bugs.</p>\n<hr>\n<p><strong>rust-miniscript</strong>: Some miniscripts were unexpectedly being rejected\n</p><aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/rust-bitcoin/rust-miniscript/issues/633\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/rust-bitcoin/rust-miniscript/issues/633\" target=\"_blank\" rel=\"noopener\">github.com/rust-bitcoin/rust-miniscript</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/rust-bitcoin/rust-miniscript/issues/633\" target=\"_blank\" rel=\"noopener\">bug: some miniscripts are being pointed as invalid, but are valid</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2023-12-11\" data-time=\"21:30:02\" data-timezone=\"UTC\">09:30PM - 11 Dec 23 UTC</span>\n      </div>\n\n        <div class=\"date\">\n          closed <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-02-28\" data-time=\"22:54:24\" data-timezone=\"UTC\">10:54PM - 28 Feb 24 UTC</span>\n        </div>\n\n      <div class=\"user\">\n        <a href=\"https://github.com/brunoerg\" target=\"_blank\" rel=\"noopener\">\n          <img alt=\"brunoerg\" src=\"https://delvingbitcoin.org/uploads/default/original/1X/ab6a425a5972b35332dc30b49e048dc364efe60c.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"5B4E47\">\n          brunoerg\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">Hi, recently I started developing [bitcoinfuzz](https://github.com/brunoerg/bitc<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">\u2026</a></span><span class=\"excerpt hidden\">oinfuzz) - differential fuzzing of Bitcoin implementations and libraries. One of the targets gets a string and checks whether it's a valid miniscript. The code I'm using to check it with `rust-miniscript` is:\n```rust\n#[no_mangle]\npub extern \"C\" fn rust_miniscript_from_str(input: *const c_char) -&gt; bool {\n    if let Ok(data) = unsafe { CStr::from_ptr(input) }.to_str() {\n        if let Ok(_pol) = Miniscript::&lt;String, Segwitv0&gt;::from_str_insane(data) {\n            return true\n        } else if let Ok(_pol) = Miniscript::&lt;String, Tap&gt;::from_str_insane(data) {\n            return true\n        }\n    }\n    false\n}\n```\n\nand `bitcoinfuzz` is crashing (rust-miniscript returning invalid) with the following miniscripts (and other ones):\n```\nnnnnnnnnnnnnnnnln:1\ndv:0\nlll:0\nl:1\n```\n\nCould I be missing something in my code or is it a bug?</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p><strong>rust-bitcoin</strong>: During witness verification, <code>rust-bitcoin</code> doesn\u2019t check if a transaction has the witness flag but empty witnesses.\n</p><aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/rust-bitcoin/rust-bitcoin/issues/2681\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/rust-bitcoin/rust-bitcoin/issues/2681\" target=\"_blank\" rel=\"noopener\">github.com/rust-bitcoin/rust-bitcoin</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/rust-bitcoin/rust-bitcoin/issues/2681\" target=\"_blank\" rel=\"noopener\">Bug on witness verification (witness flag but empty witnesses)</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-04-12\" data-time=\"19:28:34\" data-timezone=\"UTC\">07:28PM - 12 Apr 24 UTC</span>\n      </div>\n\n\n      <div class=\"user\">\n        <a href=\"https://github.com/brunoerg\" target=\"_blank\" rel=\"noopener\">\n          <img alt=\"brunoerg\" src=\"https://delvingbitcoin.org/uploads/default/original/1X/ab6a425a5972b35332dc30b49e048dc364efe60c.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"5B4E47\">\n          brunoerg\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">By applying differential fuzzing ([bitcoinfuzz](https://github.com/brunoerg/bitc<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">\u2026</a></span><span class=\"excerpt hidden\">oinfuzz)) with rust-bitcoin and Bitcoin Core for block deserialization, I found out a bug during the transaction verification step. Basically, it's illegal to have the witness flag present and all witness stacks empty. That is, it has inputs, they have empty witnesses, but the transaction is flagged as segwit. It seems this case is not being catched properly.\n\nBase64 to reproduce (for block deserialization): //////////+puampqalJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJqampKak4ODg4ODg4qampqVdRqampAgICAgIB/QITAAICAgICAgICAAABAABRAgICAgH9AgICAgICAgICAgICAgICAgICAgICAACRAAIAAAAAAAAAAFECAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgAAApECAAIAAAAAAAAAUQICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAICRAAAAAAAAFv////8AAD0A/////y3/////////AP////8AAQAAAAD///8=</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p><strong>btcd</strong>: Not a bug but an API mismatch with Bitcoin Core. When decoding a transaction, Bitcoin Core fails if the input was not entirely consumed, btcd doesn\u2019t.\n</p><aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/btcsuite/btcd/issues/2195\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/btcsuite/btcd/issues/2195\" target=\"_blank\" rel=\"noopener\">github.com/btcsuite/btcd</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/btcsuite/btcd/issues/2195\" target=\"_blank\" rel=\"noopener\">Check if input was entirely consumed in `decoderawtransaction`/`btcDecode`</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-06-06\" data-time=\"21:13:40\" data-timezone=\"UTC\">09:13PM - 06 Jun 24 UTC</span>\n      </div>\n\n\n      <div class=\"user\">\n        <a href=\"https://github.com/brunoerg\" target=\"_blank\" rel=\"noopener\">\n          <img alt=\"brunoerg\" src=\"https://delvingbitcoin.org/uploads/default/original/1X/ab6a425a5972b35332dc30b49e048dc364efe60c.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"5B4E47\">\n          brunoerg\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">Using the `decoderawtransaction` command (`btcDecode` function?) we noticed that<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">\u2026</a></span><span class=\"excerpt hidden\"> it does not check if the entire input was successfully consumed when decoding which is important to keep it consistent. \n\nTo reproduce:\n```\ndecoderawtransaction \"0a9a9e0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100000000010001010101a09a\"\n```\n\nObs.: Running same command on Bitcoin Core fails.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p><strong>Bitcoin Core/rust-miniscript</strong>: When validating miniscripts from string, there is an inconsistence between rust-miniscript and Bitcoin Core. We noticed that Bitcoin Core accepts the usage of the <code>+</code> sign, e.g. (<code>l:older(+1)</code> , <code>u:after(+1)</code> ), because of <code>ParseInt64</code> function. However, <code>rust-miniscript</code> checks the character itself, so it only accepts \u201c1\u201d, \u201c2\u201d, \u201c3\u201d\u2026\u201c9\u201d.\n</p><aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/brunoerg/bitcoinfuzz/issues/34\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/brunoerg/bitcoinfuzz/issues/34\" target=\"_blank\" rel=\"noopener\">github.com/brunoerg/bitcoinfuzz</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/brunoerg/bitcoinfuzz/issues/34\" target=\"_blank\" rel=\"noopener\">miniscript_string: Core accepts `+` sign for numbers</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-06-14\" data-time=\"19:35:24\" data-timezone=\"UTC\">07:35PM - 14 Jun 24 UTC</span>\n      </div>\n\n\n      <div class=\"user\">\n        <a href=\"https://github.com/brunoerg\" target=\"_blank\" rel=\"noopener\">\n          <img alt=\"brunoerg\" src=\"https://delvingbitcoin.org/uploads/default/original/1X/ab6a425a5972b35332dc30b49e048dc364efe60c.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"5B4E47\">\n          brunoerg\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n        <span style=\"display:inline-block;margin-top:2px;background-color: #B8B8B8;padding: 2px;border-radius: 4px;color: #fff;margin-left: 3px;\">\n          crash\n        </span>\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">We got a crash on `miniscript_string` target due to validation of numbers. For `<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">\u2026</a></span><span class=\"excerpt hidden\">older()`, `after()`, `thresh()` and maybe other fragments, Bitcoin Core accept the usage of the `+` sign, e.g. (`l:older(+1)`, `u:after(+1)`), because of `ParseInt64` function. However, `rust-miniscript` checks the character itself, so it only accepts \"1\", \"2\", \"3\"...\"9\". \n\n```rs\nif !('1'..='9').contains(&amp;ch) {\n    return Err(Error::Unexpected(\"Number must start with a digit 1-9\".to_string()));\n}\n```\n\nThere is a test to ensure it doesn't accept those ones:\n```rs\nfn test_parse_num() {\n    assert!(parse_num(\"0\").is_ok());\n    assert!(parse_num(\"00\").is_err());\n    assert!(parse_num(\"0000\").is_err());\n    assert!(parse_num(\"06\").is_err());\n    assert!(parse_num(\"+6\").is_err());\n    assert!(parse_num(\"-6\").is_err());\n}\n```</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p><strong>rust-miniscript</strong>: The parser function is still recursive while Core isn\u2019t anymore. It makes some miniscripts valid for Core but rejected by rust-miniscript due to the max recursion depth. (We didn\u2019t find this, we just could reproduce by running the harness with the seed corpus from Core)\n</p><aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/rust-bitcoin/rust-miniscript/issues/696\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/rust-bitcoin/rust-miniscript/issues/696\" target=\"_blank\" rel=\"noopener\">github.com/rust-bitcoin/rust-miniscript</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/rust-bitcoin/rust-miniscript/issues/696\" target=\"_blank\" rel=\"noopener\">Make `from_slice_delim` (expression parser) non-recursive</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2024-06-14\" data-time=\"16:29:08\" data-timezone=\"UTC\">04:29PM - 14 Jun 24 UTC</span>\n      </div>\n\n\n      <div class=\"user\">\n        <a href=\"https://github.com/brunoerg\" target=\"_blank\" rel=\"noopener\">\n          <img alt=\"brunoerg\" src=\"https://delvingbitcoin.org/uploads/default/original/1X/ab6a425a5972b35332dc30b49e048dc364efe60c.jpeg\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"5B4E47\">\n          brunoerg\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">Sorry if it's a dumb question, as far as I understand there is a recursion depth<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">\u2026</a></span><span class=\"excerpt hidden\"> limit on `from_slice_delim` to avoid running out of stack space (based on https://github.com/sipa/miniscript/pull/5) when parsing an expression with round brackets. However, the parse function from sipa/miniscript is not recursive anymore (https://github.com/sipa/miniscript/pull/68). Worths make it non-recursive here as well? I noticed that some miniscripts that can be parsed on Core fails here because of this limit. \n\n```rs\n// https://github.com/sipa/miniscript/pull/5 for discussion on this number\nconst MAX_RECURSION_DEPTH: u32 = 402;\n```\n\n```rs\nimpl&lt;'a&gt; Tree&lt;'a&gt; {\n    /// Parse an expression with round brackets\n    pub fn from_slice(sl: &amp;'a str) -&gt; Result&lt;(Tree&lt;'a&gt;, &amp;'a str), Error&gt; {\n        // Parsing TapTree or just miniscript\n        Self::from_slice_delim(sl, 0u32, '(')\n    }\n\n    pub(crate) fn from_slice_delim(\n        mut sl: &amp;'a str,\n        depth: u32,\n        delim: char,\n    ) -&gt; Result&lt;(Tree&lt;'a&gt;, &amp;'a str), Error&gt; {\n        if depth &gt;= MAX_RECURSION_DEPTH {\n            return Err(Error::MaxRecursiveDepthExceeded);\n        }\n```</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2024-06-17T16:15:50.793Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 32.2,
  "yours": false,
  "topic_id": 208,
  "topic_slug": "differential-fuzzing-of-bitcoin-implementations",
  "topic_title": "Differential Fuzzing of Bitcoin implementations",
  "topic_html_title": "Differential Fuzzing of Bitcoin implementations",
  "category_id": 8,
  "display_username": "Bruno Garcia",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Updates! \n\nWe recently added support for `btcd` and we discovered and could reproduce more bugs.\n\n-------------\n\n**rust-miniscript**: Some miniscripts were unexpectedly being rejected \nhttps://github.com/rust-bitcoin/rust-miniscript/issues/633\n\n**rust-bitcoin**: During witness verification, `rust-bitcoin` doesn't check if a transaction has the witness flag but empty witnesses. \nhttps://github.com/rust-bitcoin/rust-bitcoin/issues/2681\n\n**btcd**: Not a bug but an API mismatch with Bitcoin Core. When decoding a transaction, Bitcoin Core fails if the input was not entirely consumed, btcd doesn't.\nhttps://github.com/btcsuite/btcd/issues/2195\n\n**Bitcoin Core/rust-miniscript**: When validating miniscripts from string, there is an inconsistence between rust-miniscript and Bitcoin Core. We noticed that Bitcoin Core accepts the usage of the `+` sign, e.g. (`l:older(+1)` , `u:after(+1)` ), because of `ParseInt64` function. However, `rust-miniscript` checks the character itself, so it only accepts \"1\", \"2\", \"3\"...\"9\".\nhttps://github.com/brunoerg/bitcoinfuzz/issues/34\n\n**rust-miniscript**: The parser function is still recursive while Core isn't anymore. It makes some miniscripts valid for Core but rejected by rust-miniscript due to the max recursion depth. (We didn't find this, we just could reproduce by running the harness with the seed corpus from Core) \nhttps://github.com/rust-bitcoin/rust-miniscript/issues/696",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 72,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    },
    {
      "id": "rocket",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}