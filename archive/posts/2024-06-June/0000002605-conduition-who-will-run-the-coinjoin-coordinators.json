{
  "id": 2605,
  "name": "",
  "username": "conduition",
  "avatar_template": "/user_avatar/delvingbitcoin.org/conduition/{size}/384_2.png",
  "created_at": "2024-06-02T22:18:52.919Z",
  "cooked": "<p><a class=\"mention\" href=\"/u/1440000bytes\">@1440000bytes</a> I\u2019m as excited as the next guy to see joinstr take flight, but seems like that protocol is still too early to fully replace centralized coordinators. From the website you linked:</p>\n<blockquote>\n<p><strong>Can i use joinstr on mainnet rigth now?</strong></p>\n<p>No. Please don\u2019t use it on mainnet as there are still bugs that need to be fixed for everything to work properly.</p>\n</blockquote>\n<p>I tried Joinmarket recently but had trouble getting its automatic mixing system to work. The UX is garbage and setup is tedious. Haven\u2019t tried Jam yet.</p>\n<p>Ecash might provide a dark horse candidate for smaller scale off-chain coin mixing. A hypothetical ecash implementation could route LN payments through multiple mints to avoid correlation by common payment hash/preimages. If the wallet uses TOR when making requests, and spaces out the transfers in time, they can avoid network level correlation. I don\u2019t think this will be effective yet, as right now the pool of money in any ecash mint is just too small and the pattern would be too obvious.</p>\n<p>Also remember that PTLCs will someday be a thing on Lightning. This would vastly improve privacy of payment routing by breaking the payment-hash correlation attack vector<sup class=\"footnote-ref\"><a href=\"#footnote-2605-1\" id=\"footnote-ref-2605-1\">[1]</a></sup>. Perhaps one of the best ways to mix coins will someday be to use PTLC-driven submarine swaps to convert one larger pre-swap UTXO into a series of smaller post-swap UTXOs. Then your money is hidden among the set of all UTXOs performing submarine swaps with that service, which could be very large in the case of popular services like LN-Labs\u2019 Loop.</p>\n<hr class=\"footnotes-sep\">\n\n<ol class=\"footnotes-list\">\n<li id=\"footnote-2605-1\" class=\"footnote-item\"><p>Imagine an LN node paying another node 4 hops away, using a private channel (A \u2192 B \u2192 C \u2192 D \u2192 E). If the payment is an HTLC, and nodes B and E are colluding, they can prove it was node A who paid node E, because each hop uses a common hash/preimage pair in their contracts. With PTLCs, each hop uses a unique key (point) for the contract. Nodes B and E would not be able to conclusively prove A was the sender, although they could guess based on timing and amount correlation. For hard proof, they\u2019d need nodes C and D to also cooperate. <a href=\"#footnote-ref-2605-1\" class=\"footnote-backref\">\u21a9\ufe0e</a></p>\n</li>\n</ol>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-06-02T22:18:52.919Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 1.6,
  "yours": false,
  "topic_id": 934,
  "topic_slug": "who-will-run-the-coinjoin-coordinators",
  "topic_title": "Who will run the CoinJoin coordinators?",
  "topic_html_title": "Who will run the CoinJoin coordinators?",
  "category_id": 5,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "@1440000bytes I'm as excited as the next guy to see joinstr take flight, but seems like that protocol is still too early to fully replace centralized coordinators. From the website you linked:\n\n> **Can i use joinstr on mainnet rigth now?**\n> \n> No. Please don't use it on mainnet as there are still bugs that need to be fixed for everything to work properly.\n\nI tried Joinmarket recently but had trouble getting its automatic mixing system to work. The UX is garbage and setup is tedious. Haven't tried Jam yet.\n\nEcash might provide a dark horse candidate for smaller scale off-chain coin mixing. A hypothetical ecash implementation could route LN payments through multiple mints to avoid correlation by common payment hash/preimages. If the wallet uses TOR when making requests, and spaces out the transfers in time, they can avoid network level correlation. I don't think this will be effective yet, as right now the pool of money in any ecash mint is just too small and the pattern would be too obvious. \n\nAlso remember that PTLCs will someday be a thing on Lightning. This would vastly improve privacy of payment routing by breaking the payment-hash correlation attack vector[^1]. Perhaps one of the best ways to mix coins will someday be to use PTLC-driven submarine swaps to convert one larger pre-swap UTXO into a series of smaller post-swap UTXOs. Then your money is hidden among the set of all UTXOs performing submarine swaps with that service, which could be very large in the case of popular services like LN-Labs' Loop.\n\n\n\n[^1]: Imagine an LN node paying another node 4 hops away, using a private channel (A -> B -> C -> D -> E). If the payment is an HTLC, and nodes B and E are colluding, they can prove it was node A who paid node E, because each hop uses a common hash/preimage pair in their contracts. With PTLCs, each hop uses a unique key (point) for the contract. Nodes B and E would not be able to conclusively prove A was the sender, although they could guess based on timing and amount correlation. For hard proof, they'd need nodes C and D to also cooperate.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 129,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}