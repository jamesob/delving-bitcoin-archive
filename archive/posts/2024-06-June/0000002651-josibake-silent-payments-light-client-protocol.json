{
  "id": 2651,
  "name": "josie",
  "username": "josibake",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josibake/{size}/83_2.png",
  "created_at": "2024-06-05T09:12:48.902Z",
  "cooked": "<p>Thanks for the concrete example, <a class=\"mention\" href=\"/u/harding\">@harding</a> !</p>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"12\" data-topic=\"891\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>Downloading tweaks and filters from different servers doesn\u2019t help. Even if we can be sure the servers aren\u2019t colluding, whoever controls the filter distribution server can always force a match by lying. I think whoever controls the tweak distribution server can also force a match, but I\u2019m not 100% sure on the EC math to do that.</p>\n</blockquote>\n</aside>\n<p>I\u2019m not convinced it\u2019s sufficient to only control filter distribution. A sender creates a silent payment output as <span class=\"math\">P = B_{spend} + hash(a\\cdot B_{scan} | k)\\cdot G</span>, and the light client recipient finds the output by calculating <span class=\"math\">P = B_{spend} + hash(A_{server}\\cdot b_{scan} | k)\\cdot G</span> and checking if <span class=\"math\">P \\in taprootfilter</span>. The key is the ECDH step inside the hash which creates a shared secret between sender and recipient. So for this attack to work, Mallory must control both the tweak server and the filter server to force a match, i.e. Mallory needs to give the client a specific <span class=\"math\">A_{fake}</span> that when multiplied by <span class=\"math\">b_{scan}</span> will match a <span class=\"math\">P_{fake}</span> output in the filter. Additionally, Mallory would need to collude with (but not control) the server providing the \u201csimplified UTXOs\u201d / block data.</p>\n<p>All that being said, I think it\u2019s very likely that Mallory will control all three endpoints, or at least control the tweak and filter endpoints and be able to collude with whoever is providing the block data. In the case where Mallory controls tweaks and filters and can collude, they can link IPs to BIP352 addresses without detection (assuming nobody audits the data Mallory is returning from the tweak end point<sup class=\"footnote-ref\"><a href=\"#footnote-2651-1\" id=\"footnote-ref-2651-1\">[1]</a></sup>) by blaming the the \u201cfake hits\u201d on the filter false positive rate.</p>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"12\" data-topic=\"891\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>Given the large number of block-serving full nodes, this reduces the chance that the client connects to a full node controlled by the server. Additionally, given the modestly large number of existing BIP158 clients that are already occasionally downloading arbitrary blocks from full nodes, even if the client did connect to a full node controlled by the server, the server couldn\u2019t be sure that the peer requesting a particular block was the peer it was targeting. This is true on regular IP, with increased privacy guarantees available to users of Tor ephemeral addresses or similar protocols.</p>\n</blockquote>\n</aside>\n<p>I think this is the strongest argument for using full blocks vs \u201csimplified utxos\u201d: reusing the Bitcoin p2p network makes it much harder for Mallory to collude and is also indistinguishable from BIP158 client traffic. I also think you make a very good point regarding the bandwidth usage: If <span class=\"math\">B</span> is using a lot of bandwidth due to receiving many payments, its very likely <span class=\"math\">B</span> can afford to run a full node. In fact, if <span class=\"math\">B</span> is receiving a high volume of payments ( &gt; 1 per day), its even more important they run their own node as this is the only way to trustlessly verify that these payments are in fact legitimate payments.</p>\n<p>In summary, it seems to me the tradeoff is regular audits vs. more bandwidth: a single server returning tweak data, filters and simplified UTXOs with regular audits gives the same level of privacy as getting full block data from the p2p network at the cost of more bandwidth usage as a function of payment frequency.</p>\n<hr class=\"footnotes-sep\">\n\n<ol class=\"footnotes-list\">\n<li id=\"footnote-2651-1\" class=\"footnote-item\"><p>Interestingly, the only one Mallory can get away with lying about is the filter: tweak data and simplified UTXOs are both public data sets, making it easy for anyone with access to the full blockchain to audit the data Mallory is returning and detect fake payments. But for this attack to be successful, Mallory must return fake tweaks to more than one client, making it very likely that Mallory will be caught. <a href=\"#footnote-ref-2651-1\" class=\"footnote-backref\">\u21a9\ufe0e</a></p>\n</li>\n</ol>",
  "post_number": 13,
  "post_type": 1,
  "updated_at": "2024-06-05T09:12:48.902Z",
  "reply_count": 1,
  "reply_to_post_number": 12,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 9,
  "readers_count": 8,
  "score": 6.8,
  "yours": false,
  "topic_id": 891,
  "topic_slug": "silent-payments-light-client-protocol",
  "topic_title": "Silent Payments: Light Client Protocol",
  "topic_html_title": "Silent Payments: Light Client Protocol",
  "category_id": 12,
  "display_username": "josie",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thanks for the concrete example, @harding !\n\n[quote=\"harding, post:12, topic:891\"]\nDownloading tweaks and filters from different servers doesn\u2019t help. Even if we can be sure the servers aren\u2019t colluding, whoever controls the filter distribution server can always force a match by lying. I think whoever controls the tweak distribution server can also force a match, but I\u2019m not 100% sure on the EC math to do that.\n[/quote]\n\nI'm not convinced it's sufficient to only control filter distribution. A sender creates a silent payment output as $P = B_{spend} + hash(a\\cdot B_{scan} | k)\\cdot G$, and the light client recipient finds the output by calculating $P = B_{spend} + hash(A_{server}\\cdot b_{scan} | k)\\cdot G$ and checking if $P \\in taprootfilter$. The key is the ECDH step inside the hash which creates a shared secret between sender and recipient. So for this attack to work, Mallory must control both the tweak server and the filter server to force a match, i.e. Mallory needs to give the client a specific $A_{fake}$ that when multiplied by $b_{scan}$ will match a $P_{fake}$ output in the filter. Additionally, Mallory would need to collude with (but not control) the server providing the \"simplified UTXOs\" / block data.\n\nAll that being said, I think it's very likely that Mallory will control all three endpoints, or at least control the tweak and filter endpoints and be able to collude with whoever is providing the block data. In the case where Mallory controls tweaks and filters and can collude, they can link IPs to BIP352 addresses without detection (assuming nobody audits the data Mallory is returning from the tweak end point[^1]) by blaming the the \"fake hits\" on the filter false positive rate.\n\n[^1]: Interestingly, the only one Mallory can get away with lying about is the filter: tweak data and simplified UTXOs are both public data sets, making it easy for anyone with access to the full blockchain to audit the data Mallory is returning and detect fake payments. But for this attack to be successful, Mallory must return fake tweaks to more than one client, making it very likely that Mallory will be caught.\n\n[quote=\"harding, post:12, topic:891\"]\nGiven the large number of block-serving full nodes, this reduces the chance that the client connects to a full node controlled by the server. Additionally, given the modestly large number of existing BIP158 clients that are already occasionally downloading arbitrary blocks from full nodes, even if the client did connect to a full node controlled by the server, the server couldn\u2019t be sure that the peer requesting a particular block was the peer it was targeting. This is true on regular IP, with increased privacy guarantees available to users of Tor ephemeral addresses or similar protocols.\n[/quote]\n\nI think this is the strongest argument for using full blocks vs \"simplified utxos\": reusing the Bitcoin p2p network makes it much harder for Mallory to collude and is also indistinguishable from BIP158 client traffic. I also think you make a very good point regarding the bandwidth usage: If $B$ is using a lot of bandwidth due to receiving many payments, its very likely $B$ can afford to run a full node. In fact, if $B$ is receiving a high volume of payments ( > 1 per day), its even more important they run their own node as this is the only way to trustlessly verify that these payments are in fact legitimate payments.\n\nIn summary, it seems to me the tradeoff is regular audits vs. more bandwidth: a single server returning tweak data, filters and simplified UTXOs with regular audits gives the same level of privacy as getting full block data from the p2p network at the cost of more bandwidth usage as a function of payment frequency.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 92,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}