{
  "id": 2653,
  "name": "josie",
  "username": "josibake",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josibake/{size}/83_2.png",
  "created_at": "2024-06-05T12:02:10.850Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"14\" data-topic=\"891\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>If Mallory created one of the taproot-paying transactions in the block (e.g. Mallory pays Mallory\u2019), then she can create a filter for an alternative transaction (not included in the block) where she used the same input(s) to pay the victim\u2019s SP address <em>x</em>. That means she only needs control over the filter server.</p>\n</blockquote>\n</aside>\n<p>Ah, got it! So in this case Mallory is getting the tweak data included in the index through an honest payment and then reusing that same tweak to create fake outputs in the filter. This also defeats the auditing mechanism in that anyone auditing the tweak data would see a tweak corresponding to Mallory\u2019s honest payment. The only way to detect suspicious behavior would be to recreate the filter based on taproot data in the block and compare it to Mallory\u2019s filter: if they don\u2019t match, something funny is going on. So this pretty much invalidates everything I said in the previous post <img src=\"https://delvingbitcoin.org/images/emoji/twitter/sweat_smile.png?v=12\" title=\":sweat_smile:\" class=\"emoji\" alt=\":sweat_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"14\" data-topic=\"891\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>Strongly disagree here. Audits only tell you that the server was honest in the past. The victims of a recently compromised server probably won\u2019t find much solace in knowing that their loss of privacy was detected by auditors who will discourage others from using that server in the future.</p>\n</blockquote>\n</aside>\n<p>Fair point; this can only identify that a server <em>has</em> misbehaved, but if the attack is targeted the damage is already done.</p>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"14\" data-topic=\"891\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>In all these cases, acting like a BIP158 client (ideally using ephemeral Tor identities like Wasabi) significantly boosts the client\u2019s chance of remaining private. Of course, operating a full node provides even stronger privacy because it performs exactly the same network operations whether transactions belong to the wallet or not (i.e., it has information theoretic perfect privacy).</p>\n</blockquote>\n</aside>\n<p>You\u2019ve convinced me that always using the full block is best, especially taking into consideration the savings from not downloading the full block is minor optimization w.r.t expected light client payment activity. Another advantage that occurred to me is it simplifies an SP light client protocol to \u201cprovide tweak data and a taproot filter,\u201d and leaves sourcing block data up to the client. It is worth mentioning parsing the full block is more work for a mobile client (vs \u201csimplified UTXOs\u201d), but again this extra work only happens when an output is found;t he overall goal of this protocol is to avoid having the client do lots of work for transactions that are <em>not</em> payments.</p>",
  "post_number": 15,
  "post_type": 1,
  "updated_at": "2024-06-05T12:02:10.850Z",
  "reply_count": 0,
  "reply_to_post_number": 14,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 16.6,
  "yours": false,
  "topic_id": 891,
  "topic_slug": "silent-payments-light-client-protocol",
  "topic_title": "Silent Payments: Light Client Protocol",
  "topic_html_title": "Silent Payments: Light Client Protocol",
  "category_id": 12,
  "display_username": "josie",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"harding, post:14, topic:891\"]\nIf Mallory created one of the taproot-paying transactions in the block (e.g. Mallory pays Mallory\u2019), then she can create a filter for an alternative transaction (not included in the block) where she used the same input(s) to pay the victim\u2019s SP address *x*. That means she only needs control over the filter server.\n[/quote]\n\nAh, got it! So in this case Mallory is getting the tweak data included in the index through an honest payment and then reusing that same tweak to create fake outputs in the filter. This also defeats the auditing mechanism in that anyone auditing the tweak data would see a tweak corresponding to Mallory's honest payment. The only way to detect suspicious behavior would be to recreate the filter based on taproot data in the block and compare it to Mallory's filter: if they don't match, something funny is going on. So this pretty much invalidates everything I said in the previous post :sweat_smile: \n\n\n[quote=\"harding, post:14, topic:891\"]\nStrongly disagree here. Audits only tell you that the server was honest in the past. The victims of a recently compromised server probably won\u2019t find much solace in knowing that their loss of privacy was detected by auditors who will discourage others from using that server in the future.\n[/quote]\n\nFair point; this can only identify that a server *has* misbehaved, but if the attack is targeted the damage is already done.\n\n[quote=\"harding, post:14, topic:891\"]\nIn all these cases, acting like a BIP158 client (ideally using ephemeral Tor identities like Wasabi) significantly boosts the client\u2019s chance of remaining private. Of course, operating a full node provides even stronger privacy because it performs exactly the same network operations whether transactions belong to the wallet or not (i.e., it has information theoretic perfect privacy).\n[/quote]\n\nYou've convinced me that always using the full block is best, especially taking into consideration the savings from not downloading the full block is minor optimization w.r.t expected light client payment activity. Another advantage that occurred to me is it simplifies an SP light client protocol to \"provide tweak data and a taproot filter,\" and leaves sourcing block data up to the client. It is worth mentioning parsing the full block is more work for a mobile client (vs \"simplified UTXOs\"), but again this extra work only happens when an output is found;t he overall goal of this protocol is to avoid having the client do lots of work for transactions that are *not* payments.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 92,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}