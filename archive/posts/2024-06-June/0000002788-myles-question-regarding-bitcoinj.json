{
  "id": 2788,
  "name": "",
  "username": "myles",
  "avatar_template": "/letter_avatar_proxy/v4/letter/m/779978/{size}.png",
  "created_at": "2024-06-25T20:18:23.832Z",
  "cooked": "<p>I\u2019ve recently been developing software for a personal, offline key management service to hold the keys of my friends and family. I had the idea to hold each of their funds in deterministic wallets where I hold the seed and they hold the pass phrase and whenever they want to move funds, we get together.</p>\n<p>About me: I am a relatively new programmer (~2 years through my CS degree) and am looking for feedback on my design.</p>\n<p>Currently, I want to make it so my friend can create a \u201cPartiallySignedTransaction\u201d object of which I can interact with through the \u201csignWithSeed\u201d method which I hope can return a serialized canonical Bitcoin transaction. However, I am completely stumped as to how to implement this even after scowering the BitcoinJ documentation and watching videos for 3 days.</p>\n<p>Any help would be appreciated!</p>\n<pre><code class=\"lang-auto\">import org.bitcoinj.core.Transaction;\nimport org.bitcoinj.crypto.DeterministicKey;\n\npublic class PartiallySignedTransaction {\n  private final String passPhrase;\n  private final Transaction transaction;\n\n  public PartiallySignedTransaction(Transaction transaction, String passPhrase) {\n    this.passPhrase = passPhrase;\n    this.transaction = transaction;\n  }\n\n  public byte[] signWithSeed(byte[] seed) {\n    //Generate the masterKey using the seed and passPhrase.\n    //Within transaction, get inputs,\n    //Sign each input with private key equal to path of input's private key (derived from masterKey).\n    return null;\n  }\n\n  private DeterministicKey getMasterKeyFromSeedAndPassPhrase(byte[] seed, String passPhrase) {\n    return null;\n  }\n}\n</code></pre>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-06-25T20:18:46.431Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 0.4,
  "yours": false,
  "topic_id": 989,
  "topic_slug": "question-regarding-bitcoinj",
  "topic_title": "Question Regarding BitcoinJ",
  "topic_html_title": "Question Regarding BitcoinJ",
  "category_id": 8,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I've recently been developing software for a personal, offline key management service to hold the keys of my friends and family. I had the idea to hold each of their funds in deterministic wallets where I hold the seed and they hold the pass phrase and whenever they want to move funds, we get together.\n\nAbout me: I am a relatively new programmer (~2 years through my CS degree) and am looking for feedback on my design.\n\nCurrently, I want to make it so my friend can create a \"PartiallySignedTransaction\" object of which I can interact with through the \"signWithSeed\" method which I hope can return a serialized canonical Bitcoin transaction. However, I am completely stumped as to how to implement this even after scowering the BitcoinJ documentation and watching videos for 3 days.\n\nAny help would be appreciated!\n\n```\nimport org.bitcoinj.core.Transaction;\nimport org.bitcoinj.crypto.DeterministicKey;\n\npublic class PartiallySignedTransaction {\n  private final String passPhrase;\n  private final Transaction transaction;\n\n  public PartiallySignedTransaction(Transaction transaction, String passPhrase) {\n    this.passPhrase = passPhrase;\n    this.transaction = transaction;\n  }\n\n  public byte[] signWithSeed(byte[] seed) {\n    //Generate the masterKey using the seed and passPhrase.\n    //Within transaction, get inputs,\n    //Sign each input with private key equal to path of input's private key (derived from masterKey).\n    return null;\n  }\n\n  private DeterministicKey getMasterKeyFromSeedAndPassPhrase(byte[] seed, String passPhrase) {\n    return null;\n  }\n}\n```",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 458,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}