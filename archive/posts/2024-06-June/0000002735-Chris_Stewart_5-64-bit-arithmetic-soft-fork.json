{
  "id": 2735,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/user_avatar/delvingbitcoin.org/chris_stewart_5/{size}/296_2.png",
  "created_at": "2024-06-18T12:05:19.026Z",
  "cooked": "<p>Here is the <code>CScriptNum</code> extension prototype (<a href=\"https://github.com/Christewart/bitcoin/pull/3\" rel=\"noopener nofollow ugc\">PR against master</a>):</p>\n<aside class=\"onebox githubfolder\" data-onebox-src=\"https://github.com/Christewart/bitcoin/tree/64bit-arith-cscriptnum\">\n  <header class=\"source\">\n      <img src=\"https://github.githubassets.com/favicons/favicon.svg\" class=\"site-icon\" width=\"32\" height=\"32\">\n\n      <a href=\"https://github.com/Christewart/bitcoin/tree/64bit-arith-cscriptnum\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h3><a href=\"https://github.com/Christewart/bitcoin/tree/64bit-arith-cscriptnum\" target=\"_blank\" rel=\"noopener nofollow ugc\">GitHub - Christewart/bitcoin at 64bit-arith-cscriptnum</a></h3>\n\n  <p><a href=\"https://github.com/Christewart/bitcoin/tree/64bit-arith-cscriptnum\" target=\"_blank\" rel=\"noopener nofollow ugc\">64bit-arith-cscriptnum</a></p>\n\n  <p><span class=\"label1\">Bitcoin Core integration/staging tree. Contribute to Christewart/bitcoin development by creating an account on GitHub.</span></p>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<h2><a name=\"highlights-1\" class=\"anchor\" href=\"#highlights-1\"></a>Highlights</h2>\n<ul>\n<li>Re-enables the <code>OP_MUL</code> and <code>OP_DIV</code> opcodes</li>\n<li>Support 8 byte computation w/ arithmetic and comparison op codes.</li>\n<li>Doesn\u2019t add any new opcodes, rather repurposes existing opcodes based on <code>SigVersion</code>.</li>\n<li>Changes the underlying impl type in <code>CScriptNum</code> from <code>int64_t</code> \u2192 <code>__int128_t</code></li>\n<li>Preserves behavior of the old <code>CScriptNum</code> (variable length encoding, allows overflow results, but no computation on overflowed results).</li>\n</ul>\n<p>For those that may not be familiar with the existing behavior of <code>CScriptNum</code>, I would suggest reading <a href=\"https://github.com/Christewart/bitcoin/blob/3ec4552f572ec1eff56534c2034293bb7c053c25/src/script/script.h#L219\" rel=\"noopener nofollow ugc\">this comment in <code>script.h</code></a></p>\n<pre><code class=\"lang-auto\">/**\n * Numeric opcodes (OP_1ADD, etc) are restricted to operating on 4-byte integers.\n * The semantics are subtle, though: operands must be in the range [-2^31 +1...2^31 -1],\n * but results may overflow (and are valid as long as they are not used in a subsequent\n * numeric operation). CScriptNum enforces those semantics by storing results as\n * an int64 and allowing out-of-range values to be returned as a vector of bytes but\n * throwing an exception if arithmetic is done or the result is interpreted as an integer.\n */\n</code></pre>\n<p>The intention of this branch is to retain this behavior, only extending the supported range of values to <code>[-2^63 +1...2^63 -1]</code>.</p>\n<h2><a name=\"consensus-risk-2\" class=\"anchor\" href=\"#consensus-risk-2\"></a>Consensus risk</h2>\n<p>This PR changes the behavior of <code>CScriptNum</code>. For instance, <a href=\"https://github.com/Christewart/bitcoin/blob/3ec4552f572ec1eff56534c2034293bb7c053c25/src/script/script.h#L229\" rel=\"noopener nofollow ugc\">the constructor for <code>CScriptNum</code></a> now takes a <code>__int128_t</code> as a parameter rather than <code>int64_t</code>. This constructor is called for <em>all</em> <code>SigVersion</code> (not just <code>SigVersion::TAPSCRIPT_64BIT</code>). This seems like it could lead to some consensus risk with old nodes if someone crafts a specific transaction using segwit v0 or tapscript that exceeds <code>std::numeric_limits&lt;int64_t&gt;::max()</code> but is less than <code>std::numeric_limits&lt;__int128_t&gt;::max()</code>.</p>\n<h3><a name=\"more-problems-with-__int128_t-3\" class=\"anchor\" href=\"#more-problems-with-__int128_t-3\"></a>More problems with <code>__int128_t</code></h3>\n<p>I chose to use <code>__in128_t</code> as it seemed like the logical thing to do to extend the existing behavior for support for overflow values.</p>\n<p>I\u2019m not an expert on c++, but it appears that <code>__int128_t</code> is not supported properly on windows. I\u2019m seeing <a href=\"https://github.com/Christewart/bitcoin/actions/runs/9553273776/job/26331741590?pr=3#step:20:6261\" rel=\"noopener nofollow ugc\">CI failures</a> on windows that look like this</p>\n<pre><code class=\"lang-auto\">D:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(229,25): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int [D:\\a\\bitcoin\\bitcoin\\build_msvc\\libbitcoin_qt\\libbitcoin_qt.vcxproj]\nD:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(229,41): error C2143: syntax error: missing ',' before '&amp;' [D:\\a\\bitcoin\\bitcoin\\build_msvc\\libbitcoin_qt\\libbitcoin_qt.vcxproj]\nD:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(290,33): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int [D:\n</code></pre>\n<p>Perhaps there is a better way to implement this while avoiding using <code>__int128_t</code>. I\u2019m open to ideas.</p>",
  "post_number": 52,
  "post_type": 1,
  "posts_count": 52,
  "updated_at": "2024-06-18T12:30:26.356Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 122,
  "reads": 33,
  "readers_count": 32,
  "score": 616.6,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Here is the `CScriptNum` extension prototype ([PR against master](https://github.com/Christewart/bitcoin/pull/3)): \n\nhttps://github.com/Christewart/bitcoin/tree/64bit-arith-cscriptnum\n\n## Highlights\n\n- Re-enables the `OP_MUL` and `OP_DIV` opcodes\n- Support 8 byte computation w/ arithmetic and comparison op codes.\n- Doesn't add any new opcodes, rather repurposes existing opcodes based on `SigVersion`.\n- Changes the underlying impl type in `CScriptNum` from `int64_t` -> `__int128_t`\n- Preserves behavior of the old `CScriptNum` (variable length encoding, allows overflow results, but no computation on overflowed results).\n\nFor those that may not be familiar with the existing behavior of `CScriptNum`, I would suggest reading [this comment in `script.h`](https://github.com/Christewart/bitcoin/blob/3ec4552f572ec1eff56534c2034293bb7c053c25/src/script/script.h#L219)\n\n```\n/**\n * Numeric opcodes (OP_1ADD, etc) are restricted to operating on 4-byte integers.\n * The semantics are subtle, though: operands must be in the range [-2^31 +1...2^31 -1],\n * but results may overflow (and are valid as long as they are not used in a subsequent\n * numeric operation). CScriptNum enforces those semantics by storing results as\n * an int64 and allowing out-of-range values to be returned as a vector of bytes but\n * throwing an exception if arithmetic is done or the result is interpreted as an integer.\n */\n```\n\nThe intention of this branch is to retain this behavior, only extending the supported range of values to `[-2^63 +1...2^63 -1]`.\n\n## Consensus risk\n\nThis PR changes the behavior of `CScriptNum`. For instance, [the constructor for `CScriptNum`](https://github.com/Christewart/bitcoin/blob/3ec4552f572ec1eff56534c2034293bb7c053c25/src/script/script.h#L229) now takes a `__int128_t` as a parameter rather than `int64_t`. This constructor is called for _all_ `SigVersion` (not just `SigVersion::TAPSCRIPT_64BIT`). This seems like it could lead to some consensus risk with old nodes if someone crafts a specific transaction using segwit v0 or tapscript that exceeds `std::numeric_limits<int64_t>::max()` but is less than `std::numeric_limits<__int128_t>::max()`.\n\n### More problems with `__int128_t`\n\nI chose to use `__in128_t` as it seemed like the logical thing to do to extend the existing behavior for support for overflow values.\n\nI'm not an expert on c++, but it appears that `__int128_t` is not supported properly on windows. I'm seeing [CI failures](https://github.com/Christewart/bitcoin/actions/runs/9553273776/job/26331741590?pr=3#step:20:6261) on windows that look like this\n\n```\nD:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(229,25): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int [D:\\a\\bitcoin\\bitcoin\\build_msvc\\libbitcoin_qt\\libbitcoin_qt.vcxproj]\nD:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(229,41): error C2143: syntax error: missing ',' before '&' [D:\\a\\bitcoin\\bitcoin\\build_msvc\\libbitcoin_qt\\libbitcoin_qt.vcxproj]\nD:\\a\\bitcoin\\bitcoin\\src\\script\\script.h(290,33): error C4430: missing type specifier - int assumed. Note: C++ does not support default-int [D:\n```\n\nPerhaps there is a better way to implement this while avoiding using `__int128_t`. I'm open to ideas.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Here is the CScriptNum extension prototype (<a href=\"https://github.com/Christewart/bitcoin/pull/3\" rel=\"noopener nofollow ugc\">PR against master</a>): \n\n\n<a name=\"highlights-1\" class=\"anchor\" href=\"#highlights-1\"></a>Highlights\n\nRe-enables the OP_MUL and OP_DIV opcodes\nSupport 8 byte computation w/ arithmetic and comparison op codes.\nDoesn\u2019t add any new opcodes, rather repurposes existing opcodes based on SigVersion.\nChanges the underlying impl t&hellip;",
  "truncated": true,
  "post_url": "/t/64-bit-arithmetic-soft-fork/397/52",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}