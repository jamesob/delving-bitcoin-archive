{
  "id": 2606,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-06-02T23:29:04.768Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"40\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>you get an overflow indicator in every result</p>\n</blockquote>\n</aside>\n<p>FWIW, the big concern I have with this is people writing scripts where they don\u2019t think an overflow is possible, so they just do an OP_DROP for the overflow indicator, and then someone thinks a bit harder, and figures out how to steal money via an overflow, and then they do exactly that. That\u2019s arguably easily mitigated: just use <code>OP_VERIFY</code> to guarantee there wasn\u2019t an overflow, but I noticed that an example script in <a href=\"https://bitcoincore.reviews/29221#l-86\">review club</a> used the more obvious DROP:</p>\n<pre><code class=\"lang-auto\">&lt;Chris_Stewart_5&gt; Script: 0x000e876481700000 0x000e876481700000 OP_ADD64 OP_DROP OP_LE64TOSCRIPTNUM OP_SIZE OP_8 OP_EQUALVERIFY OP_SCRIPTNUMTOLE64 0x001d0ed902e00000 OP_EQUAL\n</code></pre>\n<p>Worries me a bit when the obvious way of doing something (\u201cthis won\u2019t ever overflow, so just drop it\u201d) is risky.</p>\n<p>You could imagine introducing two opcodes: \u201cOP_ADD64\u201d and \u201cOP_ADD64VERIFY\u201d the latter of which does an implicit VERIFY, and hence fails the script if there was overflow; but that would effectively be the existing behaviour of OP_ADD. So I guess what I\u2019m saying is: maybe consider an approach along the lines that sipa suggested:</p>\n<aside class=\"quote no-group\" data-username=\"sipa\" data-post=\"15\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sipa/48/102_2.png\" class=\"avatar\"> sipa:</div>\n<blockquote>\n<p>I was suggesting not changing any semantics at all; only changing the acceptable range of inputs to existing opcodes.</p>\n</blockquote>\n</aside>\n<p>where you change ADD to work with 64bit numbers (in whatever format), and add a new <code>ADD_OF</code>, <code>MUL_OF</code> (here OF implies \u201cflag on stack\u201d instead of \u201clink in bio\u201d)</p>",
  "post_number": 50,
  "post_type": 1,
  "updated_at": "2024-06-02T23:30:11.093Z",
  "reply_count": 0,
  "reply_to_post_number": 40,
  "quote_count": 2,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 16.4,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"ajtowns, post:40, topic:397\"]\nyou get an overflow indicator in every result\n[/quote]\n\nFWIW, the big concern I have with this is people writing scripts where they don't think an overflow is possible, so they just do an OP_DROP for the overflow indicator, and then someone thinks a bit harder, and figures out how to steal money via an overflow, and then they do exactly that. That's arguably easily mitigated: just use `OP_VERIFY` to guarantee there wasn't an overflow, but I noticed that an example script in [review club](https://bitcoincore.reviews/29221#l-86) used the more obvious DROP:\n\n```\n<Chris_Stewart_5> Script: 0x000e876481700000 0x000e876481700000 OP_ADD64 OP_DROP OP_LE64TOSCRIPTNUM OP_SIZE OP_8 OP_EQUALVERIFY OP_SCRIPTNUMTOLE64 0x001d0ed902e00000 OP_EQUAL\n```\n\nWorries me a bit when the obvious way of doing something (\"this won't ever overflow, so just drop it\") is risky.\n\nYou could imagine introducing two opcodes: \"OP_ADD64\" and \"OP_ADD64VERIFY\" the latter of which does an implicit VERIFY, and hence fails the script if there was overflow; but that would effectively be the existing behaviour of OP_ADD. So I guess what I'm saying is: maybe consider an approach along the lines that sipa suggested:\n\n[quote=\"sipa, post:15, topic:397\"]\nI was suggesting not changing any semantics at all; only changing the acceptable range of inputs to existing opcodes.\n[/quote]\n\nwhere you change ADD to work with 64bit numbers (in whatever format), and add a new `ADD_OF`, `MUL_OF` (here OF implies \"flag on stack\" instead of \"link in bio\")",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "laughing",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}