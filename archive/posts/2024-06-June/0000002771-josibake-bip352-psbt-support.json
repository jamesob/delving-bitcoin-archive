{
  "id": 2771,
  "name": "josie",
  "username": "josibake",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josibake/{size}/83_2.png",
  "created_at": "2024-06-20T09:21:52.200Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"andrewtoth\" data-post=\"22\" data-topic=\"877\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/andrewtoth/48/576_2.png\" class=\"avatar\"> andrewtoth:</div>\n<blockquote>\n<p>which for silent payment aware signers they would check for any <code>ACP</code> on any inputs and fail if there are any silent payment outputs.</p>\n</blockquote>\n</aside>\n<p>I don\u2019t think a silent payment signer cares if anyone else has used <code>ACP</code>. Rather, I think each silent payments aware signer needs to verify the proofs, generate the <code>PSBT_OUT_SCRIPT</code> for each silent payments output from the provided shares and check that it matches what the other signers have committed to. Consider the following scenarios for two silent payment aware signers, <span class=\"math\">A</span> and <span class=\"math\">B</span>:</p>\n<ul>\n<li>\n<p><code>NONE | ACP</code></p>\n<ul>\n<li><span class=\"math\">A</span> adds input, proof, share to the transaction and signs with <code>NONE | ACP</code></li>\n<li><span class=\"math\">B</span> adds input, proof, share, generates the <code>PSBT_OUT_SCRIPT</code> and signs with <code>ALL</code></li>\n</ul>\n</li>\n<li>\n<p><code>SINGLE | ACP</code></p>\n<ul>\n<li>Signers exchange shares and <span class=\"math\">A</span> generates the correct script from <span class=\"math\">A</span> and <span class=\"math\">B</span> shares, signs with <code>SINGLE | ACP</code> where <code>SINGLE</code> commits to the output of the generated script</li>\n<li><span class=\"math\">B</span> verifies the output is correct and signs with <code>ALL</code></li>\n<li>Alternatively, <span class=\"math\">B</span> determines <span class=\"math\">A</span> did not generate the correct script and refuses to sign</li>\n<li><span class=\"math\">A</span> signs with <code>SINGLE | ACP</code> where <code>SINGLE</code> commits to a non-silent payments output (e.g. a change output for <span class=\"math\">A</span>)</li>\n<li><span class=\"math\">B</span> adds their inputs, generates the scripts and signs with <code>ALL</code></li>\n</ul>\n</li>\n<li>\n<p><code>ALL | ACP</code></p>\n<ul>\n<li>Signers exchange shares, <span class=\"math\">A</span> generates the scripts and signs with <code>ALL | ACP</code></li>\n<li><span class=\"math\">B</span> verifies the generated scripts are correct and signs with <code>ALL</code></li>\n<li>Alternatively, <span class=\"math\">B</span> determines the generated scripts are not correct and refuses to sign</li>\n</ul>\n</li>\n</ul>\n<p>In all of these scenarios, <span class=\"math\">B</span> can determine whether or not <span class=\"math\">A</span> has committed to the correct output scripts and sign the transaction with <code>ALL</code>. Alternatively, <span class=\"math\">B</span> could add inputs to the transaction which burn the money, which means <span class=\"math\">A</span> is trusting <span class=\"math\">B</span> to finish the transaction honestly. Hence, I think it\u2019s sufficient to say a silent payments signer must:</p>\n<ol>\n<li>Never use <code>ACP</code> without fully trusting the other signers</li>\n<li>Independently generate the <code>PSBT_OUT_SCRIPT</code> and verify the match what the other signers have committed to before signing</li>\n</ol>\n<aside class=\"quote no-group\" data-username=\"andrewtoth\" data-post=\"22\" data-topic=\"877\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/andrewtoth/48/576_2.png\" class=\"avatar\"> andrewtoth:</div>\n<blockquote>\n<p>How about adding the shares and proofs as globals, and the key data would be the scan key followed by the set of input outpoints instead of input indexes? That would let the psbt change input order and would not duplicate the shares and proofs for each input.</p>\n</blockquote>\n</aside>\n<p>I don\u2019t have a strong opinion here. If we have <span class=\"math\">n</span> inputs covered by the same proof, this would be <span class=\"math\">n\\cdot 36 + (33 + 64)</span> bytes vs <span class=\"math\">n\\cdot (33 + 64)</span> bytes. So better in some cases, worse in others?</p>",
  "post_number": 23,
  "post_type": 1,
  "updated_at": "2024-06-20T09:21:52.200Z",
  "reply_count": 1,
  "reply_to_post_number": 22,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 6.6,
  "yours": false,
  "topic_id": 877,
  "topic_slug": "bip352-psbt-support",
  "topic_title": "BIP352: PSBT support",
  "topic_html_title": "BIP352: PSBT support",
  "category_id": 12,
  "display_username": "josie",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"andrewtoth, post:22, topic:877\"]\nwhich for silent payment aware signers they would check for any `ACP` on any inputs and fail if there are any silent payment outputs.\n[/quote]\n\nI don't think a silent payment signer cares if anyone else has used `ACP`. Rather, I think each silent payments aware signer needs to verify the proofs, generate the `PSBT_OUT_SCRIPT` for each silent payments output from the provided shares and check that it matches what the other signers have committed to. Consider the following scenarios for two silent payment aware signers, $A$ and $B$:\n\n* `NONE | ACP`\n  * $A$ adds input, proof, share to the transaction and signs with `NONE | ACP`\n  * $B$ adds input, proof, share, generates the `PSBT_OUT_SCRIPT` and signs with `ALL`\n\n* `SINGLE | ACP`\n  * Signers exchange shares and $A$ generates the correct script from $A$ and $B$ shares, signs with `SINGLE | ACP` where `SINGLE` commits to the output of the generated script\n  * $B$ verifies the output is correct and signs with `ALL`\n  * Alternatively, $B$ determines $A$ did not generate the correct script and refuses to sign\n  * $A$ signs with `SINGLE | ACP` where `SINGLE` commits to a non-silent payments output (e.g. a change output for $A$)\n  * $B$ adds their inputs, generates the scripts and signs with `ALL`\n\n* `ALL | ACP`\n  * Signers exchange shares, $A$ generates the scripts and signs with `ALL | ACP`\n  * $B$ verifies the generated scripts are correct and signs with `ALL`\n  * Alternatively, $B$ determines the generated scripts are not correct and refuses to sign\n\nIn all of these scenarios, $B$ can determine whether or not $A$ has committed to the correct output scripts and sign the transaction with `ALL`. Alternatively, $B$ could add inputs to the transaction which burn the money, which means $A$ is trusting $B$ to finish the transaction honestly. Hence, I think it's sufficient to say a silent payments signer must:\n\n1. Never use `ACP` without fully trusting the other signers\n2. Independently generate the `PSBT_OUT_SCRIPT` and verify the match what the other signers have committed to before signing\n\n\n[quote=\"andrewtoth, post:22, topic:877\"]\nHow about adding the shares and proofs as globals, and the key data would be the scan key followed by the set of input outpoints instead of input indexes? That would let the psbt change input order and would not duplicate the shares and proofs for each input.\n[/quote]\n\nI don't have a strong opinion here. If we have $n$ inputs covered by the same proof, this would be $n\\cdot 36 + (33 + 64)$ bytes vs $n\\cdot (33 + 64)$ bytes. So better in some cases, worse in others?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 92,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}