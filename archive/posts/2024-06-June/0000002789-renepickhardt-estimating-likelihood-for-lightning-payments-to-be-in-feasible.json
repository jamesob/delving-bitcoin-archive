{
  "id": 2789,
  "name": "Rene Pickhardt",
  "username": "renepickhardt",
  "avatar_template": "/user_avatar/delvingbitcoin.org/renepickhardt/{size}/7_2.png",
  "created_at": "2024-06-25T21:32:47.450Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"3\" data-topic=\"973\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/925_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>Businessperson Bob typically receives payments up to 0.05 BTC. His node management software occasionally runs a background job that calculates the average likelihood of feasibility of a 0.05 BTC payment from every node on the network to his node. The node management software also looks at current liquidity advertisements and simulates what would happen if Bob had a channel with the advertiser, calculating a hypothetical alternative average likelihood of feasibility. If the hypothetical alternative with a new channel has a significantly higher average likelihood of feasibility, Bob\u2019s node management software automatically accepts the liquidity advertisement and opens the new channel.</p>\n</blockquote>\n</aside>\n<p>This is a very interesting use case which I haven\u2019t thought of so far and it certainly could be done in this way. I do have a few additional thoughts on this use case:</p>\n<ol>\n<li>\n<p>If a user was interested in the likelihood of feasibility of a payment from all other nodes he might want to look at the histogram of amounts that he could receive from any user. So for a given random wealth distribution (which can be <a href=\"https://pypi.org/project/drs/\" rel=\"noopener nofollow ugc\">sampled with this library</a> as <a href=\"https://github.com/renepickhardt/Lightning-Network-Limitations/blob/906b3a4d691cbfb30c2f385c6697b4fe2bb81676/Limits%20of%20two%20party%20channels/A%20Mathematical%20Theory%20of%20Payment%20Channel%20Networks.ipynb\" rel=\"noopener nofollow ugc\">explained in this notebook</a>) he could use <a href=\"https://github.com/renepickhardt/Lightning-Network-Limitations/pull/2\" rel=\"noopener nofollow ugc\">this method to compute a feasible network state</a>. From here one could use <a href=\"https://en.wikipedia.org/wiki/Gomory%E2%80%93Hu_tree\" rel=\"noopener nofollow ugc\">Gomory-Hu Trees</a> to compute the all pair max flow more efficiently than computing a max flow problem from every user to Bob. Similar to <a href=\"https://github.com/renepickhardt/Lightning-Network-Limitations/blob/906b3a4d691cbfb30c2f385c6697b4fe2bb81676/likelihood-of-payment-possability/An%20upper%20Bound%20for%20the%20Probability%20to%20be%20able%20to%20successfully%20conduct%20a%20Payment%20on%20the%20Lightning%20Network.ipynb\" rel=\"noopener nofollow ugc\">this notebook one could compute the distribution of max flows / min cuts</a>  and have a more precise view. This is because besides the percentile of nodes that are below the amount which Bob wishes to receive one would also get confidence intervals (if for example this method was repeated for several random wealth distributions). <strong>Important</strong>: Assuming random liquidity in channels as I have done in the notebook to compute the min cut distribution is probably not as precise as starting from random wealth distributions.</p>\n</li>\n<li>\n<p>Of course when sampling random wealth distributions Bob could take into account that he ownes <code>x</code> coins in his channels. Furthermore as Bob knows the capacity and state of his channels he could also know what wealth his peers own at least. putting these constraint to the polytope of wealth distributions from which to sample can be done with the above mentioned library.</p>\n</li>\n<li>\n<p>Similar to 2. Bob could use his local knowledge see the receiving problem as max flow problem with his peers as sinks (assuming he has enough inbound liquidity in those channels) This knowledge would in particular be taken into account for the liquidity advertisement which he uses in his simulation. (Those are just som engineering / modelling optimizations. I am not sure how much improvement they will bring)</p>\n</li>\n<li>\n<p>The biggest issue is that with larger lightning networks it will be always harder to successfully sample feasible wealth distributions from where to start the above described computation. That is because it seems that the <a href=\"https://github.com/renepickhardt/Lightning-Network-Limitations/blob/906b3a4d691cbfb30c2f385c6697b4fe2bb81676/Limits%20of%20two%20party%20channels/A%20Mathematical%20Theory%20of%20Payment%20Channel%20Networks.ipynb\" rel=\"noopener nofollow ugc\">likelihood for sampled Bitcoin wealth distributions to also be feasible on the lightning network declines when the network grows</a> in size. Furthermore the test of feasibility is also rather costly. As discussed (out of band) with Stefan Richter (who was first to state this in our conversation) testing if a sampled wealth distribution has a feasible state cannot only be solved through linear integer programming but it boils down to solving a particular multi source multi sink max flow problem.</p>\n</li>\n</ol>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"3\" data-topic=\"973\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/925_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>User Alice makes a regular monthly bill payment set up through BOLT12 offers. She\u2019s configures her wallet to start to try paying 5 business days before the due date. The first try and first few automatic retries don\u2019t succeed. Before her wallet marks the payment attempt as a failure or takes other steps, it checks the likelihood of feasibility. If it\u2019s low but still practical, it will keep retrying at lengthening intervals for another few hours or days before finally marking the payment attempt as a failure.</p>\n</blockquote>\n</aside>\n<p>Yes absolutely. Knowing the likelihood of feasibility for a payment and being able to decide how often to attempt a payment and when to give up to make an on chain transaction to either pay someone on chain or open a new channel is exactly the one application I had in mind.</p>",
  "post_number": 4,
  "post_type": 1,
  "posts_count": 7,
  "updated_at": "2024-06-26T07:34:41.064Z",
  "reply_count": 0,
  "reply_to_post_number": 3,
  "quote_count": 1,
  "incoming_link_count": 65,
  "reads": 44,
  "readers_count": 43,
  "score": 343.8,
  "yours": false,
  "topic_id": 973,
  "topic_slug": "estimating-likelihood-for-lightning-payments-to-be-in-feasible",
  "topic_title": "Estimating Likelihood for Lightning Payments to be (in)feasible",
  "topic_html_title": "Estimating Likelihood for Lightning Payments to be (in)feasible",
  "category_id": 7,
  "display_username": "Rene Pickhardt",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"harding, post:3, topic:973\"]\nBusinessperson Bob typically receives payments up to 0.05 BTC. His node management software occasionally runs a background job that calculates the average likelihood of feasibility of a 0.05 BTC payment from every node on the network to his node. The node management software also looks at current liquidity advertisements and simulates what would happen if Bob had a channel with the advertiser, calculating a hypothetical alternative average likelihood of feasibility. If the hypothetical alternative with a new channel has a significantly higher average likelihood of feasibility, Bob\u2019s node management software automatically accepts the liquidity advertisement and opens the new channel.\n[/quote]\n\nThis is a very interesting use case which I haven't thought of so far and it certainly could be done in this way. I do have a few additional thoughts on this use case:\n\n1. If a user was interested in the likelihood of feasibility of a payment from all other nodes he might want to look at the histogram of amounts that he could receive from any user. So for a given random wealth distribution (which can be [sampled with this library](https://pypi.org/project/drs/) as [explained in this notebook](https://github.com/renepickhardt/Lightning-Network-Limitations/blob/906b3a4d691cbfb30c2f385c6697b4fe2bb81676/Limits%20of%20two%20party%20channels/A%20Mathematical%20Theory%20of%20Payment%20Channel%20Networks.ipynb)) he could use [this method to compute a feasible network state](https://github.com/renepickhardt/Lightning-Network-Limitations/pull/2). From here one could use [Gomory-Hu Trees](https://en.wikipedia.org/wiki/Gomory%E2%80%93Hu_tree) to compute the all pair max flow more efficiently than computing a max flow problem from every user to Bob. Similar to [this notebook one could compute the distribution of max flows / min cuts](https://github.com/renepickhardt/Lightning-Network-Limitations/blob/906b3a4d691cbfb30c2f385c6697b4fe2bb81676/likelihood-of-payment-possability/An%20upper%20Bound%20for%20the%20Probability%20to%20be%20able%20to%20successfully%20conduct%20a%20Payment%20on%20the%20Lightning%20Network.ipynb)  and have a more precise view. This is because besides the percentile of nodes that are below the amount which Bob wishes to receive one would also get confidence intervals (if for example this method was repeated for several random wealth distributions). **Important**: Assuming random liquidity in channels as I have done in the notebook to compute the min cut distribution is probably not as precise as starting from random wealth distributions. \n\n2. Of course when sampling random wealth distributions Bob could take into account that he ownes `x` coins in his channels. Furthermore as Bob knows the capacity and state of his channels he could also know what wealth his peers own at least. putting these constraint to the polytope of wealth distributions from which to sample can be done with the above mentioned library.\n\n3. Similar to 2. Bob could use his local knowledge see the receiving problem as max flow problem with his peers as sinks (assuming he has enough inbound liquidity in those channels) This knowledge would in particular be taken into account for the liquidity advertisement which he uses in his simulation. (Those are just som engineering / modelling optimizations. I am not sure how much improvement they will bring)\n\n4. The biggest issue is that with larger lightning networks it will be always harder to successfully sample feasible wealth distributions from where to start the above described computation. That is because it seems that the [likelihood for sampled Bitcoin wealth distributions to also be feasible on the lightning network declines when the network grows](https://github.com/renepickhardt/Lightning-Network-Limitations/blob/906b3a4d691cbfb30c2f385c6697b4fe2bb81676/Limits%20of%20two%20party%20channels/A%20Mathematical%20Theory%20of%20Payment%20Channel%20Networks.ipynb) in size. Furthermore the test of feasibility is also rather costly. As discussed (out of band) with Stefan Richter (who was first to state this in our conversation) testing if a sampled wealth distribution has a feasible state cannot only be solved through linear integer programming but it boils down to solving a particular multi source multi sink max flow problem.\n\n[quote=\"harding, post:3, topic:973\"]\nUser Alice makes a regular monthly bill payment set up through BOLT12 offers. She\u2019s configures her wallet to start to try paying 5 business days before the due date. The first try and first few automatic retries don\u2019t succeed. Before her wallet marks the payment attempt as a failure or takes other steps, it checks the likelihood of feasibility. If it\u2019s low but still practical, it will keep retrying at lengthening intervals for another few hours or days before finally marking the payment attempt as a failure.\n[/quote]\n\nYes absolutely. Knowing the likelihood of feasibility for a payment and being able to decide how often to attempt a payment and when to give up to make an on chain transaction to either pay someone on chain or open a new channel is exactly the one application I had in mind.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 8,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "This is a very interesting use case which I haven\u2019t thought of so far and it certainly could be done in this way. I do have a few additional thoughts on this use case: \n\n\nIf a user was interested in the likelihood of feasibility of a payment from all other nodes he might want to look at the histogr&hellip;",
  "truncated": true,
  "post_url": "/t/estimating-likelihood-for-lightning-payments-to-be-in-feasible/973/4",
  "reactions": [
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}