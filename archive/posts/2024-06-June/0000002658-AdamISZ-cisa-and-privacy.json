{
  "id": 2658,
  "name": "Adam Gibson",
  "username": "AdamISZ",
  "avatar_template": "/user_avatar/delvingbitcoin.org/adamisz/{size}/418_2.png",
  "created_at": "2024-06-06T16:16:11.913Z",
  "cooked": "<p><a class=\"mention\" href=\"/u/1440000bytes\">@1440000bytes</a></p>\n<blockquote>\n<p>Consider an example in which Alice has 3 UTXOs (A1, A2 and A3) in her wallet that could be used separately to pay Bob, Carol and Dave in different transactions. Normally, she would pay them separately and some of these transactions could have change although inputs remain different.</p>\n</blockquote>\n<p>I think you\u2019re oversimplifying how consolidation works here; you have to look at long term steady state behaviour across time.</p>\n<p>Suppose a person starts with <span class=\"math\">N</span> utxos and never co-spends inputs. In this case, they will create a new change output <span class=\"math\">\\simeq</span> always, meaning each payment has no effect on <span class=\"math\">N</span>. Meanwhile, every time they receive a payment they increment <span class=\"math\">N</span>. So this is <span class=\"math\">N \\rightarrow \\infty</span>, a conclusion not affected by usage pattern. Even worse, you will tend to accumulate dust utxos at the end of long peeling chains - such chains being ideal for the adversary blockchain analyst because interpreting them is often the simplest, least ambiguous kind of tracing. The possibility of a perfect match between available utxo sizes and the payment size obviously limits this blow up to infinity, but doesn\u2019t change the general conclusion - this is not workable.</p>\n<p>While crude, I think that model is crucial to bear in mind - consolidation is not optional.</p>\n<p>In the other extreme, suppose a person\u2019s utxo selection policy is \u201cmax greed\u201d. Always spend <em>all</em> currently owned utxos. In this case the average value of <span class=\"math\">N</span> over time will depend on the person\u2019s usage pattern. If they are a \u201cmerchant\u201d usecase type, where they receive much more frequently than they spend, they will do a lot of consolidations, and often have a large value of <span class=\"math\">N</span>. If they are a consumer usage type, with very rare large deposits and lots of small spends, they will have <span class=\"math\">N=1</span> almost always.</p>\n<p>CISA would mean a small incentive pushing in the direction of the max greed algo for any given current situation with <span class=\"math\">N&gt;1</span>. Call it 15% say. It isn\u2019t clear that that\u2019s <em>worse</em> than a policy that\u2019s closer to the first (\u201cnever co-spend\u201d) policy, albeit we\u2019ve dismissed that first one in its exact form, as impossible. It\u2019ll just depend on the usage pattern.</p>\n<p>\u201cCISA means more co-spends\u201d might not be valid if you take into account that more co-spending now might lead to less co-spending later (but it depends, blah blah), and this cannot be dismissed with \u201cnever co-spend\u201d because that\u2019s not possible. And more co-spends over time isn\u2019t unambiguously worse, either.</p>\n<p>(in all of this I\u2019m deliberately ignoring the effects on global utxoset size, because users will never be motivated by that)</p>\n<p><a class=\"mention\" href=\"/u/harding\">@harding</a></p>\n<blockquote>\n<p>Additionally, CISA reduces the cost of creating coinjoins and payjoins, two deployed protocols that improve privacy. It may also reduce the cost of other protocols that enhance privacy, including both current protocols (like LN channels closes with multiple in-flight HTLCs) and proposed protocols. The cost reduction is modest, but I think anything that gives privacy an advantage is worth considering.</p>\n</blockquote>\n<p>I think one should be careful to tease out what is incentivized here. In my opinion, privacy is <em>mostly</em> not incentivized by CISA, it kind of is true as a \u201csecond order\u201d effect but not directly. Consider 3 parties wanting to spend 1 input from each of <span class=\"math\">A, B, C</span> ; CISA incentivizes them to create their transaction together, but does not incentivize them to make any obfuscation effect in the pattern of their input and output values (consider that the solution of the subset sum problem is very trivial for randomly chosen 3 party batches). It <em>does</em> make it slightly cheaper to create a privacy-enhancing transaction pattern, but it equally incentivizes them to create any other pattern, and the latter <em>will require less effort</em>.</p>\n<p>To give a very obvious contrast, consider Lightning (or really any functional L2): the cost savings and the privacy effect are intrinsically linked; they\u2019re both a direct effect of the non-presence on-chain and you can\u2019t have one without the other.</p>\n<p>You could argue that, since CISA gives greater benefits the larger the group who are collaborating to form a single transaction, it incentivizes privacy in this way, but this delta in cost (as you approach the asymptotic best) is really very small; if it were not very small, then I would be more optimistic on this point - because, as vague as it is, the subset sum problem <em>is</em> more and more intractable with a <span class=\"math\"> \\simeq O(n!)</span> scaling. I agree that e.g. payjoin (or maybe things like batched channel opens) are incentivized somewhat by this.</p>\n<blockquote>\n<p>The size is 355 vbytes, a 23% savings over the base case.</p>\n</blockquote>\n<p>Interesting point to consider. Though \u201csendtomany\u201d functions exist in many wallets, we have no \u201cjoin a payment batch with other users by pressing this button\u201d outside of coinjoin, and the obvious reason is, it\u2019s \u201cbloody hard\u201d to do and inconvenient. Even without the hassle of forcing equal sized outputs, coordinating users to do transactions together is way too much hassle and not worth 23% (or whatever) savings in fees.</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2024-06-06T16:16:11.913Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 21.2,
  "yours": false,
  "topic_id": 824,
  "topic_slug": "cisa-and-privacy",
  "topic_title": "CISA and Privacy",
  "topic_html_title": "CISA and Privacy",
  "category_id": 7,
  "display_username": "Adam Gibson",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "@1440000bytes \n\n> Consider an example in which Alice has 3 UTXOs (A1, A2 and A3) in her wallet that could be used separately to pay Bob, Carol and Dave in different transactions. Normally, she would pay them separately and some of these transactions could have change although inputs remain different.\n\nI think you're oversimplifying how consolidation works here; you have to look at long term steady state behaviour across time.\n\nSuppose a person starts with $N$ utxos and never co-spends inputs. In this case, they will create a new change output $\\simeq$ always, meaning each payment has no effect on $N$. Meanwhile, every time they receive a payment they increment $N$. So this is $N \\rightarrow \\infty$, a conclusion not affected by usage pattern. Even worse, you will tend to accumulate dust utxos at the end of long peeling chains - such chains being ideal for the adversary blockchain analyst because interpreting them is often the simplest, least ambiguous kind of tracing. The possibility of a perfect match between available utxo sizes and the payment size obviously limits this blow up to infinity, but doesn't change the general conclusion - this is not workable.\n\nWhile crude, I think that model is crucial to bear in mind - consolidation is not optional.\n\nIn the other extreme, suppose a person's utxo selection policy is \"max greed\". Always spend *all* currently owned utxos. In this case the average value of $N$ over time will depend on the person's usage pattern. If they are a \"merchant\" usecase type, where they receive much more frequently than they spend, they will do a lot of consolidations, and often have a large value of $N$. If they are a consumer usage type, with very rare large deposits and lots of small spends, they will have $N=1$ almost always.\n\nCISA would mean a small incentive pushing in the direction of the max greed algo for any given current situation with $N>1$. Call it 15% say. It isn't clear that that's *worse* than a policy that's closer to the first (\"never co-spend\") policy, albeit we've dismissed that first one in its exact form, as impossible. It'll just depend on the usage pattern.\n\n\"CISA means more co-spends\" might not be valid if you take into account that more co-spending now might lead to less co-spending later (but it depends, blah blah), and this cannot be dismissed with \"never co-spend\" because that's not possible. And more co-spends over time isn't unambiguously worse, either.\n\n(in all of this I'm deliberately ignoring the effects on global utxoset size, because users will never be motivated by that)\n\n@harding \n\n>Additionally, CISA reduces the cost of creating coinjoins and payjoins, two deployed protocols that improve privacy. It may also reduce the cost of other protocols that enhance privacy, including both current protocols (like LN channels closes with multiple in-flight HTLCs) and proposed protocols. The cost reduction is modest, but I think anything that gives privacy an advantage is worth considering.\n\nI think one should be careful to tease out what is incentivized here. In my opinion, privacy is *mostly* not incentivized by CISA, it kind of is true as a \"second order\" effect but not directly. Consider 3 parties wanting to spend 1 input from each of $A, B, C$ ; CISA incentivizes them to create their transaction together, but does not incentivize them to make any obfuscation effect in the pattern of their input and output values (consider that the solution of the subset sum problem is very trivial for randomly chosen 3 party batches). It *does* make it slightly cheaper to create a privacy-enhancing transaction pattern, but it equally incentivizes them to create any other pattern, and the latter *will require less effort*.\n\nTo give a very obvious contrast, consider Lightning (or really any functional L2): the cost savings and the privacy effect are intrinsically linked; they're both a direct effect of the non-presence on-chain and you can't have one without the other.\n\nYou could argue that, since CISA gives greater benefits the larger the group who are collaborating to form a single transaction, it incentivizes privacy in this way, but this delta in cost (as you approach the asymptotic best) is really very small; if it were not very small, then I would be more optimistic on this point - because, as vague as it is, the subset sum problem *is* more and more intractable with a $ \\simeq O(n!)$ scaling. I agree that e.g. payjoin (or maybe things like batched channel opens) are incentivized somewhat by this.\n\n> The size is 355 vbytes, a 23% savings over the base case.\n\nInteresting point to consider. Though \"sendtomany\" functions exist in many wallets, we have no \"join a payment batch with other users by pressing this button\" outside of coinjoin, and the obvious reason is, it's \"bloody hard\" to do and inconvenient. Even without the hassle of forcing equal sized outputs, coordinating users to do transactions together is way too much hassle and not worth 23% (or whatever) savings in fees.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 343,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}