{
  "id": 3490,
  "name": "Charmaine N",
  "username": "cndolo",
  "avatar_template": "/user_avatar/delvingbitcoin.org/cndolo/{size}/865_2.png",
  "created_at": "2024-11-05T11:57:11.703Z",
  "cooked": "<p>Dear all,</p>\n<p>In a recent paper <a href=\"https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.AFT.2024.12\" rel=\"noopener nofollow ugc\">1</a>, we explored the threat of censorship by a network-level\nadversary, such as an autonomous system (AS), in the Lightning network.\nI would like to summarise the contributions in this post, while inviting\ncomments and discussions on the subject from the broader LN community.</p>\n<h2><a name=\"p-3490-background-1\" class=\"anchor\" href=\"#p-3490-background-1\"></a>Background</h2>\n<p>A relatively recent paper <a href=\"https://ieeexplore.ieee.org/document/10190502\" rel=\"noopener nofollow ugc\">2</a> presented a comprehensive attack on privacy in the\nLN that exploits the fact that P2P messages can be identified using\nnetwork-level information, i.e., TCP headers, despite encryption.\nWhen combined with the sequence of messages, it is possible for an adversary\nobserving network traffic to determine what application messages are\nbeing exchanged by nodes.\nBased on collected packet traces, the authors showed that they can trivially\nclassify application messages which serves as the foundation for the further\nattack.\nThe fact that the network layer is quite centralised makes the potential impact\neven greater, as most channels are hosted at just a handful of ASs.</p>\n<h2><a name=\"p-3490-censorship-2\" class=\"anchor\" href=\"#p-3490-censorship-2\"></a>Censorship</h2>\n<p>Motivated by the network-level centralisation, we studied the LN\u2019s vulnerability\nto censorship.\nWe maintain the same attacker model as <a href=\"https://ieeexplore.ieee.org/document/10190502\" rel=\"noopener nofollow ugc\">2</a>, which is a powerful but malicious\nnetwork-level attacker such as an AS.\nHowever, our attacker is keen on imposing censorship on <strong>only</strong> \u201ctheir\u201d nodes\nwhile going undetected so as to maintain a certain degree of plausible\ndeniability.\nTo this end, the adversary only imposes censorship on payments in the LN and\ndoes not interfere with any other LN operations or the greater network.</p>\n<p>Assuming the adversary is monitoring traffic exchanged between to/from one of\ntheir nodes, the basic steps they may follow can be summarised as follows:</p>\n<ol>\n<li>Identify TCP segments related to LN payments. Anything else besides such\nsegments is not of interest/relevance to the adversary.\nThis is typically accomplished by identifying an <code>update_add_htlc</code> message.</li>\n<li>Interfere with the payment by dropping the first outgoing <code>revoke_and_ack</code>\nmessage that is sent by the initiator. The specific message is not a\nrequirement but was selected due its terminal position as it affords the\nattacker time to confirm that a payment is underway.</li>\n<li>Drop every subsequent <code>revoke_and_ack</code> message that will be transmitted by\nthe initiator until the timeout eventually expires.</li>\n</ol>\n<p>In doing so, the affected nodes are still able to open channels, send gossip\netc. which supports the adversary\u2019s goal of remaining undetected.\nClearly, a single node operator is technically able to execute these same steps,\nhowever, the impact is related to the number of affected channels.\nIn the paper, we discuss how and show that the adversary can refine their attack\nby determining the node\u2019s role in the payment path.\nSimilarly, this is achieved using only the information available at the network\nlayer.</p>\n<p>In summary, these are some the key points from our analysis:</p>\n<ol>\n<li>We implemented classification rules (using message size, direction and\nsequence) in XDP and netfilter programs which we deployed to test\nnetworks.\nComplementary to <a href=\"https://ieeexplore.ieee.org/document/10190502\" rel=\"noopener nofollow ugc\">2</a>, we showed that such classification is trivially\nand efficiently possible on the fly.</li>\n<li>As a result, it is feasible to execute the described censorship attack,\nand will remain to be so unless the currently-estimated throughput\nincreases significantly.</li>\n<li>Perhaps unsurprisingly, the network-level centralisation increases the\npotential magnitude of the attack.\nSimulations, however, showed this varies greatly based on the attacking\nAS and/or exact censorship strategy.</li>\n</ol>\n<h2><a name=\"p-3490-mitigation-3\" class=\"anchor\" href=\"#p-3490-mitigation-3\"></a>Mitigation</h2>\n<p>The authors of <a href=\"https://ieeexplore.ieee.org/document/10190502\" rel=\"noopener nofollow ugc\">2</a> already discussed some countermeasures that may be\nimplemented such as deviating from the default port or using Tor.\nWhile the former is likely not effective enough, the latter can be generalised\nto the use of length-hiding schemes such as padding.\nHowever, as we argue in our paper, selecting an adequate form of padding is not\ntrivial.\nFor one, an adversary is likely to be able to defeat simple padding mechanisms\nsuch as constant-length messages using knowledge of the LN protocol and timing.\nOn the other hand, the introduced overhead may not be negligible and should thus\nbe taken into consideration.</p>\n<p>There is a lot of related work in the area of website fingerprinting defences\nthat we can likely make use of here.\nFor instance, adaptive padding mechanisms such as WTF-Pad <a href=\"https://arxiv.org/pdf/1512.00524\" rel=\"noopener nofollow ugc\">3</a> et al. or defence\nframeworks such as Maybenot <a href=\"https://dl.acm.org/doi/pdf/10.1145/3603216.3624953\" rel=\"noopener nofollow ugc\">4</a> come to mind.</p>\n<p>Alternatively (or perhaps, alongside) exploring the above, addressing the\nnetwork-level centralisation on the application layer, e.g., by taking AS\ninformation during pathfinding into consideration, may also be worth looking at.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-11-05T11:57:11.703Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 194,
  "reads": 11,
  "readers_count": 10,
  "score": 1002.2,
  "yours": false,
  "topic_id": 1248,
  "topic_slug": "research-paper-on-ln-payment-censorship",
  "topic_title": "Research Paper on LN Payment Censorship",
  "topic_html_title": "Research Paper on LN Payment Censorship",
  "category_id": 8,
  "display_username": "Charmaine N",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Dear all,\n\nIn a recent paper [1], we explored the threat of censorship by a network-level\nadversary, such as an autonomous system (AS), in the Lightning network.\nI would like to summarise the contributions in this post, while inviting\ncomments and discussions on the subject from the broader LN community.\n\n## Background\n\nA relatively recent paper [2] presented a comprehensive attack on privacy in the\nLN that exploits the fact that P2P messages can be identified using\nnetwork-level information, i.e., TCP headers, despite encryption.\nWhen combined with the sequence of messages, it is possible for an adversary\nobserving network traffic to determine what application messages are\nbeing exchanged by nodes.\nBased on collected packet traces, the authors showed that they can trivially\nclassify application messages which serves as the foundation for the further\nattack.\nThe fact that the network layer is quite centralised makes the potential impact\neven greater, as most channels are hosted at just a handful of ASs.\n\n## Censorship\n\nMotivated by the network-level centralisation, we studied the LN's vulnerability\nto censorship.\nWe maintain the same attacker model as [2], which is a powerful but malicious\nnetwork-level attacker such as an AS.\nHowever, our attacker is keen on imposing censorship on **only** \"their\" nodes\nwhile going undetected so as to maintain a certain degree of plausible\ndeniability.\nTo this end, the adversary only imposes censorship on payments in the LN and\ndoes not interfere with any other LN operations or the greater network.\n\nAssuming the adversary is monitoring traffic exchanged between to/from one of\ntheir nodes, the basic steps they may follow can be summarised as follows:\n\n  1. Identify TCP segments related to LN payments. Anything else besides such\n     segments is not of interest/relevance to the adversary.\n     This is typically accomplished by identifying an `update_add_htlc` message.\n  2. Interfere with the payment by dropping the first outgoing `revoke_and_ack`\n     message that is sent by the initiator. The specific message is not a\n     requirement but was selected due its terminal position as it affords the\n     attacker time to confirm that a payment is underway.\n  3. Drop every subsequent `revoke_and_ack` message that will be transmitted by\n     the initiator until the timeout eventually expires.\n\nIn doing so, the affected nodes are still able to open channels, send gossip\netc. which supports the adversary's goal of remaining undetected.\nClearly, a single node operator is technically able to execute these same steps,\nhowever, the impact is related to the number of affected channels.\nIn the paper, we discuss how and show that the adversary can refine their attack\nby determining the node's role in the payment path.\nSimilarly, this is achieved using only the information available at the network\nlayer.\n\nIn summary, these are some the key points from our analysis:\n\n  1. We implemented classification rules (using message size, direction and\n     sequence) in XDP and netfilter programs which we deployed to test\n     networks.\n     Complementary to [2], we showed that such classification is trivially\n     and efficiently possible on the fly.\n  2. As a result, it is feasible to execute the described censorship attack,\n     and will remain to be so unless the currently-estimated throughput\n     increases significantly.\n  3. Perhaps unsurprisingly, the network-level centralisation increases the\n   potential magnitude of the attack.\n   Simulations, however, showed this varies greatly based on the attacking\n   AS and/or exact censorship strategy.\n\n## Mitigation\n\nThe authors of [2] already discussed some countermeasures that may be\nimplemented such as deviating from the default port or using Tor.\nWhile the former is likely not effective enough, the latter can be generalised\nto the use of length-hiding schemes such as padding.\nHowever, as we argue in our paper, selecting an adequate form of padding is not\ntrivial.\nFor one, an adversary is likely to be able to defeat simple padding mechanisms\nsuch as constant-length messages using knowledge of the LN protocol and timing.\nOn the other hand, the introduced overhead may not be negligible and should thus\nbe taken into consideration.\n\nThere is a lot of related work in the area of website fingerprinting defences\nthat we can likely make use of here.\nFor instance, adaptive padding mechanisms such as WTF-Pad [3] et al. or defence\nframeworks such as Maybenot [4] come to mind.\n\nAlternatively (or perhaps, alongside) exploring the above, addressing the\nnetwork-level centralisation on the application layer, e.g., by taking AS\ninformation during pathfinding into consideration, may also be worth looking at.\n\n[1]: https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.AFT.2024.12\n[2]: https://ieeexplore.ieee.org/document/10190502\n[3]: https://arxiv.org/pdf/1512.00524\n[4]: https://dl.acm.org/doi/pdf/10.1145/3603216.3624953",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 584,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    },
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}