{
  "id": 3616,
  "name": "Zawy",
  "username": "zawy",
  "avatar_template": "/user_avatar/delvingbitcoin.org/zawy/{size}/750_2.png",
  "created_at": "2024-11-27T15:37:08.105Z",
  "cooked": "<p>Consensus primacy: MTP \u2192 timestamps \u2192 difficulty.</p>\n<p>In deciding the consensus in any consensus mechanism, monotonicity has primacy over timestamps. In the case of PoW, timestamps have precedence over difficulty because they are how difficulty is determined which determines PoW. No adjustment to timespan (or target for that matter) that is restricted to the difficulty calculation should be made. It doesn\u2019t matter what difficulty algorithm you use, as long as it\u2019s a \u201cfair\u201d (blind) mathematical estimate of the hashrate based on prior difficulty(ies) and solvetime(s). Changing timespan in the algorithm pollutes the math. I have seen many exploits that result from that. For example, the 4 and 1/4 timespan limits allow exploits which I previously said should exist for this theoretical reason and apparently PW believed my reasoning enough to found the exploit. He may do the same here.</p>\n<p>So this consensus rule change should be made in the MTP calculation. When it\u2019s at that level, it makes more intuitive sense to do it every block.</p>\n<p>Hard-to-see \u201cgotcha\u201d problems involve the MTP because it\u2019s a patch instead of strictly following monotonicity.</p>\n<p>edit: I was having trouble figuring out what it means to say</p>\n<p>MTP \u2192 timestamps \u2192 difficulty.</p>\n<p>when I know that\u2019s the theoretical requirement and yet timestamps dictate MTP. The answer prevents the exploit: it means that the \u201ctimestamps\u201d used by the difficulty algorithm to calculate timespan must be the MTP of the 1st and 2016th blocks. Even PW\u2019s attack on the 4x ad 1/4 timespan limits can be fixed without removing them completely if they\u2019re turned into limits on the MTP. That is, no timestamp can be more that 3/4 * 2016 * 600 seconds into the past from the current MTP or more than 4 * 2016 * 600 into the future. If there\u2019s a network partition for more than that limit the limit is used until real time catches up. Likewise for the past limit.</p>\n<p>But either of these are too big of a change to implement. I don\u2019t know of any simple solution that would make me feel comfortable in saying \u201cit probably can\u2019t be attack\u201d except to make MTP=1 instead of 11. This forces true monotonicity. But as a minimum, Murch\u2019s limit on timespan better be enforced on the timestamp instead of timespan or there\u2019s probably an exploit.</p>\n<p>How many times have people had to learn \u201cdon\u2019t use timestamps for time, use the MTP\u201d? And here we are still trying to use them for the absolute core of our consensus. Non-monotonic timestamps for any consensus mechanism are not legitimate.</p>\n<p>It\u2019s concerning that the \u201cofficial time\u201d for a lot of things in bitcoin like what scripts use is the MTP, but the consensus mechanism  is based on timestamps.   A 51% attack enables a huge disconnect between those two estimates of time even if the difficulty can\u2019t be exploited for excess blocks. Even more so if the timespan is changed in the algorithm and not determined directly by 2 timestamps on the chain. The MTP monotonicity isn\u2019t even enforcing monotonicity on the difficulty algorithm if there\u2019s a &gt;51% attack which is why we had to proposed a monotonic rule on the timespan. Monotonicity on each timestamp is the only way to assure there are no unknown attacks external to the difficulty algorithm. Assuming that\u2019s too drastic to implement (via MTP=1 instead of 11), I\u2019d say no timestamp should be older than the 144th timestamp in the past, with the 2016th timestamp in the past as my second choice. But this doesn\u2019t address the problem of the disconnect between the difficulty timestamps and the MTP time used everywhere else. The simplest fix for that if MTP=1 can\u2019t be used is to base the timespan on the MTP of the 1st and 2016th blocks. This wouldn\u2019t need a limit on the timestamps.</p>",
  "post_number": 57,
  "post_type": 1,
  "updated_at": "2024-11-28T00:48:52.527Z",
  "reply_count": 0,
  "reply_to_post_number": 56,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 2.0,
  "yours": false,
  "topic_id": 710,
  "topic_slug": "great-consensus-cleanup-revival",
  "topic_title": "Great Consensus Cleanup Revival",
  "topic_html_title": "Great Consensus Cleanup Revival",
  "category_id": 7,
  "display_username": "Zawy",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 10,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "AntoineP",
    "name": "Antoine Poinsot",
    "avatar_template": "/user_avatar/delvingbitcoin.org/antoinep/{size}/483_2.png"
  },
  "bookmarked": false,
  "raw": "Consensus primacy: MTP -> timestamps -> difficulty.\n\nIn deciding the consensus in any consensus mechanism, monotonicity has primacy over timestamps. In the case of PoW, timestamps have precedence over difficulty because they are how difficulty is determined which determines PoW. No adjustment to timespan (or target for that matter) that is restricted to the difficulty calculation should be made. It doesn't matter what difficulty algorithm you use, as long as it's a \"fair\" (blind) mathematical estimate of the hashrate based on prior difficulty(ies) and solvetime(s). Changing timespan in the algorithm pollutes the math. I have seen many exploits that result from that. For example, the 4 and 1/4 timespan limits allow exploits which I previously said should exist for this theoretical reason and apparently PW believed my reasoning enough to found the exploit. He may do the same here. \n\nSo this consensus rule change should be made in the MTP calculation. When it's at that level, it makes more intuitive sense to do it every block.\n\nHard-to-see \"gotcha\" problems involve the MTP because it's a patch instead of strictly following monotonicity.\n\nedit: I was having trouble figuring out what it means to say\n\nMTP -> timestamps -> difficulty.\n\nwhen I know that's the theoretical requirement and yet timestamps dictate MTP. The answer prevents the exploit: it means that the \"timestamps\" used by the difficulty algorithm to calculate timespan must be the MTP of the 1st and 2016th blocks. Even PW's attack on the 4x ad 1/4 timespan limits can be fixed without removing them completely if they're turned into limits on the MTP. That is, no timestamp can be more that 3/4 * 2016 * 600 seconds into the past from the current MTP or more than 4 * 2016 * 600 into the future. If there's a network partition for more than that limit the limit is used until real time catches up. Likewise for the past limit.\n\nBut either of these are too big of a change to implement. I don't know of any simple solution that would make me feel comfortable in saying \"it probably can't be attack\" except to make MTP=1 instead of 11. This forces true monotonicity. But as a minimum, Murch's limit on timespan better be enforced on the timestamp instead of timespan or there's probably an exploit.\n\nHow many times have people had to learn \"don't use timestamps for time, use the MTP\"? And here we are still trying to use them for the absolute core of our consensus. Non-monotonic timestamps for any consensus mechanism are not legitimate.\n\nIt's concerning that the \"official time\" for a lot of things in bitcoin like what scripts use is the MTP, but the consensus mechanism  is based on timestamps.   A 51% attack enables a huge disconnect between those two estimates of time even if the difficulty can't be exploited for excess blocks. Even more so if the timespan is changed in the algorithm and not determined directly by 2 timestamps on the chain. The MTP monotonicity isn't even enforcing monotonicity on the difficulty algorithm if there's a >51% attack which is why we had to proposed a monotonic rule on the timespan. Monotonicity on each timestamp is the only way to assure there are no unknown attacks external to the difficulty algorithm. Assuming that's too drastic to implement (via MTP=1 instead of 11), I'd say no timestamp should be older than the 144th timestamp in the past, with the 2016th timestamp in the past as my second choice. But this doesn't address the problem of the disconnect between the difficulty timestamps and the MTP time used everywhere else. The simplest fix for that if MTP=1 can't be used is to base the timespan on the MTP of the 1st and 2016th blocks. This wouldn't need a limit on the timestamps.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 502,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}