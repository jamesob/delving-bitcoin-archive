{
  "id": 3482,
  "name": "Matt Morehouse",
  "username": "morehouse",
  "avatar_template": "/letter_avatar_proxy/v4/letter/m/df705f/{size}.png",
  "created_at": "2024-11-04T23:59:52.234Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"JohnLaw\" data-post=\"1\" data-topic=\"1233\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/j/58956e/48.png\" class=\"avatar\"> JohnLaw:</div>\n<blockquote>\n<p>For example, if Alice uses the current Lightning protocol to offer an HTLC to Bob, and Bob fulfills the HTLC by providing the required hash preimage before its expiry, Alice is supposed to update the channel state off-chain to reflect the payment of the HTLC to Bob. However, if Alice fails to do so, Bob\u2019s only recourse is to put an HTLC-success transaction on-chain. If the cost of putting the HTLC-success transaction on-chain exceeds the value of the payment, resolving the HTLC on-chain is more costly for Bob than allowing Alice to claim the payment. Therefore, Alice is incentivized to violate the protocol by not giving the payment\u2019s funds to Bob off-chain, as she will receive those funds unless Bob acts against his immediate self-interest.</p>\n</blockquote>\n</aside>\n<p>All lightning implementations today will force close in this case even though it\u2019s not cost effective (though they might not claim the HTLC output on chain), and for good reason.  If Bob adopts a policy of \u201cforgiving\u201d small HTLCs in an attempt to stay off chain, it enables Alice to steal Bob\u2019s entire channel balance one small HTLC at a time.  Besides, if Alice is unresponsive to HTLC claims for 5+ hours (i.e. the typical CLTV delta), she\u2019s a poor channel partner even if she\u2019s honest.</p>\n<p>OPR actually makes this problem worse.  Because Bob\u2019s cost of force closing is  higher with OPR (due to burned fees), there is a larger incentive for Bob to forgive small HTLCs that Alice refuses to resolve before expiry.</p>\n<aside class=\"quote no-group\" data-username=\"JohnLaw\" data-post=\"1\" data-topic=\"1233\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/j/58956e/48.png\" class=\"avatar\"> JohnLaw:</div>\n<blockquote>\n<p>In order to determine if an HTLC was resolved successfully, a node has to determine if the required hash preimage was provided before the HTLC\u2019s expiry. All hash preimage messages can include a time stamp recording when they were sent, and each node can keep a time-stamped nonvolatile log of each hash preimage that it sends or receives. This log can be used to determine the result of an HTLC, even if the node crashes when the HTLC was being resolved. Channel partners can keep their clocks synchronized by exchanging frequent time stamp messages, and the htlc_expiry_delta_msec parameters can include a buffer for clock skew.</p>\n</blockquote>\n</aside>\n<p>Seems tricky.  Since networks are inherently unreliable, can\u2019t an attacker easily lie about the actual time the message was sent?  How does a node distinguish between occasional network lag and a malicious peer?</p>\n<p>Even if everyone is honest, I fear that the higher complexity of determining success/failure will lead to implementation bugs and more force closes, which are extra costly with OPR.</p>\n<aside class=\"quote no-group\" data-username=\"JohnLaw\" data-post=\"1\" data-topic=\"1233\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/j/58956e/48.png\" class=\"avatar\"> JohnLaw:</div>\n<blockquote>\n<h1>Usability</h1>\n<p>The OPR protocol\u2019s guaranteed resolution of a payment attempt within seconds makes it much more attractive to casual users than the current Lightning protocol, which could require waiting hours to find out that a payment attempt failed.</p>\n</blockquote>\n</aside>\n<p>Yes, this is good UX for casual users.</p>\n<p>But the capital requirements of OPR are also quite bad UX for casual users.  To properly disincentivize cheating, the amount of funds each party contributes to the burn output must always be higher than the total value of outstanding HTLCs (otherwise users could profit from force closing without forwarding preimages).  This means that in order to <em>receive</em> payments, users must <em>already</em> have at least as much balance on their side of the channel as they want to receive.  Casual lightning users already get frustrated by the 1% reserve requirement, so this new requirement is sure to cause even more frustration.</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-11-04T23:59:52.234Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 14,
  "readers_count": 13,
  "score": 2.8,
  "yours": false,
  "topic_id": 1233,
  "topic_slug": "a-fast-scalable-protocol-for-resolving-lightning-payments",
  "topic_title": "A Fast, Scalable Protocol For Resolving Lightning Payments",
  "topic_html_title": "A Fast, Scalable Protocol For Resolving Lightning Payments",
  "category_id": 7,
  "display_username": "Matt Morehouse",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"JohnLaw, post:1, topic:1233\"]\nFor example, if Alice uses the current Lightning protocol to offer an HTLC to Bob, and Bob fulfills the HTLC by providing the required hash preimage before its expiry, Alice is supposed to update the channel state off-chain to reflect the payment of the HTLC to Bob. However, if Alice fails to do so, Bob\u2019s only recourse is to put an HTLC-success transaction on-chain. If the cost of putting the HTLC-success transaction on-chain exceeds the value of the payment, resolving the HTLC on-chain is more costly for Bob than allowing Alice to claim the payment. Therefore, Alice is incentivized to violate the protocol by not giving the payment\u2019s funds to Bob off-chain, as she will receive those funds unless Bob acts against his immediate self-interest.\n[/quote]\n\nAll lightning implementations today will force close in this case even though it's not cost effective (though they might not claim the HTLC output on chain), and for good reason.  If Bob adopts a policy of \"forgiving\" small HTLCs in an attempt to stay off chain, it enables Alice to steal Bob's entire channel balance one small HTLC at a time.  Besides, if Alice is unresponsive to HTLC claims for 5+ hours (i.e. the typical CLTV delta), she's a poor channel partner even if she's honest.\n\nOPR actually makes this problem worse.  Because Bob's cost of force closing is  higher with OPR (due to burned fees), there is a larger incentive for Bob to forgive small HTLCs that Alice refuses to resolve before expiry.\n\n[quote=\"JohnLaw, post:1, topic:1233\"]\nIn order to determine if an HTLC was resolved successfully, a node has to determine if the required hash preimage was provided before the HTLC\u2019s expiry. All hash preimage messages can include a time stamp recording when they were sent, and each node can keep a time-stamped nonvolatile log of each hash preimage that it sends or receives. This log can be used to determine the result of an HTLC, even if the node crashes when the HTLC was being resolved. Channel partners can keep their clocks synchronized by exchanging frequent time stamp messages, and the htlc_expiry_delta_msec parameters can include a buffer for clock skew.\n[/quote]\n\nSeems tricky.  Since networks are inherently unreliable, can't an attacker easily lie about the actual time the message was sent?  How does a node distinguish between occasional network lag and a malicious peer?\n\nEven if everyone is honest, I fear that the higher complexity of determining success/failure will lead to implementation bugs and more force closes, which are extra costly with OPR.\n\n[quote=\"JohnLaw, post:1, topic:1233\"]\n# Usability\n\nThe OPR protocol\u2019s guaranteed resolution of a payment attempt within seconds makes it much more attractive to casual users than the current Lightning protocol, which could require waiting hours to find out that a payment attempt failed.\n[/quote]\n\nYes, this is good UX for casual users.\n\nBut the capital requirements of OPR are also quite bad UX for casual users.  To properly disincentivize cheating, the amount of funds each party contributes to the burn output must always be higher than the total value of outstanding HTLCs (otherwise users could profit from force closing without forwarding preimages).  This means that in order to *receive* payments, users must *already* have at least as much balance on their side of the channel as they want to receive.  Casual lightning users already get frustrated by the 1% reserve requirement, so this new requirement is sure to cause even more frustration.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 47,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}