{
  "id": 3601,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2024-11-25T20:13:00.865Z",
  "cooked": "<p>These are the SuperScalar UX notes that I wrote some time ago. I am now sharing it here.</p>\n<p><em><strong>NOTE</strong></em> These should be considered as \u201cvery rough\u201d. <em><strong>Nobody</strong></em> has any experience with deploying a N&gt;2 non-custodial offchain mechanism that integrates deeply with Lightning. It is entirely possible that my whole approach here is completely wrong-headed and delusional. This is the best I can do with what little knowledge I currently have as of October-&gt;November 2024. Hopefully, it can be improved as we go on to actually try implementing SuperScalar for larger groups of actual end-users.  Which is to say: if you follow these notes to the letter and end up with horrible UX that makes your mom hate you, that is your fault, not mine ^.^;;;;;;;;</p>\n<hr>\n<p>Subject: SuperScalar UX Notes</p>\n<h1><a name=\"p-3601-preface-the-mobile-phone-environment-1\" class=\"anchor\" href=\"#p-3601-preface-the-mobile-phone-environment-1\"></a>Preface: The Mobile Phone Environment</h1>\n<p>These notes are primarily targeted for mobile phone uses.</p>\n<p>I am not an expert in the mobile phone environment.\nHowever, my initial study suggests the following:</p>\n<ul>\n<li>Messaging applications are common enough that significant\nparts of the mobile phone development environment are\nfocused on timely delivery of messages.\n<ul>\n<li>This is not polled (or if it is polled, it is polled in\naggregate amongst all messaging applications;\nnot certain about exact implementation \u2014 in Android,\nfor example, timely delivery usually requires Google\nServices, and iOS seems to rely on similar services\nprovided by Apple).</li>\n<li>There are even cross-platform libraries/systems that\nmake this easy to port across Android and iOS.</li>\n<li>If a human user sends a message to another human user\nvia a mobile-based messaging app, and the other user\nsays \u201cI did not receive it\u201d the usual reaction is\ndisbelief, since in practice message delivery is\nhighly timely and reliable.</li>\n<li>The example of Signal, which has end-to-end encryption,\nsuggests that when a message is delivered, the app is\ngiven enough CPU power to at least perform decryption\nof the message, suggesting that at least some CPU power\nis available via this mechanism.\n<ul>\n<li>In SuperScalar, we require that clients also perform\nMuSig2 signing whenever the LSP signals a change in\nsome subtree, which requires at least one and a half\nroundtrips (and probably two roundtrips to return the\ncompleted signature).\nI am uncertain at this point if it is possible to\nsend small TCP bytestreams from the mobile app to\nthe LSP during handling of an incoming message.</li>\n</ul>\n</li>\n<li>The example of Phoenix, which can receive funds even if\nthe phone is locked and otherwise not actively used by\nthe user, suggests that it is possible to compute an\nECDSA signature and send it to the LSP at least using\nsome mechanism to wake up the app (conjectured to be\na messaging system similar to the above).\nNote that proper payment according to the BOLT spec\nrequires a grand total of at least 3.5 round trips\n(2 roundtrips to irrevocably commit to the HTLC, then\n1.5 roundtrips to resolve the HTLC) and requires\ntwo ECDSA signing sessions each for client and LSP.</li>\n</ul>\n</li>\n</ul>\n<p>The above is from the point-of-view of the actual Bitcoin\nLightning wallet app.</p>\n<p>From the point of view of the LSP, the LSP can simply expose\n<a href=\"https://github.com/BitcoinAndLightningLayerSpecs/lsp/blob/52acff41b07f082d32512b0dd9a161d54ecaa2b9/LSPS5/README.md\" rel=\"noopener nofollow ugc\">LSPS5</a>.\nAny Bitcoin Lightning wallet app which can afford to run a\nwebserver can register webhooks via LSPS5 that then cause\nmessages to be sent to the specific client mobile app, and\nallow it to work with the SuperScalar provided by the LSP.</p>\n<h1><a name=\"p-3601-the-user-concepts-2\" class=\"anchor\" href=\"#p-3601-the-user-concepts-2\"></a>The User Concepts</h1>\n<p>A simple rule of thumb for UX design is: \u201cgive the user an\ninterface they are already used to\u201d.</p>\n<p>Given that this is financial technology, it makes sense to\nimitate existing banking apps and common banking\npractices.</p>\n<p>Thus:</p>\n<ul>\n<li>The app provides the equivalent of a \u201cBitcoin-denominated\nchecking account\u201d.</li>\n<li>The account has an \u201caccount limit\u201d.</li>\n<li>The account has \u201cdeposit insurance\u201d, which can be\neither limited coverage (available for free) or unlimited coverage (requires one-time fee to be paid to miners and swap operators).</li>\n</ul>\n<p>Expanding on the above:</p>\n<ul>\n<li>The app provides the equivalent of a \u201cBitcoin-denominated\nchecking account\u201d.\n<ul>\n<li>Like any checking account, there is a monthly account\nmaintenance fee.\n<ul>\n<li>Under the hood: This is the amortized cost of managing\nthe UTXOs and liquidity needed in the SuperScalar\nand other protocols.\nThe LSP can provide a fixed fee regime to the clients;\nthe LSP can manage the risk of actual onchain fee\nvariance by purchasing onchain feerate futures from\nminers, as described by Jack Mallers, and with a\nproposed mechanism <a href=\"https://delvingbitcoin.org/t/an-onchain-implementation-of-mining-feerate-futures/547\">here</a>.</li>\n</ul>\n</li>\n<li>The fee may be waived if the account has a large enough\namount consistently over the past month (as is typical\nfor checking accounts provided by many banks).\n<ul>\n<li>Under the hood: Channel balances imply that the\n<em>more</em> funds the client owns in the channel, the\n<em>less</em> funds the LSP owns in the channel.\nBecause of this, the LSP takes on less \u201ccash drag\u201d\nif the amount in the account is consistently high.\n(i.e. more of the LSP funds are in earning investments,\nsuch as published routing channels, and the earnings\nthere can offset the cost of maintaining the\nunpublished channel with the client)</li>\n</ul>\n</li>\n<li>The advantage here, compared to a custodial scheme as in\ntraditional banking, is that it is possible for a client\nto force account closure, even if the LSP has frozen the\nclient account, and receive their funds onchain (minus\nfees taken by miners).\nThis process takes some amount of time, possibly a month\nor two.\n<ul>\n<li>Under the hood: The client forcing account closure is\nsimply triggering a unilateral exit.\nIf we can use the SuperScalar addendum <a href=\"https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/26\">Inversion of\nTimeout Default</a>, then the client app simply\ndisconnects from the LSP and ignores requests from the\nLSP to wake up and connect, so that the LSP is forced\nto evict the unresponsive client by paying for the\npublication of the path to their unilateral exit.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The account has an \u201caccount limit\u201d.\n<ul>\n<li>This is presented as the inverse of a credit card.</li>\n<li>That is: the \u201caccount limit\u201d of a <em><strong>credit card</strong></em> is\nhow much you can <em><strong>spend</strong></em> until you have to receive\nfunds into it (or increase your account limit).</li>\n<li>In contrast, as this is a debit instrument, the\n\u201caccount limit\u201d of the <em><strong>Bitcoin-denominated checking\naccount</strong></em> is how much you can <em><strong>receive</strong></em> until you\nhave to spend it (or increase your account limit).\n<ul>\n<li>Under the hood: the account limit is really just the\ntotal channel capacity of all channels between LSP\nand client, minus the channel reserve requirement\nimposed by the client on the LSP.\nThe LSP does not impose channel reserves on the\nclient (i.e. 0% reserve on the client side, but non-0\non the LSP side) because the main purpose of the\nreserve is to prevent theft attempts from being\nfree; the LSP is assumed to have very high uptime,\nand to have watchtowers with uptime uncorrelated with\ntheir actual LN node, so that theft attempts being\nfree do not matter in practice (for the LSP; it matters for the client, hence the non-0 reserve it imposes on the LSP).</li>\n</ul>\n</li>\n<li>The UI is expected to show the current account balance\nand the current account limit in close proximity to each\nother, and to provide a simple way to show the\ndifference between the current balance and the current\nlimit.\n<ul>\n<li>Under the hood: the difference between the account\nbalance and the account limit is the current inbound\nliquidity from the LSP to the client.</li>\n</ul>\n</li>\n<li>The UI allows the user to \u201cupgrade account limit\u201d\nfor a cost (which may be waived by the LSP if the user\nhas had a consistently high account balance over the\npast month).\n<ul>\n<li>Under the hood: This is really just purchasing\ninbound liquidity from the LSP.\nThe cost of purchasing the inbound liquidity can be\nmade fixed via the use of onchain feerate futures as\ndescribed earlier, and if the client has a\nconsistently high account balance in their account,\nas noted as well more of the LSP funds can be put to\nearning investments such as published channels,\nwhich also offset the cost of upgrading the account\nlimit.</li>\n<li>Under the hood: naively, we might think that the\nLSP can control exactly the liquidity that is\ndevoted to each user, and thus to hide the\ndetails of liquidity management.\nUnfortunately, this is not the case, as the LSP\nneeds to provide, upfront, some funds of its own,\nbefore it can cater to the needs of large users.\nSuppose some individual user has some large\namount of funds inside a SuperScalar.\nWhen transitioning from one SuperScalar to the\nnext, the LSP has to put up funds that is at\nleast the account balance of the individual\nlarge user, <em><strong>plus</strong></em> some additional margin\nfor future receives of that large user.\nWhile this lockup is transient, there is always\nsome risk that the client will force a unilateral\nexit <em>before</em> moving from the old SuperScalar to\nthe next, thus forcing the LSP to lock up those\nfunds to that client for a month (as changing\nin-SuperScalar states \u2014 i.e. moving liquidity\n\u2014 requires the client cooperation, and the\nclient can refuse to cooperate, the LSP\npractically risks having the large fund be\nlocked up in a form that cannot be used without\na lot of blockspace usage and time for\nunilateral exit).\nThe risk that the LSP takes on here, is the\ncharge it would have to impose on the client for\nthe larger amount the client can keep in the\nSuperScalar.\nThis holds true even outside of SuperScalar\n(though blockspace use in unilateral exit is\nbetter outside of SuperScalar), and is the\nentire reason why we have <em>any</em> kind of\npay-for-inbound-liquidity scheme in Lightning.\nThus, it is infeasible to <em><strong>not</strong></em> expose\nthe account limit concept to end-users; a\nhigher account balance is a larger risk on\nthe LSP and must be paid for, thus end-users\nneed to be aware that increasing their account\nlimit will be costly, and they should be\ninformed of this <em>before</em> they put any amount\nin the account.</li>\n<li>Under the hood: Under the <a href=\"https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/26\">Inversion of Timeout Default</a> addendum, part of the security of\nclients lies in the fact that the LSP has to\nlock in funds equal to <em>or greater than</em> the\naccount limit of the client.\nProvided the client does not ever upgrade its\naccount limit (expected for most clients)\nthen it does <strong>not</strong> need an external UTXO to\npay for onchain fees on unilateral close\n(i.e. it does not require exogenous fees, as\nthe LSP is the one at risk of loss if it\ndoes not unilaterally exit before timeout).\nHowever, it does imply that the LSP cannot\nhave \u201cfractional reserve\u201d of the account\nlimit.\nSuppose we have clients <code>A</code> and <code>B</code>, promised\naccount limits of 10 units each.\nSuppose the LSP tries a fraction reserve of\naccount limit, giving each one 7 units of\ncapacity, on the assumption that the total\ncapacity needed by both clients will take\nno more than 14 in total, in practice.\nSuppose <code>A</code> ends up having a balance of 2\nunits, but <code>B</code> maxes out its promised\naccount limit of 10 units.\nThe total is 12 units, which appears fine\n(as the total capacity allocated to <code>A</code> and\n<code>B</code> is 14 units), but the Inversion\nprotection that <code>B</code> has only covers up to 7\nunits in case of LSP misbehavior.\nThe Inversion protection cannot be increased\nwithout adding further Decker-Wattenhofer\nlayers in the Inversion protection transaction,\nwhich weakens the protection \u2014 the protection\nitself would require further protection of\nits own mutable state.\nThe only way for <code>B</code> to protect itself fully\nwould be to move some funds onchain to get\nan onchain UTXO it can use to pay for P2A\nexogenous fees.\nThus, if the LSP promises an account limit of\n10 units, then the LSP definitely needs to\nprovide 10 units, plus a little extra, to\neach of its channels with <code>A</code> and <code>B</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>The account has deposit insurance, which can be\neither limited coverage (for free, and the default) or unlimited coverage.\n<ul>\n<li>In case the LSP refuses to give proper service to\nthe client, the client can force account closure\nregardless of what the LSP does.\n<ul>\n<li>For example, if the LSP shuts down without\nproperly allowing clients to withdraw funds,\nor if the LSP is bought out by an entity that\ndecides to freeze the accounts of some clients.</li>\n<li>The client can always force account closure,\nthough the UI attempts to funnel them through\ncooperative account closure before letting\nthem force account closure.</li>\n</ul>\n</li>\n<li>The forced account closure will be covered by the\ndeposit insurance; i.e. the deposit insurance will\nput the account balance onchain, minus mining\nfees, if the client forces account closure.\nThe deposit insurance is no-fault; the client\ndoes not need to justify why it forced the\naccount closure.</li>\n<li>At the start of the service month, the coverage\nof the limited coverage scheme is equal to the\nclient account limit at the time, plus some extra\namount as a buffer.</li>\n<li>If the client has limited coverage (the default),\nthen the maximum amount the client can safely get\nfrom the client-initiated forced account closure\nis limited by the deposit insurance, minus onchain\nmining fees.\nForced account closure can take a month or more\nto resolve.</li>\n<li>The limit of the limited coverage is higher than\nthe account limit at the start of the service\nmonth, so for most users, limited deposit\ninsurance coverage is sufficient.\nHowever, if the client upgrades their account\nlimit and receives more funds into their\naccount, the client may have a total account\nbalance that is greater than the existing\ncoverage.</li>\n<li>The client can get unlimited coverage by moving\nsome funds into a deposit coverage reserve,\nplus paying onchain mining fees and swap fees.\nThe client can get back those funds into their\naccount (after paying onchain mining fees and\nswap fees, and only if they have available\nspace under the account limit), but loses\nunlimited coverage and returns to limited\ncoverage.</li>\n<li>If the client has unlimited coverage, then the\nclient can always get the full amount of the\naccount, minus onchain mining fees.\nOnchain mining fees for forced account closure\nwith unlimited coverage will be larger than with\nlimited coverage, but forced account closure can\ntake a few days or weeks to resolve instead of\nthe 2 months that the limited coverage resolves.</li>\n<li>Under the hood: the limited coverage comes from\nthe \u201cInversion of Timeout Defaults\u201d addendum.\nUnder \u201cInversion of Timeout Defaults\u201d scheme,\nthe LSP potentially loses an amount equal to\nthe account limit, plus some additional amount,\nif it lets the timeout pass without paying for\na unilateral exit or supporting an assisted exit.\nThis total amount (which is the account limit\nplus a share of liquidity-in-stock) is always\ngreater than the account limit at the start of\na new SuperScalar, and <em><strong>is</strong></em> the deposit\ninsurance coverage.\nHowever, if the current balance becomes greater\nthan the coverage (because the client bought\nadditional inbound liquidity and received\nfunds), the LSP has an incentive to not\npay for unilateral exit of the client, as its\nliability to that client in the timeout default\ncase is smaller than the amount owned by the\nclient in the account.\nHowever however, the client can move some funds\nonchain (the deposit coverage reserve), which\nthe client can use to pay for unilateral exit.\nIn that case, the client can always enforce its\naccount balance by being able to pay for its\nown unilateral exit, regardless of the timeout\ndefault amount they would get.\nThe onchain funds can be returned to the\nSuperScalar ownership by a simple swap, but\nreturns the client to having limited coverage.</li>\n<li>The deposit insurance is <em><strong>NOT</strong></em> provided by\nsome third-party entity.\nIt is enforced by the client app directly, using\nthe funds shared between LSP and client.</li>\n<li>The existence of an unlimited deposit coverage\nis a security detail that impacts larger users.\nIn principle, it can be hidden from the user,\nbut as the deposit coverage reserve is an onchain\nfund, it <em><strong>must</strong></em> be managed with onchain fees\nin mind, which vary and are always costly, and\ncannot be easily moved to offchain.\nIn particular, <em><strong>it is protection against the\nLSP misbehaving</strong></em>, and thus should really not be\nhandled by the LSP (and thus CANNOT be hidden by\nthe LSP in its monthly maintenance fee \u2014 we\ncannot trust the LSP to implement it correctly!\nBy the same token, we cannot use swap-in-potentiam\nto quickly move the reserve fund from onchain to\noffchain \u2014 swap-in-potentiam assumes the LSP\nwill willingly cooperate in order to immediately\nbe able to spend using the swap-in-potentiam UTXO,\nand in a scenario where the client has lost trust\nin the LSP, it is implausible to use that fund to\npay for unilateral closure to protect against\nLSP misbehavior).\nIt has to be implemented completely by the client\nsoftware, preferably in open-source code with\ndeterministic compilation.\nFWIW, this only affects larger users; smaller\nusers can live with the default limited deposit\ninsurance coverage; even if the smaller user\nupgrades their account limit, if the actual\nbalance does not go above the coverage (which\nis above the limit at the start of the service\nmonth) then the user does not need to switch\nto unlimited insurance coverage, as on the\n<em>next</em> service month, the limit of the limited\ninsurance coverage will rise above the new\naccount limit.</li>\n</ul>\n</li>\n</ul>\n<h1><a name=\"p-3601-onboarding-flow-3\" class=\"anchor\" href=\"#p-3601-onboarding-flow-3\"></a>Onboarding Flow</h1>\n<p>When initially installed, the app simply presents an\ninterface to open an account to the LSP.\nThe app may present an interface to select one among\nmultiple LSPs that provide the needed protocols.</p>\n<p>The app provides the options below:</p>\n<blockquote>\n<ul>\n<li>Standard account open\n<ul>\n<li>The account will be opened within 48 hours.</li>\n</ul>\n</li>\n<li>Express account open\n<ul>\n<li>The account will open immediately, but with a\nhigher fee, and there is a minimum deposit\namount.</li>\n</ul>\n</li>\n<li>Onchain account open\n<ul>\n<li>The account will open as soon as an onchain\naddress deposit gets N confirmations.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>For all types of account opening, the app presents\nthe terms and conditions below:</p>\n<blockquote>\n<ul>\n<li>Monthly maintenance fee: NN satoshis\n<ul>\n<li>The fee may be waived if you maintain an\naccount balance that is at least NN% of the\naccount limit for the entire month.</li>\n</ul>\n</li>\n<li>Starting account limit: NNNN satoshis</li>\n<li>Account limit upgrade fee: pay NN satoshis\nto increase your account limit by NNNN\nsatoshis, at any time.\n<ul>\n<li>The fee may be waived if you maintain an\naccount balance that is at least NN% of the\naccount limit for the entire month.</li>\n</ul>\n</li>\n<li>Pay next maintenance fee on YYYY-MM-DD HH:MM\n(TZ).\n<ul>\n<li>Your device must have Internet connectivity\nand this app must have notification\npermission at this time.\nThe maintenance fee will be deducted from\nyour account balance.</li>\n<li>If you miss the above payment, you can pay\non YYYY-MM-DD HH:MM (TZ), YYYY-MM-DD HH:MM\n(TZ)\u2026</li>\n<li>If you miss all the above payment windows,\nyour account will be closed and funds will\nbe moved onchain, as protected by your\ndeposit insurance.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>Under the hood: paying the monthly maintenance\nfee is actually moving from an old, dying\nSuperScalar in the ladder, to the latest\nSuperScalar.\nAs SuperScalar constructions are made once a day,\nthose are the times at which you can move from\nthe old SuperScalar to the newest SuperScalar.\nThus, the device must be online and capable of\nreceiving messages from the LSP, so that the\nLSP can invite the client to join the newest\nSuperScalar, and charge the maintenance fee at\nthat point.\nJoining the newest SuperScalar requires multiple\nsigning sessions with the client, and thus\nInternet connectivity and enough CPU to sign\neverything.\nIf the client misses the monthly payment, the\nLSP gives them additional opportunities to join\nthe next SuperScalar on succeeding days, up to\nsome limit.</li>\n<li>Under the hood: if the user completely misses\nthe given times, the LSP has to evict them via\nthe unilateral close mechanism, which, if we\nuse the <a href=\"https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/26\">Inversion of Timeout Default</a>\naddendum, is paid for by the LSP.</li>\n</ul>\n<h2><a name=\"p-3601-standard-account-open-4\" class=\"anchor\" href=\"#p-3601-standard-account-open-4\"></a>Standard Account Open</h2>\n<p>This is the simplest case: the client requests to\nbe scheduled to open an account on the next\navailable slot the LSP has.</p>\n<p>The terms and conditions presented are:</p>\n<blockquote>\n<ul>\n<li>Your account will open on YYYY-MM-DD HH:MM\n(TZ).\n<ul>\n<li>Your device must have Internet connectivity\nand this app must have notification\npermission at this time.</li>\n</ul>\n</li>\n<li>If you miss the above opening time, you can\nopen at YYYY-MM-DD HH:MM (TZ).</li>\n<li>You cannot receive or send funds until the\naccount opening time that your device has\nbeen online for.</li>\n</ul>\n</blockquote>\n<ul>\n<li>Under the hood: new SuperScalar mechanisms are\nconstructed daily, and the LSP simply schedules\nthe new client to join the next SuperScalar\nmechanism, and wakes them up at the appropriate\ntime to complete the signing session.\nIf the client does not come online on the first\nscheduled day, the LSP allows the client to join\non the next scheduled day.</li>\n</ul>\n<p>The LSP may also require initial deposit, depending\non the risks the LSP is willing to take on in its\nenvironment.\nFor instance:</p>\n<ul>\n<li>The LSP may require a minimum initial deposit,\nwithout deducting any amount from it, to prevent\ntrivial DoS attacks where a botnet just spams the\nLSP.\n<ul>\n<li>The initial deposit may be done in multiple\nreceives, with sending disabled until the\nminimum initial deposit is reached.</li>\n</ul>\n</li>\n<li>The LSP may deduct an initial fee from the\ninitial deposit, again to deter trivial DoS attacks\nfrom funded attackers.</li>\n<li>The LSP may waive the above requirements if it can\nban an identifiable individual that attempts to DoS\nthe LSP.</li>\n</ul>\n<p>How the above are communicated between the app and the\nLSP are left as an exercise to the reader.</p>\n<h2><a name=\"p-3601-express-account-open-5\" class=\"anchor\" href=\"#p-3601-express-account-open-5\"></a>Express Account Open</h2>\n<p>In this flow, the LSP charges a higher fee for the\naccount opening, but the account is opened\nimmediately.</p>\n<p>The terms and conditions for this opening are:</p>\n<blockquote>\n<ul>\n<li>You must pay a Lightning invoice with at least\nNNN satoshis, as initial deposit.</li>\n<li>A fee will be deducted from the initial deposit,\nof NNN satoshis, or N.N% of the amount deposited,\nwhichever is larger.</li>\n<li>Once paid, the account is opened for sending and\nreceiving.\nUpgrading the account limit will not be immediately\navailable.</li>\n<li>On YYYY-MM-DD HH:MM (TZ) the account limit can be\nupgraded at your control.\n<ul>\n<li>Your device must have Internet connectivity\nand this app must have notification\npermission at this time.</li>\n<li>If you miss the above time to enable upgrades\nto your account limit, you can enable account\nlimit upgrades on YYYY-MM-DD HH:MM (TZ).</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>Under the hood: the client uses a JIT channel flow,\nsuch as <a href=\"https://github.com/BitcoinAndLightningLayerSpecs/lsp/blob/52acff41b07f082d32512b0dd9a161d54ecaa2b9/LSPS2/README.md\" rel=\"noopener nofollow ugc\">LSPS2</a>.\nThe minimum size is <code>min_payment_size_msat</code> of\nLSPS2, and the fee scheme is <code>min_fee_msat</code> and\n<code>proportional</code> of LSPS2.\nOnce the LSPS2 invoice is paid, a non-SuperScalar\nonchain channel is opened.\nAs the cost of adding new inbound liquidity in an\nonchain channel is higher, the LSP also invites\nthe client to join the next daily SuperScalar\nconstruction, and the app presents this as\nbeing unable to increase the account limit until\nafter the app moves the user funds from the\nonchain JIT channel to a SuperScalar.\nOnce the app has moved user funds into SuperScalar,\nit enables upgrading of the account limit, i.e.\npurchasing inbound liquidity within SuperScalar.</li>\n</ul>\n<h2><a name=\"p-3601-onchain-account-open-6\" class=\"anchor\" href=\"#p-3601-onchain-account-open-6\"></a>Onchain Account Open</h2>\n<p>In this flow, the app provides an onchain address\nto be funded by the user.\nOnce the onchain address has a UTXO of at least a\nminimum size, and the transaction with that output\nhas confirmed with sufficient depth, the channel is\nopened.</p>\n<p>As a bonus, under this flow, if the LSP refuses\nservice and blocks account opening, the deposited\nfunds can be refunded, minus onchain mining fees.</p>\n<p>The terms and conditions for this flow are:</p>\n<blockquote>\n<ul>\n<li>You must make at least one deposit to a given\n<code>bc1p</code> (P2TR, \u201cTaproot\u201d, \u201cbech32m\u201d) onchain\naddress, of at least NNNNNN satoshis.</li>\n<li>The account is opened for sending and receiving\nas soon as the onchain send to the given address\nhas N confirmations.</li>\n<li>A mining fee of NNN satoshis will be deducted\nfrom the initial deposit.</li>\n<li>The initial account limit is equal to the\ninitial amount deposited, minus the mining fee.</li>\n<li>Upgrading the account limit will not be immediately\navailable.</li>\n<li>On YYYY-MM-DD HH:MM (TZ) the account limit can be\nupgraded at your control.\n<ul>\n<li>Your device must have Internet connectivity\nand this app must have notification\npermission at this time.</li>\n<li>If you miss the above time to enable upgrades\nto your account limit, you can enable account\nlimit upgrades on YYYY-MM-DD HH:MM (TZ).</li>\n</ul>\n</li>\n<li>If the LSP refuses to complete account opening,\nthe initial deposit can be refunded to an\nonchain address you control, minus mining\nfees, NNN blocks after the deposit confirms.</li>\n</ul>\n</blockquote>\n<ul>\n<li>Under the hood: This flow uses <a href=\"https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-January/003810.html\" rel=\"noopener nofollow ugc\">swap-in-potentiam</a>.\nOnce the swap-in-potentiam address is funded, with\nthe minimum confirmation depth imposed by the LSP,\nthe app can then open a channel using those funds.\nProviding a plain address maximizes the number of\nwallets that can deposit to the address, while\nallowing \u201cinstant\u201d channel opening (i.e. no\nadditional confirmations are needed beyond\nconfirming the deposit to the plain\nswap-in-potentiam address).\nOnce the swap-in-potentiam address has been\nfunded, the client can present it to the LSP and\nconstruct an onchain channel with no additional\ntrust.\nThe ability to refund the onchain amount, in case\nthe LSP refuses to accept the channel, is built\ninto the swap-in-potentiam protocol.\nAs the cost of adding new inbound liquidity in an\nonchain channel is higher, the LSP also invites\nthe client to join the next daily SuperScalar\nconstruction, and the app presents this as\nbeing unable to increase the account limit until\nafter the app moves the user funds from the\nonchain swap-in-potentiam channel to a SuperScalar.\nOnce the app has moved user funds into SuperScalar,\nit enables upgrading of the account limit, i.e.\npurchasing inbound liquidity within SuperScalar.</li>\n</ul>\n<h1><a name=\"p-3601-deposit-insurance-coverage-management-7\" class=\"anchor\" href=\"#p-3601-deposit-insurance-coverage-management-7\"></a>Deposit Insurance Coverage Management</h1>\n<p>By default, the user gets a limited deposit insurance\ncoverage, that is equal to the account limit at the\nstart of a service month, plus some extra margin.\nFor most users, this is sufficient, as they would not\nbe able to receive more than their current account\nlimit anyway.</p>\n<p>However, if the user then upgrades their account limit,\nand receives funds, then the limited deposit insurance\ncoverage may become lower than their actual account\nbalance.</p>\n<p>When the user account balance reaches 90% of the\nlimited deposit insurance coverage, the app can remind\nthe user to switch to unlimited deposit insurance\ncoverage.</p>\n<p>To enable unlimited deposit insurance coverage, the\napp has to move some funds to a locked reserve fund\nthat is separate from the account.\nMining and swap fees are also charged to move to this\nlocked reserve fund.</p>\n<p>The user may withdraw the locked reserve fund at any\ntime, which returns them to limited deposit insurance\ncoverage.</p>\n<blockquote>\n<ul>\n<li>If the LSP refuses to provide service, or otherwise\nattempts to freeze or impede sending, receiving,\nupgrading account limit, or closing your account,\nyou can, at any time, force the closure of your\naccount despite LSP interference and receive your\nfunds in an onchain wallet.</li>\n<li>Fees involved in onchain operations to enforce\nthe closure of your account are paid by you and\ndeducted from your recovered account.</li>\n<li>Onchain operations to enforce closure require a\nminimum amount.\nIf your account balance is below the minimum\namount after fees, force closure will not recover\nany of your funds, but neither will the LSP be\nable to retain your funds.</li>\n<li>If possible, make a good-faith effort to contact\nthe LSP at <code>&lt;whatever@wherever.com&gt;</code> with your\nconcerns before initiating force closure.</li>\n<li>Under limited deposit insurance coverage:\n<ul>\n<li>Force closure can take 1-2 months before you\ncan move your funds to an onchain wallet.</li>\n<li>Enforcement fees paid to miners are lower.</li>\n<li>The coverage is limited; the limit of the\ncoverage is set at the start of a service\nmonth, and set to be higher than your account\nlimit at that time, but if you upgrade your\naccount limit to be higher and then receive\nfunds, your account balance can end up higher\nthan the current coverage.\nIn that case, you may recover less than your\naccount balance, and only up to the limited\ncoverage.</li>\n</ul>\n</li>\n<li>Under unlimited deposit insurance coverage:\n<ul>\n<li>You need to reserve a fund of NNNNN satoshis,\nseparate from (and funded by) your account\nbalance.\nCreating and withdrawing this reserve fund\nrequires paying mining and swap fees.</li>\n<li>Force closure is expedited and can take 1-2\nweeks instead of months.</li>\n<li>Enforcement fees paid to miners are higher\n(for the expedited closure and to ensure\nunlimited coverage).</li>\n<li>Your entire account balance is protected,\nand your reserve fund, minus enforcement\nfees, will be included in the onchain\nwithdrawal.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>Under the hood: the <a href=\"https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/26\">Inversion of Timeout Default</a>\naddendum provides the mechanism for the deposit\ninsurance.\nThe addendum has the deposit insurance coverage \u2014\nactually the branch where the LSP is punished if it\ndoes not provide an exit (unilateral or assisted)\nto clients before the timeout of the tree \u2014 of\nfixed amount at the start of a SuperScalar\nmechanism.\nThe assumption here is that the client may not have\nan external UTXO with which to pay exogenous fees\nfor unilateral exit, and must rely on the punishment\nbranch to force the LSP to give it a unilateral\nexit.\nBy reserving some funds into an onchain address\ncontrolled solely by the client, the client can\nenforce the unilateral exit directly (due to having\nan external UTXO to pay exogenous fees with), at\nthe cost of having to pay the unilateral exit for\nitself instead of the LSP paying for it.</li>\n</ul>\n<h1><a name=\"p-3601-send-and-receive-flow-8\" class=\"anchor\" href=\"#p-3601-send-and-receive-flow-8\"></a>Send And Receive Flow</h1>\n<p>While <em>most</em> Lightning payments resolve quickly,\nthere is a small chance that they take a long time\nbefore they can resolve.\nThus, like typical Lightning wallets, a\nSuperScalar-based app has to show outgoing payments\nas \u201cpending\u201d with the corresponding funds locked\nuntil the payment completes.</p>\n<h1><a name=\"p-3601-upgrade-account-limit-flow-9\" class=\"anchor\" href=\"#p-3601-upgrade-account-limit-flow-9\"></a>Upgrade Account Limit Flow</h1>\n<p>The app may provide an option that authorizes it to\nautomatically upgrade account limit when the account\nlimit is being approached by the account balance.</p>\n<p>When an account limit upgrade is requested\nby the user, LSP quotes some number of satoshis\nof cost, in order to increase the account limit by\nsome number of satoshis.\nThe user may request an account limit upgrade at any\ntime.\nThe account limit upgrade may take several minutes\nto an hour to finalize; the user can send and\nreceive normally even while the account limit\nupgrade is ongoing.</p>\n<ul>\n<li>Under the hood: As noted, this is actually a\npurchase of inbound liquidity from the LSP.</li>\n<li>Under the hood: The optimistic case is that the LSP\nis able to wake up other client apps in order to\nauthorize a change in state of a sub-tree of the\nSuperScalar construction.\nHowever, if interaction with one of the other\nclients times out, the LSP can instead fund an\nonchain channel with the client, with a timeout\nequal to the timeout of the current SuperScalar the\nclient is on.\n(the timeout on the onchain channel can be\nimplemented as an <code>nLockTime</code>d transaction that\ncan spend the funding transaction output)\nThe LSP takes on this risk (i.e. the price it\nquoted remains the same, thus, the LSP has to\nfactor in the risk that other client apps do not\ncome online fast enough).\nIf the LSP has already opened an onchain channel,\nand the other clients do not respond fast enough to\nsome request to increase in-SuperScalar capacity,\nthen the LSP can splice into the existing channel.\nBasically, onchain is used as a fallback in case\nof coordination problems (i.e. some clients are\noffline).</li>\n<li>Under the hood: While an account upgrade is ongoing,\nand the in-SuperScalar channel capacity increase\nis being negotiated by the LSP with other clients,\nthe client and LSP have to maintain two sets of\nstate in the channel: one for the\npre-capacity-increase channel, and one for the\npost-capacity-increase channel.\nOther clients that are needed to sign off on the\ncapacity change must also maintain two sets of\nstate with their in-SuperScalar channel.\nThis code would be very similar to handling of\nmultiple states in onchain splicing, and is likely\nto share code with splicing handling.\nThis allows all involved clients to continue\nsending and receiving as normal while the account\nlimit upgrade is ongoing.</li>\n</ul>\n<h1><a name=\"p-3601-monthly-maintenance-fee-flow-10\" class=\"anchor\" href=\"#p-3601-monthly-maintenance-fee-flow-10\"></a>Monthly Maintenance Fee Flow</h1>\n<p>The monthly maintenance fee is paid by the user\nonce a month.\nThe app should default to being authorized to\nautomatically pay the monthly maintenance, as per\nthe schedule set by the LSP.\nThis implies that the app controls the keys involved\nin the Lightning channel.</p>\n<p>The LSP sets particular times at which the monthly\nmaintenance fee may be paid.\nThe device must have Internet connectivity at those\ntimes, and the app must have notification permission\nat those times.\nThe LSP will automatically awaken the app at those\ntimes, at which point the app authorizes the payment\nof the monthly maintenance fee.</p>\n<p>If the user misses the given time, the LSP also\ngives the user a few more given times, on succeeding\ndays, at which they can pay the monthly maintenance\nfee.</p>\n<p>The app can display the time at which it will be\nasked to pay the monthly maintenance fee, as well\nas the grace period the LSP allows.</p>\n<p>The process of monthly maintenance is:</p>\n<ul>\n<li>The client pays the monthly maintenance fee to the\nLSP, who queues them up for completion of monthly\nmaintenance.</li>\n<li>Once the client has paid the fee, the monthly\nmaintenance proceeds in two phases:\n<ul>\n<li>Common maintenance phase: For several seconds or\nminutes, up to an hour or two, the LSP repeatedly\nattempts to create a set of online clients that\nare able to cooperatively perform maintenance\ntasks simultaneously while online.\nDuring this time, all the online clients can\ncontinue to send and receive funds normally,\nbut cannot negotiate an account limit upgrade\nwhile this is ongoing.</li>\n<li>Per-client maintenance phase: The client app\narranges to complete the monthly maintenance,\nwhile still able to send and receive funds\nnormally, as well as negotiate an account\nlimit upgrade.</li>\n</ul>\n</li>\n</ul>\n<p>If a client has paid the monthly maintenance fee,\nbut is not part of the common maintenance phase\n(e.g. its Internet connectivity is interrupted between\npaying the fee and completing the common maintenance\nphase), the LSP will invite the client to complete the\ncommon maintenance phase on the succeeding day(s)\nuntil the client can complete the common maintenance\nphase, or until some timeout, at which point the LSP\nwill force closure of the client account and refund\nthe monthly maintenance fee.\nThe client may also force closure of the client\naccount if the LSP refuses to allow the client to\ncomplete the common maintenance phase.</p>\n<p>The per-client maintenance phase can be done as long\nas te client is online and the LSP is cooperating.\nIf the LSP or client refuse to complete the per-client\nmaintenance phase, the other side can force closure\nof the account to recover funds.</p>\n<ul>\n<li>Common maintenance:\n<ul>\n<li>Under the hood: This is the part where the clients\nand LSP actually construct a new SuperScalar\nconstruction, with all funds initially owned by\nthe LSP, but with in-SuperScalar channels having\ncapacity equal to the current account limits of\nthe clients.\nThis requires multiple MuSig2 signing sessions;\nif some client does not complete the MuSig2\nsigning sessions quickly enough, the LSP will\nrestart the opening without that client, until\nit can get a completed SuperScalar opening\nwith the remaining clients all able to complete\nnecessary signatures.</li>\n</ul>\n</li>\n<li>Per-client maintenance:\n<ul>\n<li>Under the hood: This is just a swap from the\ncurrent SuperScalar to the newly-constructed\nSuperScalar tree.\nIf both client and LSP are online and\ncooperative, this should be fast and resolve in\nseconds.\n<ul>\n<li>Under the hood: After completion of the\ncommon maintenance phase, the LSP will forward\npayments to the client on the new SuperScalar\ninstead of the old SuperScalar.</li>\n<li>Under the hood: Ideally, the client simply\nsends the entire account balance from the\nold SuperScalar to the new SuperScalar.\nHowever, if the client has pending sends,\nthe client has to maintain the per-client\nmaintenance state until the LSP has either\nfulfilled or failed the HTLC (i.e. \u201cresolve\u201d\nthe HTLC, meaning it either fulfilled or\nfailed).\nIf the LSP does not resolve the HTLC of the\npending send before the old SuperScalar\ndies, the LSP is forced to unilaterally close\nthe old SuperScalar under the [Inversion of\nTimeout Defaults]<span class=\"chcklst-box fa fa-square-o fa-fw\"></span> addendum, and the client\ncan force close of the new SuperScalar as\nwell (by refusing to cooperate with the LSP\nuntil the LSP is forced to time out, as per\nInversion).\nIf the LSP fulfills all pending HTLCs, then\nthe old SuperScalar will not have any client\nfunds and the client can hand over the private\nkey to the old SuperScalar construction (to\nallow the LSP to recover funds without\npublishing the complete unilateral exit).\nIf the LSP fails any pending HTLCs, then the\namount is returned to the old SuperScalar,\nbut the client app can immediately move the\nfunds to the new SuperScalar.</li>\n<li>Under the hood: The client temporarily has\ndouble its account limit while the old and\nnew SuperScalars are still active, but since\nthe old SuperScalar is dying soon, the client\nneeds to strictly enforce its own account\nlimit while doing per-client maintenance.\nThis occurs if the client has any pending\nHTLCs being sent; the HTLC amount could still\nbe refunded if the HTLC is failed.\nAs a concrete example: suppose the account\nlimit is 10 units, the client has 9 units,\nand has a pending send of 1 unit.\nOn transferring to the new SuperScalar, the\nclient moves the 9 units to the new\nSuperScalar, leaving inbound capacity on the\nnew SuperScalar at 1 unit.\nIf the client receives an HTLC on the new\nSuperScalar of 1 unit, it <em><strong>MUST</strong></em> reject\nit until the pending send of 1 unit (on the\nold SuperScalar) has resolved; otherwise,\nif it fulfills the incoming HTLC <em>and</em>\nthe pending send ultimately fails and is\nrefunded, the client has to fit 11 units of\nbalance in 10 units of limit.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1><a name=\"p-3601-account-closure-11\" class=\"anchor\" href=\"#p-3601-account-closure-11\"></a>Account Closure</h1>\n<p>Account closure can be assisted by the LSP, or be\nforced by the client.</p>\n<p>Once the client starts either account closure flow,\nit can no longer send, receive, or upgrade account\nlimit.</p>\n<p>The client can only initiate an assisted account\nclosure if there are no pending sends or receives.\nHowever, the client (and LSP) can initiate a forced\nclosure at any time, even if there are pending sends\nor receives.\nPending sends and receives during a forced closure\ncan get resolved offchain, but at the worst case\nwill be resolved on the blockchain.</p>\n<p>As account closure involves onchain activity, there\nare practical minimum amounts that can be used\npost-closure.\nIf the account balance is below the practical onchain\nminimum amount, then an assisted account closure is\nnot feasible (the client will end up paying their\nentire balance as onchain fees).</p>\n<p>After completion of account closure, the client is\nin possession of onchain funds.\nThe client can then sweep those funds onto some\nonchain address or silent pay address, or can\nuse those funds to reopen the account using the\n\u201conchain account open\u201d flow.</p>\n<h2><a name=\"p-3601-assisted-account-closure-12\" class=\"anchor\" href=\"#p-3601-assisted-account-closure-12\"></a>Assisted Account Closure</h2>\n<p>In this flow, the client requests the LSP to close\nthe account, and the LSP must accept this request.\nIn case the LSP declines this request or otherwise\ndoes not respond to this request, the client app\nprovides an option to force account closure instead.</p>\n<p>In the case that the client has absolutely 0 account\nbalance, the account can be trivially closed.</p>\n<ul>\n<li>Under the hood: if the client has 0 account balance,\nit can trivially hand over the private key used in\nthe current SuperScalar.</li>\n</ul>\n<p>The closure requires two phases, both requiring\nonchain confirmation.\nThe client sets the number of confirmations that it\nwould consider acceptable, though no more than say\n12 confirmations.</p>\n<ul>\n<li>LSP cooperation phase.</li>\n<li>Client claim phase.</li>\n</ul>\n<p>The details are:</p>\n<ul>\n<li>LSP cooperation phase.\n<ul>\n<li>Before starting the account closure, the client\napp provides estimates on how much cost the\nuser will pay based on current onchain feerates,\nwith the warning that onchain feerates can change\ndrastically and that the amount paid may become\nlarger later.</li>\n<li>Under the hood: the client offers HTLC(s) of\nall funds in its account (i.e. inside\nSuperScalar) to the LSP.\nThe LSP then takes some onchain fund of\nequivalent value into an onchain HTLC.</li>\n<li>Under the hood: the client indicates its\ndesired onchain feerate, and is responsible\nfor paying some of the costs involved.\nThe LSP agrees if it considers the onchain\nfeerate reasonable; if it cannot get agreement,\nthe client can always fall back to forced\naccount closure.\nThe client pre-pays for the onchain fees,\ndeducting from its account balance as soon\nas the LSP indicates acceptance.\nThe client is responsible for paying:\n<ul>\n<li>Transaction cost of the LSP cooperation\nphase.\n<ul>\n<li>1 transaction input (LSP funds).</li>\n<li>1 transaction output (LSP change).</li>\n<li>1 transaction output (onchain HTLC).</li>\n</ul>\n</li>\n<li>Transaction cost of the LSP timeout\nrecovery.\n<ul>\n<li>1 transaction input (onchain HTLC, timeout\nbranch).</li>\n<li>1 transaction output (LSP funds).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Under the hood: this phase completes once the\nonchain HTLC address has confirmed to sufficient\ndepth that the client considers safe.</li>\n</ul>\n</li>\n<li>Client claim phase.\n<ul>\n<li>Under the hood: the client claims the onchain\nHTLC, revealing the preimage.\nThis is just a 1-input 1-output transaction.</li>\n<li>Under the hood: the client SHOULD use a \u201cburn\u201d\nstrategy with an RBF-able transaction: it can\nstart at what it considers a reasonable fee,\nbut as the onchain HTLC timeout approaches,\nthe client increases the onchain transaction\nfee, until at the block just before the the\ntimeout it offers the entire amount as onchain\nfee to miners.</li>\n<li>Under the hood: this phase completes once the\n1-input-1-output claim transaction has confirmed\nto sufficient depth that the client considers\nsafe.\nOn completion of this phase, the client hands\nover the private key to the SuperScalar it just\nexited from.</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-3601-forced-account-closure-13\" class=\"anchor\" href=\"#p-3601-forced-account-closure-13\"></a>Forced Account Closure</h2>\n<p>The client or LSP can initiate an account closure at\nany time.</p>\n<p>There are two forms of forced account closure:</p>\n<ul>\n<li>Forced account closure by timeout.</li>\n<li>Forced account closure by publication.</li>\n</ul>\n<p>Which kind of force account closure the client\n<em>actually</em> uses depends on its current mode of\ndeposit insurance coverage:</p>\n<ul>\n<li>If the client currently has limited deposit\ninsurance (the default), the client forces account\nclosure by timeout.\n<ul>\n<li>This takes longer, but the cost on the client is\nlower.</li>\n</ul>\n</li>\n<li>Otherwise, the client has unlimited deposit\ninsurance, and the client forces account closure by\npublication.\n<ul>\n<li>The cost on the client is higher, but because it\ndoes not wait for a timeout, the client can get\nits funds earlier.</li>\n<li>Under the hood: in this mode, the client has some\nfunds in an onchain address, which can be used\nto pay for exogenous fees via P2A outputs on the\ntimeout tree nodes.</li>\n</ul>\n</li>\n</ul>\n<p>As account closure requires moving funds onchain,\nthere is a practical minimum account balance before\nusers can actually recover funds onchain.\nHowever, even if the user account balance is below\nthis practical minimum, the LSP cannot get that\nbalance in the forced account closure flow, and the\nbalance will instead go to miners.</p>\n<p>For details:</p>\n<ul>\n<li>Under the hood: Ultimately both kinds of forced\naccount closure boil down to forced closure by\npublication.\nUnder <a href=\"https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/26\">Inversion of Timeout Default</a> addendum,\nforced account closure by timeout simply has the\nclient wait until the impending death of the\nSuperScalar it is currently in, and then the LSP\nis forced to publish the unilateral exit (the\n\u201cforced closure by publication\u201d) onchain, as\notherwise the LSP can lose funds that were locked\nin the SuperScalar.</li>\n<li>Under the hood: Multiple timeouts are involved in\nany forced account closure; these timeouts are\nenforced to allow participants to ensure that the\nlatest state is what is resolved onchain.\nForced account closure by timeout can take 1-2\nmonths, while forced account closure by client\npublication will take a few weeks to a month.\nNote that the forced account closure by timeout\nis really waiting for the LSP to perform forced\naccount closure by publication, thus the additional\nworst-case month is due to having to wait up to a\nmonth for the current SuperScalar to time out.\nIf the client has unlimited deposit insurance\ncoverage (i.e. has an exogenous UTXO they can use\nto pay for exogenous fees) then the client can\nuse forced account closure by publication itself,\nwhich shortens the time, but also increases the\ncost of forced account closure.</li>\n</ul>\n<h2><a name=\"p-3601-post-closure-14\" class=\"anchor\" href=\"#p-3601-post-closure-14\"></a>Post-closure</h2>\n<p>Once the client has completed a closure (whether\nassisted or forced), the client app will have some\nonchain funds that can be swept.</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-11-25T20:18:07.328Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 6,
  "reads": 5,
  "readers_count": 4,
  "score": 31.0,
  "yours": false,
  "topic_id": 1242,
  "topic_slug": "superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories-with-pseudo-spilman-leaves",
  "topic_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories With Pseudo-Spilman Leaves",
  "topic_html_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories With Pseudo-Spilman Leaves",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "These are the SuperScalar UX notes that I wrote some time ago. I am now sharing it here.\n\n***NOTE*** These should be considered as \"very rough\". ***Nobody*** has any experience with deploying a N>2 non-custodial offchain mechanism that integrates deeply with Lightning. It is entirely possible that my whole approach here is completely wrong-headed and delusional. This is the best I can do with what little knowledge I currently have as of October->November 2024. Hopefully, it can be improved as we go on to actually try implementing SuperScalar for larger groups of actual end-users.  Which is to say: if you follow these notes to the letter and end up with horrible UX that makes your mom hate you, that is your fault, not mine ^.^;;;;;;;;\n\n--------------------------------------------------------\n\nSubject: SuperScalar UX Notes\n\nPreface: The Mobile Phone Environment\n=====================================\n\nThese notes are primarily targeted for mobile phone uses.\n\nI am not an expert in the mobile phone environment.\nHowever, my initial study suggests the following:\n\n* Messaging applications are common enough that significant\n  parts of the mobile phone development environment are\n  focused on timely delivery of messages.\n  - This is not polled (or if it is polled, it is polled in\n    aggregate amongst all messaging applications;\n    not certain about exact implementation --- in Android,\n    for example, timely delivery usually requires Google\n    Services, and iOS seems to rely on similar services\n    provided by Apple).\n  - There are even cross-platform libraries/systems that\n    make this easy to port across Android and iOS.\n  - If a human user sends a message to another human user\n    via a mobile-based messaging app, and the other user\n    says \"I did not receive it\" the usual reaction is\n    disbelief, since in practice message delivery is\n    highly timely and reliable.\n  - The example of Signal, which has end-to-end encryption,\n    suggests that when a message is delivered, the app is\n    given enough CPU power to at least perform decryption\n    of the message, suggesting that at least some CPU power\n    is available via this mechanism.\n    - In SuperScalar, we require that clients also perform\n      MuSig2 signing whenever the LSP signals a change in\n      some subtree, which requires at least one and a half\n      roundtrips (and probably two roundtrips to return the\n      completed signature).\n      I am uncertain at this point if it is possible to\n      send small TCP bytestreams from the mobile app to\n      the LSP during handling of an incoming message.\n  - The example of Phoenix, which can receive funds even if\n    the phone is locked and otherwise not actively used by\n    the user, suggests that it is possible to compute an\n    ECDSA signature and send it to the LSP at least using\n    some mechanism to wake up the app (conjectured to be\n    a messaging system similar to the above).\n    Note that proper payment according to the BOLT spec\n    requires a grand total of at least 3.5 round trips\n    (2 roundtrips to irrevocably commit to the HTLC, then\n    1.5 roundtrips to resolve the HTLC) and requires\n    two ECDSA signing sessions each for client and LSP.\n\nThe above is from the point-of-view of the actual Bitcoin\nLightning wallet app.\n\nFrom the point of view of the LSP, the LSP can simply expose\n[LSPS5][].\nAny Bitcoin Lightning wallet app which can afford to run a\nwebserver can register webhooks via LSPS5 that then cause\nmessages to be sent to the specific client mobile app, and\nallow it to work with the SuperScalar provided by the LSP.\n\n[LSPS5]: https://github.com/BitcoinAndLightningLayerSpecs/lsp/blob/52acff41b07f082d32512b0dd9a161d54ecaa2b9/LSPS5/README.md\n\nThe User Concepts\n=================\n\nA simple rule of thumb for UX design is: \"give the user an\ninterface they are already used to\".\n\nGiven that this is financial technology, it makes sense to\nimitate existing banking apps and common banking\npractices.\n\nThus:\n\n* The app provides the equivalent of a \"Bitcoin-denominated\n  checking account\".\n* The account has an \"account limit\".\n* The account has \"deposit insurance\", which can be\n  either limited coverage (available for free) or unlimited coverage (requires one-time fee to be paid to miners and swap operators).\n\nExpanding on the above:\n\n* The app provides the equivalent of a \"Bitcoin-denominated\n  checking account\".\n  - Like any checking account, there is a monthly account\n    maintenance fee.\n    - Under the hood: This is the amortized cost of managing\n      the UTXOs and liquidity needed in the SuperScalar\n      and other protocols.\n      The LSP can provide a fixed fee regime to the clients;\n      the LSP can manage the risk of actual onchain fee\n      variance by purchasing onchain feerate futures from\n      miners, as described by Jack Mallers, and with a\n      proposed mechanism [here][onchain-feerate-futures].\n  - The fee may be waived if the account has a large enough\n    amount consistently over the past month (as is typical\n    for checking accounts provided by many banks).\n    - Under the hood: Channel balances imply that the\n      *more* funds the client owns in the channel, the\n      *less* funds the LSP owns in the channel.\n      Because of this, the LSP takes on less \"cash drag\"\n      if the amount in the account is consistently high.\n      (i.e. more of the LSP funds are in earning investments,\n      such as published routing channels, and the earnings\n      there can offset the cost of maintaining the\n      unpublished channel with the client)\n  - The advantage here, compared to a custodial scheme as in\n    traditional banking, is that it is possible for a client\n    to force account closure, even if the LSP has frozen the\n    client account, and receive their funds onchain (minus\n    fees taken by miners).\n    This process takes some amount of time, possibly a month\n    or two.\n    - Under the hood: The client forcing account closure is\n      simply triggering a unilateral exit.\n      If we can use the SuperScalar addendum [Inversion of\n      Timeout Default][], then the client app simply\n      disconnects from the LSP and ignores requests from the\n      LSP to wake up and connect, so that the LSP is forced\n      to evict the unresponsive client by paying for the\n      publication of the path to their unilateral exit.\n* The account has an \"account limit\".\n  - This is presented as the inverse of a credit card.\n  - That is: the \"account limit\" of a ***credit card*** is\n    how much you can ***spend*** until you have to receive\n    funds into it (or increase your account limit).\n  - In contrast, as this is a debit instrument, the\n    \"account limit\" of the ***Bitcoin-denominated checking\n    account*** is how much you can ***receive*** until you\n    have to spend it (or increase your account limit).\n    - Under the hood: the account limit is really just the\n      total channel capacity of all channels between LSP\n      and client, minus the channel reserve requirement\n      imposed by the client on the LSP.\n      The LSP does not impose channel reserves on the\n      client (i.e. 0% reserve on the client side, but non-0\n      on the LSP side) because the main purpose of the\n      reserve is to prevent theft attempts from being\n      free; the LSP is assumed to have very high uptime,\n      and to have watchtowers with uptime uncorrelated with\n      their actual LN node, so that theft attempts being\n      free do not matter in practice (for the LSP; it matters for the client, hence the non-0 reserve it imposes on the LSP).\n  - The UI is expected to show the current account balance\n    and the current account limit in close proximity to each\n    other, and to provide a simple way to show the\n    difference between the current balance and the current\n    limit.\n    - Under the hood: the difference between the account\n      balance and the account limit is the current inbound\n      liquidity from the LSP to the client.\n  - The UI allows the user to \"upgrade account limit\"\n    for a cost (which may be waived by the LSP if the user\n    has had a consistently high account balance over the\n    past month).\n    - Under the hood: This is really just purchasing\n      inbound liquidity from the LSP.\n      The cost of purchasing the inbound liquidity can be\n      made fixed via the use of onchain feerate futures as\n      described earlier, and if the client has a\n      consistently high account balance in their account,\n      as noted as well more of the LSP funds can be put to\n      earning investments such as published channels,\n      which also offset the cost of upgrading the account\n      limit.\n    - Under the hood: naively, we might think that the\n      LSP can control exactly the liquidity that is\n      devoted to each user, and thus to hide the\n      details of liquidity management.\n      Unfortunately, this is not the case, as the LSP\n      needs to provide, upfront, some funds of its own,\n      before it can cater to the needs of large users.\n      Suppose some individual user has some large\n      amount of funds inside a SuperScalar.\n      When transitioning from one SuperScalar to the\n      next, the LSP has to put up funds that is at\n      least the account balance of the individual\n      large user, ***plus*** some additional margin\n      for future receives of that large user.\n      While this lockup is transient, there is always\n      some risk that the client will force a unilateral\n      exit *before* moving from the old SuperScalar to\n      the next, thus forcing the LSP to lock up those\n      funds to that client for a month (as changing\n      in-SuperScalar states --- i.e. moving liquidity\n      --- requires the client cooperation, and the\n      client can refuse to cooperate, the LSP\n      practically risks having the large fund be\n      locked up in a form that cannot be used without\n      a lot of blockspace usage and time for\n      unilateral exit).\n      The risk that the LSP takes on here, is the\n      charge it would have to impose on the client for\n      the larger amount the client can keep in the\n      SuperScalar.\n      This holds true even outside of SuperScalar\n      (though blockspace use in unilateral exit is\n      better outside of SuperScalar), and is the\n      entire reason why we have *any* kind of\n      pay-for-inbound-liquidity scheme in Lightning.\n      Thus, it is infeasible to ***not*** expose\n      the account limit concept to end-users; a\n      higher account balance is a larger risk on\n      the LSP and must be paid for, thus end-users\n      need to be aware that increasing their account\n      limit will be costly, and they should be\n      informed of this *before* they put any amount\n      in the account.\n    - Under the hood: Under the [Inversion of Timeout Default][] addendum, part of the security of\n      clients lies in the fact that the LSP has to\n      lock in funds equal to *or greater than* the\n      account limit of the client.\n      Provided the client does not ever upgrade its\n      account limit (expected for most clients)\n      then it does **not** need an external UTXO to\n      pay for onchain fees on unilateral close\n      (i.e. it does not require exogenous fees, as\n      the LSP is the one at risk of loss if it\n      does not unilaterally exit before timeout).\n      However, it does imply that the LSP cannot\n      have \"fractional reserve\" of the account\n      limit.\n      Suppose we have clients `A` and `B`, promised\n      account limits of 10 units each.\n      Suppose the LSP tries a fraction reserve of\n      account limit, giving each one 7 units of\n      capacity, on the assumption that the total\n      capacity needed by both clients will take\n      no more than 14 in total, in practice.\n      Suppose `A` ends up having a balance of 2\n      units, but `B` maxes out its promised\n      account limit of 10 units.\n      The total is 12 units, which appears fine\n      (as the total capacity allocated to `A` and\n      `B` is 14 units), but the Inversion\n      protection that `B` has only covers up to 7\n      units in case of LSP misbehavior.\n      The Inversion protection cannot be increased\n      without adding further Decker-Wattenhofer\n      layers in the Inversion protection transaction,\n      which weakens the protection --- the protection\n      itself would require further protection of\n      its own mutable state.\n      The only way for `B` to protect itself fully\n      would be to move some funds onchain to get\n      an onchain UTXO it can use to pay for P2A\n      exogenous fees.\n      Thus, if the LSP promises an account limit of\n      10 units, then the LSP definitely needs to\n      provide 10 units, plus a little extra, to\n      each of its channels with `A` and `B`.\n* The account has deposit insurance, which can be\n  either limited coverage (for free, and the default) or unlimited coverage.\n  - In case the LSP refuses to give proper service to\n    the client, the client can force account closure\n    regardless of what the LSP does.\n    - For example, if the LSP shuts down without\n      properly allowing clients to withdraw funds,\n      or if the LSP is bought out by an entity that\n      decides to freeze the accounts of some clients.\n    - The client can always force account closure,\n      though the UI attempts to funnel them through\n      cooperative account closure before letting\n      them force account closure.\n  - The forced account closure will be covered by the\n    deposit insurance; i.e. the deposit insurance will\n    put the account balance onchain, minus mining\n    fees, if the client forces account closure.\n    The deposit insurance is no-fault; the client\n    does not need to justify why it forced the\n    account closure.\n  - At the start of the service month, the coverage\n    of the limited coverage scheme is equal to the\n    client account limit at the time, plus some extra\n    amount as a buffer.\n  - If the client has limited coverage (the default),\n    then the maximum amount the client can safely get\n    from the client-initiated forced account closure\n    is limited by the deposit insurance, minus onchain\n    mining fees.\n    Forced account closure can take a month or more\n    to resolve.\n  - The limit of the limited coverage is higher than\n    the account limit at the start of the service\n    month, so for most users, limited deposit\n    insurance coverage is sufficient.\n    However, if the client upgrades their account\n    limit and receives more funds into their\n    account, the client may have a total account\n    balance that is greater than the existing\n    coverage.\n  - The client can get unlimited coverage by moving\n    some funds into a deposit coverage reserve,\n    plus paying onchain mining fees and swap fees.\n    The client can get back those funds into their\n    account (after paying onchain mining fees and\n    swap fees, and only if they have available\n    space under the account limit), but loses\n    unlimited coverage and returns to limited\n    coverage.\n  - If the client has unlimited coverage, then the\n    client can always get the full amount of the\n    account, minus onchain mining fees.\n    Onchain mining fees for forced account closure\n    with unlimited coverage will be larger than with\n    limited coverage, but forced account closure can\n    take a few days or weeks to resolve instead of\n    the 2 months that the limited coverage resolves.\n  - Under the hood: the limited coverage comes from\n    the \"Inversion of Timeout Defaults\" addendum.\n    Under \"Inversion of Timeout Defaults\" scheme,\n    the LSP potentially loses an amount equal to\n    the account limit, plus some additional amount,\n    if it lets the timeout pass without paying for\n    a unilateral exit or supporting an assisted exit.\n    This total amount (which is the account limit\n    plus a share of liquidity-in-stock) is always\n    greater than the account limit at the start of\n    a new SuperScalar, and ***is*** the deposit\n    insurance coverage.\n    However, if the current balance becomes greater\n    than the coverage (because the client bought\n    additional inbound liquidity and received\n    funds), the LSP has an incentive to not\n    pay for unilateral exit of the client, as its\n    liability to that client in the timeout default\n    case is smaller than the amount owned by the\n    client in the account.\n    However however, the client can move some funds\n    onchain (the deposit coverage reserve), which\n    the client can use to pay for unilateral exit.\n    In that case, the client can always enforce its\n    account balance by being able to pay for its\n    own unilateral exit, regardless of the timeout\n    default amount they would get.\n    The onchain funds can be returned to the\n    SuperScalar ownership by a simple swap, but\n    returns the client to having limited coverage.\n  - The deposit insurance is ***NOT*** provided by\n    some third-party entity.\n    It is enforced by the client app directly, using\n    the funds shared between LSP and client.\n  - The existence of an unlimited deposit coverage\n    is a security detail that impacts larger users.\n    In principle, it can be hidden from the user,\n    but as the deposit coverage reserve is an onchain\n    fund, it ***must*** be managed with onchain fees\n    in mind, which vary and are always costly, and\n    cannot be easily moved to offchain.\n    In particular, ***it is protection against the\n    LSP misbehaving***, and thus should really not be\n    handled by the LSP (and thus CANNOT be hidden by\n    the LSP in its monthly maintenance fee --- we\n    cannot trust the LSP to implement it correctly!\n    By the same token, we cannot use swap-in-potentiam\n    to quickly move the reserve fund from onchain to\n    offchain --- swap-in-potentiam assumes the LSP\n    will willingly cooperate in order to immediately\n    be able to spend using the swap-in-potentiam UTXO,\n    and in a scenario where the client has lost trust\n    in the LSP, it is implausible to use that fund to\n    pay for unilateral closure to protect against\n    LSP misbehavior).\n    It has to be implemented completely by the client\n    software, preferably in open-source code with\n    deterministic compilation.\n    FWIW, this only affects larger users; smaller\n    users can live with the default limited deposit\n    insurance coverage; even if the smaller user\n    upgrades their account limit, if the actual\n    balance does not go above the coverage (which\n    is above the limit at the start of the service\n    month) then the user does not need to switch\n    to unlimited insurance coverage, as on the\n    *next* service month, the limit of the limited\n    insurance coverage will rise above the new\n    account limit.\n\n[onchain-feerate-futures]: https://delvingbitcoin.org/t/an-onchain-implementation-of-mining-feerate-futures/547\n[Inversion of Timeout Default]: https://delvingbitcoin.org/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/26\n\nOnboarding Flow\n===============\n\nWhen initially installed, the app simply presents an\ninterface to open an account to the LSP.\nThe app may present an interface to select one among\nmultiple LSPs that provide the needed protocols.\n\nThe app provides the options below:\n\n> - Standard account open\n>   - The account will be opened within 48 hours.\n> - Express account open\n>   - The account will open immediately, but with a\n>     higher fee, and there is a minimum deposit\n>     amount.\n> - Onchain account open\n>   - The account will open as soon as an onchain\n>     address deposit gets N confirmations.\n\nFor all types of account opening, the app presents\nthe terms and conditions below:\n\n> - Monthly maintenance fee: NN satoshis\n>   - The fee may be waived if you maintain an\n>     account balance that is at least NN% of the\n>     account limit for the entire month.\n> - Starting account limit: NNNN satoshis\n> - Account limit upgrade fee: pay NN satoshis\n>   to increase your account limit by NNNN\n>   satoshis, at any time.\n>   - The fee may be waived if you maintain an\n>     account balance that is at least NN% of the\n>     account limit for the entire month.\n> - Pay next maintenance fee on YYYY-MM-DD HH:MM\n>   (TZ).\n>   - Your device must have Internet connectivity\n>     and this app must have notification\n>     permission at this time.\n>     The maintenance fee will be deducted from\n>     your account balance.\n>   - If you miss the above payment, you can pay\n>     on YYYY-MM-DD HH:MM (TZ), YYYY-MM-DD HH:MM\n>     (TZ)....\n>   - If you miss all the above payment windows,\n>     your account will be closed and funds will\n>     be moved onchain, as protected by your\n>     deposit insurance.\n\n- Under the hood: paying the monthly maintenance\n  fee is actually moving from an old, dying\n  SuperScalar in the ladder, to the latest\n  SuperScalar.\n  As SuperScalar constructions are made once a day,\n  those are the times at which you can move from\n  the old SuperScalar to the newest SuperScalar.\n  Thus, the device must be online and capable of\n  receiving messages from the LSP, so that the\n  LSP can invite the client to join the newest\n  SuperScalar, and charge the maintenance fee at\n  that point.\n  Joining the newest SuperScalar requires multiple\n  signing sessions with the client, and thus\n  Internet connectivity and enough CPU to sign\n  everything.\n  If the client misses the monthly payment, the\n  LSP gives them additional opportunities to join\n  the next SuperScalar on succeeding days, up to\n  some limit.\n- Under the hood: if the user completely misses\n  the given times, the LSP has to evict them via\n  the unilateral close mechanism, which, if we\n  use the [Inversion of Timeout Default][]\n  addendum, is paid for by the LSP.\n\nStandard Account Open\n---------------------\n\nThis is the simplest case: the client requests to\nbe scheduled to open an account on the next\navailable slot the LSP has.\n\nThe terms and conditions presented are:\n\n> - Your account will open on YYYY-MM-DD HH:MM\n>   (TZ).\n>   - Your device must have Internet connectivity\n>     and this app must have notification\n>     permission at this time.\n> - If you miss the above opening time, you can\n>   open at YYYY-MM-DD HH:MM (TZ).\n> - You cannot receive or send funds until the\n>   account opening time that your device has\n>   been online for.\n\n- Under the hood: new SuperScalar mechanisms are\n  constructed daily, and the LSP simply schedules\n  the new client to join the next SuperScalar\n  mechanism, and wakes them up at the appropriate\n  time to complete the signing session.\n  If the client does not come online on the first\n  scheduled day, the LSP allows the client to join\n  on the next scheduled day.\n\nThe LSP may also require initial deposit, depending\non the risks the LSP is willing to take on in its\nenvironment.\nFor instance:\n\n- The LSP may require a minimum initial deposit,\n  without deducting any amount from it, to prevent\n  trivial DoS attacks where a botnet just spams the\n  LSP.\n  - The initial deposit may be done in multiple\n    receives, with sending disabled until the\n    minimum initial deposit is reached.\n- The LSP may deduct an initial fee from the\n  initial deposit, again to deter trivial DoS attacks\n  from funded attackers.\n- The LSP may waive the above requirements if it can\n  ban an identifiable individual that attempts to DoS\n  the LSP.\n\nHow the above are communicated between the app and the\nLSP are left as an exercise to the reader.\n\nExpress Account Open\n--------------------\n\nIn this flow, the LSP charges a higher fee for the\naccount opening, but the account is opened\nimmediately.\n\nThe terms and conditions for this opening are:\n\n> - You must pay a Lightning invoice with at least\n>   NNN satoshis, as initial deposit.\n> - A fee will be deducted from the initial deposit,\n>   of NNN satoshis, or N.N% of the amount deposited,\n>   whichever is larger.\n> - Once paid, the account is opened for sending and\n>   receiving.\n>   Upgrading the account limit will not be immediately\n>   available.\n> - On YYYY-MM-DD HH:MM (TZ) the account limit can be\n>   upgraded at your control.\n>   - Your device must have Internet connectivity\n>     and this app must have notification\n>     permission at this time.\n>   - If you miss the above time to enable upgrades\n>     to your account limit, you can enable account\n>     limit upgrades on YYYY-MM-DD HH:MM (TZ).\n\n- Under the hood: the client uses a JIT channel flow,\n  such as [LSPS2][].\n  The minimum size is `min_payment_size_msat` of\n  LSPS2, and the fee scheme is `min_fee_msat` and\n  `proportional` of LSPS2.\n  Once the LSPS2 invoice is paid, a non-SuperScalar\n  onchain channel is opened.\n  As the cost of adding new inbound liquidity in an\n  onchain channel is higher, the LSP also invites\n  the client to join the next daily SuperScalar\n  construction, and the app presents this as\n  being unable to increase the account limit until\n  after the app moves the user funds from the\n  onchain JIT channel to a SuperScalar.\n  Once the app has moved user funds into SuperScalar,\n  it enables upgrading of the account limit, i.e.\n  purchasing inbound liquidity within SuperScalar.\n\n[LSPS2]: https://github.com/BitcoinAndLightningLayerSpecs/lsp/blob/52acff41b07f082d32512b0dd9a161d54ecaa2b9/LSPS2/README.md\n\nOnchain Account Open\n--------------------\n\nIn this flow, the app provides an onchain address\nto be funded by the user.\nOnce the onchain address has a UTXO of at least a\nminimum size, and the transaction with that output\nhas confirmed with sufficient depth, the channel is\nopened.\n\nAs a bonus, under this flow, if the LSP refuses\nservice and blocks account opening, the deposited\nfunds can be refunded, minus onchain mining fees.\n\nThe terms and conditions for this flow are:\n\n> - You must make at least one deposit to a given\n>   `bc1p` (P2TR, \"Taproot\", \"bech32m\") onchain\n>   address, of at least NNNNNN satoshis.\n> - The account is opened for sending and receiving\n>   as soon as the onchain send to the given address\n>   has N confirmations.\n> - A mining fee of NNN satoshis will be deducted\n>   from the initial deposit.\n> - The initial account limit is equal to the\n>   initial amount deposited, minus the mining fee.\n> - Upgrading the account limit will not be immediately\n>   available.\n> - On YYYY-MM-DD HH:MM (TZ) the account limit can be\n>   upgraded at your control.\n>   - Your device must have Internet connectivity\n>     and this app must have notification\n>     permission at this time.\n>   - If you miss the above time to enable upgrades\n>     to your account limit, you can enable account\n>     limit upgrades on YYYY-MM-DD HH:MM (TZ).\n> - If the LSP refuses to complete account opening,\n>   the initial deposit can be refunded to an\n>   onchain address you control, minus mining\n>   fees, NNN blocks after the deposit confirms.\n\n- Under the hood: This flow uses [swap-in-potentiam][].\n  Once the swap-in-potentiam address is funded, with\n  the minimum confirmation depth imposed by the LSP,\n  the app can then open a channel using those funds.\n  Providing a plain address maximizes the number of\n  wallets that can deposit to the address, while\n  allowing \"instant\" channel opening (i.e. no\n  additional confirmations are needed beyond\n  confirming the deposit to the plain\n  swap-in-potentiam address).\n  Once the swap-in-potentiam address has been\n  funded, the client can present it to the LSP and\n  construct an onchain channel with no additional\n  trust.\n  The ability to refund the onchain amount, in case\n  the LSP refuses to accept the channel, is built\n  into the swap-in-potentiam protocol.\n  As the cost of adding new inbound liquidity in an\n  onchain channel is higher, the LSP also invites\n  the client to join the next daily SuperScalar\n  construction, and the app presents this as\n  being unable to increase the account limit until\n  after the app moves the user funds from the\n  onchain swap-in-potentiam channel to a SuperScalar.\n  Once the app has moved user funds into SuperScalar,\n  it enables upgrading of the account limit, i.e.\n  purchasing inbound liquidity within SuperScalar.\n\n[swap-in-potentiam]: https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-January/003810.html\n\nDeposit Insurance Coverage Management\n=====================================\n\nBy default, the user gets a limited deposit insurance\ncoverage, that is equal to the account limit at the\nstart of a service month, plus some extra margin.\nFor most users, this is sufficient, as they would not\nbe able to receive more than their current account\nlimit anyway.\n\nHowever, if the user then upgrades their account limit,\nand receives funds, then the limited deposit insurance\ncoverage may become lower than their actual account\nbalance.\n\nWhen the user account balance reaches 90% of the\nlimited deposit insurance coverage, the app can remind\nthe user to switch to unlimited deposit insurance\ncoverage.\n\nTo enable unlimited deposit insurance coverage, the\napp has to move some funds to a locked reserve fund\nthat is separate from the account.\nMining and swap fees are also charged to move to this\nlocked reserve fund.\n\nThe user may withdraw the locked reserve fund at any\ntime, which returns them to limited deposit insurance\ncoverage.\n\n> - If the LSP refuses to provide service, or otherwise\n>   attempts to freeze or impede sending, receiving,\n>   upgrading account limit, or closing your account,\n>   you can, at any time, force the closure of your\n>   account despite LSP interference and receive your\n>   funds in an onchain wallet.\n> - Fees involved in onchain operations to enforce\n>   the closure of your account are paid by you and\n>   deducted from your recovered account.\n> - Onchain operations to enforce closure require a\n>   minimum amount.\n>   If your account balance is below the minimum\n>   amount after fees, force closure will not recover\n>   any of your funds, but neither will the LSP be\n>   able to retain your funds.\n> - If possible, make a good-faith effort to contact\n>   the LSP at `<whatever@wherever.com>` with your\n>   concerns before initiating force closure.\n> - Under limited deposit insurance coverage:\n>   - Force closure can take 1-2 months before you\n>     can move your funds to an onchain wallet.\n>   - Enforcement fees paid to miners are lower.\n>   - The coverage is limited; the limit of the\n>     coverage is set at the start of a service\n>     month, and set to be higher than your account\n>     limit at that time, but if you upgrade your\n>     account limit to be higher and then receive\n>     funds, your account balance can end up higher\n>     than the current coverage.\n>     In that case, you may recover less than your\n>     account balance, and only up to the limited\n>     coverage.\n> - Under unlimited deposit insurance coverage:\n>   - You need to reserve a fund of NNNNN satoshis,\n>     separate from (and funded by) your account\n>     balance.\n>     Creating and withdrawing this reserve fund\n>     requires paying mining and swap fees.\n>   - Force closure is expedited and can take 1-2\n>     weeks instead of months.\n>   - Enforcement fees paid to miners are higher\n>     (for the expedited closure and to ensure\n>     unlimited coverage).\n>   - Your entire account balance is protected,\n>     and your reserve fund, minus enforcement\n>     fees, will be included in the onchain\n>     withdrawal.\n\n- Under the hood: the [Inversion of Timeout Default][]\n  addendum provides the mechanism for the deposit\n  insurance.\n  The addendum has the deposit insurance coverage ---\n  actually the branch where the LSP is punished if it\n  does not provide an exit (unilateral or assisted)\n  to clients before the timeout of the tree --- of\n  fixed amount at the start of a SuperScalar\n  mechanism.\n  The assumption here is that the client may not have\n  an external UTXO with which to pay exogenous fees\n  for unilateral exit, and must rely on the punishment\n  branch to force the LSP to give it a unilateral\n  exit.\n  By reserving some funds into an onchain address\n  controlled solely by the client, the client can\n  enforce the unilateral exit directly (due to having\n  an external UTXO to pay exogenous fees with), at\n  the cost of having to pay the unilateral exit for\n  itself instead of the LSP paying for it.\n\nSend And Receive Flow\n=====================\n\nWhile *most* Lightning payments resolve quickly,\nthere is a small chance that they take a long time\nbefore they can resolve.\nThus, like typical Lightning wallets, a\nSuperScalar-based app has to show outgoing payments\nas \"pending\" with the corresponding funds locked\nuntil the payment completes.\n\nUpgrade Account Limit Flow\n==========================\n\nThe app may provide an option that authorizes it to\nautomatically upgrade account limit when the account\nlimit is being approached by the account balance.\n\nWhen an account limit upgrade is requested\nby the user, LSP quotes some number of satoshis\nof cost, in order to increase the account limit by\nsome number of satoshis.\nThe user may request an account limit upgrade at any\ntime.\nThe account limit upgrade may take several minutes\nto an hour to finalize; the user can send and\nreceive normally even while the account limit\nupgrade is ongoing.\n\n- Under the hood: As noted, this is actually a\n  purchase of inbound liquidity from the LSP.\n- Under the hood: The optimistic case is that the LSP\n  is able to wake up other client apps in order to\n  authorize a change in state of a sub-tree of the\n  SuperScalar construction.\n  However, if interaction with one of the other\n  clients times out, the LSP can instead fund an\n  onchain channel with the client, with a timeout\n  equal to the timeout of the current SuperScalar the\n  client is on.\n  (the timeout on the onchain channel can be\n  implemented as an `nLockTime`d transaction that\n  can spend the funding transaction output)\n  The LSP takes on this risk (i.e. the price it\n  quoted remains the same, thus, the LSP has to\n  factor in the risk that other client apps do not\n  come online fast enough).\n  If the LSP has already opened an onchain channel,\n  and the other clients do not respond fast enough to\n  some request to increase in-SuperScalar capacity,\n  then the LSP can splice into the existing channel.\n  Basically, onchain is used as a fallback in case\n  of coordination problems (i.e. some clients are\n  offline).\n- Under the hood: While an account upgrade is ongoing,\n  and the in-SuperScalar channel capacity increase\n  is being negotiated by the LSP with other clients,\n  the client and LSP have to maintain two sets of\n  state in the channel: one for the\n  pre-capacity-increase channel, and one for the\n  post-capacity-increase channel.\n  Other clients that are needed to sign off on the\n  capacity change must also maintain two sets of\n  state with their in-SuperScalar channel.\n  This code would be very similar to handling of\n  multiple states in onchain splicing, and is likely\n  to share code with splicing handling.\n  This allows all involved clients to continue\n  sending and receiving as normal while the account\n  limit upgrade is ongoing.\n\nMonthly Maintenance Fee Flow\n============================\n\nThe monthly maintenance fee is paid by the user\nonce a month.\nThe app should default to being authorized to\nautomatically pay the monthly maintenance, as per\nthe schedule set by the LSP.\nThis implies that the app controls the keys involved\nin the Lightning channel.\n\nThe LSP sets particular times at which the monthly\nmaintenance fee may be paid.\nThe device must have Internet connectivity at those\ntimes, and the app must have notification permission\nat those times.\nThe LSP will automatically awaken the app at those\ntimes, at which point the app authorizes the payment\nof the monthly maintenance fee.\n\nIf the user misses the given time, the LSP also\ngives the user a few more given times, on succeeding\ndays, at which they can pay the monthly maintenance\nfee.\n\nThe app can display the time at which it will be\nasked to pay the monthly maintenance fee, as well\nas the grace period the LSP allows.\n\nThe process of monthly maintenance is:\n\n* The client pays the monthly maintenance fee to the\n  LSP, who queues them up for completion of monthly\n  maintenance.\n* Once the client has paid the fee, the monthly\n  maintenance proceeds in two phases:\n  * Common maintenance phase: For several seconds or\n    minutes, up to an hour or two, the LSP repeatedly\n    attempts to create a set of online clients that\n    are able to cooperatively perform maintenance\n    tasks simultaneously while online.\n    During this time, all the online clients can\n    continue to send and receive funds normally,\n    but cannot negotiate an account limit upgrade\n    while this is ongoing.\n  * Per-client maintenance phase: The client app\n    arranges to complete the monthly maintenance,\n    while still able to send and receive funds\n    normally, as well as negotiate an account\n    limit upgrade.\n\nIf a client has paid the monthly maintenance fee,\nbut is not part of the common maintenance phase\n(e.g. its Internet connectivity is interrupted between\npaying the fee and completing the common maintenance\nphase), the LSP will invite the client to complete the\ncommon maintenance phase on the succeeding day(s)\nuntil the client can complete the common maintenance\nphase, or until some timeout, at which point the LSP\nwill force closure of the client account and refund\nthe monthly maintenance fee.\nThe client may also force closure of the client\naccount if the LSP refuses to allow the client to\ncomplete the common maintenance phase.\n\nThe per-client maintenance phase can be done as long\nas te client is online and the LSP is cooperating.\nIf the LSP or client refuse to complete the per-client\nmaintenance phase, the other side can force closure\nof the account to recover funds.\n\n- Common maintenance:\n  - Under the hood: This is the part where the clients\n    and LSP actually construct a new SuperScalar\n    construction, with all funds initially owned by\n    the LSP, but with in-SuperScalar channels having\n    capacity equal to the current account limits of\n    the clients.\n    This requires multiple MuSig2 signing sessions;\n    if some client does not complete the MuSig2\n    signing sessions quickly enough, the LSP will\n    restart the opening without that client, until\n    it can get a completed SuperScalar opening\n    with the remaining clients all able to complete\n    necessary signatures.\n- Per-client maintenance:\n  - Under the hood: This is just a swap from the\n    current SuperScalar to the newly-constructed\n    SuperScalar tree.\n    If both client and LSP are online and\n    cooperative, this should be fast and resolve in\n    seconds.\n    - Under the hood: After completion of the\n      common maintenance phase, the LSP will forward\n      payments to the client on the new SuperScalar\n      instead of the old SuperScalar.\n    - Under the hood: Ideally, the client simply\n      sends the entire account balance from the\n      old SuperScalar to the new SuperScalar.\n      However, if the client has pending sends,\n      the client has to maintain the per-client\n      maintenance state until the LSP has either\n      fulfilled or failed the HTLC (i.e. \"resolve\"\n      the HTLC, meaning it either fulfilled or\n      failed).\n      If the LSP does not resolve the HTLC of the\n      pending send before the old SuperScalar\n      dies, the LSP is forced to unilaterally close\n      the old SuperScalar under the [Inversion of\n      Timeout Defaults][] addendum, and the client\n      can force close of the new SuperScalar as\n      well (by refusing to cooperate with the LSP\n      until the LSP is forced to time out, as per\n      Inversion).\n      If the LSP fulfills all pending HTLCs, then\n      the old SuperScalar will not have any client\n      funds and the client can hand over the private\n      key to the old SuperScalar construction (to\n      allow the LSP to recover funds without\n      publishing the complete unilateral exit).\n      If the LSP fails any pending HTLCs, then the\n      amount is returned to the old SuperScalar,\n      but the client app can immediately move the\n      funds to the new SuperScalar.\n    - Under the hood: The client temporarily has\n      double its account limit while the old and\n      new SuperScalars are still active, but since\n      the old SuperScalar is dying soon, the client\n      needs to strictly enforce its own account\n      limit while doing per-client maintenance.\n      This occurs if the client has any pending\n      HTLCs being sent; the HTLC amount could still\n      be refunded if the HTLC is failed.\n      As a concrete example: suppose the account\n      limit is 10 units, the client has 9 units,\n      and has a pending send of 1 unit.\n      On transferring to the new SuperScalar, the\n      client moves the 9 units to the new\n      SuperScalar, leaving inbound capacity on the\n      new SuperScalar at 1 unit.\n      If the client receives an HTLC on the new\n      SuperScalar of 1 unit, it ***MUST*** reject\n      it until the pending send of 1 unit (on the\n      old SuperScalar) has resolved; otherwise,\n      if it fulfills the incoming HTLC *and*\n      the pending send ultimately fails and is\n      refunded, the client has to fit 11 units of\n      balance in 10 units of limit.\n\nAccount Closure\n===============\n\nAccount closure can be assisted by the LSP, or be\nforced by the client.\n\nOnce the client starts either account closure flow,\nit can no longer send, receive, or upgrade account\nlimit.\n\nThe client can only initiate an assisted account\nclosure if there are no pending sends or receives.\nHowever, the client (and LSP) can initiate a forced\nclosure at any time, even if there are pending sends\nor receives.\nPending sends and receives during a forced closure\ncan get resolved offchain, but at the worst case\nwill be resolved on the blockchain.\n\nAs account closure involves onchain activity, there\nare practical minimum amounts that can be used\npost-closure.\nIf the account balance is below the practical onchain\nminimum amount, then an assisted account closure is\nnot feasible (the client will end up paying their\nentire balance as onchain fees).\n\nAfter completion of account closure, the client is\nin possession of onchain funds.\nThe client can then sweep those funds onto some\nonchain address or silent pay address, or can\nuse those funds to reopen the account using the\n\"onchain account open\" flow.\n\nAssisted Account Closure\n------------------------\n\nIn this flow, the client requests the LSP to close\nthe account, and the LSP must accept this request.\nIn case the LSP declines this request or otherwise\ndoes not respond to this request, the client app\nprovides an option to force account closure instead.\n\nIn the case that the client has absolutely 0 account\nbalance, the account can be trivially closed.\n\n- Under the hood: if the client has 0 account balance,\n  it can trivially hand over the private key used in\n  the current SuperScalar.\n\nThe closure requires two phases, both requiring\nonchain confirmation.\nThe client sets the number of confirmations that it\nwould consider acceptable, though no more than say\n12 confirmations.\n\n- LSP cooperation phase.\n- Client claim phase.\n\nThe details are:\n\n- LSP cooperation phase.\n  - Before starting the account closure, the client\n    app provides estimates on how much cost the\n    user will pay based on current onchain feerates,\n    with the warning that onchain feerates can change\n    drastically and that the amount paid may become\n    larger later.\n  - Under the hood: the client offers HTLC(s) of\n    all funds in its account (i.e. inside\n    SuperScalar) to the LSP.\n    The LSP then takes some onchain fund of\n    equivalent value into an onchain HTLC.\n  - Under the hood: the client indicates its\n    desired onchain feerate, and is responsible\n    for paying some of the costs involved.\n    The LSP agrees if it considers the onchain\n    feerate reasonable; if it cannot get agreement,\n    the client can always fall back to forced\n    account closure.\n    The client pre-pays for the onchain fees,\n    deducting from its account balance as soon\n    as the LSP indicates acceptance.\n    The client is responsible for paying:\n    - Transaction cost of the LSP cooperation\n      phase.\n      - 1 transaction input (LSP funds).\n      - 1 transaction output (LSP change).\n      - 1 transaction output (onchain HTLC).\n    - Transaction cost of the LSP timeout\n      recovery.\n      - 1 transaction input (onchain HTLC, timeout\n        branch).\n      - 1 transaction output (LSP funds).\n  - Under the hood: this phase completes once the\n    onchain HTLC address has confirmed to sufficient\n    depth that the client considers safe.\n- Client claim phase.\n  - Under the hood: the client claims the onchain\n    HTLC, revealing the preimage.\n    This is just a 1-input 1-output transaction.\n  - Under the hood: the client SHOULD use a \"burn\"\n    strategy with an RBF-able transaction: it can\n    start at what it considers a reasonable fee,\n    but as the onchain HTLC timeout approaches,\n    the client increases the onchain transaction\n    fee, until at the block just before the the\n    timeout it offers the entire amount as onchain\n    fee to miners.\n  - Under the hood: this phase completes once the\n    1-input-1-output claim transaction has confirmed\n    to sufficient depth that the client considers\n    safe.\n    On completion of this phase, the client hands\n    over the private key to the SuperScalar it just\n    exited from.\n\nForced Account Closure\n----------------------\n\nThe client or LSP can initiate an account closure at\nany time.\n\nThere are two forms of forced account closure:\n\n- Forced account closure by timeout.\n- Forced account closure by publication.\n\nWhich kind of force account closure the client\n*actually* uses depends on its current mode of\ndeposit insurance coverage:\n\n- If the client currently has limited deposit\n  insurance (the default), the client forces account\n  closure by timeout.\n  - This takes longer, but the cost on the client is\n    lower.\n- Otherwise, the client has unlimited deposit\n  insurance, and the client forces account closure by\n  publication.\n  - The cost on the client is higher, but because it\n    does not wait for a timeout, the client can get\n    its funds earlier.\n  - Under the hood: in this mode, the client has some\n    funds in an onchain address, which can be used\n    to pay for exogenous fees via P2A outputs on the\n    timeout tree nodes.\n\nAs account closure requires moving funds onchain,\nthere is a practical minimum account balance before\nusers can actually recover funds onchain.\nHowever, even if the user account balance is below\nthis practical minimum, the LSP cannot get that\nbalance in the forced account closure flow, and the\nbalance will instead go to miners.\n\nFor details:\n\n- Under the hood: Ultimately both kinds of forced\n  account closure boil down to forced closure by\n  publication.\n  Under [Inversion of Timeout Default][] addendum,\n  forced account closure by timeout simply has the\n  client wait until the impending death of the\n  SuperScalar it is currently in, and then the LSP\n  is forced to publish the unilateral exit (the\n  \"forced closure by publication\") onchain, as\n  otherwise the LSP can lose funds that were locked\n  in the SuperScalar.\n- Under the hood: Multiple timeouts are involved in\n  any forced account closure; these timeouts are\n  enforced to allow participants to ensure that the\n  latest state is what is resolved onchain.\n  Forced account closure by timeout can take 1-2\n  months, while forced account closure by client\n  publication will take a few weeks to a month.\n  Note that the forced account closure by timeout\n  is really waiting for the LSP to perform forced\n  account closure by publication, thus the additional\n  worst-case month is due to having to wait up to a\n  month for the current SuperScalar to time out.\n  If the client has unlimited deposit insurance\n  coverage (i.e. has an exogenous UTXO they can use\n  to pay for exogenous fees) then the client can\n  use forced account closure by publication itself,\n  which shortens the time, but also increases the\n  cost of forced account closure.\n\nPost-closure\n------------\n\nOnce the client has completed a closure (whether\nassisted or forced), the client app will have some\nonchain funds that can be swept.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}