{
  "id": 3620,
  "name": "jungly",
  "username": "jungly",
  "avatar_template": "/user_avatar/delvingbitcoin.org/jungly/{size}/289_2.png",
  "created_at": "2024-11-27T19:30:52.026Z",
  "cooked": "<p>Hi,</p>\n<p>Thanks for taking the time to read through the proposal. I\u2019ll include my replies inline and address other questions at the end.</p>\n<aside class=\"quote no-group\" data-username=\"marathon-gary\" data-post=\"2\" data-topic=\"1262\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/marathon-gary/48/796_2.png\" class=\"avatar\"> marathon-gary:</div>\n<blockquote>\n<p>Was ROAST considered as an alternative to Lindell\u2019s scheme? How does the robustness/rounds of ROAST compare?</p>\n</blockquote>\n</aside>\n<p>Yes. In fact, we will need to support one of the optimisations suggested in the ROAST paper. Still calling it FROST Federation as the single round signing is what helps us scale to many MSPs.</p>\n<blockquote>\n<p><strong>Data Handling and Transparency</strong></p>\n</blockquote>\n<p>Nice reminder. We will need to prune the data in MSPs. The time decay for shares is something I was thinking will be a cliff. The reason for the cliff is - simplicity and it makes sure the shares between two blocks found are all available, for whatever PPLNS parameters we use.</p>\n<blockquote>\n<p>specify desired authentication properties instead of specific username/password methods.</p>\n</blockquote>\n<p>Yeah, I was leaving that out on purpose to make a decision just now. I think the standard usage out there is username/password on most pool servers. Therefore for keeping things easier for miners to switch I was thinking username/password might be the easiest.</p>\n<blockquote>\n<p>How can uniqueness be accomplished? Using MSP pub key + mining username?</p>\n</blockquote>\n<p>Yes. The requirement is that each miner essentially is given a random string as username by the MSP, or the MSP makes sure the one provided by the user is long enough.</p>\n<blockquote>\n<p>Could latency/throughput FROST signing be a bottleneck?</p>\n</blockquote>\n<p>The choice of FROST is driven by their single round signing. I did <a href=\"https://blog.opdup.com/development-updates/2024/07/09/frost-signing-for-channel-updates.html\" rel=\"noopener nofollow ugc\">some analysis</a> when thinking about using Belcher\u2019s channels for payments. The message complexity is <span class=\"math\">O(n^2)</span>, but round complexity is 1 - which is awesome. We still need to run experiments to measure performance of FROST Federation to know scaling limits.</p>\n<blockquote>\n<p><strong>Mining Fee Trends:</strong></p>\n</blockquote>\n<p>Yes. We\u2019ll need to normalise the block templates proposed by each MSP and apply weights to the various shares mining for different block templates.</p>\n<h3><a name=\"p-3620-other-questions-1\" class=\"anchor\" href=\"#p-3620-other-questions-1\"></a>Other questions</h3>\n<ol>\n<li>\n<p>Lindell\u2019s scheme is awesome. However, there is not open source implementation available,yet. I seriously toyed with rolling up my sleeves and working on it, but decided not to. Why is it awesome? Cause it is robust in the presence of failures, with three rounds. For robustness, instead, we use ROAST, which will have much higher message complexity, but easier to implement, as it is a messaging protocol, not the same as implementing cryptography <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"> . If we see ROAST is being a bottleneck in the future and Lindell\u2019s scheme is available, we could switch. For a functional MVP, we are going with FROST/ROAST.</p>\n</li>\n<li>\n<p>Dishonest MSP Handling - I essentially mean, someone not running FROST correctly or sending invalid shares. FROST has identifiable aborts, so we can identify the failing MSP and kick it out the next time. For invalid shares, each MSP knows the MSP is sending bad data. For other DDoS attacks etc, again, we can block and disconnect the MSP. For an equivocating MSP, the BFT broadcast detects the behaviour and we can leave that MSP out.</p>\n</li>\n<li>\n<p>2000 block delay - I wanted to pick a period between 2/3 weeks. So an MSP joins, bring hash rate, but can\u2019t participate in threshold signature unless it has been working correctly for 2/3 weeks, and then I randomly chose 2000 blocks. This prevents a large miner acting as an MSP and toying with the threshold signature, leaving, coming back and so on.</p>\n</li>\n<li>\n<p>Dashboard specifications - Not specified at all! I am thinking the first release will be a cli interface <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n</li>\n</ol>\n<p>Thanks for the great questions</p>\n<p>-kp</p>",
  "post_number": 5,
  "post_type": 1,
  "updated_at": "2024-11-27T19:30:52.026Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.2,
  "yours": false,
  "topic_id": 1262,
  "topic_slug": "radpool-decentralised-mining-pool-with-futures-contracts-for-payouts",
  "topic_title": "Radpool: Decentralised Mining Pool With Futures Contracts For Payouts",
  "topic_html_title": "Radpool: Decentralised Mining Pool With Futures Contracts For Payouts",
  "category_id": 7,
  "display_username": "jungly",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Hi,\n\nThanks for taking the time to read through the proposal. I'll include my replies inline and address other questions at the end.\n\n[quote=\"marathon-gary, post:2, topic:1262\"]\nWas ROAST considered as an alternative to Lindell\u2019s scheme? How does the robustness/rounds of ROAST compare?\n[/quote]\n\nYes. In fact, we will need to support one of the optimisations suggested in the ROAST paper. Still calling it FROST Federation as the single round signing is what helps us scale to many MSPs.\n\n> **Data Handling and Transparency**\n\nNice reminder. We will need to prune the data in MSPs. The time decay for shares is something I was thinking will be a cliff. The reason for the cliff is - simplicity and it makes sure the shares between two blocks found are all available, for whatever PPLNS parameters we use.\n\n> specify desired authentication properties instead of specific username/password methods.\n\nYeah, I was leaving that out on purpose to make a decision just now. I think the standard usage out there is username/password on most pool servers. Therefore for keeping things easier for miners to switch I was thinking username/password might be the easiest.\n\n> How can uniqueness be accomplished? Using MSP pub key + mining username?\n\nYes. The requirement is that each miner essentially is given a random string as username by the MSP, or the MSP makes sure the one provided by the user is long enough.\n\n> Could latency/throughput FROST signing be a bottleneck?\n\nThe choice of FROST is driven by their single round signing. I did [some analysis](https://blog.opdup.com/development-updates/2024/07/09/frost-signing-for-channel-updates.html) when thinking about using Belcher's channels for payments. The message complexity is $O(n^2)$, but round complexity is 1 - which is awesome. We still need to run experiments to measure performance of FROST Federation to know scaling limits.\n\n> **Mining Fee Trends:**\n\nYes. We'll need to normalise the block templates proposed by each MSP and apply weights to the various shares mining for different block templates.\n\n### Other questions\n\n1. Lindell's scheme is awesome. However, there is not open source implementation available,yet. I seriously toyed with rolling up my sleeves and working on it, but decided not to. Why is it awesome? Cause it is robust in the presence of failures, with three rounds. For robustness, instead, we use ROAST, which will have much higher message complexity, but easier to implement, as it is a messaging protocol, not the same as implementing cryptography :) . If we see ROAST is being a bottleneck in the future and Lindell's scheme is available, we could switch. For a functional MVP, we are going with FROST/ROAST.\n\n2. Dishonest MSP Handling - I essentially mean, someone not running FROST correctly or sending invalid shares. FROST has identifiable aborts, so we can identify the failing MSP and kick it out the next time. For invalid shares, each MSP knows the MSP is sending bad data. For other DDoS attacks etc, again, we can block and disconnect the MSP. For an equivocating MSP, the BFT broadcast detects the behaviour and we can leave that MSP out.\n\n3. 2000 block delay - I wanted to pick a period between 2/3 weeks. So an MSP joins, bring hash rate, but can't participate in threshold signature unless it has been working correctly for 2/3 weeks, and then I randomly chose 2000 blocks. This prevents a large miner acting as an MSP and toying with the threshold signature, leaving, coming back and so on.\n\n4. Dashboard specifications - Not specified at all! I am thinking the first release will be a cli interface :) \n\nThanks for the great questions\n\n-kp",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 102,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}