{
  "id": 3480,
  "name": "Antoine Poinsot",
  "username": "AntoineP",
  "avatar_template": "/user_avatar/delvingbitcoin.org/antoinep/{size}/483_2.png",
  "created_at": "2024-11-04T21:06:02.107Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"42\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>A lite client performing whitepaper-style SPV can be tricked into accepting a fake transaction if the coinbase transaction was actually 64 bytes.</p>\n</blockquote>\n</aside>\n<p>Not important to your point but executing this attack using the coinbase transaction requires brute-forcing 40 more bits in the first stage, which makes it fairly impractical.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"harding\" data-post=\"42\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p><a class=\"mention\" href=\"/u/evoskuil\">@evoskuil</a> mentioned an alternative potential soft fork: a commitment to tree depth [\u2026].</p>\n<p>I think the two cons of that approach are:</p>\n</blockquote>\n</aside>\n<p>To add to this list:</p>\n<ul>\n<li>This is a roundabout way of closing the fake inclusion attack vector instead of addressing the root issue that 64 bytes transaction are indistinguishable from inner nodes.</li>\n<li>This requires miners to update their software stack, whereas making 64 bytes transactions invalid doesn\u2019t require them to do anything (if they aren\u2019t running a non-standard Bitcoin Core).</li>\n</ul>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"43\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<ul>\n<li>you need a merkle path, and also to check the witness-stripped tx isn\u2019t 64 bytes</li>\n</ul>\n</blockquote>\n</aside>\n<aside class=\"quote no-group\" data-username=\"evoskuil\" data-post=\"45\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/evoskuil/48/391_2.png\" class=\"avatar\"> evoskuil:</div>\n<blockquote>\n<p>Consequently the complexity comparison becomes:</p>\n<ul>\n<li>Ensure that the stripped transaction is not 64 bytes, and ensure that its Merkle path is valid.</li>\n</ul>\n<p>vs:</p>\n<ul>\n<li>Ensure that the (reconstituted) coinbase Merkle path is valid, and ensure the same valid Merkle depth for any tx in the block.</li>\n</ul>\n</blockquote>\n</aside>\n<p>Even then for an application which checks the SPV proof of transactions for received payments this would never be an issue as they would only check transactions paying to a normal scriptpubkey in the first place, which would implicitly ensure the transaction is never 64 bytes.</p>",
  "post_number": 47,
  "post_type": 1,
  "updated_at": "2024-11-04T21:06:02.107Z",
  "reply_count": 0,
  "reply_to_post_number": 42,
  "quote_count": 3,
  "incoming_link_count": 0,
  "reads": 15,
  "readers_count": 14,
  "score": 17.8,
  "yours": false,
  "topic_id": 710,
  "topic_slug": "great-consensus-cleanup-revival",
  "topic_title": "Great Consensus Cleanup Revival",
  "topic_html_title": "Great Consensus Cleanup Revival",
  "category_id": 7,
  "display_username": "Antoine Poinsot",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"harding, post:42, topic:710\"]\nA lite client performing whitepaper-style SPV can be tricked into accepting a fake transaction if the coinbase transaction was actually 64 bytes.\n[/quote]\n\nNot important to your point but executing this attack using the coinbase transaction requires brute-forcing 40 more bits in the first stage, which makes it fairly impractical.\n\n[quote=\"harding, post:42, topic:710\"]\n@evoskuil mentioned an alternative potential soft fork: a commitment to tree depth [...].\n\nI think the two cons of that approach are:\n[/quote]\n\nTo add to this list:\n- This is a roundabout way of closing the fake inclusion attack vector instead of addressing the root issue that 64 bytes transaction are indistinguishable from inner nodes.\n- This requires miners to update their software stack, whereas making 64 bytes transactions invalid doesn't require them to do anything (if they aren't running a non-standard Bitcoin Core).\n\n[quote=\"ajtowns, post:43, topic:710\"]\n* you need a merkle path, and also to check the witness-stripped tx isn\u2019t 64 bytes\n[/quote]\n\n[quote=\"evoskuil, post:45, topic:710\"]\nConsequently the complexity comparison becomes:\n\n* Ensure that the stripped transaction is not 64 bytes, and ensure that its Merkle path is valid.\n\nvs:\n\n* Ensure that the (reconstituted) coinbase Merkle path is valid, and ensure the same valid Merkle depth for any tx in the block.\n[/quote]\n\nEven then for an application which checks the SPV proof of transactions for received payments this would never be an issue as they would only check transactions paying to a normal scriptpubkey in the first place, which would implicitly ensure the transaction is never 64 bytes.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 12,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}