{
  "id": 3500,
  "name": null,
  "username": "JohnLaw",
  "avatar_template": "/letter_avatar_proxy/v4/letter/j/58956e/{size}.png",
  "created_at": "2024-11-09T23:21:48.538Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"morehouse\" data-post=\"2\" data-topic=\"1233\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/df705f/48.png\" class=\"avatar\"> morehouse:</div>\n<blockquote>\n<p>All lightning implementations today will force close in this case even though it\u2019s not cost effective (though they might not claim the HTLC output on chain), and for good reason. If Bob adopts a policy of \u201cforgiving\u201d small HTLCs in an attempt to stay off chain, it enables Alice to steal Bob\u2019s entire channel balance one small HTLC at a time.</p>\n</blockquote>\n</aside>\n<p>Yes, it makes sense that all lightning implementations prevent theft of small HTLCs, even when it\u2019s not cost effective.\nAs you point out, this is required to avoid becoming a sucker who can be slowly cheated out of their funds.\nAs a result, the lightning protocol is fairly secure, even for small payments.</p>\n<p>It seems the main benefits of the OPR protocol are its speed and scalability.\nI probably should have emphasized those benefits, rather than security for small payments, in the post and paper.\nThanks for your feedback.</p>\n<aside class=\"quote no-group\" data-username=\"morehouse\" data-post=\"2\" data-topic=\"1233\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/df705f/48.png\" class=\"avatar\"> morehouse:</div>\n<blockquote>\n<p>OPR actually makes this problem worse. Because Bob\u2019s cost of force closing is higher with OPR (due to burned fees), there is a larger incentive for Bob to forgive small HTLCs that Alice refuses to resolve before expiry</p>\n</blockquote>\n</aside>\n<p>Actually, with the OPR protocol, choosing to stay off-chain (rather than force closing) in no way leads to accepting the incorrect resolution of an HTLC.\nThat type of logic (having to go on-chain for resolve an HTLC in one\u2019s favor) applies to the current lightning protocol, but not to the OPR protocol.</p>\n<aside class=\"quote no-group\" data-username=\"morehouse\" data-post=\"2\" data-topic=\"1233\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/df705f/48.png\" class=\"avatar\"> morehouse:</div>\n<blockquote>\n<p>Since networks are inherently unreliable, can\u2019t an attacker easily lie about the actual time the message was sent? How does a node distinguish between occasional network lag and a malicious peer?</p>\n</blockquote>\n</aside>\n<p>Yes, an attacker can lie.\nHowever, with the OPR protocol they have absolutely no incentive to do so (and will actually be penalized if they do so).</p>\n<p>There\u2019s no reason for a peer to be malicious (unless they\u2019re griefing while self-griefing, which should be very rare).</p>\n<p>The more relavent question is how both non-malicious peers can agree on whether or not an HTLC was resolved.\nA number of techniques for doing this are presented in the post at the end of the Burned Funds section.</p>\n<aside class=\"quote no-group\" data-username=\"morehouse\" data-post=\"2\" data-topic=\"1233\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/df705f/48.png\" class=\"avatar\"> morehouse:</div>\n<blockquote>\n<p>Even if everyone is honest, I fear that the higher complexity of determining success/failure will lead to implementation bugs and more force closes, which are extra costly with OPR.</p>\n</blockquote>\n</aside>\n<p>OPR never requires a forced close, even if the peers fail to agree on the resolution of an HTLC.\nIn such a case, they can keep the channel open and process additional HTLCs.</p>\n<p>When they finally close the channel, they can create a cooperative close that returns their base funds and only burns the single HTLC on which they disagreed.\nAs a result, the OPR protocol strictly improves scalability, as it completely eliminates the need to resolve HTLCs on-chain.</p>\n<aside class=\"quote no-group\" data-username=\"morehouse\" data-post=\"2\" data-topic=\"1233\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/df705f/48.png\" class=\"avatar\"> morehouse:</div>\n<blockquote>\n<p>To properly disincentivize cheating, the amount of funds each party contributes to the burn output must always be higher than the total value of outstanding HTLCs (otherwise users could profit from force closing without forwarding preimages).</p>\n</blockquote>\n</aside>\n<p>Users can <em>never</em> profit from force closing a channel with the OPR protocol (as long as their peer follows the protocol and avoids being bullied, as described in the post).\nWith the OPR protocol, neither the offerer nor the offeree receives the HTLC\u2019s funds if they force close the channel with a peer that has not agreed on the HTLC\u2019s resolution.\nTherefore, there is no such minimum burn contribution that\u2019s required to secure the channel.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2024-11-09T23:21:48.538Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.4,
  "yours": false,
  "topic_id": 1233,
  "topic_slug": "a-fast-scalable-protocol-for-resolving-lightning-payments",
  "topic_title": "A Fast, Scalable Protocol For Resolving Lightning Payments",
  "topic_html_title": "A Fast, Scalable Protocol For Resolving Lightning Payments",
  "category_id": 7,
  "display_username": null,
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"morehouse, post:2, topic:1233\"]\nAll lightning implementations today will force close in this case even though it\u2019s not cost effective (though they might not claim the HTLC output on chain), and for good reason. If Bob adopts a policy of \u201cforgiving\u201d small HTLCs in an attempt to stay off chain, it enables Alice to steal Bob\u2019s entire channel balance one small HTLC at a time.\n[/quote]\n\nYes, it makes sense that all lightning implementations prevent theft of small HTLCs, even when it's not cost effective.\nAs you point out, this is required to avoid becoming a sucker who can be slowly cheated out of their funds.\nAs a result, the lightning protocol is fairly secure, even for small payments.\n\nIt seems the main benefits of the OPR protocol are its speed and scalability.\nI probably should have emphasized those benefits, rather than security for small payments, in the post and paper.\nThanks for your feedback.\n\n[quote=\"morehouse, post:2, topic:1233\"]\nOPR actually makes this problem worse. Because Bob\u2019s cost of force closing is higher with OPR (due to burned fees), there is a larger incentive for Bob to forgive small HTLCs that Alice refuses to resolve before expiry\n[/quote]\n\nActually, with the OPR protocol, choosing to stay off-chain (rather than force closing) in no way leads to accepting the incorrect resolution of an HTLC.\nThat type of logic (having to go on-chain for resolve an HTLC in one's favor) applies to the current lightning protocol, but not to the OPR protocol.\n\n[quote=\"morehouse, post:2, topic:1233\"]\nSince networks are inherently unreliable, can\u2019t an attacker easily lie about the actual time the message was sent? How does a node distinguish between occasional network lag and a malicious peer?\n[/quote]\n\nYes, an attacker can lie.\nHowever, with the OPR protocol they have absolutely no incentive to do so (and will actually be penalized if they do so).\n\nThere's no reason for a peer to be malicious (unless they're griefing while self-griefing, which should be very rare).\n\nThe more relavent question is how both non-malicious peers can agree on whether or not an HTLC was resolved.\nA number of techniques for doing this are presented in the post at the end of the Burned Funds section.\n\n[quote=\"morehouse, post:2, topic:1233\"]\nEven if everyone is honest, I fear that the higher complexity of determining success/failure will lead to implementation bugs and more force closes, which are extra costly with OPR.\n[/quote]\n\nOPR never requires a forced close, even if the peers fail to agree on the resolution of an HTLC.\nIn such a case, they can keep the channel open and process additional HTLCs.\n\nWhen they finally close the channel, they can create a cooperative close that returns their base funds and only burns the single HTLC on which they disagreed.\nAs a result, the OPR protocol strictly improves scalability, as it completely eliminates the need to resolve HTLCs on-chain.\n\n[quote=\"morehouse, post:2, topic:1233\"]\nTo properly disincentivize cheating, the amount of funds each party contributes to the burn output must always be higher than the total value of outstanding HTLCs (otherwise users could profit from force closing without forwarding preimages).\n[/quote]\n\nUsers can *never* profit from force closing a channel with the OPR protocol (as long as their peer follows the protocol and avoids being bullied, as described in the post).\nWith the OPR protocol, neither the offerer nor the offeree receives the HTLC's funds if they force close the channel with a peer that has not agreed on the HTLC's resolution.\nTherefore, there is no such minimum burn contribution that's required to secure the channel.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 279,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}