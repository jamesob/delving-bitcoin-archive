{
  "id": 6100,
  "name": "F__T__W",
  "username": "ftw2100",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ftw2100/{size}/1083_2.png",
  "created_at": "2025-10-17T14:38:17.246Z",
  "cooked": "<p>Thank you for the detailed proposal. This is a fascinating exploration of native ZK verification on Bitcoin.</p>\n<p>An alternative approach worth considering is to build this functionality as a layer on top of Bitcoin first, rather than modifying the base protocol.</p>\n<p>Instead of introducing a new opcode, one could leverage existing witness space to embed STARK proofs. Open-source indexers can then parse this on-chain data, verify the proofs, and maintain the state of the system off-chain. This metaprotocol approach offers several advantages:</p>\n<ol>\n<li><strong>Risk Mitigation</strong>: It avoids introducing a complex, specific cryptographic primitive into the consensus-critical base layer, sidestepping the risks of implementation bugs or unforeseen economic incentives.</li>\n<li><strong>Market-Driven Adoption</strong>: It allows the concept to be tested and validated in a real-world environment. We can gauge actual market demand and allow social consensus to form organically around a specific STARK implementation without a contentious soft fork.</li>\n<li><strong>Flexibility</strong>: This model allows different proof systems to compete and evolve. If a superior technology emerges, the ecosystem can adapt without being locked into a single, enshrined protocol.</li>\n</ol>\n<p>If a metaprotocol for STARK verification gains significant traction and proves its utility and safety, the community would then have a much stronger, data-driven basis for considering its native integration into Bitcoin Script.</p>\n<p>For a deeper look into the possibilities of building on Bitcoin without script changes, you might find the vision outlined at <code>wtf.rich/w.pdf</code> insightful. It provides a good overview of what can be achieved with current protocol rules.</p>",
  "post_number": 4,
  "post_type": 1,
  "posts_count": 4,
  "updated_at": "2025-10-17T14:38:17.246Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 1,
  "readers_count": 0,
  "score": 5.2,
  "yours": false,
  "topic_id": 2056,
  "topic_slug": "proposal-op-stark-verify-native-stark-proof-verification-in-bitcoin-script",
  "topic_title": "Proposal: OP_STARK_VERIFY - Native STARK Proof Verification in Bitcoin Script",
  "topic_html_title": "Proposal: OP_STARK_VERIFY - Native STARK Proof Verification in Bitcoin Script",
  "category_id": 7,
  "display_username": "F__T__W",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thank you for the detailed proposal. This is a fascinating exploration of native ZK verification on Bitcoin.\n\nAn alternative approach worth considering is to build this functionality as a layer on top of Bitcoin first, rather than modifying the base protocol.\n\nInstead of introducing a new opcode, one could leverage existing witness space to embed STARK proofs. Open-source indexers can then parse this on-chain data, verify the proofs, and maintain the state of the system off-chain. This metaprotocol approach offers several advantages:\n\n1. **Risk Mitigation**: It avoids introducing a complex, specific cryptographic primitive into the consensus-critical base layer, sidestepping the risks of implementation bugs or unforeseen economic incentives.\n2. **Market-Driven Adoption**: It allows the concept to be tested and validated in a real-world environment. We can gauge actual market demand and allow social consensus to form organically around a specific STARK implementation without a contentious soft fork.\n3. **Flexibility**: This model allows different proof systems to compete and evolve. If a superior technology emerges, the ecosystem can adapt without being locked into a single, enshrined protocol.\n\nIf a metaprotocol for STARK verification gains significant traction and proves its utility and safety, the community would then have a much stronger, data-driven basis for considering its native integration into Bitcoin Script.\n\nFor a deeper look into the possibilities of building on Bitcoin without script changes, you might find the vision outlined at `wtf.rich/w.pdf` insightful. It provides a good overview of what can be achieved with current protocol rules.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 694,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Thank you for the detailed proposal. This is a fascinating exploration of native ZK verification on Bitcoin. \nAn alternative approach worth considering is to build this functionality as a layer on top of Bitcoin first, rather than modifying the base protocol. \nInstead of introducing a new opcode, on&hellip;",
  "truncated": true,
  "post_url": "/t/proposal-op-stark-verify-native-stark-proof-verification-in-bitcoin-script/2056/4",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}