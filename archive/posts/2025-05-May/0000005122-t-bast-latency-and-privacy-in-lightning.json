{
  "id": 5122,
  "name": "Bastien Teinturier",
  "username": "t-bast",
  "avatar_template": "/user_avatar/delvingbitcoin.org/t-bast/{size}/98_2.png",
  "created_at": "2025-05-26T07:53:54.965Z",
  "cooked": "<p>Thanks for the detailed post and the insights! It does make a lot of sense: I was personally mostly worried about the AS case, where it\u2019s currently somewhat simple to match incoming <code>update_add_htlc</code> with the corresponding outgoing <code>update_add_htlc</code> based on timing and message identification. But as you mention, having cover traffic and padding messages to be indistinguishable by just looking at their size is probably a better (and more general) solution than delays for this kind of adversary.</p>\n<p>We\u2019ve known that padding messages was something we needed to do for a long time, and it became particularly useful since we introduced the <code>path_key</code> TLV to <code>update_add_htlc</code> messages, making them distinguishable from <code>update_add_htlc</code>s outside of blinded paths. The downside is of course that it uses more bandwidth, but we can\u2019t have our cake and eat it too. The 65kB limit ensures that we\u2019re still within a single TCP packet, which hopefully shouldn\u2019d degrade performance too much. It would be a loss though if padding all messages to 65kB would actually degrade performance more than delaying HTLC messages! It could be interesting to do some simulations on real nodes (by turning on and off the message padding feature for various time periods) to figure this out.</p>\n<p>Let\u2019s see what others think after reading your analysis, but to me it\u2019s a good enough argument to keep reporting the exact hold time in attributable failures.</p>",
  "post_number": 3,
  "post_type": 1,
  "posts_count": 40,
  "updated_at": "2025-05-26T07:53:54.965Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 3,
  "reads": 46,
  "readers_count": 45,
  "score": 29.2,
  "yours": false,
  "topic_id": 1723,
  "topic_slug": "latency-and-privacy-in-lightning",
  "topic_title": "Latency and Privacy in Lightning",
  "topic_html_title": "Latency and Privacy in Lightning",
  "category_id": 7,
  "display_username": "Bastien Teinturier",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thanks for the detailed post and the insights! It does make a lot of sense: I was personally mostly worried about the AS case, where it's currently somewhat simple to match incoming `update_add_htlc` with the corresponding outgoing `update_add_htlc` based on timing and message identification. But as you mention, having cover traffic and padding messages to be indistinguishable by just looking at their size is probably a better (and more general) solution than delays for this kind of adversary.\n\nWe've known that padding messages was something we needed to do for a long time, and it became particularly useful since we introduced the `path_key` TLV to `update_add_htlc` messages, making them distinguishable from `update_add_htlc`s outside of blinded paths. The downside is of course that it uses more bandwidth, but we can't have our cake and eat it too. The 65kB limit ensures that we're still within a single TCP packet, which hopefully shouldn'd degrade performance too much. It would be a loss though if padding all messages to 65kB would actually degrade performance more than delaying HTLC messages! It could be interesting to do some simulations on real nodes (by turning on and off the message padding feature for various time periods) to figure this out.\n\nLet's see what others think after reading your analysis, but to me it's a good enough argument to keep reporting the exact hold time in attributable failures.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 101,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Thanks for the detailed post and the insights! It does make a lot of sense: I was personally mostly worried about the AS case, where it\u2019s currently somewhat simple to match incoming update_add_htlc with the corresponding outgoing update_add_htlc based on timing and message identification. But as you&hellip;",
  "truncated": true,
  "post_url": "/t/latency-and-privacy-in-lightning/1723/3",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}