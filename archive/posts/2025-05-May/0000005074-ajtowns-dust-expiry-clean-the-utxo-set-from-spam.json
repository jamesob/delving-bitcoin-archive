{
  "id": 5074,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2025-05-21T10:44:27.800Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"gmaxwell\" data-post=\"12\" data-topic=\"1707\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/g/fbc32d/48.png\" class=\"avatar\"> gmaxwell:</div>\n<blockquote>\n<p>But perhaps scoping this to outputs which are unlikely to be spent, even unlikely to be spendable, and making their spending cost just come out of their tx size (so no further resource inflation for nodes)-- actually solves both of those issues.</p>\n</blockquote>\n</aside>\n<p>I think a policy something like this could be interesting:</p>\n<ul>\n<li>give utxos a score based on their value in sats and how long they\u2019ve been in the utxo set, eg <code>score = utxo_value - floor((tip_height - utxo_height)/2016) * 4000</code></li>\n<li>when the score for a utxo drops below zero, move it from the utxo set into an accumulator, and require an accumulator-inclusion proof when spending</li>\n<li>treat the accumulator-inclusion proof as free as far as block weight limits are concerned</li>\n</ul>\n<p>That\u2019s non-confiscatory, not only in the sense that any spendable utxo remains spendable, but also remains spendable with no increase in required fees.</p>\n<p>(Having it be costed per byte at some ratio to witness bytes is also plausible, but I think would be slightly annoying \u2013 the proofs required could change at each block, depending on how the accumulator changes, and could grow in size, resulting in your tx\u2019s feerate decreasing unexpectedly. Having it be costed as a flat per-accumulator-input could also work, but that would still make discourage cleanups of utxos in the accumulator, which might be something we\u2019d prefer to encourage?)</p>\n<p>Maintaining the accumulator-inclusion proof can be expensive (it may need to be updated every time the accumulator is updated, which requires maintaining a full node), however this can be outsourced, and can also be calculated from scratch at any point by reindexing the blockchain. I think a node running on consumer-level hardware could reasonably maintain a full set of utreexo accumulator-inclusion proofs for every utxo created in the past 20 years indefinitely, with costs only increasing roughly linearly as you bump the number of years up.</p>\n<p>As at block 897,666 that rule would have the following impact:</p>\n<ul>\n<li>currently, there are 171,366,598 utxos, using ~12GB of disk, with 19,867,488.3479_1527 bitcoins worth of value</li>\n<li>after discarding based on the above rule, there would be 32,694,853 utxos remaining (ie reducing the utxo set size by ~81%, to perhaps 2GB or 3GB. the value of discarded utxos would total 34,761.7225_9465; about 25000 sats each on average</li>\n<li>under this rule, a utxo worth less than 4000 sats (~$4 currently) would be dropped after two weeks, and a utxo worth less than 104,000 sats (~$100 currently) would be dropped after a year</li>\n<li>about 27% of utxos were created in the past year (since block 845520), of those, 68% would be discarded under the above rule</li>\n<li>in the 1000 blocks prior to 897,666, there were only 31 spends of utxos that would have been in the accumulator under this rule out of 7,304,674 total spends (0.00042%). Those spends were across 18 blocks (1.8%). No doubt there are periods where that number is much higher, though.</li>\n</ul>\n<aside class=\"quote no-group\" data-username=\"sipa\" data-post=\"16\" data-topic=\"1707\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sipa/48/1100_2.png\" class=\"avatar\"> sipa:</div>\n<blockquote>\n<p>That\u2019s interesting, but I wonder if that is acceptable, why wouldn\u2019t it be acceptable for everything?</p>\n</blockquote>\n</aside>\n<p>In the context of utreexo, I think this is the interesting part: the downside of utreexo is that every user has to construct/maintain proofs in order to broadcast their transactions, or rely on bridge nodes to do the translation for them, except that full bridge nodes are very expensive to run, and will only get more so as time goes on, which doesn\u2019t seem ideal from a privacy/centralisation/efficiency point-of-view, at least to me.</p>\n<p>In contrast, just doing it for old/low-value outputs that are rarely spent anyway means that most users are entirely unaffected, and that bridge nodes are only needed for people spending anything in the masses of low value outputs that are causing the problem in the first place. Likewise it reduces the bandwidth impact of adding proofs to the chain by quite a lot \u2013 you\u2019re no longer adding proofs for utxos that are spent quickly, or that were high value, which is most spends. (With the parameters set at 4000sats and 2016 blocks, a 1.0 BTC utxo would not get moved to the accumulator until it had sat unspent in the utxo set for ~960 years, eg)</p>\n<p>The downside, compared to utreexo, is that recent/high-value utxos are still stored individually, which still requires a database of a few GBs, rather than just the accumulator of a few kB. I believe that a <code>value - floor(height/N)*V &gt;= 0</code> calculation along with the supply cap and blocksize limit also implies a hard upper limit on the size of the utxo set, but I\u2019m not sure off hand how you\u2019d calculate it.</p>\n<p>As far as implementation goes, the score calculation above could be rearranged to instead calculate <code>acc_height = floor((value + 1)/4000)*2016 + height</code> \u2013 the height at which the score becomes negative and the utxo should be moved into the accumulator. This could either be maintained as a separate index (if our utxo db supported that), or you could scan through the utxo set for any potentially affected utxos during the 2015 blocks where nothing changes.</p>",
  "post_number": 24,
  "post_type": 1,
  "posts_count": 32,
  "updated_at": "2025-05-21T10:44:27.800Z",
  "reply_count": 1,
  "reply_to_post_number": 12,
  "quote_count": 2,
  "incoming_link_count": 0,
  "reads": 43,
  "readers_count": 42,
  "score": 43.6,
  "yours": false,
  "topic_id": 1707,
  "topic_slug": "dust-expiry-clean-the-utxo-set-from-spam",
  "topic_title": "Dust Expiry: Clean the UTXO set from spam",
  "topic_html_title": "Dust Expiry: Clean the UTXO set from spam",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"gmaxwell, post:12, topic:1707\"]\nBut perhaps scoping this to outputs which are unlikely to be spent, even unlikely to be spendable, and making their spending cost just come out of their tx size (so no further resource inflation for nodes)-- actually solves both of those issues.\n[/quote]\n\nI think a policy something like this could be interesting:\n\n * give utxos a score based on their value in sats and how long they've been in the utxo set, eg `score = utxo_value - floor((tip_height - utxo_height)/2016) * 4000`\n * when the score for a utxo drops below zero, move it from the utxo set into an accumulator, and require an accumulator-inclusion proof when spending\n * treat the accumulator-inclusion proof as free as far as block weight limits are concerned\n\nThat's non-confiscatory, not only in the sense that any spendable utxo remains spendable, but also remains spendable with no increase in required fees.\n\n(Having it be costed per byte at some ratio to witness bytes is also plausible, but I think would be slightly annoying -- the proofs required could change at each block, depending on how the accumulator changes, and could grow in size, resulting in your tx's feerate decreasing unexpectedly. Having it be costed as a flat per-accumulator-input could also work, but that would still make discourage cleanups of utxos in the accumulator, which might be something we'd prefer to encourage?)\n\nMaintaining the accumulator-inclusion proof can be expensive (it may need to be updated every time the accumulator is updated, which requires maintaining a full node), however this can be outsourced, and can also be calculated from scratch at any point by reindexing the blockchain. I think a node running on consumer-level hardware could reasonably maintain a full set of utreexo accumulator-inclusion proofs for every utxo created in the past 20 years indefinitely, with costs only increasing roughly linearly as you bump the number of years up.\n\nAs at block 897,666 that rule would have the following impact:\n\n * currently, there are 171,366,598 utxos, using ~12GB of disk, with 19,867,488.3479_1527 bitcoins worth of value\n * after discarding based on the above rule, there would be 32,694,853 utxos remaining (ie reducing the utxo set size by ~81%, to perhaps 2GB or 3GB. the value of discarded utxos would total 34,761.7225_9465; about 25000 sats each on average\n * under this rule, a utxo worth less than 4000 sats (~$4 currently) would be dropped after two weeks, and a utxo worth less than 104,000 sats (~$100 currently) would be dropped after a year\n * about 27% of utxos were created in the past year (since block 845520), of those, 68% would be discarded under the above rule\n * in the 1000 blocks prior to 897,666, there were only 31 spends of utxos that would have been in the accumulator under this rule out of 7,304,674 total spends (0.00042%). Those spends were across 18 blocks (1.8%). No doubt there are periods where that number is much higher, though.\n\n[quote=\"sipa, post:16, topic:1707\"]\nThat\u2019s interesting, but I wonder if that is acceptable, why wouldn\u2019t it be acceptable for everything?\n[/quote]\n\nIn the context of utreexo, I think this is the interesting part: the downside of utreexo is that every user has to construct/maintain proofs in order to broadcast their transactions, or rely on bridge nodes to do the translation for them, except that full bridge nodes are very expensive to run, and will only get more so as time goes on, which doesn't seem ideal from a privacy/centralisation/efficiency point-of-view, at least to me.\n\nIn contrast, just doing it for old/low-value outputs that are rarely spent anyway means that most users are entirely unaffected, and that bridge nodes are only needed for people spending anything in the masses of low value outputs that are causing the problem in the first place. Likewise it reduces the bandwidth impact of adding proofs to the chain by quite a lot -- you're no longer adding proofs for utxos that are spent quickly, or that were high value, which is most spends. (With the parameters set at 4000sats and 2016 blocks, a 1.0 BTC utxo would not get moved to the accumulator until it had sat unspent in the utxo set for ~960 years, eg)\n\nThe downside, compared to utreexo, is that recent/high-value utxos are still stored individually, which still requires a database of a few GBs, rather than just the accumulator of a few kB. I believe that a `value - floor(height/N)*V >= 0` calculation along with the supply cap and blocksize limit also implies a hard upper limit on the size of the utxo set, but I'm not sure off hand how you'd calculate it.\n\nAs far as implementation goes, the score calculation above could be rearranged to instead calculate `acc_height = floor((value + 1)/4000)*2016 + height` -- the height at which the score becomes negative and the utxo should be moved into the accumulator. This could either be maintained as a separate index (if our utxo db supported that), or you could scan through the utxo set for any potentially affected utxos during the 2015 blocks where nothing changes.",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I think a policy something like this could be interesting: \n\ngive utxos a score based on their value in sats and how long they\u2019ve been in the utxo set, eg score = utxo_value - floor((tip_height - utxo_height)/2016) * 4000\nwhen the score for a utxo drops below zero, move it from the utxo set into an&hellip;",
  "truncated": true,
  "post_url": "/t/dust-expiry-clean-the-utxo-set-from-spam/1707/24",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    },
    {
      "id": "eyes",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}