{
  "id": 5163,
  "name": "",
  "username": "light",
  "avatar_template": "/user_avatar/delvingbitcoin.org/light/{size}/350_2.png",
  "created_at": "2025-05-30T12:30:48.600Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"vostrnad\" data-post=\"5\" data-topic=\"1732\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/vostrnad/48/422_2.png\" class=\"avatar\"> vostrnad:</div>\n<blockquote>\n<p>If they only needed to store data they could easily split it across multiple smaller transactions.</p>\n</blockquote>\n</aside>\n<p>This is not strictly true; recall that in the case of the watchtower light-client protocol that ignited the recent OP_RETURN debate, the issue is that the protocol <em>needs</em> to embed 144 bytes <em>in a single transaction</em>. Although I am not aware of any protocol that <em>needs</em> to embed &gt;100 kvB in a single tx, this example goes to show that we cannot assume that even in the simple <em>data storage</em> case that it is sufficient to use multiple txs.</p>\n<aside class=\"quote no-group\" data-username=\"vostrnad\" data-post=\"1\" data-topic=\"1732\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/vostrnad/48/422_2.png\" class=\"avatar\"> vostrnad:</div>\n<blockquote>\n<p>The other primary benefit is that it makes building more optimal block templates easier, reducing the need for centralized template providers.</p>\n</blockquote>\n</aside>\n<p>I will note that since, as you say, \u201cthe <a href=\"https://github.com/bitcoin/bips/blob/72af87fc72999e3f0a26a06e6e0a7f3134236337/bip-0054.md\" rel=\"noopener nofollow ugc\">Consensus Cleanup</a> proposal already addresses\u201d the first rationale for your proposal, that this is the only rationale you have left to support this proposal. Therefore I think it\u2019s worth interrogating this further rather than accepting it as a given:</p>\n<ul>\n<li>How much \u201ceasier\u201d does the current policy limit make building optimal block templates, exactly? (Assuming txs actually comply with the limit.)</li>\n<li>How do you quantify how much easier the rule makes building optimal block templates?</li>\n<li>How would a centralized template provider make building optimal block templates any easier? What are they doing that the miner themselves cannot?</li>\n</ul>\n<p>(btw I am aware of the knapsack problem arguments and have validated it myself in private research, but I think it\u2019s worth going beyond a passing mention about it to justify forking for it to people unfamiliar with the problem.)</p>\n<p>Taking a step back: maybe the news article about the miners agreeing to enable the larger BitVM-related txs was only the spark for this idea that is actually intended to address a larger concern, but as far as the BitVM-related txs are concerned, I want to point out that these large nonstandard txs only need to go onchain in the (expected to be<sup class=\"footnote-ref\"><a href=\"#footnote-5163-1\" id=\"footnote-ref-5163-1\">[1]</a></sup>) rare case that a bridge operator actually tries to submit an incorrect claim, is challenged, and finally has their response to the challenge (the \u201cassertion\u201d) disproven. It is the <code>disprove</code> transaction that tends to be the large nonstandard tx, and it is the last tx in the challenge-response game that needs to be put onchain.<sup class=\"footnote-ref\"><a href=\"#footnote-5163-2\" id=\"footnote-ref-5163-2\">[2]</a></sup></p>\n<p>I mention this about BitVM to ask: how common have &gt;100 KB txs actually been, and how common do we anticipate them to be in the future? Enough to harm mining enough that a soft fork is warranted? At least as far as BitVM is concerned, imo we have nothing to worry about there: even if such txs do end up needed, they will be infrequent enough that their impact on block construction will be negligible.</p>\n<hr class=\"footnotes-sep\">\n\n<ol class=\"footnotes-list\">\n<li id=\"footnote-5163-1\" class=\"footnote-item\"><p>I say it is \u201cexpected to be\u201d rare because the bridge operator is heavily disincentivized from putting an incorrect claim onchain, let alone getting so far into the challenge-response process that their assertion is disproven: the bridge operator must put up collateral (currently in the range of multiple BTC) to make a claim, and if their claim is incorrect, this entire collateral could be seized from the operator, and if seized then part of it will be burned to prevent them from profiting by disproving themselves. <a href=\"#footnote-ref-5163-1\" class=\"footnote-backref\">\u21a9\ufe0e</a></p>\n</li>\n<li id=\"footnote-5163-2\" class=\"footnote-item\"><p>This description is only applicable to <a href=\"https://bitvm.org/bitvm_bridge.pdf\" rel=\"noopener nofollow ugc\">BitVM2</a> implementations. <a href=\"#footnote-ref-5163-2\" class=\"footnote-backref\">\u21a9\ufe0e</a></p>\n</li>\n</ol>",
  "post_number": 6,
  "post_type": 1,
  "posts_count": 9,
  "updated_at": "2025-05-30T15:47:03.686Z",
  "reply_count": 2,
  "reply_to_post_number": 5,
  "quote_count": 2,
  "incoming_link_count": 5,
  "reads": 45,
  "readers_count": 44,
  "score": 43.8,
  "yours": false,
  "topic_id": 1732,
  "topic_slug": "non-confiscatory-transaction-weight-limit",
  "topic_title": "Non-confiscatory Transaction Weight Limit",
  "topic_html_title": "Non-confiscatory Transaction Weight Limit",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"vostrnad, post:5, topic:1732\"]\nIf they only needed to store data they could easily split it across multiple smaller transactions.\n[/quote]\n\nThis is not strictly true; recall that in the case of the watchtower light-client protocol that ignited the recent OP_RETURN debate, the issue is that the protocol _needs_ to embed 144 bytes _in a single transaction_. Although I am not aware of any protocol that _needs_ to embed >100 kvB in a single tx, this example goes to show that we cannot assume that even in the simple _data storage_ case that it is sufficient to use multiple txs.\n\n[quote=\"vostrnad, post:1, topic:1732\"]\nThe other primary benefit is that it makes building more optimal block templates easier, reducing the need for centralized template providers.\n[/quote]\n\nI will note that since, as you say, \"the [Consensus Cleanup](https://github.com/bitcoin/bips/blob/72af87fc72999e3f0a26a06e6e0a7f3134236337/bip-0054.md) proposal already addresses\" the first rationale for your proposal, that this is the only rationale you have left to support this proposal. Therefore I think it's worth interrogating this further rather than accepting it as a given:\n\n- How much \"easier\" does the current policy limit make building optimal block templates, exactly? (Assuming txs actually comply with the limit.)\n- How do you quantify how much easier the rule makes building optimal block templates?\n- How would a centralized template provider make building optimal block templates any easier? What are they doing that the miner themselves cannot?\n\n(btw I am aware of the knapsack problem arguments and have validated it myself in private research, but I think it's worth going beyond a passing mention about it to justify forking for it to people unfamiliar with the problem.)\n\nTaking a step back: maybe the news article about the miners agreeing to enable the larger BitVM-related txs was only the spark for this idea that is actually intended to address a larger concern, but as far as the BitVM-related txs are concerned, I want to point out that these large nonstandard txs only need to go onchain in the (expected to be[^1]) rare case that a bridge operator actually tries to submit an incorrect claim, is challenged, and finally has their response to the challenge (the \"assertion\") disproven. It is the `disprove` transaction that tends to be the large nonstandard tx, and it is the last tx in the challenge-response game that needs to be put onchain.[^2]\n\nI mention this about BitVM to ask: how common have >100 KB txs actually been, and how common do we anticipate them to be in the future? Enough to harm mining enough that a soft fork is warranted? At least as far as BitVM is concerned, imo we have nothing to worry about there: even if such txs do end up needed, they will be infrequent enough that their impact on block construction will be negligible.\n\n[^1]: I say it is \"expected to be\" rare because the bridge operator is heavily disincentivized from putting an incorrect claim onchain, let alone getting so far into the challenge-response process that their assertion is disproven: the bridge operator must put up collateral (currently in the range of multiple BTC) to make a claim, and if their claim is incorrect, this entire collateral could be seized from the operator, and if seized then part of it will be burned to prevent them from profiting by disproving themselves.\n\n[^2]: This description is only applicable to [BitVM2](https://bitvm.org/bitvm_bridge.pdf) implementations.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 289,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "This is not strictly true; recall that in the case of the watchtower light-client protocol that ignited the recent OP_RETURN debate, the issue is that the protocol needs to embed 144 bytes in a single transaction. Although I am not aware of any protocol that needs to embed &gt;100 kvB in a single tx, &hellip;",
  "truncated": true,
  "post_url": "/t/non-confiscatory-transaction-weight-limit/1732/6",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}