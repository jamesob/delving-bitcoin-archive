{
  "id": 5086,
  "name": "David Gumberg",
  "username": "davidgumberg",
  "avatar_template": "/user_avatar/delvingbitcoin.org/davidgumberg/{size}/378_2.png",
  "created_at": "2025-05-22T02:55:46.428Z",
  "cooked": "<blockquote>\n<p>The issues it has are several fold: it\u2019s part of the compact block message so it blocks reception of the compact block in cases where it wasn\u2019t needed. Peers also get compact blocks from multiple sources and so if they all use prefill then you waste N fold the bandwidth (or N-1 if one was indeed helpful). And then of course the extra data stuffs you further back into needing RTTs, thanks to window issues.</p>\n<p>Then of course you have the issue that many missed transactions are missed because they were too large, which makes all the above issues much worse.</p>\n</blockquote>\n<p>I agree that in the extreme case, prefilling will not be helpful. But I\u2019m optimistic that prefilling up to the TCP congestion window (no extra RTT) is not harmful. It seems reasonable to presume that, in general, a node\u2019s operating system\u2019s congestion control algorithm will reliably predict the maximum message that can be sent to a peer without incurring an extra round trip, and nodes with slow connections will tend to also have small windows, mitigating the redundant prefill cost. If it works as I understand, it seems like using the cwnd will scale nicely up and down with connection speeds, and offloads the engineering burden of this problem to kernel developers and the IETF.</p>\n<p>It seems worth measuring what the typical sizes of compact block <code>BLOCKTXN</code> fulfillments are. I\u2019ve made a branch that might help with this: (<a href=\"https://github.com/bitcoin/bitcoin/pull/32582\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">log: Additional compact block logging by davidgumberg \u00b7 Pull Request #32582 \u00b7 bitcoin/bitcoin \u00b7 GitHub</a>). It would also be useful to have some data on bitcoin node congestion windows sizes, and if these are close to each other in size, compact block reconstruction failures don\u2019t go away, but conservatively prefilling might make them less frequent while incurring little additional cost.</p>\n<blockquote>\n<p>A lot of thing have happened since then, core has minisketch merged (though unused), and using that kind of tool I was able to get blocks in consistently 800-ish bytes before. A big reduction in compact block size would leave a lot of room for data to fill in missing transactions.</p>\n</blockquote>\n<p>Great idea, I see that on my node compact block messages hover around ~20kB, 800 bytes would leave a lot more overhead for prefills!</p>",
  "post_number": 31,
  "post_type": 1,
  "posts_count": 32,
  "updated_at": "2025-05-22T02:56:14.741Z",
  "reply_count": 0,
  "reply_to_post_number": 30,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 24,
  "readers_count": 23,
  "score": 9.8,
  "yours": false,
  "topic_id": 1052,
  "topic_slug": "stats-on-compact-block-reconstructions",
  "topic_title": "Stats on compact block reconstructions",
  "topic_html_title": "Stats on compact block reconstructions",
  "category_id": 7,
  "display_username": "David Gumberg",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 699,
    "username": "gmaxwell",
    "name": "",
    "avatar_template": "/letter_avatar_proxy/v4/letter/g/fbc32d/{size}.png"
  },
  "bookmarked": false,
  "raw": "> The issues it has are several fold: it\u2019s part of the compact block message so it blocks reception of the compact block in cases where it wasn\u2019t needed. Peers also get compact blocks from multiple sources and so if they all use prefill then you waste N fold the bandwidth (or N-1 if one was indeed helpful). And then of course the extra data stuffs you further back into needing RTTs, thanks to window issues.\n>\n>Then of course you have the issue that many missed transactions are missed because they were too large, which makes all the above issues much worse.\n\nI agree that in the extreme case, prefilling will not be helpful. But I'm optimistic that prefilling up to the TCP congestion window (no extra RTT) is not harmful. It seems reasonable to presume that, in general, a node's operating system's congestion control algorithm will reliably predict the maximum message that can be sent to a peer without incurring an extra round trip, and nodes with slow connections will tend to also have small windows, mitigating the redundant prefill cost. If it works as I understand, it seems like using the cwnd will scale nicely up and down with connection speeds, and offloads the engineering burden of this problem to kernel developers and the IETF. \n\nIt seems worth measuring what the typical sizes of compact block `BLOCKTXN` fulfillments are. I've made a branch that might help with this: (https://github.com/bitcoin/bitcoin/pull/32582). It would also be useful to have some data on bitcoin node congestion windows sizes, and if these are close to each other in size, compact block reconstruction failures don't go away, but conservatively prefilling might make them less frequent while incurring little additional cost.\n\n> A lot of thing have happened since then, core has minisketch merged (though unused), and using that kind of tool I was able to get blocks in consistently 800-ish bytes before. A big reduction in compact block size would leave a lot of room for data to fill in missing transactions. \n\nGreat idea, I see that on my node compact block messages hover around ~20kB, 800 bytes would leave a lot more overhead for prefills!",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 315,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "The issues it has are several fold: it\u2019s part of the compact block message so it blocks reception of the compact block in cases where it wasn\u2019t needed. Peers also get compact blocks from multiple sources and so if they all use prefill then you waste N fold the bandwidth (or N-1 if one was indeed he&hellip;",
  "truncated": true,
  "post_url": "/t/stats-on-compact-block-reconstructions/1052/31",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}