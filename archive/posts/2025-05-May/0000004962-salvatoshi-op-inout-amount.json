{
  "id": 4962,
  "name": "salvatoshi",
  "username": "salvatoshi",
  "avatar_template": "/user_avatar/delvingbitcoin.org/salvatoshi/{size}/72_2.png",
  "created_at": "2025-05-08T14:09:29.385Z",
  "cooked": "<p>Hi Chris,</p>\n<p>Thanks for exploring the combination of amount opcodes with covenant opcodes - I think it\u2019s interesting and there is some potential synergy.</p>\n<p>However, I think removing the amount semantic from <code>CCV</code> (or <code>VAULT</code>) is problematic.</p>\n<ol>\n<li>It only works for cases where the structure of the transaction (that is, \u201cwhat inputs will be spent together\u201d) is known in advance and can be hardcoded in Script. This might be true for some use cases, but is certainly false for ergonomic vaults. You might receive a number of transactions to a vault address, and then at spending time (<em>trigger</em> transaction) you\u2019ll want to select which of the vault UTXOs you want use as part of the withdrawal. The number and the position of those UTXOs can\u2019t be known in advance when their script is defined. In order to avoid having to hardcode these bitmaps, you\u2019d need some cross-input logic to somehow make sure that all those inputs are using compatible bitmaps. I believe this is in fact the most interesting part of the amount logic of <code>CCV</code> (inspired from <code>VAULT</code> rather than from the original applications of <code>CCV</code> to MATT and fraud proofs). To the best of my understanding, this is not implemented in your demo.</li>\n<li>Assuming that a clean solution to (1) is found, since all the related inputs that are being aggregated need to have a matching bitmap, the trivial implementation would require to report this same bitmap for all the inputs. This has <span class=\"math\">O(n^2)</span> cost both in terms of space occupation and computational cost. While <span class=\"math\">O(n^2)</span> bits and <span class=\"math\">O(n^2)</span> additions might not be a huge deal for many common use cases, it seems rather unsatisfactory to do in <span class=\"math\">O(n^2)</span> cost something that can be done optimally in <span class=\"math\">O(n)</span> cost. Without a real, embedded cross-input logic, the only way to achieve the optimal <span class=\"math\">O(n)</span> cost seems to be something like <a href=\"https://brqgoo.medium.com/emulating-op-vault-with-elements-opcodes-bdc7d8b0fe71\" rel=\"noopener nofollow ugc\">this demo from burak</a> <small>(TL;DR: one special input performs all the amount checks, while the other inputs merely check the presence of the special input)</small>, which is not exactly ergonomic.</li>\n</ol>\n<p>More generally, any covenant opcode that constrains the destination seems to be pointless if the covenant opcode itself doesn\u2019t <em>also</em> enforce the <em>presence</em> of the amount logic, whether embedded in the same opcode or enforced via some other mechanism. This is something I also <a href=\"https://delvingbitcoin.org/t/op-checkcontractverify-and-its-amount-semantic/1527/7\">commented about darosior\u2019s approach using the annex</a>, and I strongly believe that some amount of redundancy is unavoidable for any mechanism that extracts the amount logic out of the covenant opcode.</p>\n<p>Because of these reasons, I\u2019m not convinced that ejecting the amount logic leads to improved outcomes or better scripts.</p>\n<p>Note that I believe that opcodes like <code>OP_OUT_AMOUNT</code> would be very useful in combination with <code>OP_CCV</code>, particularly with the <code>DEDUCT</code> mode: by simply having equality checks for outputs, one could avoid explicit arithmetic over 64-bit amounts in a Script that performs a withdrawal of one or several users from a shared UTXO.</p>\n<p><code>OP_IN_AMOUNT</code> and 64-bit arithmetic might of course also be useful for some applications - for example to implement constructions with velocity limits.</p>",
  "post_number": 6,
  "post_type": 1,
  "posts_count": 8,
  "updated_at": "2025-05-08T14:09:29.385Z",
  "reply_count": 1,
  "reply_to_post_number": 5,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 6,
  "readers_count": 5,
  "score": 6.2,
  "yours": false,
  "topic_id": 549,
  "topic_slug": "op-inout-amount",
  "topic_title": "Op_inout_amount",
  "topic_html_title": "Op_inout_amount",
  "category_id": 7,
  "display_username": "salvatoshi",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "Chris_Stewart_5",
    "name": "Chris Stewart",
    "avatar_template": "/user_avatar/delvingbitcoin.org/chris_stewart_5/{size}/296_2.png"
  },
  "bookmarked": false,
  "raw": "Hi Chris,\n\nThanks for exploring the combination of amount opcodes with covenant opcodes - I think it's interesting and there is some potential synergy.\n\nHowever, I think removing the amount semantic from `CCV` (or `VAULT`) is problematic.\n\n1. It only works for cases where the structure of the transaction (that is, \"what inputs will be spent together\") is known in advance and can be hardcoded in Script. This might be true for some use cases, but is certainly false for ergonomic vaults. You might receive a number of transactions to a vault address, and then at spending time (*trigger* transaction) you'll want to select which of the vault UTXOs you want use as part of the withdrawal. The number and the position of those UTXOs can't be known in advance when their script is defined. In order to avoid having to hardcode these bitmaps, you'd need some cross-input logic to somehow make sure that all those inputs are using compatible bitmaps. I believe this is in fact the most interesting part of the amount logic of `CCV` (inspired from `VAULT` rather than from the original applications of `CCV` to MATT and fraud proofs). To the best of my understanding, this is not implemented in your demo.\n2. Assuming that a clean solution to (1) is found, since all the related inputs that are being aggregated need to have a matching bitmap, the trivial implementation would require to report this same bitmap for all the inputs. This has $O(n^2)$ cost both in terms of space occupation and computational cost. While $O(n^2)$ bits and $O(n^2)$ additions might not be a huge deal for many common use cases, it seems rather unsatisfactory to do in $O(n^2)$ cost something that can be done optimally in $O(n)$ cost. Without a real, embedded cross-input logic, the only way to achieve the optimal $O(n)$ cost seems to be something like [this demo from burak](https://brqgoo.medium.com/emulating-op-vault-with-elements-opcodes-bdc7d8b0fe71) <small>(TL;DR: one special input performs all the amount checks, while the other inputs merely check the presence of the special input)</small>, which is not exactly ergonomic.\n\nMore generally, any covenant opcode that constrains the destination seems to be pointless if the covenant opcode itself doesn't _also_ enforce the *presence* of the amount logic, whether embedded in the same opcode or enforced via some other mechanism. This is something I also [commented about darosior's approach using the annex](https://delvingbitcoin.org/t/op-checkcontractverify-and-its-amount-semantic/1527/7?u=salvatoshi), and I strongly believe that some amount of redundancy is unavoidable for any mechanism that extracts the amount logic out of the covenant opcode.\n\nBecause of these reasons, I'm not convinced that ejecting the amount logic leads to improved outcomes or better scripts.\n\nNote that I believe that opcodes like `OP_OUT_AMOUNT` would be very useful in combination with `OP_CCV`, particularly with the `DEDUCT` mode: by simply having equality checks for outputs, one could avoid explicit arithmetic over 64-bit amounts in a Script that performs a withdrawal of one or several users from a shared UTXO.\n\n`OP_IN_AMOUNT` and 64-bit arithmetic might of course also be useful for some applications - for example to implement constructions with velocity limits.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 81,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Hi Chris, \nThanks for exploring the combination of amount opcodes with covenant opcodes - I think it\u2019s interesting and there is some potential synergy. \nHowever, I think removing the amount semantic from CCV (or VAULT) is problematic. \n\nIt only works for cases where the structure of the transaction &hellip;",
  "truncated": true,
  "post_url": "/t/op-inout-amount/549/6",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}