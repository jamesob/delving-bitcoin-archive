{
  "id": 5059,
  "name": "Chris Guida",
  "username": "cguida",
  "avatar_template": "/letter_avatar_proxy/v4/letter/c/87869e/{size}.png",
  "created_at": "2025-05-20T17:29:56.874Z",
  "cooked": "<p>Hi Antoine -</p>\n<p>Thanks for engaging the community in what appears to be a good-faith effort to address its concerns.</p>\n<p>I can\u2019t speak for everyone who is against raising opreturn limits, but here are my thoughts:</p>\n<blockquote>\n<p>First, it is possible to store data onchain in larger <code>OP_RETURN</code> outputs than allowed by Bitcoin Core standardness limits by using <a href=\"https://slipstream.mara.com\" rel=\"noopener nofollow ugc\">private bridges</a> or <a href=\"https://github.com/petertodd/bitcoin/tree/libre-relay-v29.0\" rel=\"noopener nofollow ugc\">alternative p2p relay</a> networks.</p>\n</blockquote>\n<p>Of course it is. This doesn\u2019t mean the filters aren\u2019t working. \u201cFilters working\u201d means that filters raise the cost of getting abusive transactions confirmed. The notion that filters don\u2019t work because a transaction that pays 10x the normal rate occasionally slips through is a silly strawman. Spam filters have never been perfect; your email provider most likely filters spam, and I guarantee you are happy with keeping the filter even though an occasional spam email ends up in your inbox.</p>\n<blockquote>\n<p>However, those require relying on a central point of failure or a not as robust p2p relay network. These may be acceptable options for people willing to store arbitrary data, but not for time-sensitive transactions as typically used by Bitcoin scaling solutions. Developers of such solutions want to be able to broadcast their time-sensitive transactions through the public network of Core nodes because of the robustness and censorship resistance guarantees it provides.</p>\n</blockquote>\n<p>Bitcoin noderunners are not obligated to bend over backwards to accommodate dubious \u201cscaling solutions\u201d like Citrea. If they would like to be able to use our peer network to get their transactions confirmed in a timely manner, they can do what everyone else does and make their data fit into 80 bytes. If they cannot do this, then that\u2019s not <em>our</em> problem; that\u2019s <em>their</em> problem. If they go ahead and put their data into fake pubkeys, then they are using bitcoin in a way that users have not consented for it to be used, and should expect such transactions to be aggressively filtered.</p>\n<blockquote>\n<p>In any case, the limit is not preventing those new applications from relaying their transactions through the public network. They just modify their transactions and use fake public keys instead. This method gives them standard transactions, but forces all Bitcoin users to store those outputs in the UTxO set forever because they are not spendable. This is why i suggested removing the limit, since they are going to store the data anyways just in a more harmful manner.</p>\n</blockquote>\n<p>As I and many others have pointed out repeatedly, \u201csave the utxoset\u201d is a fake motivation. You are being dishonest here, and it would be great if you could come clean about what your real motivation is. Citrea\u2019s abusive watchtower challenge transactions are expected <em>never</em> to occur. The worst-case scenario is a few hundred bytes per year.  If you and other core devs pushing to remove opreturn limits <em>really</em> cared about utxoset bloat, you would lift a pinky to merge <a href=\"https://github.com/bitcoin/bitcoin/pull/28408\" rel=\"noopener nofollow ugc\">Luke\u2019s anti-inscriptions PR</a> which, if it had been merged at the time it was submitted, would have prevented the utxoset from tripling from 4GB to 12GB in the space of two years. Now we\u2019re supposed to believe that suddenly core maintainers care about utxoset bloat because you\u2019re worried about a few hundred bytes per year, when you <em>still</em> haven\u2019t fixed the bug that allowed 8GB of new utxoset bloat (and might add another 8GB in the next two years)? Please forgive me for not taking this rationale seriously. Bitcoin users are sometimes dumb, but we\u2019re not <em>that</em> dumb.</p>\n<p>Raising the opreturn limit from 80 bytes to 100000 bytes is a cure 1000x worse than the disease it purports to solve (but does not actually solve). Sure, at the end of 2026 the utxoset might be an eensy-weensy bit smaller, but bitcoin will be overrun with shitcoin scams that crowd out real economic activity.</p>\n<blockquote>\n<p>Therefore, the two are compatible. The limit does not prevent storing arbitrary data <em>by relying on a third party</em>. The limit does prevent applications from storing data through <code>OP_RETURN</code>s <em>and also use the public relay network</em>. Therefore the applications turn to still relaying through the public network, but to do so they use a more harmful way of storing the data than <code>OP_RETURN</code> outputs (namely, unspendable outputs).</p>\n</blockquote>\n<p>Again, this is Citrea\u2019s problem, not the bitcoin network\u2019s problem. If they can\u2019t find a way to build their application in a way that bitcoin users consent to (ie, by fitting their arb data into 80 bytes), then they should build on a different blockchain, or build something else. It is not up to bitcoiners to accommodate random VC-funded scamcoin rollups.</p>\n<blockquote>\n<p>What we believe an application may or may not need is irrelevant</p>\n</blockquote>\n<p>No it isn\u2019t. Bitcoin is money, and should be used as such. It should not be used as a [practically-]free-forever personal file storage service. Bitcoin should not cater to non-monetary usages, because it will quickly be overrun by scams and crowd out real economic activity from honest merchants just trying to start a Lightning node.</p>\n<p>If an application fits its arbitrary data into 80 bytes, then it can do whatever it likes, as long as it doesn\u2019t crowd out legitimate economic activity (Runes are a notable exception, where their data fits into 40 bytes but crowds out legitimate activity). If it doesn\u2019t, then it needs the bitcoin user network\u2019s consent. Citrea has not gotten our consent and has <em>not even asked for it</em>. This is a hostile action, no matter how you spin it. We should not be kowtowing to scammers who threaten to harm bitcoin, by giving them whatever they want. This is a surefire way for bitcoin to become irrelevant in short order.</p>\n<blockquote>\n<p>I would personally disagree that a zero-knowledge proof (in the case of Citrea) for a Bitcoin scaling solution is \u201cspam\u201d.</p>\n</blockquote>\n<p>I agree that it\u2019s not that harmful and we should not make any changes to the protocol, except socially ostracize Citrea and anyone involved. It is only fair that if you treat bitcoin with hostility, bitcoiners should treat you accordingly.</p>\n<blockquote>\n<p>Now, what is qualified as \u201cspam\u201d does end up in the chain anyways.</p>\n</blockquote>\n<p>This is not relevant. The vast majority of potential spam never happens, because there are filters in place that reduce economic demand for such transactions, so people either make their transactions fit into bitcoin\u2019s mempool policy, or they spam other chains. Yes, occasionally a spammer will put his transaction into the chain by relaying it directly to a miner, but this is usually very costly because of robust mempool filtering.</p>\n<blockquote>\n<p>Preventing \u201cpublic key stuffing\u201d is not on the table</p>\n</blockquote>\n<p>I have no idea why anyone would think this. Luke-jr gave a <a href=\"https://youtu.be/J9bRVIXOhm0?t=12555\" rel=\"noopener nofollow ugc\">workshop at bitcoin++</a> demonstrating how to filter Citrea\u2019s watchtower challenge transactions. As long as the transaction format is known (and it <em>must</em> be known in order for anyone to use the spammy metaprotocol), a filter that blocks it can trivially be made. Yes, Citrea could have been more sneaky about hiding their data, but we can just make a filter that blocks that, too. If Citrea treats us with hostility, we can trivially make it so their whole protocol falls apart because these watchtower transactions don\u2019t quickly confirm. It will not be easy for hostile VC-funded apps like Citrea to get investor funding in the first place unless they work <em>with</em> us instead of forcing their apps on bitcoin users.</p>\n<blockquote>\n<p>People won\u2019t move from using fake pubkeys to op_return to be nice to us is ludicrous because it\u2019d cost them 4x more. This is just bluff to kill the filters.</p>\n</blockquote>\n<p>Yes, it\u2019s incorrect that opreturn is 4x more expensive than fake pubkeys, but it\u2019s <em>not</em> incorrect in that it\u2019s silly to expect hostile companies like Citrea to simply rewrite their protocol to use opreturns because they\u2019re \u201cgood citizens\u201d or something. They\u2019ve literally just proven that they are the opposite. If they said \u201chey bitcoin community, we\u2019re building something we think is really important for bitcoin and will benefit the ecosystem a lot, would you consider raising the opreturn limit to 145 bytes?\u201d, then that would not have caused such a backlash. The reason they didn\u2019t do it is probably because they are not confident their product would be useful to bitcoin in any way, so they knew it would be a tough sell. (I\u2019m certainly not convinced.) So they went the sneaky backdoor way instead.</p>\n<blockquote>\n<p>This is why we need to act now, to make the less harmful option available before such applications are deployed.</p>\n</blockquote>\n<p>No, we really don\u2019t. Again, <em>persuade bitcoiners that what you\u2019re doing is going to impact us positively</em>. If you can\u2019t do this, then go away! (Ethereum is <em>right there</em>!)</p>\n<blockquote>\n<p>Transactions can already carry large payloads of data. Transactions pay a fee once, regardless of how long they are stored. Transactions are always stored forever by unpruned nodes. The proposed change does not affect this.</p>\n</blockquote>\n<p>What this ignores is that non-arbitrary data (data relevant to utxo transfer) is <em>priceless</em> to the bitcoin network because it is always relevant forever, because new nodes will always need to sync the blockchain from genesis in order to fully join the network. This is why we store utxo-ownership-transfer-relevant data <em>for the rest of eternity</em> - because if we didn\u2019t, bitcoin would simply not function. So there\u2019s a <em>huge cost</em> to storing this data, but also a <em>huge benefit</em>.</p>\n<p>Conversely, arbitrary data carries no such benefit. It is forgotten almost immediately. In ten, or a hundred, or a million years, everyone you know will be dead, and all nuclear waste will be safely broken down, but everyone\u2019s brc20 scamtokens will still be in the blockchain. The differential benefits between arbitrary data and non-arbitrary data are <em>incalculably massive</em>, so we must bias bitcoin toward non-arbitrary data, so bitcoin doesn\u2019t collect so much garbage that it collapses under its own weight.</p>\n<blockquote>\n<p>Relaying larger <code>OP_RETURN</code> outputs on the public network may marginally reduce the cost of using them. However the data stored in <code>OP_RETURN</code> outputs cost 4 times as much as data stuffed in an input witness, which is standard today and already relayed on the public network.</p>\n</blockquote>\n<p>Yes, and this is a bug that should be fixed. The bitcoin network has agreed to 80 bytes of arbitrary data per transaction. Inscriptions larger than that do not have the consent of the bitcoin network.</p>\n<blockquote>\n<p>Boiling frog: Core developers are trying to gradually make Bitcoin a universal database instead of just money, one step at a time.</p>\n</blockquote>\n<p>I don\u2019t think there\u2019s any such conspiracy, but I do think the economic incentives created by fiat money push all truly disruptive movements eventually towards watering down and irrelevance. It\u2019s hard to think of a better way to do this to bitcoin than to have bitcoiners forget that bitcoin is money, and instead convince them that it\u2019s a database with no particular purpose.</p>\n<blockquote>\n<p>Core is trying to accommodate the Taproot Wizards who are a self-declared attack on Bitcoin which tries to corrupt the ecosystem.</p>\n</blockquote>\n<p>Are Taproot Wizards and Citrea linked? I wasn\u2019t aware.</p>\n<p>Anyway I already addressed this; I don\u2019t think the accommodation is necessarily intentional on the part of core devs; I just think that core devs are no longer willing to act with courage and tell companies with large VC-funded purses to get lost.</p>\n<blockquote>\n<p>Raising UTxO bloat as a concern is ironic when considering applications like Citrea may only cause trivial amount of bloat while inscriptions, which Core refuses to filter, are responsible for over 8 GiB of bloat in the past couple of years.</p>\n</blockquote>\n<blockquote>\n<p>This is confusing UTxO set usage and UTxO set bloat. While there is no normative language for Bitcoin concepts, the latter usually refers to <strong>forever unspendable</strong> outputs. No matter what we do those outputs will sit forever in every single user\u2019s UTxO set. Spendable outputs, even if uneconomical to spend, can always be swept by someone incentivized out of band or a good samaritan (as was done in the past).</p>\n</blockquote>\n<p>Are you hearing yourself right now? You\u2019re not seriously trying to argue that 8GB of new utxoset bloat, created by brc20s that are <em>NEVER, EVER</em> going to be spent, are somehow less harmful than Citrea\u2019s \u201cdefinitely unspendable\u201d fake pubkeys, even though such txs have caused precisely 0 bloat so far, and are not expected to cause more than a few hundred bytes per year?? Come on, man, stop being silly.</p>\n<p>Utxoset bloat appears to have been fixed in libbitcoin\u2019s most recent unreleased version anyway, so I\u2019m much less concerned by utxoset bloat, and much more concerned by high-fee spam that crowds out legitimate spends, which is what removing the opreturn limits will DEFINITELY incentivize.</p>\n<p>Anyway, I don\u2019t have the time or inclination to respond to your whole post, but I think the above suffices to communicate my understanding of the opposition to removing the opreturn limits.</p>",
  "post_number": 2,
  "post_type": 1,
  "posts_count": 5,
  "updated_at": "2025-05-20T17:29:56.874Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 183,
  "reads": 41,
  "readers_count": 40,
  "score": 927.8,
  "yours": false,
  "topic_id": 1697,
  "topic_slug": "addressing-community-concerns-and-objections-regarding-my-recent-proposal-to-relax-bitcoin-cores-standardness-limits-on-op-return-outputs",
  "topic_title": "Addressing community concerns and objections regarding my recent proposal to relax Bitcoin Core's standardness limits on OP_RETURN outputs",
  "topic_html_title": "Addressing community concerns and objections regarding my recent proposal to relax Bitcoin Core&rsquo;s standardness limits on OP_RETURN outputs",
  "category_id": 5,
  "display_username": "Chris Guida",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Hi Antoine - \n\nThanks for engaging the community in what appears to be a good-faith effort to address its concerns.\n\nI can't speak for everyone who is against raising opreturn limits, but here are my thoughts:\n\n> First, it is possible to store data onchain in larger `OP_RETURN` outputs than allowed by Bitcoin Core standardness limits by using [private bridges](https://slipstream.mara.com) or [alternative p2p relay](https://github.com/petertodd/bitcoin/tree/libre-relay-v29.0) networks.\n\nOf course it is. This doesn't mean the filters aren't working. \"Filters working\" means that filters raise the cost of getting abusive transactions confirmed. The notion that filters don't work because a transaction that pays 10x the normal rate occasionally slips through is a silly strawman. Spam filters have never been perfect; your email provider most likely filters spam, and I guarantee you are happy with keeping the filter even though an occasional spam email ends up in your inbox.\n\n>However, those require relying on a central point of failure or a not as robust p2p relay network. These may be acceptable options for people willing to store arbitrary data, but not for time-sensitive transactions as typically used by Bitcoin scaling solutions. Developers of such solutions want to be able to broadcast their time-sensitive transactions through the public network of Core nodes because of the robustness and censorship resistance guarantees it provides.\n\nBitcoin noderunners are not obligated to bend over backwards to accommodate dubious \"scaling solutions\" like Citrea. If they would like to be able to use our peer network to get their transactions confirmed in a timely manner, they can do what everyone else does and make their data fit into 80 bytes. If they cannot do this, then that's not *our* problem; that's *their* problem. If they go ahead and put their data into fake pubkeys, then they are using bitcoin in a way that users have not consented for it to be used, and should expect such transactions to be aggressively filtered.\n\n>In any case, the limit is not preventing those new applications from relaying their transactions through the public network. They just modify their transactions and use fake public keys instead. This method gives them standard transactions, but forces all Bitcoin users to store those outputs in the UTxO set forever because they are not spendable. This is why i suggested removing the limit, since they are going to store the data anyways just in a more harmful manner.\n\nAs I and many others have pointed out repeatedly, \"save the utxoset\" is a fake motivation. You are being dishonest here, and it would be great if you could come clean about what your real motivation is. Citrea's abusive watchtower challenge transactions are expected *never* to occur. The worst-case scenario is a few hundred bytes per year.  If you and other core devs pushing to remove opreturn limits *really* cared about utxoset bloat, you would lift a pinky to merge [Luke's anti-inscriptions PR](https://github.com/bitcoin/bitcoin/pull/28408) which, if it had been merged at the time it was submitted, would have prevented the utxoset from tripling from 4GB to 12GB in the space of two years. Now we're supposed to believe that suddenly core maintainers care about utxoset bloat because you're worried about a few hundred bytes per year, when you *still* haven't fixed the bug that allowed 8GB of new utxoset bloat (and might add another 8GB in the next two years)? Please forgive me for not taking this rationale seriously. Bitcoin users are sometimes dumb, but we're not *that* dumb.\n\nRaising the opreturn limit from 80 bytes to 100000 bytes is a cure 1000x worse than the disease it purports to solve (but does not actually solve). Sure, at the end of 2026 the utxoset might be an eensy-weensy bit smaller, but bitcoin will be overrun with shitcoin scams that crowd out real economic activity.\n\n> Therefore, the two are compatible. The limit does not prevent storing arbitrary data *by relying on a third party*. The limit does prevent applications from storing data through `OP_RETURN`s *and also use the public relay network*. Therefore the applications turn to still relaying through the public network, but to do so they use a more harmful way of storing the data than `OP_RETURN` outputs (namely, unspendable outputs).\n\nAgain, this is Citrea's problem, not the bitcoin network's problem. If they can't find a way to build their application in a way that bitcoin users consent to (ie, by fitting their arb data into 80 bytes), then they should build on a different blockchain, or build something else. It is not up to bitcoiners to accommodate random VC-funded scamcoin rollups.\n\n>What we believe an application may or may not need is irrelevant\n\nNo it isn't. Bitcoin is money, and should be used as such. It should not be used as a [practically-]free-forever personal file storage service. Bitcoin should not cater to non-monetary usages, because it will quickly be overrun by scams and crowd out real economic activity from honest merchants just trying to start a Lightning node.\n\nIf an application fits its arbitrary data into 80 bytes, then it can do whatever it likes, as long as it doesn't crowd out legitimate economic activity (Runes are a notable exception, where their data fits into 40 bytes but crowds out legitimate activity). If it doesn't, then it needs the bitcoin user network's consent. Citrea has not gotten our consent and has *not even asked for it*. This is a hostile action, no matter how you spin it. We should not be kowtowing to scammers who threaten to harm bitcoin, by giving them whatever they want. This is a surefire way for bitcoin to become irrelevant in short order.\n\n>I would personally disagree that a zero-knowledge proof (in the case of Citrea) for a Bitcoin scaling solution is \u201cspam\u201d.\n\nI agree that it's not that harmful and we should not make any changes to the protocol, except socially ostracize Citrea and anyone involved. It is only fair that if you treat bitcoin with hostility, bitcoiners should treat you accordingly.\n\n>Now, what is qualified as \u201cspam\u201d does end up in the chain anyways.\n\nThis is not relevant. The vast majority of potential spam never happens, because there are filters in place that reduce economic demand for such transactions, so people either make their transactions fit into bitcoin's mempool policy, or they spam other chains. Yes, occasionally a spammer will put his transaction into the chain by relaying it directly to a miner, but this is usually very costly because of robust mempool filtering.\n\n>Preventing \u201cpublic key stuffing\u201d is not on the table\n\nI have no idea why anyone would think this. Luke-jr gave a [workshop at bitcoin++](https://youtu.be/J9bRVIXOhm0?t=12555) demonstrating how to filter Citrea's watchtower challenge transactions. As long as the transaction format is known (and it *must* be known in order for anyone to use the spammy metaprotocol), a filter that blocks it can trivially be made. Yes, Citrea could have been more sneaky about hiding their data, but we can just make a filter that blocks that, too. If Citrea treats us with hostility, we can trivially make it so their whole protocol falls apart because these watchtower transactions don't quickly confirm. It will not be easy for hostile VC-funded apps like Citrea to get investor funding in the first place unless they work *with* us instead of forcing their apps on bitcoin users.\n\n> People won\u2019t move from using fake pubkeys to op_return to be nice to us is ludicrous because it\u2019d cost them 4x more. This is just bluff to kill the filters.\n\nYes, it's incorrect that opreturn is 4x more expensive than fake pubkeys, but it's *not* incorrect in that it's silly to expect hostile companies like Citrea to simply rewrite their protocol to use opreturns because they're \"good citizens\" or something. They've literally just proven that they are the opposite. If they said \"hey bitcoin community, we're building something we think is really important for bitcoin and will benefit the ecosystem a lot, would you consider raising the opreturn limit to 145 bytes?\", then that would not have caused such a backlash. The reason they didn't do it is probably because they are not confident their product would be useful to bitcoin in any way, so they knew it would be a tough sell. (I'm certainly not convinced.) So they went the sneaky backdoor way instead.\n\n>This is why we need to act now, to make the less harmful option available before such applications are deployed.\n\nNo, we really don't. Again, *persuade bitcoiners that what you're doing is going to impact us positively*. If you can't do this, then go away! (Ethereum is *right there*!)\n\n>Transactions can already carry large payloads of data. Transactions pay a fee once, regardless of how long they are stored. Transactions are always stored forever by unpruned nodes. The proposed change does not affect this.\n\nWhat this ignores is that non-arbitrary data (data relevant to utxo transfer) is *priceless* to the bitcoin network because it is always relevant forever, because new nodes will always need to sync the blockchain from genesis in order to fully join the network. This is why we store utxo-ownership-transfer-relevant data *for the rest of eternity* - because if we didn't, bitcoin would simply not function. So there's a *huge cost* to storing this data, but also a *huge benefit*.\n\nConversely, arbitrary data carries no such benefit. It is forgotten almost immediately. In ten, or a hundred, or a million years, everyone you know will be dead, and all nuclear waste will be safely broken down, but everyone's brc20 scamtokens will still be in the blockchain. The differential benefits between arbitrary data and non-arbitrary data are *incalculably massive*, so we must bias bitcoin toward non-arbitrary data, so bitcoin doesn't collect so much garbage that it collapses under its own weight.\n\n> Relaying larger `OP_RETURN` outputs on the public network may marginally reduce the cost of using them. However the data stored in `OP_RETURN` outputs cost 4 times as much as data stuffed in an input witness, which is standard today and already relayed on the public network.\n\nYes, and this is a bug that should be fixed. The bitcoin network has agreed to 80 bytes of arbitrary data per transaction. Inscriptions larger than that do not have the consent of the bitcoin network.\n\n> Boiling frog: Core developers are trying to gradually make Bitcoin a universal database instead of just money, one step at a time.\n\nI don't think there's any such conspiracy, but I do think the economic incentives created by fiat money push all truly disruptive movements eventually towards watering down and irrelevance. It's hard to think of a better way to do this to bitcoin than to have bitcoiners forget that bitcoin is money, and instead convince them that it's a database with no particular purpose.\n\n> Core is trying to accommodate the Taproot Wizards who are a self-declared attack on Bitcoin which tries to corrupt the ecosystem.\n\nAre Taproot Wizards and Citrea linked? I wasn't aware.\n\nAnyway I already addressed this; I don't think the accommodation is necessarily intentional on the part of core devs; I just think that core devs are no longer willing to act with courage and tell companies with large VC-funded purses to get lost.\n\n> Raising UTxO bloat as a concern is ironic when considering applications like Citrea may only cause trivial amount of bloat while inscriptions, which Core refuses to filter, are responsible for over 8 GiB of bloat in the past couple of years.\n\n>This is confusing UTxO set usage and UTxO set bloat. While there is no normative language for Bitcoin concepts, the latter usually refers to **forever unspendable** outputs. No matter what we do those outputs will sit forever in every single user\u2019s UTxO set. Spendable outputs, even if uneconomical to spend, can always be swept by someone incentivized out of band or a good samaritan (as was done in the past).\n\nAre you hearing yourself right now? You're not seriously trying to argue that 8GB of new utxoset bloat, created by brc20s that are *NEVER, EVER* going to be spent, are somehow less harmful than Citrea's \"definitely unspendable\" fake pubkeys, even though such txs have caused precisely 0 bloat so far, and are not expected to cause more than a few hundred bytes per year?? Come on, man, stop being silly.\n\nUtxoset bloat appears to have been fixed in libbitcoin's most recent unreleased version anyway, so I'm much less concerned by utxoset bloat, and much more concerned by high-fee spam that crowds out legitimate spends, which is what removing the opreturn limits will DEFINITELY incentivize.\n\nAnyway, I don't have the time or inclination to respond to your whole post, but I think the above suffices to communicate my understanding of the opposition to removing the opreturn limits.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 140,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Hi Antoine - \nThanks for engaging the community in what appears to be a good-faith effort to address its concerns. \nI can\u2019t speak for everyone who is against raising opreturn limits, but here are my thoughts: \n\nFirst, it is possible to store data onchain in larger OP_RETURN outputs than allowed by B&hellip;",
  "truncated": true,
  "post_url": "/t/addressing-community-concerns-and-objections-regarding-my-recent-proposal-to-relax-bitcoin-cores-standardness-limits-on-op-return-outputs/1697/2",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}