{
  "id": 5054,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/1100_2.png",
  "created_at": "2025-05-20T13:37:49.049Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"gmaxwell\" data-post=\"14\" data-topic=\"1707\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/g/fbc32d/48.png\" class=\"avatar\"> gmaxwell:</div>\n<blockquote>\n<p>It\u2019s my view that it does today, yes. I\u2019ll happily agree with you that in a long enough view the costs work themselves out \u2013 log() scaling things in particular because log() is essentially a constant beyond a certain size.</p>\n</blockquote>\n</aside>\n<p>Just to make sure we\u2019re all talking about the same thing.</p>\n<p>The observation that you get a log() scaling factor was made in the context of <a href=\"https://bitcointalk.org/index.php?topic=88208\">early commitment schemes</a>, where the entire UTXO set is still kept, but organized in a Merkle tree so that proofs for it can be provided. This would indeed, within fully-validating nodes, be a significant extra cost, because every update to the UTXO set may now requiring updating <span class=\"math\">\\mathcal{O}(\\log n)</span> many internal nodes of the tree.</p>\n<p>Utreexo is not that. It removes the UTXO set entirely from validation nodes, and instead lets them maintain just the commitment - however the network has to provide Merkle paths. The maintenance of the actual tree is (in theory) distributed over wallets, which maintain the paths for just the UTXOs they themselves care about. More realistically however, as it would be hard to switch over the entire ecosystem to Utreexo, it would involve bridge nodes that can translate proof-less transactions and blocks to proof-carrying one. Bridge nodes effectively maintain proofs for every UTXO, and they are the ones that now gain the <span class=\"math\">\\mathcal{O}(\\log n)</span> scaling factor (because every UTXO change may involve updating that many proofs). There may still be a gain, because bridge nodes aren\u2019t quite on the critical path for validation, and can more easily be shared, but still: it introduces a critical component in the infrastructure that scales worse than full nodes today.</p>\n<p>All this to say, I generally agree there is a tradeoff that\u2019s unclear whether it\u2019s worth making, but it isn\u2019t one just inside validating nodes - I think pure Utreexo validation nodes would generally scale much better than today\u2019s validation nodes, but at the cost of outsourcing an even worse factor elsewhere.</p>\n<p>EDIT: I just realized you were probably talking about the <span class=\"math\">\\mathcal{O}(\\log n)</span> scaling factor for <strong>bandwidth</strong>? Utreexo has some tricks AFAIK to make it not that bad for block validation (lots of sharing between the paths) and transactions spending recent UTXOs, but fair.</p>\n<aside class=\"quote no-group\" data-username=\"RobinLinus\" data-post=\"15\" data-topic=\"1707\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/robinlinus/48/130_2.png\" class=\"avatar\"> RobinLinus:</div>\n<blockquote>\n<p>nstead, the spender provides the usual SPV proof (Merkle inclusion of the <em>transaction</em> in its block), which you simply check against the header chain. So the blockchain itself acts as a <em>TXO</em> commitment. The only new data structure is a lightweight list of 8-byte \u201clocations\u201d, representing the unspent expired UTXOs:</p>\n</blockquote>\n</aside>\n<p>That\u2019s interesting, but I wonder if that is acceptable, why wouldn\u2019t it be acceptable for everything? In a way it\u2019s morally similar to Utreexo, in that it forces a (much weaker, but still some) responsibility onto wallets or bridging infrastructure to come up with proofs, reducing the responsibility validating nodes have. It has the advantage of not having expiring proofs (Utreexo proofs expire when the tree changes enough), but at the same time, it\u2019s also only a minor gain to validation I think - still requiring them to maintain an indexed <span class=\"math\">\\mathcal{O}(n)</span>-sized set, and significantly increased bandwidth (SPV proofs are larger than typical transactions).</p>\n<p>It sort of falls in between Bram Cohen\u2019s <a href=\"https://diyhpl.us/wiki/transcripts/sf-bitcoin-meetup/2017-07-08-bram-cohen-merkle-sets/\">TXO bitfield idea</a> (which is <span class=\"math\">\\mathcal{O}(n)</span> in the size of the TXO set (not just unspent), but with an extremely small constant factor of 1 bit per entry), and Cory Field\u2019s <a href=\"https://gnusha.org/pi/bitcoindev/CAApLimjfPKDxmiy_SHjuOKbfm6HumFPjc9EFKvw=3NwZO8JcmQ@mail.gmail.com/\">UHS idea</a> where validation nodes store <em>hashes</em> of UTXOs, and the full UTXOs being spent are relayed along with their spending.</p>",
  "post_number": 16,
  "post_type": 1,
  "posts_count": 32,
  "updated_at": "2025-05-20T13:40:41.420Z",
  "reply_count": 3,
  "reply_to_post_number": 14,
  "quote_count": 2,
  "incoming_link_count": 9,
  "reads": 52,
  "readers_count": 51,
  "score": 100.4,
  "yours": false,
  "topic_id": 1707,
  "topic_slug": "dust-expiry-clean-the-utxo-set-from-spam",
  "topic_title": "Dust Expiry: Clean the UTXO set from spam",
  "topic_html_title": "Dust Expiry: Clean the UTXO set from spam",
  "category_id": 7,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"gmaxwell, post:14, topic:1707\"]\nIt\u2019s my view that it does today, yes. I\u2019ll happily agree with you that in a long enough view the costs work themselves out \u2013 log() scaling things in particular because log() is essentially a constant beyond a certain size.\n[/quote]\n\nJust to make sure we're all talking about the same thing.\n\nThe observation that you get a log() scaling factor was made in the context of [early commitment schemes](https://bitcointalk.org/index.php?topic=88208), where the entire UTXO set is still kept, but organized in a Merkle tree so that proofs for it can be provided. This would indeed, within fully-validating nodes, be a significant extra cost, because every update to the UTXO set may now requiring updating $\\mathcal{O}(\\log n)$ many internal nodes of the tree.\n\nUtreexo is not that. It removes the UTXO set entirely from validation nodes, and instead lets them maintain just the commitment - however the network has to provide Merkle paths. The maintenance of the actual tree is (in theory) distributed over wallets, which maintain the paths for just the UTXOs they themselves care about. More realistically however, as it would be hard to switch over the entire ecosystem to Utreexo, it would involve bridge nodes that can translate proof-less transactions and blocks to proof-carrying one. Bridge nodes effectively maintain proofs for every UTXO, and they are the ones that now gain the $\\mathcal{O}(\\log n)$ scaling factor (because every UTXO change may involve updating that many proofs). There may still be a gain, because bridge nodes aren't quite on the critical path for validation, and can more easily be shared, but still: it introduces a critical component in the infrastructure that scales worse than full nodes today.\n\nAll this to say, I generally agree there is a tradeoff that's unclear whether it's worth making, but it isn't one just inside validating nodes - I think pure Utreexo validation nodes would generally scale much better than today's validation nodes, but at the cost of outsourcing an even worse factor elsewhere.\n\nEDIT: I just realized you were probably talking about the $\\mathcal{O}(\\log n)$ scaling factor for **bandwidth**? Utreexo has some tricks AFAIK to make it not that bad for block validation (lots of sharing between the paths) and transactions spending recent UTXOs, but fair.\n\n[quote=\"RobinLinus, post:15, topic:1707\"]\nnstead, the spender provides the usual SPV proof (Merkle inclusion of the *transaction* in its block), which you simply check against the header chain. So the blockchain itself acts as a *TXO* commitment. The only new data structure is a lightweight list of 8-byte \u201clocations\u201d, representing the unspent expired UTXOs:\n[/quote]\n\nThat's interesting, but I wonder if that is acceptable, why wouldn't it be acceptable for everything? In a way it's morally similar to Utreexo, in that it forces a (much weaker, but still some) responsibility onto wallets or bridging infrastructure to come up with proofs, reducing the responsibility validating nodes have. It has the advantage of not having expiring proofs (Utreexo proofs expire when the tree changes enough), but at the same time, it's also only a minor gain to validation I think - still requiring them to maintain an indexed $\\mathcal{O}(n)$-sized set, and significantly increased bandwidth (SPV proofs are larger than typical transactions).\n\nIt sort of falls in between Bram Cohen's [TXO bitfield idea](https://diyhpl.us/wiki/transcripts/sf-bitcoin-meetup/2017-07-08-bram-cohen-merkle-sets/) (which is $\\mathcal{O}(n)$ in the size of the TXO set (not just unspent), but with an extremely small constant factor of 1 bit per entry), and Cory Field's [UHS idea](https://gnusha.org/pi/bitcoindev/CAApLimjfPKDxmiy_SHjuOKbfm6HumFPjc9EFKvw=3NwZO8JcmQ@mail.gmail.com/) where validation nodes store *hashes* of UTXOs, and the full UTXOs being spent are relayed along with their spending.",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Just to make sure we\u2019re all talking about the same thing. \nThe observation that you get a log() scaling factor was made in the context of <a href=\"https://bitcointalk.org/index.php?topic=88208\">early commitment schemes</a>, where the entire UTXO set is still kept, but organized in a Merkle tree so that proofs for it can be provided. This would indeed, withi&hellip;",
  "truncated": true,
  "post_url": "/t/dust-expiry-clean-the-utxo-set-from-spam/1707/16",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 2
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}