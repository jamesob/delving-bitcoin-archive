{
  "id": 142,
  "name": "Brandon Black",
  "username": "reardencode",
  "avatar_template": "/user_avatar/delvingbitcoin.org/reardencode/{size}/27_2.png",
  "created_at": "2023-08-29T18:30:48.658Z",
  "cooked": "<p>Here\u2019s what I think <code>OP_TEMPLATEHASH</code> might look like, which could then be combined with <code>OP_CHECKSIGFROMSTACK(VERIFY)</code> to provide APO (but not APO|SINGLE) behavior.</p>\n<hr>\n<p>All <code>OP_TEMPLATEHASH</code> hashes commit to <code>&lt;hash_mode&gt; OP_TEMPLATEHASH</code> (i.e.<br>\n<code>0x0050</code>, <code>0x5150</code>, &amp;c), the transaction\u2019s version, number of<br>\noutputs, and outputs.</p>\n<p>We define the following groups of input data:</p>\n<ul>\n<li>may be included for any input\n<ul>\n<li><code>prevout</code>:</li>\n<li><code>prevscript</code>: output amount and script</li>\n<li><code>sequence</code>:</li>\n</ul>\n</li>\n<li>only from the input being validated\n<ul>\n<li><code>script</code>: control block, leaf script, and code separator position</li>\n<li><code>annex</code>: taproot spend type and annex</li>\n</ul>\n</li>\n<li>other data\n<ul>\n<li><code>locktime</code>:</li>\n<li><code>scriptsigs</code>: hash of all scriptSigs if any scriptSig is non-empty</li>\n</ul>\n</li>\n</ul>\n<p>We define the following paired hashing modes using a numeric <code>hash_mode</code> that<br>\ncan be represented by an opcode. Even modes do not hash <code>annex</code>, odd do.</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">mode</th>\n<th>included data</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0,1</td>\n<td>-</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2,3</td>\n<td>locktime and this sequence (3 similar to bip118 0xc1)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4,5</td>\n<td>\u201c2\u201d with this prevscript and script (5 similar to bip118 0x41)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6,7</td>\n<td>nInputs</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8,9</td>\n<td>\u201c6\u201d with locktime and all sequences</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10,11</td>\n<td>\u201c8\u201d with scriptsigs (similar to bip119)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12,13</td>\n<td>\u201c10\u201d with all prevscripts and script</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14,15</td>\n<td>\u201c12\u201d with all but input 0\u2019s prevout<sup class=\"footnote-ref\"><a href=\"#footnote-142-1\" id=\"footnote-ref-142-1\">[1]</a></sup></td>\n</tr>\n</tbody>\n</table>\n</div><hr class=\"footnotes-sep\">\n\n<ol class=\"footnotes-list\">\n<li id=\"footnote-142-1\" class=\"footnote-item\"><p>Modes 14,15 only work on input 0 which is a bit of an odd behavior, but<br>\nenables a hash mode that constrains all other inputs\u2019 prevouts without<br>\nincurring quadratic hashing. Because such a mode could only ever be used on<br>\none input to a transaction, constraining it to input 0 seems a reasonable<br>\nsolution. <a href=\"#footnote-ref-142-1\" class=\"footnote-backref\">\u21a9\ufe0e</a></p>\n</li>\n</ol>",
  "post_number": 7,
  "post_type": 1,
  "updated_at": "2023-08-29T18:33:26.459Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 11,
  "reads": 8,
  "readers_count": 7,
  "score": 56.6,
  "yours": false,
  "topic_id": 60,
  "topic_slug": "combined-ctv-apo-into-minimal-txhash-csfs",
  "topic_title": "Combined CTV/APO into minimal TXHASH+CSFS",
  "topic_html_title": "Combined CTV/APO into minimal TXHASH+CSFS",
  "category_id": 7,
  "display_username": "Brandon Black",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Here's what I think `OP_TEMPLATEHASH` might look like, which could then be combined with `OP_CHECKSIGFROMSTACK(VERIFY)` to provide APO (but not APO|SINGLE) behavior.\n\n-----------------\n\nAll `OP_TEMPLATEHASH` hashes commit to `<hash_mode> OP_TEMPLATEHASH` (i.e.\n`0x0050`, `0x5150`, &c), the transaction's version, number of \noutputs, and outputs.\n\nWe define the following groups of input data:\n\n* may be included for any input\n    * `prevout`:\n    * `prevscript`: output amount and script\n    * `sequence`:\n* only from the input being validated\n    * `script`: control block, leaf script, and code separator position\n    * `annex`: taproot spend type and annex\n* other data\n    * `locktime`:\n    * `scriptsigs`: hash of all scriptSigs if any scriptSig is non-empty\n\nWe define the following paired hashing modes using a numeric `hash_mode` that \ncan be represented by an opcode. Even modes do not hash `annex`, odd do.\n\n mode  | included data\n :---: | -----------------\n 0,1   | -\n 2,3   | locktime and this sequence (3 similar to bip118 0xc1)\n 4,5   | \"2\" with this prevscript and script (5 similar to bip118 0x41)\n 6,7   | nInputs\n 8,9   | \"6\" with locktime and all sequences\n 10,11 | \"8\" with scriptsigs (similar to bip119)\n 12,13 | \"10\" with all prevscripts and script\n 14,15 | \"12\" with all but input 0's prevout[^1]\n\n[^1]: Modes 14,15 only work on input 0 which is a bit of an odd behavior, but\n  enables a hash mode that constrains all other inputs' prevouts without \n  incurring quadratic hashing. Because such a mode could only ever be used on\n  one input to a transaction, constraining it to input 0 seems a reasonable \n  solution.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 30,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}