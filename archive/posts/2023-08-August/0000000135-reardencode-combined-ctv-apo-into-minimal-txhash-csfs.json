{
  "id": 135,
  "name": "Brandon Black",
  "username": "reardencode",
  "avatar_template": "/user_avatar/delvingbitcoin.org/reardencode/{size}/27_2.png",
  "created_at": "2023-08-24T17:54:26.189Z",
  "cooked": "<blockquote>\n<p>I think adding upgrade hooks, as he says, is pretty fraught, vs \u201cjust use another opcode\u201d. Currently if someone reorders it, it just becomes trivially true do the hash type has to be committed to in the output to avoid \u201canyonecanspend\u201d style behavior.</p>\n</blockquote>\n<p>Thanks for bringing this up. As a rule, I think the <code>&lt;argument&gt; OP_TXHASH</code> should be treated as a single fragment, each of which has exactly one interpretation at each soft fork level. In cases where a script wants to accept a signature on several possible TXHASHes they should explicitly guard the opcode as I <a href=\"https://gist.github.com/reardencode/2aa98700b720174598d21989dd46e781#can-selection-of-op_txhash-mode-be-deferred-to-spend-time\" rel=\"noopener nofollow ugc\">now show</a>.</p>\n<p>I do think that the benefit of upgradeable <code>OP_TXHASH</code> is more important than the ability to easily specify the hash type at spend time or compute it in script. My first thought here is that this is potentially a correct disjunction between the existing sigops and <code>OP_CSFS</code>: Existing sigops allow for safe spend time hash method specification because they combine the hashing and signature checking. Once the hashing operation and signature validation are separated the hash method should be specified in the output. This relates to the reason that bip118 settled on using a new key type. Existing key types hadn\u2019t pre-committed to being spendable with the new modes.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2023-08-24T17:54:26.189Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 0,
  "incoming_link_count": 3,
  "reads": 13,
  "readers_count": 12,
  "score": 17.6,
  "yours": false,
  "topic_id": 60,
  "topic_slug": "combined-ctv-apo-into-minimal-txhash-csfs",
  "topic_title": "Combined CTV/APO into minimal TXHASH+CSFS",
  "topic_html_title": "Combined CTV/APO into minimal TXHASH+CSFS",
  "category_id": 7,
  "display_username": "Brandon Black",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "instagibbs",
    "name": "Gregory Sanders",
    "avatar_template": "/user_avatar/delvingbitcoin.org/instagibbs/{size}/28_2.png"
  },
  "bookmarked": false,
  "raw": "> I think adding upgrade hooks, as he says, is pretty fraught, vs \u201cjust use another opcode\u201d. Currently if someone reorders it, it just becomes trivially true do the hash type has to be committed to in the output to avoid \u201canyonecanspend\u201d style behavior.\n\nThanks for bringing this up. As a rule, I think the `<argument> OP_TXHASH` should be treated as a single fragment, each of which has exactly one interpretation at each soft fork level. In cases where a script wants to accept a signature on several possible TXHASHes they should explicitly guard the opcode as I [now show](https://gist.github.com/reardencode/2aa98700b720174598d21989dd46e781#can-selection-of-op_txhash-mode-be-deferred-to-spend-time).\n\nI do think that the benefit of upgradeable `OP_TXHASH` is more important than the ability to easily specify the hash type at spend time or compute it in script. My first thought here is that this is potentially a correct disjunction between the existing sigops and `OP_CSFS`: Existing sigops allow for safe spend time hash method specification because they combine the hashing and signature checking. Once the hashing operation and signature validation are separated the hash method should be specified in the output. This relates to the reason that bip118 settled on using a new key type. Existing key types hadn't pre-committed to being spendable with the new modes.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 30,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}