{
  "id": 138,
  "name": "Gregory Sanders",
  "username": "instagibbs",
  "avatar_template": "/user_avatar/delvingbitcoin.org/instagibbs/{size}/28_2.png",
  "created_at": "2023-08-25T20:29:03.909Z",
  "cooked": "<blockquote>\n<p>annoying stack magic</p>\n</blockquote>\n<p>This cases is mostly a bit of <code>OP_XDUP</code> overhead which just so happens to enable a feature. Something special-cased that <em>doesn\u2019t</em> need it will require interpreter-wide state to know where the value should be going which is what I was attempting to avoid in the first place with the replacement of <code>OP_FORWARD_PARTIAL</code>. I\u2019m not sold that collateral should be a first-class citizen, just interesting that a potentially useful feature is possible with little additional spec complexity(I\u2019d argue the complexity is a lateral move myself).</p>\n<blockquote>\n<p>The problem with that is collateral specification isn\u2019t so simple - do you want to require x BTC per input being unvaulted, or for a single unvault operation? Or maybe you want to be able to specify a percentage of the amount that has to be locked for collateral?</p>\n</blockquote>\n<p>Yeah this is where we\u2019re definitely at the limit of Bitcoin Script. We\u2019d essentially be re-implementing <code>OP_DIV</code> et al just implicitly, maybe side-stepping <code>CScriptNum</code> arithmetic issues by doing it implicitly. Percentage-based rate-limiting of unvaults would also be great, and I could imagine it being used in many other contexts if it was a more general-purpose widget.</p>\n<p>Limits of Bitcoin Script, Simplicity right meow, you know the drill</p>",
  "post_number": 4,
  "post_type": 1,
  "posts_count": 5,
  "updated_at": "2023-08-25T20:29:03.909Z",
  "reply_count": 1,
  "reply_to_post_number": 3,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 16,
  "readers_count": 15,
  "score": 8.2,
  "yours": false,
  "topic_id": 55,
  "topic_slug": "op-vault-fanfiction-for-rate-limited-and-collateralized-unvaulting",
  "topic_title": "OP_VAULT fanfiction for rate-limited and collateralized unvaulting",
  "topic_html_title": "OP_VAULT fanfiction for rate-limited and collateralized unvaulting",
  "category_id": 7,
  "display_username": "Gregory Sanders",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 9,
    "username": "jamesob",
    "name": "James O'Beirne",
    "avatar_template": "/user_avatar/delvingbitcoin.org/jamesob/{size}/271_2.png"
  },
  "bookmarked": false,
  "raw": "> annoying stack magic\n\nThis cases is mostly a bit of `OP_XDUP` overhead which just so happens to enable a feature. Something special-cased that *doesn't* need it will require interpreter-wide state to know where the value should be going which is what I was attempting to avoid in the first place with the replacement of `OP_FORWARD_PARTIAL`. I'm not sold that collateral should be a first-class citizen, just interesting that a potentially useful feature is possible with little additional spec complexity(I'd argue the complexity is a lateral move myself).\n\n> The problem with that is collateral specification isn\u2019t so simple - do you want to require x BTC per input being unvaulted, or for a single unvault operation? Or maybe you want to be able to specify a percentage of the amount that has to be locked for collateral?\n\nYeah this is where we're definitely at the limit of Bitcoin Script. We'd essentially be re-implementing `OP_DIV` et al just implicitly, maybe side-stepping `CScriptNum` arithmetic issues by doing it implicitly. Percentage-based rate-limiting of unvaults would also be great, and I could imagine it being used in many other contexts if it was a more general-purpose widget. \n\nLimits of Bitcoin Script, Simplicity right meow, you know the drill",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 31,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "annoying stack magic \n\nThis cases is mostly a bit of OP_XDUP overhead which just so happens to enable a feature. Something special-cased that doesn\u2019t need it will require interpreter-wide state to know where the value should be going which is what I was attempting to avoid in the first place with t&hellip;",
  "truncated": true,
  "post_url": "/t/op-vault-fanfiction-for-rate-limited-and-collateralized-unvaulting/55/4",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}