{
  "id": 137,
  "name": "James O'Beirne",
  "username": "jamesob",
  "avatar_template": "/letter_avatar_proxy/v4/letter/j/958977/{size}.png",
  "created_at": "2023-08-25T19:43:49.893Z",
  "cooked": "<p>I was watching Johan Halseth\u2019s <a href=\"https://www.youtube.com/watch?v=5ORVoxZ1Wm0\">Surfin\u2019 Bitcoin 2023 talk</a> today, and was hit with a use for collateralized vaults.</p>\n<p>In his talk, Johan discusses how MATT might be used to create a trust-minimized two-way Taro assets peg (wrapped BTC, basically) to amortize off-chain payments activity.</p>\n<p>To peg out from MATT-land, the user would present a claim on-chain accompanied by a proof that all the activity in MATT-land implies their ownership of the coins being claimed. Anyone watching the chain would then be able to contest this claim with a fraud proof; the claim would be collateralized, so that if anyone tries to cheat, the coins they stake to make the claim would be burned if their invalid claim is found out.</p>\n<p>This strikes me as a very similar process to the vault workflow that motivated OP_VAULT in the first place, i.e.</p>\n<ul>\n<li>user makes some claim of ownership,</li>\n<li>if the claim is illegitimate, the \u201creal\u201d owner can present a \u201cfraud proof\u201d (i.e. recovery transaction) within some time period to claw back the funds, or</li>\n<li>if the claim is legit, time period elapses, and user claims funds.</li>\n</ul>\n<p>So I wonder if OP_VAULT can be used to make this kind of two-way peg penalty enforced proof/claim process more efficient on-chain \u2013 especially when it comes to batching multiple inputs from MATT-land, or some equivalent.</p>\n<hr>\n<p>I mention this here because collateralization might be an important part of that process, so it may be something that we want to think more deeply about designing for.</p>\n<p>An issue I have with the incantation you provide above,</p>\n<blockquote>\n<pre><code class=\"lang-auto\">&lt;leaf-update-script-body&gt; OP_VAULT OP_REVAULT&gt;\n&lt;duplicated args to make sure it's same trigger output spk....&gt;\n&lt;collat-amt&gt; OP_VAULT\n</code></pre>\n</blockquote>\n<p>is that we have to do a lot of annoying stack magic to duplicate the OP_VAULT arguments.</p>\n<p>I think a while back I had a counter proposal to introduce (yet another) OP_VAULT argument, <code>&lt;collateral-amt&gt;</code>, that would make collateral lockup a first-class usecase.</p>\n<p>The problem with that is collateral specification isn\u2019t so simple - do you want to require x BTC per input being unvaulted, or for a single unvault operation? Or maybe you want to be able to specify a percentage of the amount that has to be locked for collateral? Adding a single <code>collateral-amt</code> arg makes these kind of things hard.</p>\n<p>Perhaps an <code>&lt;collateral-type&gt; &lt;collateral-amt&gt; OP_VAULT_COLLATERAL</code> \u201cdecorator\u201d opcode (that would precede the <code>OP_VAULT</code> evaluation) might be warranted?</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2023-08-25T19:43:49.893Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 28,
  "reads": 5,
  "readers_count": 4,
  "score": 146.0,
  "yours": false,
  "topic_id": 55,
  "topic_slug": "op-vault-fanfiction-for-rate-limited-and-collateralized-unvaulting",
  "topic_title": "OP_VAULT fanfiction for rate-limited and collateralized unvaulting",
  "topic_html_title": "OP_VAULT fanfiction for rate-limited and collateralized unvaulting",
  "category_id": 7,
  "display_username": "James O'Beirne",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I was watching Johan Halseth's [Surfin' Bitcoin 2023 talk](https://www.youtube.com/watch?v=5ORVoxZ1Wm0) today, and was hit with a use for collateralized vaults.\n\nIn his talk, Johan discusses how MATT might be used to create a trust-minimized two-way Taro assets peg (wrapped BTC, basically) to amortize off-chain payments activity.\n\nTo peg out from MATT-land, the user would present a claim on-chain accompanied by a proof that all the activity in MATT-land implies their ownership of the coins being claimed. Anyone watching the chain would then be able to contest this claim with a fraud proof; the claim would be collateralized, so that if anyone tries to cheat, the coins they stake to make the claim would be burned if their invalid claim is found out.\n\nThis strikes me as a very similar process to the vault workflow that motivated OP_VAULT in the first place, i.e.\n- user makes some claim of ownership,\n- if the claim is illegitimate, the \"real\" owner can present a \"fraud proof\" (i.e. recovery transaction) within some time period to claw back the funds, or\n- if the claim is legit, time period elapses, and user claims funds.\n\nSo I wonder if OP_VAULT can be used to make this kind of two-way peg penalty enforced proof/claim process more efficient on-chain -- especially when it comes to batching multiple inputs from MATT-land, or some equivalent.\n\n---\n\nI mention this here because collateralization might be an important part of that process, so it may be something that we want to think more deeply about designing for.\n\nAn issue I have with the incantation you provide above,\n\n> ```\n> <leaf-update-script-body> OP_VAULT OP_REVAULT>\n> <duplicated args to make sure it's same trigger output spk....>\n> <collat-amt> OP_VAULT\n> ```\n\nis that we have to do a lot of annoying stack magic to duplicate the OP_VAULT arguments. \n\nI think a while back I had a counter proposal to introduce (yet another) OP_VAULT argument, `<collateral-amt>`, that would make collateral lockup a first-class usecase.\n\nThe problem with that is collateral specification isn't so simple - do you want to require x BTC per input being unvaulted, or for a single unvault operation? Or maybe you want to be able to specify a percentage of the amount that has to be locked for collateral? Adding a single `collateral-amt` arg makes these kind of things hard.\n\nPerhaps an `<collateral-type> <collateral-amt> OP_VAULT_COLLATERAL` \"decorator\" opcode (that would precede the `OP_VAULT` evaluation) might be warranted?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 9,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}