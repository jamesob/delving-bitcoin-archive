{
  "id": 140,
  "name": "Brandon Black",
  "username": "reardencode",
  "avatar_template": "/user_avatar/delvingbitcoin.org/reardencode/{size}/27_2.png",
  "created_at": "2023-08-27T13:59:36.651Z",
  "cooked": "<p>Summarizing some discussions I\u2019ve had on X and elsewhere about this:</p>\n<h3><a name=\"recursion-counters-spookchains-1\" class=\"anchor\" href=\"#recursion-counters-spookchains-1\"></a>Recursion, counters, Spookchains</h3>\n<p>Any covenant-capable hash/template proposal that lets the hash (or the signature on a hash) only appear in the unlock script enables some form of deleted key recursion. Deleted key constructions are obviously limited by how well the covenant creator can convince folks that they have actually deleted the key, but let\u2019s accept that if they are enabled they will likely be used.</p>\n<p>Comparing the deleted key recursion enabled by the various possible hashes, it appears that <code>SIGHASH_SINGLE</code> type hashes enable potentially useful (or scary, depending on perspective) constructions (a la Spookchains / hashrate escrow). With <code>SIGHASH_ALL</code> type hashes, a new deleted key counter covenant would need to be created and trusted for each possible withdrawal, removing the TOFU security. In that case users would simply use federated withdrawals, skipping the whole countdown process.</p>\n<p>I\u2019m not sure if dropping the <code>SIGHASH_SINGLE</code> modes from this proposal (or APO by extension) would satisfy most or all of those concerned about spooky deleted key recursion.</p>\n<h3><a name=\"helping-ark-or-similar-protocols-2\" class=\"anchor\" href=\"#helping-ark-or-similar-protocols-2\"></a>Helping Ark (or similar protocols)</h3>\n<p>There are clear use cases for a CTV/APO-like hash that hashes either all scripts other than the input being verified, all outpoints other than the input being verified, or both. This kind of \u201cevery other input\u201d hashing creates quadratic hashing, so I\u2019ve been hesitant to include it. <span class=\"mention\">@4moonsettler</span> pointed out that for CTV-style execution this isn\u2019t a problem because there would be a hash loop making it impossible to include more than 1 such hash in a transaction. For <code>OP_TEMPLATEHASH</code>/<code>OP_TXHASH</code>-style execution, it becomes possible to create many megabytes of hashing in a consensus-valid transaction.</p>\n<p>One possible solution here would be to allow at most one hash-every-other mode hash in any given transaction. This of course would make reasoning about scripts more difficult - <code>OP_TEMPLATEHASH</code> might fail validation due to how it is combined with other inputs.</p>\n<p>Another solution would be to instead include hash-the-next modes - where the template hash commits to the next input\u2019s script/outpoint only. These would work fine for Ark, I think, but are a bit odd. <a href=\"https://twitter.com/brqgoo/status/1694090272009797687\" rel=\"noopener nofollow ugc\">https://twitter.com/brqgoo/status/1694090272009797687</a></p>\n<hr>\n<p>Responses have been quite interesting. I\u2019m going to write down a version of <code>OP_TEMPLATEHASH</code> which does not include <code>SIGHASH_SINGLE</code>-like modes, and tries to cover as many variations on what input-related data is hashed as I can think of without introducing quadratic hashing.</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2023-08-27T14:02:22.003Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 57,
  "reads": 9,
  "readers_count": 8,
  "score": 251.8,
  "yours": false,
  "topic_id": 60,
  "topic_slug": "combined-ctv-apo-into-minimal-txhash-csfs",
  "topic_title": "Combined CTV/APO into minimal TXHASH+CSFS",
  "topic_html_title": "Combined CTV/APO into minimal TXHASH+CSFS",
  "category_id": 7,
  "display_username": "Brandon Black",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Summarizing some discussions I've had on X and elsewhere about this:\n\n### Recursion, counters, Spookchains\n\nAny covenant-capable hash/template proposal that lets the hash (or the signature on a hash) only appear in the unlock script enables some form of deleted key recursion. Deleted key constructions are obviously limited by how well the covenant creator can convince folks that they have actually deleted the key, but let's accept that if they are enabled they will likely be used.\n\nComparing the deleted key recursion enabled by the various possible hashes, it appears that `SIGHASH_SINGLE` type hashes enable potentially useful (or scary, depending on perspective) constructions (a la Spookchains / hashrate escrow). With `SIGHASH_ALL` type hashes, a new deleted key counter covenant would need to be created and trusted for each possible withdrawal, removing the TOFU security. In that case users would simply use federated withdrawals, skipping the whole countdown process.\n\nI'm not sure if dropping the `SIGHASH_SINGLE` modes from this proposal (or APO by extension) would satisfy most or all of those concerned about spooky deleted key recursion.\n\n### Helping Ark (or similar protocols)\n\nThere are clear use cases for a CTV/APO-like hash that hashes either all scripts other than the input being verified, all outpoints other than the input being verified, or both. This kind of \"every other input\" hashing creates quadratic hashing, so I've been hesitant to include it. @4moonsettler pointed out that for CTV-style execution this isn't a problem because there would be a hash loop making it impossible to include more than 1 such hash in a transaction. For `OP_TEMPLATEHASH`/`OP_TXHASH`-style execution, it becomes possible to create many megabytes of hashing in a consensus-valid transaction. \n\nOne possible solution here would be to allow at most one hash-every-other mode hash in any given transaction. This of course would make reasoning about scripts more difficult - `OP_TEMPLATEHASH` might fail validation due to how it is combined with other inputs. \n\nAnother solution would be to instead include hash-the-next modes - where the template hash commits to the next input's script/outpoint only. These would work fine for Ark, I think, but are a bit odd. https://twitter.com/brqgoo/status/1694090272009797687\n\n-----------------------------\n\nResponses have been quite interesting. I'm going to write down a version of `OP_TEMPLATEHASH` which does not include `SIGHASH_SINGLE`-like modes, and tries to cover as many variations on what input-related data is hashed as I can think of without introducing quadratic hashing.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 30,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}