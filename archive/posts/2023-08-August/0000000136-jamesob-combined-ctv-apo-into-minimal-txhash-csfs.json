{
  "id": 136,
  "name": "James O'Beirne",
  "username": "jamesob",
  "avatar_template": "/letter_avatar_proxy/v4/letter/j/958977/{size}.png",
  "created_at": "2023-08-25T19:10:26.813Z",
  "cooked": "<p>A few incidental remarks, sorry if too far afield.</p>\n<aside class=\"quote no-group\" data-username=\"instagibbs\" data-post=\"2\" data-topic=\"60\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/instagibbs/48/28_2.png\" class=\"avatar\"> instagibbs:</div>\n<blockquote>\n<p>I think adding upgrade hooks, as he says, is pretty fraught, vs \u201cjust use another opcode\u201d.</p>\n</blockquote>\n</aside>\n<p>I agree here that there\u2019s little practical difference between softforking to add a new opcode and softforking to enable new argument-based behavior. Clients still need to update, fork still needs to be deployed, and code savings on the Core side are pretty minor I think.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"instagibbs\" data-post=\"2\" data-topic=\"60\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/instagibbs/48/28_2.png\" class=\"avatar\"> instagibbs:</div>\n<blockquote>\n<p>I hadn\u2019t read this in a while, and the closing part was interesting:<br>\n[roconnor quote about pushing stuff on the stack and hashing \u2026]</p>\n</blockquote>\n</aside>\n<p>This is less a comment about roconnor\u2019s remarks per se and more about the notion of essentially assembling a sighash message on the stack, but:</p>\n<p>I think it would be really unfortunate if we got to the point where we were using CAT and rolling SHA opcodes to slice and dice txn components into tailor made hashes. Not only am I skeptical that there are many uses that call for fundamentally different txn component combinations to be hashed, but it strikes me that doing this kind of stuff on the stack is more in the \u201ccomputation\u201d than \u201cverification\u201d camp, and so is a waste of space and time when it comes to L1.</p>\n<p>I think this explains my bias for \u201cCISC\u201d vs. \u201cRISC\u201d-style opcodes in Bitcoin. Of course the trade-off here is that CISC implies being able to anticipate things that people want to do, and I suppose there\u2019s no reason that both styles can\u2019t exist in script. Maybe this is worth elaborating on in another post.</p>\n<hr>\n<p>I think it would be helpful to have some kind of listing of uses that having CSFS enables (e.g. key delegation, although to be honest I can\u2019t explain this use much deeper than just saying \u201ckey delegation\u201d; something-something federations maybe?). Because if the only use for CSFS that we can think of here is allowing a unification of BIP 118 and 119, I\u2019d say it\u2019s more expeditious just to activate the two together as written.</p>\n<p>In any case, great work <a class=\"mention\" href=\"/u/reardencode\">@reardencode</a> - there\u2019s some really useful stuff in your document, like the \u201cwhat is hashed?\u201d table. And in general, it\u2019s enjoyable to consider the novel approach you\u2019ve introduced.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2023-08-25T19:10:26.813Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 7,
  "reads": 12,
  "readers_count": 11,
  "score": 42.4,
  "yours": false,
  "topic_id": 60,
  "topic_slug": "combined-ctv-apo-into-minimal-txhash-csfs",
  "topic_title": "Combined CTV/APO into minimal TXHASH+CSFS",
  "topic_html_title": "Combined CTV/APO into minimal TXHASH+CSFS",
  "category_id": 7,
  "display_username": "James O'Beirne",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "A few incidental remarks, sorry if too far afield.\n\n[quote=\"instagibbs, post:2, topic:60\"]\nI think adding upgrade hooks, as he says, is pretty fraught, vs \u201cjust use another opcode\u201d. \n[/quote]\n\nI agree here that there's little practical difference between softforking to add a new opcode and softforking to enable new argument-based behavior. Clients still need to update, fork still needs to be deployed, and code savings on the Core side are pretty minor I think.\n\n[quote=\"instagibbs, post:2, topic:60\"]\nI hadn\u2019t read this in a while, and the closing part was interesting:\n[roconnor quote about pushing stuff on the stack and hashing ...]\n[/quote]\n\nThis is less a comment about roconnor's remarks per se and more about the notion of essentially assembling a sighash message on the stack, but:\n\nI think it would be really unfortunate if we got to the point where we were using CAT and rolling SHA opcodes to slice and dice txn components into tailor made hashes. Not only am I skeptical that there are many uses that call for fundamentally different txn component combinations to be hashed, but it strikes me that doing this kind of stuff on the stack is more in the \"computation\" than \"verification\" camp, and so is a waste of space and time when it comes to L1. \n\nI think this explains my bias for \"CISC\" vs. \"RISC\"-style opcodes in Bitcoin. Of course the trade-off here is that CISC implies being able to anticipate things that people want to do, and I suppose there's no reason that both styles can't exist in script. Maybe this is worth elaborating on in another post. \n\n---\n\nI think it would be helpful to have some kind of listing of uses that having CSFS enables (e.g. key delegation, although to be honest I can't explain this use much deeper than just saying \"key delegation\"; something-something federations maybe?). Because if the only use for CSFS that we can think of here is allowing a unification of BIP 118 and 119, I'd say it's more expeditious just to activate the two together as written.\n\nIn any case, great work @reardencode - there's some really useful stuff in your document, like the \"what is hashed?\" table. And in general, it's enjoyable to consider the novel approach you've introduced.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 9,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}