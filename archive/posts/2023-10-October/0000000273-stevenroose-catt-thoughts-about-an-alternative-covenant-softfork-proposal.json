{
  "id": 273,
  "name": "Steven Roose",
  "username": "stevenroose",
  "avatar_template": "/letter_avatar_proxy/v4/letter/s/8edcca/{size}.png",
  "created_at": "2023-10-03T09:49:04.165Z",
  "cooked": "<p>Hmm, yeah so I think I read the part where you specify the template hashtypes for CTV. So this document adds them as sighash types basically.</p>\n<p>In theory we could do the exact same thing with TXHASH: specify a key type and use the TxFieldSelector construction as a \u201csighash flags on steroids\u201d where you can use that to select parts of the tx to hash.</p>\n<p>Your proposal a huge difference in flexibility with TXHASH, though. For example the special treatment of only the first input is very limiting in many ways.</p>\n<p>I think I\u2019m at the point where all resource usage concerns can be elevated from TXHASH so I don\u2019t see why we would need a system that pre-sets different modes of operation instead of allowing users to set their own. Of course the result is very likely that only a handful of TxFieldSelector values will take up 99% of usage, but it does allow protocol developers to construct more complicated systems.</p>\n<p>Actually this makes me think twice about the default for TXHASH. Currently the default is \u201call that\u2019s non-recursive\u201d, so CTV-style. But in fact for a sighash, the regular \u201cALL\u201d makes more sense.</p>\n<p>We do have one special case value we can assign: the 0x00 byte, because \u201cnot including anything\u201d is currently not allowed. So we could play with two different \u201cshortcut values\u201d: <code>0x</code> and <code>0x00</code>.</p>",
  "post_number": 9,
  "post_type": 1,
  "updated_at": "2023-10-03T09:49:04.165Z",
  "reply_count": 1,
  "reply_to_post_number": 8,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 5.6,
  "yours": false,
  "topic_id": 125,
  "topic_slug": "catt-thoughts-about-an-alternative-covenant-softfork-proposal",
  "topic_title": "CATT: thoughts about an alternative covenant softfork proposal",
  "topic_html_title": "CATT: thoughts about an alternative covenant softfork proposal",
  "category_id": 7,
  "display_username": "Steven Roose",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "reardencode",
    "name": "Brandon Black",
    "avatar_template": "/user_avatar/delvingbitcoin.org/reardencode/{size}/27_2.png"
  },
  "bookmarked": false,
  "raw": "Hmm, yeah so I think I read the part where you specify the template hashtypes for CTV. So this document adds them as sighash types basically.\n\nIn theory we could do the exact same thing with TXHASH: specify a key type and use the TxFieldSelector construction as a \"sighash flags on steroids\" where you can use that to select parts of the tx to hash.\n\nYour proposal a huge difference in flexibility with TXHASH, though. For example the special treatment of only the first input is very limiting in many ways.\n\nI think I'm at the point where all resource usage concerns can be elevated from TXHASH so I don't see why we would need a system that pre-sets different modes of operation instead of allowing users to set their own. Of course the result is very likely that only a handful of TxFieldSelector values will take up 99% of usage, but it does allow protocol developers to construct more complicated systems.\n\nActually this makes me think twice about the default for TXHASH. Currently the default is \"all that's non-recursive\", so CTV-style. But in fact for a sighash, the regular \"ALL\" makes more sense.\n\nWe do have one special case value we can assign: the 0x00 byte, because \"not including anything\" is currently not allowed. So we could play with two different \"shortcut values\": `0x` and `0x00`.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 76,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}