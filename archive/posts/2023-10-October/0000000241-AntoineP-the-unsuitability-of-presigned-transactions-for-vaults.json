{
  "id": 241,
  "name": "Antoine Poinsot",
  "username": "AntoineP",
  "avatar_template": "/letter_avatar_proxy/v4/letter/a/8e8cbc/{size}.png",
  "created_at": "2023-10-01T18:56:45.507Z",
  "cooked": "<p>I\u2019d like to comment on a few things:</p>\n<ul>\n<li>Liana is not an emulation of a vault;</li>\n<li>I think you don\u2019t address the right point with regard to covenant emulation;</li>\n<li>I believe Revault actually needs some sort of covenant to be practical.</li>\n</ul>\n<aside class=\"quote no-group\" data-username=\"jamesob\" data-post=\"1\" data-topic=\"113\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/j/958977/48.png\" class=\"avatar\"> jamesob:</div>\n<blockquote>\n<p>It\u2019s worth noting that there are open efforts to implement (or emulate) vaults using the existing scripting capabilities we have today, namely <a href=\"https://wizardsardine.com/revault/\" rel=\"noopener nofollow ugc\">Revault</a>, <a href=\"https://wizardsardine.com/liana/\" rel=\"noopener nofollow ugc\">Liana</a>, and Bryan Bishop\u2019s <a href=\"https://github.com/kanzure/python-vaults\" rel=\"noopener nofollow ugc\">prototype code </a>.</p>\n</blockquote>\n</aside>\n<p>Liana is neither aiming to emulate a vault nor using a vault-like construction. I think of vaults as protecting against theft, and of Liana as protecting against loss. Technically it\u2019s simply a wallet where you\u2019ve got an additional, timelocked, spending path (similarly to Green).</p>\n<p>That said it could make good use of a covenant in the spirit of <code>TLUV</code> to avoid requiring users rotate their coins to prevent timelock expiration! I think <code>OP_VAULT</code> could be enough actually.</p>\n<aside class=\"quote no-group\" data-username=\"jamesob\" data-post=\"1\" data-topic=\"113\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/j/958977/48.png\" class=\"avatar\"> jamesob:</div>\n<blockquote>\n<p>During recent discussions about <a href=\"https://delvingbitcoin.org/t/covenant-tools-softfork/98\">Covenant tools softfork </a>, a few people have raised the ideas that</p>\n<ol>\n<li>Vaults can be implemented today using transactions which are presigned with ephemeral keys, and</li>\n</ol>\n</blockquote>\n</aside>\n<p>In your post you are mixing up the Revault and ephemeral-key approaches with emulating a covenant using a trusted oracle. You address the former but not the latter. Also Revault isn\u2019t aiming to emulate a covenant. It\u2019s a vault design in itself, a covenant could improve it but not replace it entirely.</p>\n<p>On the other hand the idea you mention (also present in one of your quotes) is about how you can always in a Script require the signature from a cosigning server enforcing the rules of the covenant. This way any form of covenant can be emulated with a trusted oracle.</p>\n<p>There is probably good reasons why this hasn\u2019t been done (especially for vaults, where the SPOF is particularly problematic). But it\u2019s also a fair point to raise: we don\u2019t know of anybody allegedly interested in using vaults who reached the point in development where they have an MVP which emulates the covenant they need using a simple cosigning server.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"jamesob\" data-post=\"1\" data-topic=\"113\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/j/958977/48.png\" class=\"avatar\"> jamesob:</div>\n<blockquote>\n<h3>Quotes</h3>\n<p>[\u2026]</p>\n<blockquote>\n<p>Vaults can be done today with pre-signed transactions, even if the trade-offs are different it\u2019s a practical construction.</p>\n<ul>\n<li><a class=\"mention\" href=\"/u/ariard\">@ariard</a> (<a href=\"https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1741554330\" rel=\"noopener nofollow ugc\">Covenant tools softfork by jamesob \u00b7 Pull Request #28550 \u00b7 bitcoin/bitcoin \u00b7 GitHub</a>)</li>\n</ul>\n</blockquote>\n</blockquote>\n</aside>\n<p>I <a href=\"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020337.html\" rel=\"noopener nofollow ugc\">agree with you</a> \u201cvaults\u201d with a pre-committed transaction chain aren\u2019t very interesting. I would argue the closest design to an actual vault which doesn\u2019t need a covenant is Revault. But i actually believe it does need one, in practice. (This is <a href=\"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-January/021368.html\" rel=\"noopener nofollow ugc\">one of the reasons</a> we\u2019ve paused development there, along with a lack of <em>serious</em> interest.)</p>\n<p>In Revault, one must never give away a signature for an Unvault transaction if (all) their watchtowers haven\u2019t received all the signatures for the Cancel transaction. Not only should they never sign the Unvault before the Cancel but also they must <em>somehow</em> verify all their watchtowers received all Cancel transaction signatures. I don\u2019t think this verification can be done reasonably securely for the kind of amounts you\u2019d have on a vault.</p>\n<p>A covenant (as simple as <code>CTV</code> for instance) would solve this by making the process \u201catomic\u201d. Since the Cancel transaction is (one way or another) committed to in the Unvault output, it always exists whenever an Unvault transaction is signed. And this would presumably be enforced by the signing device itself.</p>\n<p>I guess this is one more point in favour of \u201cit doesn\u2019t follow from the lack of usage of Revault that people don\u2019t want vaults at all\u201d. I\u2019m not convinced they do though, just figured it was worth sharing.</p>\n<hr>\n<p>Besides, small point on <a class=\"mention\" href=\"/u/harding\">@harding</a>\u2019s post:</p>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"2\" data-topic=\"113\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>I\u2019m not sure CPFP needs to be used (can sighash flags be used?),</p>\n</blockquote>\n</aside>\n<p>Probably not. Without APO one malleated txid and all the funds are gone.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2023-10-01T18:56:45.507Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 2,
  "incoming_link_count": 1,
  "reads": 9,
  "readers_count": 8,
  "score": 56.8,
  "yours": false,
  "topic_id": 113,
  "topic_slug": "the-unsuitability-of-presigned-transactions-for-vaults",
  "topic_title": "The unsuitability of presigned transactions for vaults",
  "topic_html_title": "The unsuitability of presigned transactions for vaults",
  "category_id": 7,
  "display_username": "Antoine Poinsot",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I'd like to comment on a few things:\n- Liana is not an emulation of a vault;\n- I think you don't address the right point with regard to covenant emulation;\n- I believe Revault actually needs some sort of covenant to be practical.\n\n\n[quote=\"jamesob, post:1, topic:113\"]\nIt\u2019s worth noting that there are open efforts to implement (or emulate) vaults using the existing scripting capabilities we have today, namely [Revault](https://wizardsardine.com/revault/), [Liana](https://wizardsardine.com/liana/), and Bryan Bishop\u2019s [prototype code ](https://github.com/kanzure/python-vaults).\n[/quote]\nLiana is neither aiming to emulate a vault nor using a vault-like construction. I think of vaults as protecting against theft, and of Liana as protecting against loss. Technically it's simply a wallet where you've got an additional, timelocked, spending path (similarly to Green).\n\nThat said it could make good use of a covenant in the spirit of `TLUV` to avoid requiring users rotate their coins to prevent timelock expiration! I think `OP_VAULT` could be enough actually.\n\n[quote=\"jamesob, post:1, topic:113\"]\nDuring recent discussions about [Covenant tools softfork ](https://delvingbitcoin.org/t/covenant-tools-softfork/98), a few people have raised the ideas that\n\n1. Vaults can be implemented today using transactions which are presigned with ephemeral keys, and\n[/quote]\n\nIn your post you are mixing up the Revault and ephemeral-key approaches with emulating a covenant using a trusted oracle. You address the former but not the latter. Also Revault isn't aiming to emulate a covenant. It's a vault design in itself, a covenant could improve it but not replace it entirely.\n\nOn the other hand the idea you mention (also present in one of your quotes) is about how you can always in a Script require the signature from a cosigning server enforcing the rules of the covenant. This way any form of covenant can be emulated with a trusted oracle.\n\nThere is probably good reasons why this hasn't been done (especially for vaults, where the SPOF is particularly problematic). But it's also a fair point to raise: we don't know of anybody allegedly interested in using vaults who reached the point in development where they have an MVP which emulates the covenant they need using a simple cosigning server.\n\n[quote=\"jamesob, post:1, topic:113\"]\n### Quotes\n[...]\n> Vaults can be done today with pre-signed transactions, even if the trade-offs are different it\u2019s a practical construction.\n>\n>\n>\n> * @ariard ([Covenant tools softfork by jamesob \u00b7 Pull Request #28550 \u00b7 bitcoin/bitcoin \u00b7 GitHub](https://github.com/bitcoin/bitcoin/pull/28550#issuecomment-1741554330))\n[/quote]\n\nI [agree with you](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020337.html) \"vaults\" with a pre-committed transaction chain aren't very interesting. I would argue the closest design to an actual vault which doesn't need a covenant is Revault. But i actually believe it does need one, in practice. (This is [one of the reasons](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-January/021368.html) we've paused development there, along with a lack of *serious* interest.)\n\nIn Revault, one must never give away a signature for an Unvault transaction if (all) their watchtowers haven't received all the signatures for the Cancel transaction. Not only should they never sign the Unvault before the Cancel but also they must *somehow* verify all their watchtowers received all Cancel transaction signatures. I don't think this verification can be done reasonably securely for the kind of amounts you'd have on a vault.\n\nA covenant (as simple as `CTV` for instance) would solve this by making the process \"atomic\". Since the Cancel transaction is (one way or another) committed to in the Unvault output, it always exists whenever an Unvault transaction is signed. And this would presumably be enforced by the signing device itself.\n\nI guess this is one more point in favour of \"it doesn't follow from the lack of usage of Revault that people don't want vaults at all\". I'm not convinced they do though, just figured it was worth sharing.\n\n\n---\n\nBesides, small point on @harding's post:\n\n[quote=\"harding, post:2, topic:113\"]\nI\u2019m not sure CPFP needs to be used (can sighash flags be used?),\n[/quote]\n\nProbably not. Without APO one malleated txid and all the funds are gone.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 12,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}