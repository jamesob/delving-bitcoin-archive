{
  "id": 311,
  "name": "",
  "username": "dgpv",
  "avatar_template": "/user_avatar/delvingbitcoin.org/dgpv/{size}/75_2.png",
  "created_at": "2023-10-13T13:09:24.609Z",
  "cooked": "<p>In principle, it is possible to analyze non-static <code>&lt;n&gt;</code> for <code>ROLL</code> or <code>PICK</code> to some degree.</p>\n<p>I\u2019m not sure how practical it is, though, and if it is worth it putting the effort to allow this.</p>\n<p>Each value of <code>&lt;n&gt;</code> for <code>ROLL</code> will require its own execution path. <code>bsst</code> could put some upper limit on <code>&lt;n&gt;</code>, generate that many execution paths, analyze them one by one, and then show them in the report as \u2018branches\u2019 with conditions like <code>&lt;n&gt; = 1</code>, <code>&lt;n&gt; = 2</code>, etc.</p>\n<p>But if <code>&lt;n&gt;</code> could happen to be above this limit, the analysis will be incomplete. The report can show a warning, something like \u201cargument for PICK can be above the limit, analysis is incomplete\u201d. This warning will be shown in each execution path generated for each value of <code>&lt;n&gt;</code>.</p>\n<p>If there are more than one such place in the script with non-static arg for <code>PICK</code> or <code>ROLL</code>, you will get a <em>lot</em> of execution paths in the report :-). I guess there needs to be an upper limit for the number of exec paths, too.</p>\n<p>Can you give some examples of the <em>practical</em> scripts with non-static arg for <code>PICK</code> or <code>ROLL</code> ?</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2023-10-13T13:15:11.468Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 1,
  "readers_count": 0,
  "score": 0.2,
  "yours": false,
  "topic_id": 137,
  "topic_slug": "bsst-plugins-for-covenant-opcodes",
  "topic_title": "B'SST plugins for covenant opcodes",
  "topic_html_title": "B&rsquo;SST plugins for covenant opcodes",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "In principle, it is possible to analyze non-static `<n>` for `ROLL` or `PICK` to some degree.\n\nI'm not sure how practical it is, though, and if it is worth it putting the effort to allow this.\n\nEach value of `<n>` for `ROLL` will require its own execution path. `bsst` could put some upper limit on `<n>`, generate that many execution paths, analyze them one by one, and then show them in the report as 'branches' with conditions like `<n> = 1`, `<n> = 2`, etc.\n\nBut if `<n>` could happen to be above this limit, the analysis will be incomplete. The report can show a warning, something like \"argument for PICK can be above the limit, analysis is incomplete\". This warning will be shown in each execution path generated for each value of `<n>`.\n\nIf there are more than one such place in the script with non-static arg for `PICK` or `ROLL`, you will get a *lot* of execution paths in the report :-). I guess there needs to be an upper limit for the number of exec paths, too.\n\nCan you give some examples of the *practical* scripts with non-static arg for `PICK` or `ROLL` ?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 85,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}