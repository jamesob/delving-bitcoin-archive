{
  "id": 261,
  "name": "James O'Beirne",
  "username": "jamesob",
  "avatar_template": "/letter_avatar_proxy/v4/letter/j/958977/{size}.png",
  "created_at": "2023-10-02T14:09:13.566Z",
  "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"harding\" data-post=\"2\" data-topic=\"113\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>What is the fundamental difference between an ephemeral key and an ephemeral nonce (the private form of a signature nonce)? [\u2026]</p>\n<p>It feels to me like ephemeral keys and ephemeral nonces are really closely related, so any argument that states ephemeral keys aren\u2019t secure enough is an argument that neither ECDSA nor schnorr is secure enough, especially in the presence of address reuse.</p>\n</blockquote>\n</aside>\n<p>I think these might only be analogous in a strictly theoretical sense, at least today. If I understand correctly, nonces are confined to the signing device e.g. a hardware wallet. On the other hand, constructing a presigned tree of vault transactions must almost certainly be done on a general purpose computer because of lack of hardware wallet support for fully general PSBTs. Not to mention the fact that no wallet I\u2019m aware of makes it easy to quickly generate a throwaway keypair. From a practical standpoint I don\u2019t think this analogy holds until HWW manufacturers support some kind of more general signature mechanism.</p>\n<p>And even then, I think it would be fairly time-consumptive to refresh and sign with ephemeral keys each time you want to deposit, even assuming HWW support, vs. having an xpub on your computer that can just generate fresh addresses.</p>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"2\" data-topic=\"113\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>why can\u2019t all of the paths in a presigned transaction vault have a tapleaf that allows spending by the most-secure-key? That way, if something goes wrong, the most-secure-key can be used to recover and coins never become permanently burnt.</p>\n</blockquote>\n</aside>\n<p>That\u2019s a good point - I\u2019m pretty sure that\u2019s possible, even though it hasn\u2019t been implemented in any existing OSS presigned vault scheme to my knowledge.</p>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"2\" data-topic=\"113\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>presigned vault transactions may be able to have an efficiency advantage over OP_VAULT transactions by the presigned versions being able to use all keypath spends (with BIP68 sequence bits set), whereas OP_VAULT must use scriptpath spends (unless the most-secure-key is used). I think the vbytes difference probably favors the OP_VAULT version there (unless a deep taproot path is used), but I think it makes the comparison less clear cut.</p>\n</blockquote>\n</aside>\n<p>This is the point I disagree on most, I think. I believe you\u2019re overlooking the significant overhead that comes with presigned vaults requiring separate transactional flows for each vaulted deposit.</p>\n<p>Consider this figure from BIP-345:<br>\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/1X/f75694ab9a4d6d60e60bab9df7b8fb20e9e41b68.png\" data-download-href=\"https://delvingbitcoin.org/uploads/default/f75694ab9a4d6d60e60bab9df7b8fb20e9e41b68\" title=\"image\"><img src=\"https://delvingbitcoin.org/uploads/default/original/1X/f75694ab9a4d6d60e60bab9df7b8fb20e9e41b68.png\" alt=\"image\" data-base62-sha1=\"zi3qSIdDYIwYhP55EWB9RAUJY0w\" width=\"690\" height=\"240\" data-dominant-color=\"F8F8F8\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">759\u00d7265 5.33 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Not only do presigned schemes have an extra UTXO/transaction created for each separate vault coin during withdrawal (the \u201cunvault\u201d \u2192 \u201cwarm wallet\u201d step that exists in presigned but not OP_VAULT), but there are <code>n-1</code> extra unvault (or \u201ctrigger\u201d) outputs created when initiating the unvault (where <code>n</code> is the number of deposits being unvaulted).</p>\n<p>This makes e.g., dollar-cost averaging into a presigned txn vault unreasonably burdensome, since you\u2019d be talking about potentially hundreds of extra UTXOs and transactions created.</p>\n<p>I can run a simulation of specific sizes if you\u2019d like, but I hope the diagram at least gives some indication of the scale of the difference.</p>\n<p>It is possible that for an input vault coin or two, the space consumed may be comparable. But consider that presigned vaults have <a href=\"https://github.com/JSwambo/bitcoin-vault/blob/12a00b1a0d041e84864cf2b62547dcb0c63f0e23/generate_addresses.py#L68-L70\">non-trivial scripts as well</a>, so the witness sizes may not be all that different.</p>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"2\" data-topic=\"113\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>Additionally, I think ephemeral anchors, if deployed, will eliminate the need to use a statically-defined wallet. Instead, any onchain funds will be able to fee bump the vault transaction without introducing pinning risks.</p>\n</blockquote>\n</aside>\n<p>Currently, V3 transactions (including ephemeral anchors) <a href=\"https://github.com/bitcoin/bitcoin/pull/26403/commits/0ee425f6f7eeba4da1dcbb07251446e3f62031c0#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R929\">don\u2019t support packages</a> that would be compatible with using a single anchor to bump multiple \u201cparent\u201d vault transactions. EAs are only planned, at least as of now, to support single-child-single-parent topologies. Based on how expectations of V3 functionality have been scaled back, it is unclear whether there will ever be a policy that supports bumping multiple parent transactions with EAs, which exacerbates the separate-txn limitation I described above.</p>",
  "post_number": 5,
  "post_type": 1,
  "updated_at": "2023-10-02T14:14:20.131Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 6,
  "readers_count": 5,
  "score": 1.0,
  "yours": false,
  "topic_id": 113,
  "topic_slug": "the-unsuitability-of-presigned-transactions-for-vaults",
  "topic_title": "The unsuitability of presigned transactions for vaults",
  "topic_html_title": "The unsuitability of presigned transactions for vaults",
  "category_id": 7,
  "display_username": "James O'Beirne",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"harding, post:2, topic:113\"]\nWhat is the fundamental difference between an ephemeral key and an ephemeral nonce (the private form of a signature nonce)? [...]\n\nIt feels to me like ephemeral keys and ephemeral nonces are really closely related, so any argument that states ephemeral keys aren\u2019t secure enough is an argument that neither ECDSA nor schnorr is secure enough, especially in the presence of address reuse.\n[/quote]\n\nI think these might only be analogous in a strictly theoretical sense, at least today. If I understand correctly, nonces are confined to the signing device e.g. a hardware wallet. On the other hand, constructing a presigned tree of vault transactions must almost certainly be done on a general purpose computer because of lack of hardware wallet support for fully general PSBTs. Not to mention the fact that no wallet I'm aware of makes it easy to quickly generate a throwaway keypair. From a practical standpoint I don't think this analogy holds until HWW manufacturers support some kind of more general signature mechanism.\n\nAnd even then, I think it would be fairly time-consumptive to refresh and sign with ephemeral keys each time you want to deposit, even assuming HWW support, vs. having an xpub on your computer that can just generate fresh addresses.\n\n[quote=\"harding, post:2, topic:113\"]\nwhy can\u2019t all of the paths in a presigned transaction vault have a tapleaf that allows spending by the most-secure-key? That way, if something goes wrong, the most-secure-key can be used to recover and coins never become permanently burnt.\n[/quote]\n\nThat's a good point - I'm pretty sure that's possible, even though it hasn't been implemented in any existing OSS presigned vault scheme to my knowledge.\n\n[quote=\"harding, post:2, topic:113\"]\npresigned vault transactions may be able to have an efficiency advantage over OP_VAULT transactions by the presigned versions being able to use all keypath spends (with BIP68 sequence bits set), whereas OP_VAULT must use scriptpath spends (unless the most-secure-key is used). I think the vbytes difference probably favors the OP_VAULT version there (unless a deep taproot path is used), but I think it makes the comparison less clear cut.\n[/quote]\n\nThis is the point I disagree on most, I think. I believe you're overlooking the significant overhead that comes with presigned vaults requiring separate transactional flows for each vaulted deposit. \n\nConsider this figure from BIP-345:\n![image|690x240](upload://zi3qSIdDYIwYhP55EWB9RAUJY0w.png)\n\nNot only do presigned schemes have an extra UTXO/transaction created for each separate vault coin during withdrawal (the \"unvault\" -> \"warm wallet\" step that exists in presigned but not OP_VAULT), but there are `n-1` extra unvault (or \"trigger\") outputs created when initiating the unvault (where `n` is the number of deposits being unvaulted).\n\nThis makes e.g., dollar-cost averaging into a presigned txn vault unreasonably burdensome, since you'd be talking about potentially hundreds of extra UTXOs and transactions created.\n\nI can run a simulation of specific sizes if you'd like, but I hope the diagram at least gives some indication of the scale of the difference.\n\nIt is possible that for an input vault coin or two, the space consumed may be comparable. But consider that presigned vaults have [non-trivial scripts as well](https://github.com/JSwambo/bitcoin-vault/blob/12a00b1a0d041e84864cf2b62547dcb0c63f0e23/generate_addresses.py#L68-L70), so the witness sizes may not be all that different.\n\n[quote=\"harding, post:2, topic:113\"]\nAdditionally, I think ephemeral anchors, if deployed, will eliminate the need to use a statically-defined wallet. Instead, any onchain funds will be able to fee bump the vault transaction without introducing pinning risks.\n[/quote]\n\nCurrently, V3 transactions (including ephemeral anchors) [don't support packages](https://github.com/bitcoin/bitcoin/pull/26403/commits/0ee425f6f7eeba4da1dcbb07251446e3f62031c0#diff-97c3a52bc5fad452d82670a7fd291800bae20c7bc35bb82686c2c0a4ea7b5b98R929) that would be compatible with using a single anchor to bump multiple \"parent\" vault transactions. EAs are only planned, at least as of now, to support single-child-single-parent topologies. Based on how expectations of V3 functionality have been scaled back, it is unclear whether there will ever be a policy that supports bumping multiple parent transactions with EAs, which exacerbates the separate-txn limitation I described above.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 9,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}