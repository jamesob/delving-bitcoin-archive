{
  "id": 193,
  "name": "Dan Gould",
  "username": "bitgould",
  "avatar_template": "/user_avatar/delvingbitcoin.org/bitgould/{size}/482_2.png",
  "created_at": "2023-09-24T17:21:14.713Z",
  "cooked": "<h2><a name=\"mitigating-oblivious-http-relay-timing-attacks-1\" class=\"anchor\" href=\"#mitigating-oblivious-http-relay-timing-attacks-1\"></a>Mitigating Oblivious HTTP Relay Timing Attacks</h2>\n<p>Although sender and receiver IP addresses are hidden from the payjoin relay and require OHTTP proxy and payjoin relay to collude in order to correlate a particular pair of payjoin peers, If both sender and receiver are using the same OHTTP proxy the timing of their traffic may sufficient for that proxy to correlate their IPs together.</p>\n<p>Long-polling in particular, where the payjoin relay responds once relevant data is available may make these timing attacks problematic. Without sufficient traffic or dispersion of OHTTP proxy, timing attacks will always be feasible. Therefore <strong>the first order of business is to build up sufficient payjoin v2 adoption</strong>.</p>\n<p>In order to mitigate the timing problem while advancing adoption, I propose that payjoin-enabled services which already know client IP addresses, (e.g. BitMask, BullBitcoin, Boltz) Operate their own OHTTP proxies and delegate a third party to operate their payjoin relay. If two of a service\u2019s users payjoin together under this design, the service may already be able to identify a correlation, but the payjoin relay would not.</p>\n<p>Assuming <strong>sufficient relay traffic</strong> i.e. overlapping payjoin protocol interactions parties, I think the ability to correlate sender and receiver sharing an OHTTP proxy can be mitigated with 1. regular HTTP polling rather than long-polling and 2. random delays and 3. A shift to larger third-party OHTTP proxies which transport relatively more traffic.  Delays would only work if they were sufficient enough so that an attacker would be unable to collect enough data to unwind the randomness and obtain clarity about the behavior of a specific set of peers.</p>",
  "post_number": 3,
  "post_type": 1,
  "posts_count": 4,
  "updated_at": "2023-09-24T17:21:14.713Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 35,
  "readers_count": 34,
  "score": 17.0,
  "yours": false,
  "topic_id": 96,
  "topic_slug": "serverless-payjoin-protocol-design",
  "topic_title": "Serverless Payjoin Protocol Design",
  "topic_html_title": "Serverless Payjoin Protocol Design",
  "category_id": 7,
  "display_username": "Dan Gould",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "## Mitigating Oblivious HTTP Relay Timing Attacks\n\nAlthough sender and receiver IP addresses are hidden from the payjoin relay and require OHTTP proxy and payjoin relay to collude in order to correlate a particular pair of payjoin peers, If both sender and receiver are using the same OHTTP proxy the timing of their traffic may sufficient for that proxy to correlate their IPs together.\n\nLong-polling in particular, where the payjoin relay responds once relevant data is available may make these timing attacks problematic. Without sufficient traffic or dispersion of OHTTP proxy, timing attacks will always be feasible. Therefore **the first order of business is to build up sufficient payjoin v2 adoption**.\n\nIn order to mitigate the timing problem while advancing adoption, I propose that payjoin-enabled services which already know client IP addresses, (e.g. BitMask, BullBitcoin, Boltz) Operate their own OHTTP proxies and delegate a third party to operate their payjoin relay. If two of a service's users payjoin together under this design, the service may already be able to identify a correlation, but the payjoin relay would not.\n\nAssuming **sufficient relay traffic** i.e. overlapping payjoin protocol interactions parties, I think the ability to correlate sender and receiver sharing an OHTTP proxy can be mitigated with 1. regular HTTP polling rather than long-polling and 2. random delays and 3. A shift to larger third-party OHTTP proxies which transport relatively more traffic.  Delays would only work if they were sufficient enough so that an attacker would be unable to collect enough data to unwind the randomness and obtain clarity about the behavior of a specific set of peers.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 17,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "<a name=\"mitigating-oblivious-http-relay-timing-attacks-1\" class=\"anchor\" href=\"#mitigating-oblivious-http-relay-timing-attacks-1\"></a>Mitigating Oblivious HTTP Relay Timing Attacks\nAlthough sender and receiver IP addresses are hidden from the payjoin relay and require OHTTP proxy and payjoin relay to collude in order to correlate a particular pair of payjoin peers, If both sender and receiver are using the same OHTTP proxy the tim&hellip;",
  "truncated": true,
  "post_url": "/t/serverless-payjoin-protocol-design/96/3",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}