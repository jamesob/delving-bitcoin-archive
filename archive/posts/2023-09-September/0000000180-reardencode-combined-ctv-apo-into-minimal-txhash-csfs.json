{
  "id": 180,
  "name": "Brandon Black",
  "username": "reardencode",
  "avatar_template": "/user_avatar/delvingbitcoin.org/reardencode/{size}/27_2.png",
  "created_at": "2023-09-08T16:39:22.417Z",
  "cooked": "<p>Continuing to explore these ideas, and discussing with many folks (thanks everyone), it is seeming more and more like for hash-based transaction validation there is at least some disjunction between the types of hashes that we would want to verify with a signature vs. those that we would want to check a simple comparison. In light of this, I\u2019m working on an updated proposal that attempts to unify this style of (loosely) ANYPREVOUT/NOINPUT hash that can be used to form covenants, and (for similar reasons) allow for dynamic binding.</p>\n<p>Some folks have been talking about soft forking both APO and CTV as written, which is tempting (and I would not resist such a fork); but I continue to think that APO itself is kinda a weird half measure. My current line of thinking is to take much of APO\u2019s design (new key version, signing with taproot internal key), but use an entirely new hashing method that is nearly or completely disjoint from the existing Tapscript v0 key signature hashing. <strong>Is anyone currently aware of a proposal or protocol that would specifically want to use a Tapscript v1 key and in some cases sign with SIGHASH_DEFAULT but in others sign with one of the new APO modes?</strong></p>\n<p>If we design a separate hashing mode for our new Tapscript key version, then we can also mirror that mode (with appropriate modification for use in equality vs. signature check) to CTV with 33-byte hash, and avoid the temptation for folks to use pre-signed output covenants in awkward ways. Further, in designing the hashing mode, we can have a separate default mode from the existing SIGHASH_DEFAULT which is better suited to these V1 keys and would save a byte in whatever that common signing case is (I propose that this default be the signature-appropriate equivalent of CTV so that Tapscript v1 key and CTV hashes closely mirror each other).</p>\n<p>Here\u2019s my (updated link) draft of this line of thinking:</p><aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/reardencode/bips/blob/bip-template-key/bip-template-key.mediawiki\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/reardencode/bips/blob/bip-template-key/bip-template-key.mediawiki\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/reardencode/bips/blob/bip-template-key/bip-template-key.mediawiki\" target=\"_blank\" rel=\"noopener nofollow ugc\">reardencode/bips/blob/bip-template-key/bip-template-key.mediawiki</a></h4>\n\n\n      <pre><code class=\"lang-mediawiki\">&lt;pre&gt;\n  BIP: TBD\n  Layer: Consensus (soft fork)\n  Title: Template Hash\n  Author: Brandon Black &lt;freedom@reardencode.com&gt;\n  Status: Draft\n  Type: Standards Track\n  Created: 2023-09-07\n  License: BSD-3-Clause\n  Requires: 119, 340, 341, 342\n  Replaces: 118\n&lt;/pre&gt;\n\n== Introduction ==\n\n== Abstract ==\n\nThis BIP describes a new set of hashing modes corresponding to a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions. It additionally defines a virtual public key for use in tapscript, corresponding to the taproot internal key used with these new hashing modes.\n\nThe hashing modes defined in this BIP do not do not commit to the previous outpoint being spent, enabling dynamic binding of the signed transaciton to different UTXOs providing the other hashed parts of the transaction match.\n</code></pre>\n\n\n\n  This file has been truncated. <a href=\"https://github.com/reardencode/bips/blob/bip-template-key/bip-template-key.mediawiki\" target=\"_blank\" rel=\"noopener nofollow ugc\">show original</a>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
  "post_number": 8,
  "post_type": 1,
  "updated_at": "2023-09-09T13:04:38.002Z",
  "reply_count": 0,
  "reply_to_post_number": 7,
  "quote_count": 0,
  "incoming_link_count": 58,
  "reads": 2,
  "readers_count": 1,
  "score": 285.2,
  "yours": false,
  "topic_id": 60,
  "topic_slug": "combined-ctv-apo-into-minimal-txhash-csfs",
  "topic_title": "Combined CTV/APO into minimal TXHASH+CSFS",
  "topic_html_title": "Combined CTV/APO into minimal TXHASH+CSFS",
  "category_id": 7,
  "display_username": "Brandon Black",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "reardencode",
    "name": "Brandon Black",
    "avatar_template": "/user_avatar/delvingbitcoin.org/reardencode/{size}/27_2.png"
  },
  "bookmarked": false,
  "raw": "Continuing to explore these ideas, and discussing with many folks (thanks everyone), it is seeming more and more like for hash-based transaction validation there is at least some disjunction between the types of hashes that we would want to verify with a signature vs. those that we would want to check a simple comparison. In light of this, I'm working on an updated proposal that attempts to unify this style of (loosely) ANYPREVOUT/NOINPUT hash that can be used to form covenants, and (for similar reasons) allow for dynamic binding.\n\nSome folks have been talking about soft forking both APO and CTV as written, which is tempting (and I would not resist such a fork); but I continue to think that APO itself is kinda a weird half measure. My current line of thinking is to take much of APO's design (new key version, signing with taproot internal key), but use an entirely new hashing method that is nearly or completely disjoint from the existing Tapscript v0 key signature hashing. **Is anyone currently aware of a proposal or protocol that would specifically want to use a Tapscript v1 key and in some cases sign with SIGHASH_DEFAULT but in others sign with one of the new APO modes?**\n\nIf we design a separate hashing mode for our new Tapscript key version, then we can also mirror that mode (with appropriate modification for use in equality vs. signature check) to CTV with 33-byte hash, and avoid the temptation for folks to use pre-signed output covenants in awkward ways. Further, in designing the hashing mode, we can have a separate default mode from the existing SIGHASH_DEFAULT which is better suited to these V1 keys and would save a byte in whatever that common signing case is (I propose that this default be the signature-appropriate equivalent of CTV so that Tapscript v1 key and CTV hashes closely mirror each other).\n\nHere's my (updated link) draft of this line of thinking:\nhttps://github.com/reardencode/bips/blob/bip-template-key/bip-template-key.mediawiki",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 30,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}