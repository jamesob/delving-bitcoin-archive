{
  "id": 226,
  "name": "James O'Beirne",
  "username": "jamesob",
  "avatar_template": "/letter_avatar_proxy/v4/letter/j/958977/{size}.png",
  "created_at": "2023-09-30T13:02:36.874Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"11\" data-topic=\"98\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>I feel like a better approach would be to enable a really general set of features that would allow anyone to create and deploy scripts that work like CTV/APO/VAULT and more, even if not in the most efficient way, without having to wait for permission. If we see a lot of onchain use (or otherwise demonstrated offchain use) of a generalized feature for something that would be more efficient if it was specialized, we can soft fork in that specialized feature and everyone who previously used the generalized version can immediately switch to the specialized version\u2014an instant win with hopefully no controversy.</p>\n<p>The stub proposal I\u2019ve used for this in the past is <code>OP_CSFS</code> + <code>OP_CAT</code>, or some variation on it (such as the SHA-based version used in Elements). That\u2019s a really small consensus change and yet it allows implementation of any sort of transaction introspection we might want. Of course, maybe Simplicity, BTC Lisp, TXHASH, MATT, or something else would be better. The risks of this approach are recursive covenants and the creation of MEV scenarios, but it seems to me that there\u2019s also a risk of stifling development if we won\u2019t build anything until a new limited opcode is added for it in an event that might only happen once every four years, plus the risk of adding specialized opcodes or sighashes to Bitcoin that we will need to support forever but which might never see any significant use.</p>\n</blockquote>\n</aside>\n<p>This is a nice sentiment, and the \u201cCISC vs. RISC\u201d debate is a great target for its own thread, but in general I think even when you set aside large script sizes and the difficulty of working with bitcoin script, CAT and CSFS are non-starters.</p>\n<p>The amount preservation and batching features of the <code>OP_VAULT</code> design would require 64 bit arithmetic in script, as well as opcodes that facilitate taptweak checks (merkle operations), and pushing various parts of the transaction to the stack. The \u201cdeferred checks\u201d aspect of VAULT, which enables batching (and would be required for signature aggregation), requires fundamental modifications to the validation code outside of script.</p>\n<p>The \u201copen sandbox in script\u201d approach, again enviable for its permissionlessness, just doesn\u2019t seem realistically workable to me given all these prerequisites. Or we\u2019d be talking about a script overhaul that entails a much larger fork. There\u2019s also probably a camp of people who would argue that it\u2019d rather be worth focusing on Simplicity to get to that level of complexity in script.</p>\n<p>And once we get there, if we got there, we\u2019d have to contend with the brittle nature of writing these scripts and the ensuing on-chain footprint. And the eventual \u201cjetting\u201d of opcodes that emerge from the on-chain experimentation.</p>\n<p>These criticisms apply to proposals like MATT and OP_TX.</p>\n<hr>\n<p>I really see where you\u2019re coming from on this one, and at a low level I agree with you, I just don\u2019t think it\u2019s the most expeditious path to making bitcoin much more useful on the scale of a few years.</p>",
  "post_number": 14,
  "post_type": 1,
  "updated_at": "2023-09-30T13:04:10.104Z",
  "reply_count": 0,
  "reply_to_post_number": 11,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 16.4,
  "yours": false,
  "topic_id": 98,
  "topic_slug": "covenant-tools-softfork",
  "topic_title": "Covenant tools softfork",
  "topic_html_title": "Covenant tools softfork",
  "category_id": 7,
  "display_username": "James O'Beirne",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"harding, post:11, topic:98\"]\nI feel like a better approach would be to enable a really general set of features that would allow anyone to create and deploy scripts that work like CTV/APO/VAULT and more, even if not in the most efficient way, without having to wait for permission. If we see a lot of onchain use (or otherwise demonstrated offchain use) of a generalized feature for something that would be more efficient if it was specialized, we can soft fork in that specialized feature and everyone who previously used the generalized version can immediately switch to the specialized version\u2014an instant win with hopefully no controversy.\n\nThe stub proposal I\u2019ve used for this in the past is `OP_CSFS` + `OP_CAT`, or some variation on it (such as the SHA-based version used in Elements). That\u2019s a really small consensus change and yet it allows implementation of any sort of transaction introspection we might want. Of course, maybe Simplicity, BTC Lisp, TXHASH, MATT, or something else would be better. The risks of this approach are recursive covenants and the creation of MEV scenarios, but it seems to me that there\u2019s also a risk of stifling development if we won\u2019t build anything until a new limited opcode is added for it in an event that might only happen once every four years, plus the risk of adding specialized opcodes or sighashes to Bitcoin that we will need to support forever but which might never see any significant use.\n[/quote]\n\nThis is a nice sentiment, and the \"CISC vs. RISC\" debate is a great target for its own thread, but in general I think even when you set aside large script sizes and the difficulty of working with bitcoin script, CAT and CSFS are non-starters.\n\nThe amount preservation and batching features of the `OP_VAULT` design would require 64 bit arithmetic in script, as well as opcodes that facilitate taptweak checks (merkle operations), and pushing various parts of the transaction to the stack. The \"deferred checks\" aspect of VAULT, which enables batching (and would be required for signature aggregation), requires fundamental modifications to the validation code outside of script.\n\nThe \"open sandbox in script\" approach, again enviable for its permissionlessness, just doesn't seem realistically workable to me given all these prerequisites. Or we'd be talking about a script overhaul that entails a much larger fork. There's also probably a camp of people who would argue that it'd rather be worth focusing on Simplicity to get to that level of complexity in script.\n\nAnd once we get there, if we got there, we'd have to contend with the brittle nature of writing these scripts and the ensuing on-chain footprint. And the eventual \"jetting\" of opcodes that emerge from the on-chain experimentation.\n\nThese criticisms apply to proposals like MATT and OP_TX.\n\n---\n\nI really see where you're coming from on this one, and at a low level I agree with you, I just don't think it's the most expeditious path to making bitcoin much more useful on the scale of a few years.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 9,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}