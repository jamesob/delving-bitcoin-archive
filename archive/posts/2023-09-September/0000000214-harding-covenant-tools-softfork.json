{
  "id": 214,
  "name": "David A. Harding",
  "username": "harding",
  "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/6_2.png",
  "created_at": "2023-09-29T20:31:57.717Z",
  "cooked": "<p>I don\u2019t oppose any of these proposals, individually or together, and I\u2019ll be happy to see any or all of them included in Bitcoin (as long as no major problems are found during review).  However, I continue to feel like adding specific features to Bitcoin for unproven usecases is a suboptimal approach.  Looking at <a class=\"mention\" href=\"/u/jamesob\">@jamesob</a>\u2019s list:</p>\n<aside class=\"quote no-group\" data-username=\"jamesob\" data-post=\"1\" data-topic=\"98\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/j/958977/48.png\" class=\"avatar\"> jamesob:</div>\n<blockquote>\n<ul>\n<li><a href=\"https://bitcoinops.org/en/topics/vaults/\">vaults </a> (reactive custodial security),</li>\n<li><a href=\"https://bitcoinops.org/en/topics/eltoo/\">LN-Symmetry </a>,</li>\n<li>efficient implementations of <a href=\"https://bitcoinops.org/en/topics/discreet-log-contracts/\">DLCs </a>,</li>\n<li><a href=\"https://utxos.org/uses/non-interactive-channels/\">non-interactive channel openings </a>,</li>\n<li><a href=\"https://utxos.org/uses/scaling/\">congestion control </a>,</li>\n<li>decentralized mining pools (via <a href=\"https://utxos.org/uses/miningpools/\">CTV compression in coinbase payouts </a>),</li>\n<li>various <a href=\"https://twitter.com/roasbeef/status/1692589689939579259\">Lightning efficiency improvements </a>,</li>\n<li>using <a href=\"https://bitcoinops.org/en/newsletters/2023/09/27/\">covenant based timeout-trees </a> to scale Lightning, and more generally enabling <a href=\"https://bitcoinops.org/en/topics/channel-factories/\">channel factories</a>.</li>\n</ul>\n</blockquote>\n</aside>\n<ul>\n<li>\n<p><strong>Vaults</strong> can be done today with presigned transactions.  The presigned versions are a lot harder to implement correctly than with <code>OP_CTV</code> + <code>OP_VAULT</code>, they can\u2019t receive payments without interaction with the payer, and the vault user needs to store more data.  However, it seems to me that if there were high demand for the general ability to have hot spends announced onchain with a cancellation window, a significant number of people would be using presigned vaults\u2014but I\u2019m not aware of that happening.</p>\n</li>\n<li>\n<p><strong>LN-Symmetry:</strong> has not received a significant amount of work from people who usually work on LN and discussions about it often indicate that some LN developers think a different protocol is needed, such as one that continue to provide penalties.  It also seems to me personally that John Law\u2019s tunable penalties protocol provides the primary advantage of LN-Symmetry (proper assignment of penalties when &gt;2 parties are involved) without requiring any consensus change.</p>\n</li>\n<li>\n<p><strong>More efficient DLCs:</strong> if this is referring to <a href=\"https://bitcoinops.org/en/newsletters/2022/02/02/#improving-dlc-efficiency-by-changing-script\">what I think</a>, this efficiency boost is just in the amount of offchain operations DLC users need to generate and store; it doesn\u2019t significantly change the onchain footprint of DLCs.  DLCs have been operational for several years but have not seen any major use that I\u2019m aware of; I believe this is partly due to their poor scalability characteristics.  Every DLC-based trade needs to be anchored onchain; it\u2019s possible to use the same anchor for multiple trades, but only if you use the same trading partner(s) for all of them.  By comparison, a centralized trading clearinghouse (e.g. an exchange) requires trust but can pair any seller with any buyer.  AFAIK, there are no proposed solutions for the scalability problem of DLCs.</p>\n</li>\n<li>\n<p><strong>Non-interactive channel openings:</strong> I haven\u2019t looked into this in detail, but this looks to me like a version of <a href=\"https://bitcoinops.org/en/newsletters/2023/01/11/#non-interactive-ln-channel-open-commitments\">swap in potentiam</a>, which is possible today and with (I\u2019d guess) about the same onchain cost as using CTV.</p>\n</li>\n<li>\n<p><strong>Congestion control:</strong> to do congestion control, you need to be able to do payment batching, but payment batching remains underused by popular custodians (although, happily it is used more than when Jeremy Rubin first posted CTV).</p>\n</li>\n<li>\n<p><strong>Decentralized mining pools:</strong> I haven\u2019t looked at this in detail, but we already have a mechanism (Stratum v2) that allows individual hashers to get pretty close to decentralized pooling, but very few hashers seem to be using those features of Stratum v2.</p>\n</li>\n<li>\n<p><strong>Various LN efficiency improvements:</strong> it\u2019s hard to tell what\u2019s being proposed from a tweet-level of text here, but simplification of existing highly used code is something I\u2019d find to be an effective argument for CTV.</p>\n</li>\n<li>\n<p><strong>Using covenant based timeout trees:</strong> Law\u2019s previous proposals, e.g. hierarchical channels and the Fully Factory Optimized Watchtower Free (FFO-WF) protocols provide channel factories that are more capital efficient and more compatible with casual user behavior than previous factory designs, and they don\u2019t require any consensus changes to implement.  The timeout tree design can use those previous protocols to obtain much greater efficiency, so the first step would be implementing hierarchical channels and FFO-WF in LN nodes.</p>\n</li>\n</ul>\n<p>I feel like (with the possible exception of Osuntokun\u2019s tweet), if these were really great ideas that people really wanted and that application developers were eager about, wouldn\u2019t we see more work on, and adoption of, the versions of those protocols which can be deployed now without consensus changes?</p>\n<p>Another way to look at it, using vaults as an example, if <code>OP_VAULT</code> will give thousands of custodians and potentially millions of casual users a 10x better experience keeping their funds safe, why is it that so few developers are working on the 2x-5x improvement that presigned vaults provides and few users seem excited about presigned vaults?</p>\n<p>One reason I can think of for this incongruity between the enthusiasm for CTV/APO/VAULT and the lack of development or use of immediately-deployable versions is that most developers are waiting for CTV/etc. to become available before building the their version of vaults, improved channels, and other features.  But, if that\u2019s the case, how many other great ideas are being held up waiting for the entire Bitcoin userbase to agree on a very specific set of consensus changes?</p>\n<p>I feel like a better approach would be to enable a really general set of features that would allow anyone to create and deploy scripts that work like CTV/APO/VAULT and more, even if not in the most efficient way, without having to wait for permission.  If we see a lot of onchain use (or otherwise demonstrated offchain use) of a generalized feature for something that would be more efficient if it was specialized, we can soft fork in that specialized feature and everyone who previously used the generalized version can immediately switch to the specialized version\u2014an instant win with hopefully no controversy.</p>\n<p>The stub proposal I\u2019ve used for this in the past is <code>OP_CSFS</code> + <code>OP_CAT</code>, or some variation on it (such as the SHA-based version used in Elements).  That\u2019s a really small consensus change and yet it allows implementation of any sort of transaction introspection we might want.  Of course, maybe Simplicity, BTC Lisp, TXHASH, MATT, or something else would be better.  The risks of this approach are recursive covenants and the creation of MEV scenarios, but it seems to me that there\u2019s also a risk of stifling development if we won\u2019t build anything until a new limited opcode is added for it in an event that might only happen once every four years, plus the risk of adding specialized opcodes or sighashes to Bitcoin that we will need to support forever but which might never see any significant use.</p>",
  "post_number": 11,
  "post_type": 1,
  "updated_at": "2023-09-29T20:31:57.717Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 4,
  "reads": 1,
  "readers_count": 0,
  "score": 20.2,
  "yours": false,
  "topic_id": 98,
  "topic_slug": "covenant-tools-softfork",
  "topic_title": "Covenant tools softfork",
  "topic_html_title": "Covenant tools softfork",
  "category_id": 7,
  "display_username": "David A. Harding",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I don't oppose any of these proposals, individually or together, and I'll be happy to see any or all of them included in Bitcoin (as long as no major problems are found during review).  However, I continue to feel like adding specific features to Bitcoin for unproven usecases is a suboptimal approach.  Looking at @jamesob's list:\n\n[quote=\"jamesob, post:1, topic:98\"]\n* [vaults ](https://bitcoinops.org/en/topics/vaults/) (reactive custodial security),\n* [LN-Symmetry ](https://bitcoinops.org/en/topics/eltoo/),\n* efficient implementations of [DLCs ](https://bitcoinops.org/en/topics/discreet-log-contracts/),\n* [non-interactive channel openings ](https://utxos.org/uses/non-interactive-channels/),\n* [congestion control ](https://utxos.org/uses/scaling/),\n* decentralized mining pools (via [CTV compression in coinbase payouts ](https://utxos.org/uses/miningpools/)),\n* various [Lightning efficiency improvements ](https://twitter.com/roasbeef/status/1692589689939579259),\n* using [covenant based timeout-trees ](https://bitcoinops.org/en/newsletters/2023/09/27/) to scale Lightning, and more generally enabling [channel factories](https://bitcoinops.org/en/topics/channel-factories/).\n[/quote]\n\n- **Vaults** can be done today with presigned transactions.  The presigned versions are a lot harder to implement correctly than with `OP_CTV` + `OP_VAULT`, they can't receive payments without interaction with the payer, and the vault user needs to store more data.  However, it seems to me that if there were high demand for the general ability to have hot spends announced onchain with a cancellation window, a significant number of people would be using presigned vaults---but I'm not aware of that happening.\n\n- **LN-Symmetry:** has not received a significant amount of work from people who usually work on LN and discussions about it often indicate that some LN developers think a different protocol is needed, such as one that continue to provide penalties.  It also seems to me personally that John Law's tunable penalties protocol provides the primary advantage of LN-Symmetry (proper assignment of penalties when >2 parties are involved) without requiring any consensus change.\n\n- **More efficient DLCs:** if this is referring to [what I think](https://bitcoinops.org/en/newsletters/2022/02/02/#improving-dlc-efficiency-by-changing-script), this efficiency boost is just in the amount of offchain operations DLC users need to generate and store; it doesn't significantly change the onchain footprint of DLCs.  DLCs have been operational for several years but have not seen any major use that I'm aware of; I believe this is partly due to their poor scalability characteristics.  Every DLC-based trade needs to be anchored onchain; it's possible to use the same anchor for multiple trades, but only if you use the same trading partner(s) for all of them.  By comparison, a centralized trading clearinghouse (e.g. an exchange) requires trust but can pair any seller with any buyer.  AFAIK, there are no proposed solutions for the scalability problem of DLCs.\n\n- **Non-interactive channel openings:** I haven't looked into this in detail, but this looks to me like a version of [swap in potentiam](https://bitcoinops.org/en/newsletters/2023/01/11/#non-interactive-ln-channel-open-commitments), which is possible today and with (I'd guess) about the same onchain cost as using CTV.\n\n- **Congestion control:** to do congestion control, you need to be able to do payment batching, but payment batching remains underused by popular custodians (although, happily it is used more than when Jeremy Rubin first posted CTV).\n\n- **Decentralized mining pools:** I haven't looked at this in detail, but we already have a mechanism (Stratum v2) that allows individual hashers to get pretty close to decentralized pooling, but very few hashers seem to be using those features of Stratum v2.\n\n- **Various LN efficiency improvements:** it's hard to tell what's being proposed from a tweet-level of text here, but simplification of existing highly used code is something I'd find to be an effective argument for CTV.\n\n- **Using covenant based timeout trees:** Law's previous proposals, e.g. hierarchical channels and the Fully Factory Optimized Watchtower Free (FFO-WF) protocols provide channel factories that are more capital efficient and more compatible with casual user behavior than previous factory designs, and they don't require any consensus changes to implement.  The timeout tree design can use those previous protocols to obtain much greater efficiency, so the first step would be implementing hierarchical channels and FFO-WF in LN nodes.\n\nI feel like (with the possible exception of Osuntokun's tweet), if these were really great ideas that people really wanted and that application developers were eager about, wouldn't we see more work on, and adoption of, the versions of those protocols which can be deployed now without consensus changes?\n\nAnother way to look at it, using vaults as an example, if `OP_VAULT` will give thousands of custodians and potentially millions of casual users a 10x better experience keeping their funds safe, why is it that so few developers are working on the 2x-5x improvement that presigned vaults provides and few users seem excited about presigned vaults?\n\nOne reason I can think of for this incongruity between the enthusiasm for CTV/APO/VAULT and the lack of development or use of immediately-deployable versions is that most developers are waiting for CTV/etc. to become available before building the their version of vaults, improved channels, and other features.  But, if that's the case, how many other great ideas are being held up waiting for the entire Bitcoin userbase to agree on a very specific set of consensus changes?\n\nI feel like a better approach would be to enable a really general set of features that would allow anyone to create and deploy scripts that work like CTV/APO/VAULT and more, even if not in the most efficient way, without having to wait for permission.  If we see a lot of onchain use (or otherwise demonstrated offchain use) of a generalized feature for something that would be more efficient if it was specialized, we can soft fork in that specialized feature and everyone who previously used the generalized version can immediately switch to the specialized version---an instant win with hopefully no controversy.\n\nThe stub proposal I've used for this in the past is `OP_CSFS` + `OP_CAT`, or some variation on it (such as the SHA-based version used in Elements).  That's a really small consensus change and yet it allows implementation of any sort of transaction introspection we might want.  Of course, maybe Simplicity, BTC Lisp, TXHASH, MATT, or something else would be better.  The risks of this approach are recursive covenants and the creation of MEV scenarios, but it seems to me that there's also a risk of stifling development if we won't build anything until a new limited opcode is added for it in an event that might only happen once every four years, plus the risk of adding specialized opcodes or sighashes to Bitcoin that we will need to support forever but which might never see any significant use.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 6,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}