{
  "id": 187,
  "name": "Ethan Tuttle",
  "username": "EthnTuttle",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ethntuttle/{size}/26_2.png",
  "created_at": "2023-09-17T02:31:15.687Z",
  "cooked": "<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://bitcointv.com/w/gXuKzcErKxWDv3KKBHZSbA\">\n  <header class=\"source\">\n      <img src=\"https://delvingbitcoin.org/uploads/default/original/1X/bbbc8ae2af1fdebc034eb5033db40ec269dcf3f0.png\" class=\"site-icon\" data-dominant-color=\"3B4040\" width=\"32\" height=\"32\">\n\n      <a href=\"https://bitcointv.com/w/gXuKzcErKxWDv3KKBHZSbA\" target=\"_blank\" rel=\"noopener nofollow ugc\">BitcoinTV.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/389;\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/1X/6c6eb7d81144fe269be2455901371b2efc3d7c4f_2_690x389.jpeg\" class=\"thumbnail\" data-dominant-color=\"2F2E29\" width=\"690\" height=\"389\"></div>\n\n<h3><a href=\"https://bitcointv.com/w/gXuKzcErKxWDv3KKBHZSbA\" target=\"_blank\" rel=\"noopener nofollow ugc\">20230915 - Bitcoin developer tools suck, Devimint fixes this</a></h3>\n\n  <p>Discussion around Devimint (a tool spawned from Fedimint shell scripts into a Rust library/binary) and how it could be a tool for bitcoin developers to reduce friction and the inner developer loop.</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n<p>\n(Click bait title is click bait, but <em>possibly</em> correct)</p>\n<p>What are your favorite developer tools for working within the bitcoin ecosystem?</p>\n<p>I\u2019ll go first.</p>\n<p><strong>Devimint</strong><br>\n(see video for full nuanced discussion, see below for summary thoughts)</p>\n<p>There is a Rust library/binary (it can be used as both) that has automated the standing up of local regtest bitcoin infrastructure for developer environments or CI/CD tests.</p>\n<p>Let\u2019s look at <code>dev_fed()</code> because it is more elaborate that other commands I\u2019ve documented and Fedimint uses it a lot in the tests. (The comment is from my local branch during exploration)</p>\n<pre><code class=\"lang-auto\">async fn handle_command() -&gt; Result&lt;()&gt; {\n    let args = Args::parse();\n    match args.command { \n        ...\n        // spins up bitcoind, cln w/ gateway, lnd w/ gateway, a faucet, electrs, esplora, and a\n        // federation sized from FM_FED_SIZE it opens LN channel between the two nodes. it\n        // connects the gateways to the federation. it finally switches to use the CLN\n        // gateway using the fedimint-cli\n        Cmd::DevFed =&gt; {\n            let (process_mgr, task_group) = setup(args.common).await?;\n            let main = async move {\n                let dev_fed = dev_fed(&amp;process_mgr).await?;\n                dev_fed.fed.pegin(10_000).await?;\n                dev_fed.fed.pegin_gateway(20_000, &amp;dev_fed.gw_cln).await?;\n                dev_fed.fed.pegin_gateway(20_000, &amp;dev_fed.gw_lnd).await?;\n                let daemons = write_ready_file(&amp;process_mgr.globals, Ok(dev_fed)).await?;\n                Ok::&lt;_, anyhow::Error&gt;(daemons)\n            };\n            cleanup_on_exit(main, task_group).await?;\n        }\n        ...\n</code></pre>\n<p>Not only does it connect very commonly used bitcoin daemons, it then opens LN channels and generates blocks so it can pegin to a fully established and setup Fedimint. I\u2019ve heard of but have not used a tool called Polar that seemingly does similar things, but with Docker.</p>\n<p>Do please watch the click bait video. There is more nuanced ideas and discussion that I did not cover here. NixOS and nix-bitcoin is also mentioned.</p>\n<p>So again, \u201cWhat are your favorite developer tools for working within the bitcoin ecosystem?\u201d and why is/isn\u2019t it devimint?</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2023-09-17T02:31:15.687Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 1,
  "readers_count": 0,
  "score": 0,
  "yours": false,
  "topic_id": 94,
  "topic_slug": "bitcoin-developer-tools-suck-possibly-devimint-fixes-this",
  "topic_title": "Bitcoin developer tools suck, <possibly> Devimint fixes this",
  "topic_html_title": "Bitcoin developer tools suck, &lt;possibly&gt; Devimint fixes this",
  "category_id": 8,
  "display_username": "Ethan Tuttle",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "https://bitcointv.com/w/gXuKzcErKxWDv3KKBHZSbA \n(Click bait title is click bait, but *possibly* correct)\n\nWhat are your favorite developer tools for working within the bitcoin ecosystem?\n\nI'll go first.\n\n**Devimint** \n(see video for full nuanced discussion, see below for summary thoughts)\n\nThere is a Rust library/binary (it can be used as both) that has automated the standing up of local regtest bitcoin infrastructure for developer environments or CI/CD tests.\n\nLet's look at `dev_fed()` because it is more elaborate that other commands I've documented and Fedimint uses it a lot in the tests. (The comment is from my local branch during exploration)\n```\nasync fn handle_command() -> Result<()> {\n    let args = Args::parse();\n    match args.command { \n        ...\n        // spins up bitcoind, cln w/ gateway, lnd w/ gateway, a faucet, electrs, esplora, and a\n        // federation sized from FM_FED_SIZE it opens LN channel between the two nodes. it\n        // connects the gateways to the federation. it finally switches to use the CLN\n        // gateway using the fedimint-cli\n        Cmd::DevFed => {\n            let (process_mgr, task_group) = setup(args.common).await?;\n            let main = async move {\n                let dev_fed = dev_fed(&process_mgr).await?;\n                dev_fed.fed.pegin(10_000).await?;\n                dev_fed.fed.pegin_gateway(20_000, &dev_fed.gw_cln).await?;\n                dev_fed.fed.pegin_gateway(20_000, &dev_fed.gw_lnd).await?;\n                let daemons = write_ready_file(&process_mgr.globals, Ok(dev_fed)).await?;\n                Ok::<_, anyhow::Error>(daemons)\n            };\n            cleanup_on_exit(main, task_group).await?;\n        }\n        ...\n```\n\nNot only does it connect very commonly used bitcoin daemons, it then opens LN channels and generates blocks so it can pegin to a fully established and setup Fedimint. I've heard of but have not used a tool called Polar that seemingly does similar things, but with Docker. \n\nDo please watch the click bait video. There is more nuanced ideas and discussion that I did not cover here. NixOS and nix-bitcoin is also mentioned.\n\nSo again, \"What are your favorite developer tools for working within the bitcoin ecosystem?\" and why is/isn't it devimint?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 29,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}