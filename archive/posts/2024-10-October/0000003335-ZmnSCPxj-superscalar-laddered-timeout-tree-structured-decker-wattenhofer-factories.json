{
  "id": 3335,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2024-10-09T01:05:29.175Z",
  "cooked": "<p>addendum</p>\n<h1><a name=\"p-3335-inversion-of-timelock-default-1\" class=\"anchor\" href=\"#p-3335-inversion-of-timelock-default-1\"></a>Inversion of Timelock Default</h1>\n<p>Existing timeout tree discussion has the timeout default in the favor of the LSP.</p>\n<p>However, we should note that the construction needs a timeout (in order to provide a well-defined scope for how long the LSP needs to provide service to the clients), but does not actually need to have the timeout default to the LSP.</p>\n<p>If we assume that the LSP is in the business of selling liquidity, we can assume that the LSP has large amounts of funds available onchain to pay for onchain fees if the timeout tree needs to be published onchain.  What we need is a way to force the LSP to handle unilateral closes and pay for them if the client is so unsatisfied with LSP services that it decides a unilateral close is more palatable.</p>\n<p>Instead of having an <code>L &amp; CLTV</code> branch at the transaction outputs of Decker-Wattenhofer state transactions, we can instead have the signatories sign an <code>nLockTime</code>d transaction that sends the funds to the clients, with the timelock being the timeout of the tree.  Thus, each node output that goes would have gone to an <code>(A &amp; ... &amp; Z &amp; L) or (L &amp; CLTV)</code> would instead have just <code>A &amp; ... &amp; Z &amp; L</code> and <em><strong>two</strong></em> transactions signed:</p>\n<ul>\n<li>The node as shown in the main post.</li>\n<li>An alternate transaction, locked at <code>nLockTime</code>, which distributes the funds so that the initial channels of <code>A</code>\u2026<code>Z</code> are given solely to the respective client, and with <code>L</code>-funds (i.e. the liquidity stock) split evenly among all clients.\n<ul>\n<li>Each node output that eventually leads to the client channel must, by necessity, include the total value of the client channel, plus any channel reserve imposed by clients on the LSP, plus any fellow client channels, plus the liquidity stock the LSP is holding ready for sale to clients.</li>\n<li>As the clients have unilateral control of the outputs, they can trivially fee-bump this alternate timeout transaction to any level.</li>\n</ul>\n</li>\n</ul>\n<p>Then, if a client decides it wants to unilaterally exit, it can force the LSP to pay for unilateral exit by simply never performing an assisted exit from the current tree and waiting until <code>nLockTime</code>.  If the blockheight approaches the <code>nLockTime</code> of the tree, the LSP <em><strong>must</strong></em> initiate the unilateral exit itself, <em>and</em> pay for the confirmation of those nodes, or else it risks loss of all funds still locked in that part of the sub-tree.</p>\n<p>If a client has performed assisted exit (i.e. a PTLC-based swap that exchanges the client private key used in the tree for onchain funds, or for funds in next laddered timeout-tree) then the LSP does not need to fully perform a unilateral exit; it only needs to publish enough nodes until it reaches an output with <code>(A &amp; ... &amp; M &amp; L)</code> where it already got the client private keys <code>A</code>\u2026<code>M</code> via assisted exit.</p>\n<p>This means that the LSP is very incentivized to provide assisted exit.  For instance, for an onchain assisted exit, the client can wait for the PTLC output to be deeply confirmed, and if onchain feerates have changed enough, can require the LSP to re-sign a new PTLC-claim transaction at a different feerate, and the LSP has incentive, up to the cost of onchain fees to perform a unilateral exit from the tree, to cooperate.  The client can abort this assisted exit, and it would not be much different from the client simply refusing to perform an assisted exit and forcing the LSP to perform a unilateral exit from the tree.</p>",
  "post_number": 26,
  "post_type": 1,
  "updated_at": "2024-10-09T01:05:29.175Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 6,
  "reads": 14,
  "readers_count": 13,
  "score": 37.8,
  "yours": false,
  "topic_id": 1143,
  "topic_slug": "superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories",
  "topic_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "topic_html_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "addendum\n\n# Inversion of Timelock Default\n\nExisting timeout tree discussion has the timeout default in the favor of the LSP.\n\nHowever, we should note that the construction needs a timeout (in order to provide a well-defined scope for how long the LSP needs to provide service to the clients), but does not actually need to have the timeout default to the LSP.\n\nIf we assume that the LSP is in the business of selling liquidity, we can assume that the LSP has large amounts of funds available onchain to pay for onchain fees if the timeout tree needs to be published onchain.  What we need is a way to force the LSP to handle unilateral closes and pay for them if the client is so unsatisfied with LSP services that it decides a unilateral close is more palatable.\n\nInstead of having an `L & CLTV` branch at the transaction outputs of Decker-Wattenhofer state transactions, we can instead have the signatories sign an `nLockTime`d transaction that sends the funds to the clients, with the timelock being the timeout of the tree.  Thus, each node output that goes would have gone to an `(A & ... & Z & L) or (L & CLTV)` would instead have just `A & ... & Z & L` and ***two*** transactions signed:\n\n* The node as shown in the main post.\n* An alternate transaction, locked at `nLockTime`, which distributes the funds so that the initial channels of `A`...`Z` are given solely to the respective client, and with `L`-funds (i.e. the liquidity stock) split evenly among all clients.\n  * Each node output that eventually leads to the client channel must, by necessity, include the total value of the client channel, plus any channel reserve imposed by clients on the LSP, plus any fellow client channels, plus the liquidity stock the LSP is holding ready for sale to clients.\n  * As the clients have unilateral control of the outputs, they can trivially fee-bump this alternate timeout transaction to any level.\n\nThen, if a client decides it wants to unilaterally exit, it can force the LSP to pay for unilateral exit by simply never performing an assisted exit from the current tree and waiting until `nLockTime`.  If the blockheight approaches the `nLockTime` of the tree, the LSP ***must*** initiate the unilateral exit itself, *and* pay for the confirmation of those nodes, or else it risks loss of all funds still locked in that part of the sub-tree.\n\nIf a client has performed assisted exit (i.e. a PTLC-based swap that exchanges the client private key used in the tree for onchain funds, or for funds in next laddered timeout-tree) then the LSP does not need to fully perform a unilateral exit; it only needs to publish enough nodes until it reaches an output with `(A & ... & M & L)` where it already got the client private keys `A`...`M` via assisted exit.\n\nThis means that the LSP is very incentivized to provide assisted exit.  For instance, for an onchain assisted exit, the client can wait for the PTLC output to be deeply confirmed, and if onchain feerates have changed enough, can require the LSP to re-sign a new PTLC-claim transaction at a different feerate, and the LSP has incentive, up to the cost of onchain fees to perform a unilateral exit from the tree, to cooperate.  The client can abort this assisted exit, and it would not be much different from the client simply refusing to perform an assisted exit and forcing the LSP to perform a unilateral exit from the tree.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}