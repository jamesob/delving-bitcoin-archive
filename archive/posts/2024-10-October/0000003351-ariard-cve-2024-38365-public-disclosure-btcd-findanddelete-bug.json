{
  "id": 3351,
  "name": "Antoine Riard",
  "username": "ariard",
  "avatar_template": "/letter_avatar_proxy/v4/letter/a/c67d28/{size}.png",
  "created_at": "2024-10-11T19:08:26.222Z",
  "cooked": "<blockquote>\n<p>and additional padding data.</p>\n</blockquote>\n<aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/bitcoin/bitcoin/blob/48cf3da636089873ba7280e0d5b22eb81811d194/src/script/interpreter.cpp#L329\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/bitcoin/bitcoin/blob/48cf3da636089873ba7280e0d5b22eb81811d194/src/script/interpreter.cpp#L329\" target=\"_blank\" rel=\"noopener\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/bitcoin/bitcoin/blob/48cf3da636089873ba7280e0d5b22eb81811d194/src/script/interpreter.cpp#L329\" target=\"_blank\" rel=\"noopener\">bitcoin/bitcoin/blob/48cf3da636089873ba7280e0d5b22eb81811d194/src/script/interpreter.cpp#L329</a></h4>\n\n\n\n    <pre class=\"onebox\"><code class=\"lang-cpp\">\n      <ol class=\"start lines\" start=\"319\" style=\"counter-reset: li-counter 318 ;\">\n          <li></li>\n          <li>static bool EvalChecksigPreTapscript(const valtype&amp; vchSig, const valtype&amp; vchPubKey, CScript::const_iterator pbegincodehash, CScript::const_iterator pend, unsigned int flags, const BaseSignatureChecker&amp; checker, SigVersion sigversion, ScriptError* serror, bool&amp; fSuccess)</li>\n          <li>{</li>\n          <li>    assert(sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0);</li>\n          <li></li>\n          <li>    // Subset of script starting at the most recent codeseparator</li>\n          <li>    CScript scriptCode(pbegincodehash, pend);</li>\n          <li></li>\n          <li>    // Drop the signature in pre-segwit scripts but not segwit scripts</li>\n          <li>    if (sigversion == SigVersion::BASE) {</li>\n          <li class=\"selected\">        int found = FindAndDelete(scriptCode, CScript() &lt;&lt; vchSig);</li>\n          <li>        if (found &gt; 0 &amp;&amp; (flags &amp; SCRIPT_VERIFY_CONST_SCRIPTCODE))</li>\n          <li>            return set_error(serror, SCRIPT_ERR_SIG_FINDANDDELETE);</li>\n          <li>    }</li>\n          <li></li>\n          <li>    if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {</li>\n          <li>        //serror is set</li>\n          <li>        return false;</li>\n          <li>    }</li>\n          <li>    fSuccess = checker.CheckECDSASignature(vchSig, vchPubKey, scriptCode, sigversion);</li>\n          <li></li>\n      </ol>\n    </code></pre>\n\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>In my understanding of the bug, there is feeding of the two consensus-nodes, with the following\n<code>scriptCode</code>, where the ECDSA sig and the \"noise dummy data must match the length declared in\npushed bytes.</p>\n<pre><code class=\"lang-auto\">\n  1-byte        1-byte       ECDSA sig-bytes   \"noise\" dummy data-bytes\n\nOP_PUSHDATA1 &lt;bytes pushed&gt; &lt;signature&gt; &lt;padding data&gt;\n\n</code></pre>\n<p>One should note that ECDSA sig length is malleable.</p>\n<p>The non-upgraded, pre-0.24.2 btcd peers should remove the whole data push containing\nthe consensus valid signatures, before it\u2019s verified by the script interpreter. While\nbitcoind peers can accept the valid signatures. I\u2019m unsure that you really need public\nkey recovery to achieve that chain fork as a trick. I believe one has OP_PICK, OP_ROLL and other stack inspection opcodes available, that can be committed in the <code>scriptCode</code>.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2024-10-11T19:13:31.221Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 7.2,
  "yours": false,
  "topic_id": 1184,
  "topic_slug": "cve-2024-38365-public-disclosure-btcd-findanddelete-bug",
  "topic_title": "CVE-2024-38365 public disclosure (btcd `FindAndDelete` bug)",
  "topic_html_title": "CVE-2024-38365 public disclosure (btcd `FindAndDelete` bug)",
  "category_id": 8,
  "display_username": "Antoine Riard",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "> and additional padding data.\n\nhttps://github.com/bitcoin/bitcoin/blob/48cf3da636089873ba7280e0d5b22eb81811d194/src/script/interpreter.cpp#L329\n\nIn my understanding of the bug, there is feeding of the two consensus-nodes, with the following\n`scriptCode`, where the ECDSA sig and the \"noise dummy data must match the length declared in\npushed bytes.\n\n```\n\n  1-byte        1-byte       ECDSA sig-bytes   \"noise\" dummy data-bytes\n\nOP_PUSHDATA1 <bytes pushed> <signature> <padding data>\n\n```\n\nOne should note that ECDSA sig length is malleable.\n\nThe non-upgraded, pre-0.24.2 btcd peers should remove the whole data push containing\nthe consensus valid signatures, before it's verified by the script interpreter. While\nbitcoind peers can accept the valid signatures. I'm unsure that you really need public\nkey recovery to achieve that chain fork as a trick. I believe one has OP_PICK, OP_ROLL and other stack inspection opcodes available, that can be committed in the `scriptCode`.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 5,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}