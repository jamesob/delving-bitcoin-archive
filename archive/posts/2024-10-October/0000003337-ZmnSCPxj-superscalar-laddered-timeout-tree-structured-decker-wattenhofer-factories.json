{
  "id": 3337,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2024-10-09T14:02:36.211Z",
  "cooked": "<p>For the \u201cInversion of Timelock Default\u201d case, the following question may be raised: if the client performs unilateral exit by passively waiting for the timelock default so that the LSP is forced to perform (and pay for) unilateral exit on behalf of the client, how can the client enforce HTLC timeouts for outgoing payments?</p>\n<p>And the simple answer is: it does not have to (as long as the client is not secretly a forwarder, i.e. if the client is really just an end-user that never forwards payments)!</p>\n<p>If the HTLC timeout is shorter than the timeout tree timeout, then the LSP can very well simply not fail the HTLC and not drop unilateral exit.  However, the LSP gains no advantage; either it knows the preimage or not.  If the LSP did not successfully forward to the final destination and refuses to fail the HTLC, this is equivalent to the LSP refusing service to the client; then the client can simply force a passive unilateral exit and recover its funds, including the outgoing HTLC.  If the LSP still forwards the payment (in order to learn the preimage) after the client-offered HTLC has timed out, it is at the risk of the LSP: the client <em><strong>might</strong></em> still have onchain funds to pay for exogenous fees, and the nodes have P2A outputs that the client can use (a truly destitute client might go to a competitor LSP, give them the signatures of the tree nodes, and let the competitor LSP punish the misbehaving LSP).  Thus, the incentive for the LSP is to respect the timeout of the HTLC, and to fail the HTLC before the timeout.  The LSP can only lose a customer if it misbehaves this way.</p>\n<p>This is risky if the client is forwarding: the upstream node may enforce the upstream timeout.  However, the expectation is that the client is a plain end-user that never forwards.</p>\n<p>For HTLCs offered by the LSP, we have already given the assumption that the LSP is capable of paying for onchain fees to do unilateral closes via exogenous fees.  Thus, even though the LSP is only a forwarder, it can enforce the timeout on HTLCs it offered to the client.</p>",
  "post_number": 27,
  "post_type": 1,
  "updated_at": "2024-10-09T14:04:01.350Z",
  "reply_count": 0,
  "reply_to_post_number": 26,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 0.8,
  "yours": false,
  "topic_id": 1143,
  "topic_slug": "superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories",
  "topic_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "topic_html_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "ZmnSCPxj",
    "name": "ZmnSCPxj jxPCSnmZ",
    "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png"
  },
  "bookmarked": false,
  "raw": "For the \"Inversion of Timelock Default\" case, the following question may be raised: if the client performs unilateral exit by passively waiting for the timelock default so that the LSP is forced to perform (and pay for) unilateral exit on behalf of the client, how can the client enforce HTLC timeouts for outgoing payments?\n\nAnd the simple answer is: it does not have to (as long as the client is not secretly a forwarder, i.e. if the client is really just an end-user that never forwards payments)!\n\nIf the HTLC timeout is shorter than the timeout tree timeout, then the LSP can very well simply not fail the HTLC and not drop unilateral exit.  However, the LSP gains no advantage; either it knows the preimage or not.  If the LSP did not successfully forward to the final destination and refuses to fail the HTLC, this is equivalent to the LSP refusing service to the client; then the client can simply force a passive unilateral exit and recover its funds, including the outgoing HTLC.  If the LSP still forwards the payment (in order to learn the preimage) after the client-offered HTLC has timed out, it is at the risk of the LSP: the client ***might*** still have onchain funds to pay for exogenous fees, and the nodes have P2A outputs that the client can use (a truly destitute client might go to a competitor LSP, give them the signatures of the tree nodes, and let the competitor LSP punish the misbehaving LSP).  Thus, the incentive for the LSP is to respect the timeout of the HTLC, and to fail the HTLC before the timeout.  The LSP can only lose a customer if it misbehaves this way.\n\nThis is risky if the client is forwarding: the upstream node may enforce the upstream timeout.  However, the expectation is that the client is a plain end-user that never forwards.\n\nFor HTLCs offered by the LSP, we have already given the assumption that the LSP is capable of paying for onchain fees to do unilateral closes via exogenous fees.  Thus, even though the LSP is only a forwarder, it can enforce the timeout on HTLCs it offered to the client.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}