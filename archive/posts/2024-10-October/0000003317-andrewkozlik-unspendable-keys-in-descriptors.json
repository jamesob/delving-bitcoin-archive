{
  "id": 3317,
  "name": "Andrew Kozlik",
  "username": "andrewkozlik",
  "avatar_template": "/user_avatar/delvingbitcoin.org/andrewkozlik/{size}/828_2.png",
  "created_at": "2024-10-03T15:18:51.917Z",
  "cooked": "<p>I agree with <a class=\"mention\" href=\"/u/andrewtoth\">@andrewtoth</a> that it would be most beneficial if the chain code would be derived from the XPUBs independently of their order. It would alleviate the issue of whether the wallet policy order or the descriptor order should be used, as well as the mentioned surprising behavior with <code>sortedmulti_a</code>.</p>\n<p>I see three possible approaches to achieve this:</p>\n<ol>\n<li>Sort the XPUBs, then hash the sorted and concatenated list.</li>\n<li>Hash each XPUB, then XOR the results. (Problem: repeated XPUBs would cancel out. I suppose that may happen in more complex descriptors/policies.)</li>\n<li>Hash each XPUB, then add the results mod 2^256. (Repeated XPUBs don\u2019t cancel out.)</li>\n</ol>\n<p>Instead of XPUBs it may be simpler to work with only a part of the XPUB, i.e. the compressed public key, as <a class=\"mention\" href=\"/u/antoinep\">@AntoineP</a> did, or with the chain code. In fact, I think the chain code could be used directly in options 2 or 3 without hashing it, i.e. just a XOR-sum of the chain codes or a mod 2^256 sum of the chain codes. That would make for a very simple implementation. A potential risk of not hashing is that a malicious participant could craft the chain code in their XPUB so that it cancels out with the other participants to force the result to a desired value. However, such a malicious participant could just as well publish the dummy XPUB to achieve the same goal, so I don\u2019t see a problem with a simple sum of the chain codes.</p>\n<p>To ensure smooth interoperability amongst different wallets, it would be very helpful if we could agree on standardizing <code>unspend()</code> with deterministic <code>HEXCHAINCODE</code>.</p>",
  "post_number": 26,
  "post_type": 1,
  "updated_at": "2024-10-03T15:18:51.917Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 1,
  "readers_count": 0,
  "score": 0,
  "yours": false,
  "topic_id": 304,
  "topic_slug": "unspendable-keys-in-descriptors",
  "topic_title": "Unspendable keys in descriptors",
  "topic_html_title": "Unspendable keys in descriptors",
  "category_id": 8,
  "display_username": "Andrew Kozlik",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I agree with @andrewtoth that it would be most beneficial if the chain code would be derived from the XPUBs independently of their order. It would alleviate the issue of whether the wallet policy order or the descriptor order should be used, as well as the mentioned surprising behavior with `sortedmulti_a`.\n\nI see three possible approaches to achieve this:\n1. Sort the XPUBs, then hash the sorted and concatenated list.\n2. Hash each XPUB, then XOR the results. (Problem: repeated XPUBs would cancel out. I suppose that may happen in more complex descriptors/policies.)\n3. Hash each XPUB, then add the results mod 2^256. (Repeated XPUBs don't cancel out.)\n\nInstead of XPUBs it may be simpler to work with only a part of the XPUB, i.e. the compressed public key, as @AntoineP did, or with the chain code. In fact, I think the chain code could be used directly in options 2 or 3 without hashing it, i.e. just a XOR-sum of the chain codes or a mod 2^256 sum of the chain codes. That would make for a very simple implementation. A potential risk of not hashing is that a malicious participant could craft the chain code in their XPUB so that it cancels out with the other participants to force the result to a desired value. However, such a malicious participant could just as well publish the dummy XPUB to achieve the same goal, so I don't see a problem with a simple sum of the chain codes.\n\nTo ensure smooth interoperability amongst different wallets, it would be very helpful if we could agree on standardizing `unspend()` with deterministic `HEXCHAINCODE`.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 552,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}