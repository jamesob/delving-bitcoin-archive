{
  "id": 3328,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2024-10-07T18:44:30.572Z",
  "cooked": "<p>Addenda</p>\n<h1><a name=\"p-3328-cltv-locktime-extended-by-decker-wattenhofer-relative-delays-1\" class=\"anchor\" href=\"#p-3328-cltv-locktime-extended-by-decker-wattenhofer-relative-delays-1\"></a>CLTV Locktime Extended By Decker-Wattenhofer Relative Delays</h1>\n<p>A side-effect of Decker-Wattenhofer use is that HTLCs hosted (directly or indirectly, as in the channel factory case) have a minimum CLTV-delta that is equal to the current Decker-Wattenhofer <code>nSequence</code> state delay, plus any safety margin needed by the node for downtime or forwarding purposes.  Note that this happens for <em>any</em> use of <code>nSequence</code> to provide timeouts for resolving the latest state \u2014 for example, Poon-Dryja <strong>could</strong> have had the same drawback, <strong>if</strong> the <code>CSV</code> timelock had been placed before HTLCs instead of as an alternate branch (the tradeoff here is that if the BOLT Poon-Dryja specification had put the <code>CSV</code> delay <em>before</em> HTLCs, it would have allowed Poon-Dryja implementations to completely drop historical HTLC data \u2014 note that dropping the resolved and failed HTLC data is something the implementation <em>can</em> do but which actual code could potentially still keep for surveillance purposes anyway, so this tradeoff was not taken).</p>\n<p>However, it also means that the LSP has to unilaterally close \u201cearly\u201d if clients have not done an assisted exit from their current tree to the next tree, or to onchain, and the specific SuperScalar tree is approaching the current Decker-Wattenhofer delay to the timelock.</p>\n<p>Thus, for actual implementations, the timelock of the timeout trees would be active period + dying period (i.e. a grace period for clients to move from older tree to newer trees) + maximum Decker-Wattenhofer delay.</p>\n<p>This increases pressure for the LSP to provide proper assisted exit, as the additional delay from the Decker-Wattenhofer mechanisms would also represen additional time that the LSP funds are locked.</p>\n<p>I am currently wondering if the Decker-Wattenhofer delay can be mashed with the dying period, just as the Decker-Wattenhofer layers were mashed with the timeout-tree layers in SuperScalar.</p>\n<h1><a name=\"p-3328-asymmetric-onchain-fee-schemes-for-poon-dryja-2\" class=\"anchor\" href=\"#p-3328-asymmetric-onchain-fee-schemes-for-poon-dryja-2\"></a>Asymmetric Onchain Fee Schemes For Poon-Dryja</h1>\n<p>In the most recent Lightning Network protocol dev summit, it was decided that the \u201cnext step\u201d would be 0-fee commitment transactions, with a common P2A output that either side can use to fee-bump.</p>\n<p>This has the drawback that it requires exogenous fees.  If our base assumption is that clients do not afford their own UTXO (which is why they are sharing one with many other clients and the LSP in SuperScalar), then 0-fee commitment transactions are not good for clients.</p>\n<p>An alternative idea given to a few people at the summit, was to have multiple commitment transactions per commitment state with different feerates (dependent transactions such as HTLC-success and HTLC-failure would have the same feerate as the commitment transactions).  This is kept incentive compatible by taking advantage of the asymmetry of Poon-Dryja commitment transactions: the side that holds that commitment transaction is the one whose funds are deducted from for fees of that commitment transaction.  Obviously this means that clients with 0 funds in the channel cannot pay for the commitment transaction, but if the client has 0 funds, it does not matter if the client cannot unilaterally close anyway.  The extended drawback, however, is that the maximum fee the client can pay is limited by how much money they have in the channel (HTLCs they offerred may be garnished similarly).</p>\n<p>An extension of this asymmetry would be to asymmetrize the onchain fee scheme:</p>\n<ul>\n<li>For the LSP side commitment transaction, use a P2A output so that onchain fees are paid exogenously \u2014 the LSP is presumed to have ready access to onchain funds with which to CPFP via the P2A output.\n<ul>\n<li>This allows the LSP to reduce its reserve requirement per channel to only provide security to the client in case the LSP tries to cheat.</li>\n</ul>\n</li>\n<li>For the client side commitment transasction, use multiple versions with various feerates, funded endogenously by the client-side owned funds and possibly the HTLCs they offered.</li>\n</ul>",
  "post_number": 21,
  "post_type": 1,
  "updated_at": "2024-10-07T18:44:30.572Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 1.0,
  "yours": false,
  "topic_id": 1143,
  "topic_slug": "superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories",
  "topic_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "topic_html_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Addenda\n\n# CLTV Locktime Extended By Decker-Wattenhofer Relative Delays\n\nA side-effect of Decker-Wattenhofer use is that HTLCs hosted (directly or indirectly, as in the channel factory case) have a minimum CLTV-delta that is equal to the current Decker-Wattenhofer `nSequence` state delay, plus any safety margin needed by the node for downtime or forwarding purposes.  Note that this happens for *any* use of `nSequence` to provide timeouts for resolving the latest state --- for example, Poon-Dryja **could** have had the same drawback, **if** the `CSV` timelock had been placed before HTLCs instead of as an alternate branch (the tradeoff here is that if the BOLT Poon-Dryja specification had put the `CSV` delay *before* HTLCs, it would have allowed Poon-Dryja implementations to completely drop historical HTLC data --- note that dropping the resolved and failed HTLC data is something the implementation *can* do but which actual code could potentially still keep for surveillance purposes anyway, so this tradeoff was not taken).\n\nHowever, it also means that the LSP has to unilaterally close \"early\" if clients have not done an assisted exit from their current tree to the next tree, or to onchain, and the specific SuperScalar tree is approaching the current Decker-Wattenhofer delay to the timelock.\n\nThus, for actual implementations, the timelock of the timeout trees would be active period + dying period (i.e. a grace period for clients to move from older tree to newer trees) + maximum Decker-Wattenhofer delay.\n\nThis increases pressure for the LSP to provide proper assisted exit, as the additional delay from the Decker-Wattenhofer mechanisms would also represen additional time that the LSP funds are locked.\n\nI am currently wondering if the Decker-Wattenhofer delay can be mashed with the dying period, just as the Decker-Wattenhofer layers were mashed with the timeout-tree layers in SuperScalar.\n\n# Asymmetric Onchain Fee Schemes For Poon-Dryja\n\nIn the most recent Lightning Network protocol dev summit, it was decided that the \"next step\" would be 0-fee commitment transactions, with a common P2A output that either side can use to fee-bump.\n\nThis has the drawback that it requires exogenous fees.  If our base assumption is that clients do not afford their own UTXO (which is why they are sharing one with many other clients and the LSP in SuperScalar), then 0-fee commitment transactions are not good for clients.\n\nAn alternative idea given to a few people at the summit, was to have multiple commitment transactions per commitment state with different feerates (dependent transactions such as HTLC-success and HTLC-failure would have the same feerate as the commitment transactions).  This is kept incentive compatible by taking advantage of the asymmetry of Poon-Dryja commitment transactions: the side that holds that commitment transaction is the one whose funds are deducted from for fees of that commitment transaction.  Obviously this means that clients with 0 funds in the channel cannot pay for the commitment transaction, but if the client has 0 funds, it does not matter if the client cannot unilaterally close anyway.  The extended drawback, however, is that the maximum fee the client can pay is limited by how much money they have in the channel (HTLCs they offerred may be garnished similarly).\n\nAn extension of this asymmetry would be to asymmetrize the onchain fee scheme:\n\n* For the LSP side commitment transaction, use a P2A output so that onchain fees are paid exogenously --- the LSP is presumed to have ready access to onchain funds with which to CPFP via the P2A output.\n  * This allows the LSP to reduce its reserve requirement per channel to only provide security to the client in case the LSP tries to cheat.\n* For the client side commitment transasction, use multiple versions with various feerates, funded endogenously by the client-side owned funds and possibly the HTLCs they offered.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}