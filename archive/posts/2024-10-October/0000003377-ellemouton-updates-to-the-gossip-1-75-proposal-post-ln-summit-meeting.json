{
  "id": 3377,
  "name": "Elle",
  "username": "ellemouton",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ellemouton/{size}/662_2.png",
  "created_at": "2024-10-17T15:00:21.764Z",
  "cooked": "<p>Hey everyone! After the various discussions that were had at the summit about\nthe gossip updates, it is clear that the current proposal needs quite a few\nupdates. So before I go ahead and start pushing updates to the proposal PR,\nI thought I\u2019d first make sure we are all on the same page and to make sure I didn\u2019t miss anything.</p>\n<p>This post includes:</p>\n<ol>\n<li>My main action item takeaways from the summit in regard to updating the\nexisting proposal.</li>\n<li>A proposal for rolling out the full update via 3 feature bits.</li>\n<li>A thought on a potentially convenient side effect that could allow peers to\nupgrade a channel from unannounced to announced.</li>\n</ol>\n<h2><a name=\"p-3377-a-pure-tlv-for-all-new-messages-along-with-an-unsigned-range-1\" class=\"anchor\" href=\"#p-3377-a-pure-tlv-for-all-new-messages-along-with-an-unsigned-range-1\"></a>A) Pure TLV for all new messages along with an unsigned range</h2>\n<p>The first update will be to change the current structure of all the new\nmessages (which has a fixed field for the signature followed by a TLV stream\nthat the signature completely covers) to instead follow the pattern used by\nsome of the Bolt 12 messages: make everything a TLV field (including the\nsignature) but have a designated TLV type range that the signature explicitly\nwill not cover. afaict, it makes sense just to use the same range that the\nBolt 12 messages use (where all signed fields are in the inclusive ranges:\n0 to 159 and 1000000000 to 2999999999) (perhaps it also makes sense to define\nthis Pure TLV pattern separately from any particular bolt).</p>\n<p>Why is this nice/useful?</p>\n<ol>\n<li>With this messages structure update, it will allow peers to request\nadditional information from their peers during gossip sync. For example, a\nlight-client could request that its peers include SPV proofs in any\n<code>channel_announcement_2</code> messages that they forward. This proof can then be\nadded to the message under a TLV type that is not signed by the announcement\nsignature.</li>\n<li>Since the signature no longer covers the complete serialisation of the\nmessage, a node that does not understand an optional field in the unsigned\nrange can throw it away before persisting it if they so choose. Same goes for\nfields in the un-signed range that they do understand but don\u2019t need (such as\nan SPV proof).</li>\n</ol>\n<h2><a name=\"p-3377-b-using-the-new-messages-for-p2wsh-channel-announcements-and-updates-2\" class=\"anchor\" href=\"#p-3377-b-using-the-new-messages-for-p2wsh-channel-announcements-and-updates-2\"></a>B) Using the new messages for P2WSH channel announcements and updates</h2>\n<p>Probably the biggest update to the initial proposal is to make the new messages\nflexible enough such that they can be re-used for announcing P2WSH channels\n(both announcing new P2WSH channels and re-announcing existing channels).</p>\n<p>In terms of creating a new <code>channel_announcement_2</code> for a legacy channel, if we\nwant to use a Schnorr signature for these, then the channel peers will first\nneed to swap nonces for both their node and BTC keys via <code>channel_ready</code> (as is\ndone in the existing proposal for when creating <code>channel_announcement_2</code> for\nsimple taproot channels) and then will go on to use <code>announcement_sigs_2</code> as\nnormal. In terms of verifying these messages, any verifying node will first need\nto obtain the pkscript of the funding transaction. From this, they can identify\nthe type of channel and will then know how the rest of the verification needs to\nbe done.</p>\n<p>The biggest hurdle I see here (for LND at least) is that we really only expect\nto do this announcement signing flow once in the channel lifecycle. So\nimplementations would need to be ok with handling this signing &amp; announcing at\nany time in the life cycle (I believe CLN already handles this?). Once this\nrefactor is complete then as long as both channel peers know how (see feature\nbit 2 below) then either side can decide to initiate the process of signing a\n<code>channel_announcement_2</code> for their P2WSH channel at any time (whether it be a\nnew channel or a long-standing one).</p>\n<p>A few rapid-fire points on this:</p>\n<ul>\n<li>Initially, nodes will probably do both signing protocols for quite a while,\nand then they can decide to start switching off the legacy protocol when the\ntime feels right (ie when most of the network seems to have upgraded).</li>\n<li>If nodes can handle this signing of a channel announcement at any time, then\nthis could pave the way for channel peers to very easily decide to upgrade\na long-standing unannounced channel to an announced one. This could be as\nsimple as: If a node wants to upgrade the channel, they can send the\n<code>channel_ready</code> with the nonces as the signal to do so. If the peer responds\nwith their own nonces, then they have agreed to the upgrade.</li>\n<li>For nodes receiving both old and new messages, the rules should be quite\nsimple:\n<ul>\n<li>For validating, writing and broadcasting the gossip they receive, they\nshould treat the two protocols as completely disjoint. For example, if a\nnode has <code>chan_ann_1</code> for channel X, they should accept <code>chan_update_1</code> for\nthe channel but should reject <code>chan_update_2</code> until they receive\n<code>chan_ann_2</code> for the channel. The rules for when/if to send out <code>node_ann_2</code>\neasily follow on from this.</li>\n<li>When using these announcements and updates for their own pathfinding and\ngraph view, nodes should favour the <code>v2</code> messages as the source of truth\nwhen it comes to the channel announcement. For channel updates, they should\nalso try to favour the <code>v2</code> message where possible but should cater for\nswitching back to the <code>v1</code> message if the <code>v2</code> one becomes very outdated for\nexample.</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-3377-c-outpoint-and-optional-inclusion-of-spv-proofs-in-channel_announcement_2-3\" class=\"anchor\" href=\"#p-3377-c-outpoint-and-optional-inclusion-of-spv-proofs-in-channel_announcement_2-3\"></a>C) Outpoint and optional inclusion of SPV proofs in <code>channel_announcement_2</code></h2>\n<p>There are three types of nodes we want to consider:</p>\n<ol>\n<li>A node with a full chain backend without <code>txindex</code> enabled.</li>\n<li>A node with a full chain backend with <code>txindex</code> enabled.</li>\n<li>A light-client node (has easy access to block-headers).</li>\n</ol>\n<p>In today\u2019s <code>channel_announcement(1)</code>, only the SCID of the funding transaction\nis communicated. This makes verification of the announcement difficult because\nall node types need to fetch the entire block that the transaction is in and\nnodes that do have <code>txindex</code> cannot make use of it for faster transaction\nretrieval. Just as a reminder, nodes want to fetch the transaction that the SCID\npoints to so that they can extract the pk script from it and then prove that the\nchannel_announcement indeed proves ownership over the output. As a bonus nodes\ngenerally also check that the output is unspent.</p>\n<ul>\n<li>Including the outpoint of the funding transaction in the channel_announcement\nshould solve the issue for nodes that do have <code>txindex</code> enabled to make use\nof their index to fetch the funding transaction.</li>\n<li>Having the option of including an SPV proof in the new channel announcement\n(in the un-signed range) covers the light-client case if we include the raw\ntransaction in the proof as well. The proof will thus contain the raw\ntransaction along with the remainder of the merkle proof hashes (the first can\nbe derived from the raw tx). The light-client can then: 1) extract the PK\nscript from the raw transaction (it uses the SCID to know which output to\nuse) 2) verify that the transaction is in the block specified by the SCID\ngiven the merkle proof. Nodes without <code>txindex</code> may also choose to use this\nverification process.</li>\n</ul>\n<p>Some questions and thoughts on the above:</p>\n<ol>\n<li>Adding the outpoint as a signed TLV technically adds 2 sources of truth to\nthe channel announcement. But I assume this is ok since the SCID still is\nuseful in its own right since it provides nodes with an easy way to link an\nannouncement to an update without having to derive the SCID. The other option\nis to just leave the SCID and have the outpoint as an unsigned optional\nfield that nodes can specifically ask for via gossip sync feature bits.</li>\n<li>We could require that the channel peers create a hash of the SPV proof and\ninclude that hash in the signed range of the message. That way nodes can do\na quick check to ensure that the proof they receive matches the hash before\nmaking use of the proof. But I\u2019m not sure that this is actually necessary\nsince the proof will in any case contain the raw tx with the pk script which\nthey can use to check the signature of the message against. So I think the\nsignature already commits to part of the proof in this way. Another\nargument against including this hash is that both channel peers will need to\nderive the proof when they are constructing the announcement, which may not\nbe feasible for some peers</li>\n</ol>\n<h2><a name=\"p-3377-d-gossip-175-upgrade-path-via-3-feature-bits-4\" class=\"anchor\" href=\"#p-3377-d-gossip-175-upgrade-path-via-3-feature-bits-4\"></a>D) Gossip 1.75 upgrade path via 3 feature bits</h2>\n<p>Since the proposal is quite large and is a network wide upgrade, I propose that\nfor the sake of piece-meal implementation, we use 3 new feature bits for the\nfull upgrade. The feature bits will have the following meanings:</p>\n<h3><a name=\"p-3377-feature-bit-1-5\" class=\"anchor\" href=\"#p-3377-feature-bit-1-5\"></a>Feature bit 1:</h3>\n<p>This feature bit is the main \u201cgossip_v2\u201d feature bit that signals:</p>\n<ul>\n<li>The node can understand the new gossip messages (meaning it also understands\nwhat a taproot channel is and knows how to verify a taproot channel as well as\na P2WSH channel advertised via the new messages).</li>\n<li>When used in combination with the \u201csimple_taproot_channels\u201d feature bit, this\nalso means that the node can create an advertised taproot channel (ie, it\nknows how to construct a <code>channel_announcement_2</code> message with its channel\npeer).</li>\n</ul>\n<h3><a name=\"p-3377-feature-bit-2-6\" class=\"anchor\" href=\"#p-3377-feature-bit-2-6\"></a>Feature bit 2:</h3>\n<ul>\n<li>Depends on bit 1</li>\n<li>Signals to its channel peers that a node is able to and willing to re-announce\nP2WSH channels using the new protocol.</li>\n</ul>\n<h3><a name=\"p-3377-feature-bit-3-7\" class=\"anchor\" href=\"#p-3377-feature-bit-3-7\"></a>Feature bit 3:</h3>\n<ul>\n<li>Depends on bit 1</li>\n<li>Signals that a node is able and willing to provide SPV proofs of a funding\ntransaction along with <code>channel_announcement_2</code> messages if asked.</li>\n</ul>\n<h2><a name=\"p-3377-e-upgrade-channels-from-un-announced-to-announced-feature-bit-4-8\" class=\"anchor\" href=\"#p-3377-e-upgrade-channels-from-un-announced-to-announced-feature-bit-4-8\"></a>E) Upgrade channels from un-announced to announced (Feature bit 4?)</h2>\n<p>As mentioned in section B of this post, after the implementation of feature bit\n2 as defined above, a node should theoretically be set-up to be able to upgrade\nexisting channels from un-announced to announced. So potentially we could have\na fourth feature bit here that signals the ability to do this upgrade.</p>\n<p>Cool - that\u2019s it I think!\nLooking forward to any thoughts.</p>\n<p>Elle</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-10-17T15:00:21.764Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 23,
  "reads": 15,
  "readers_count": 14,
  "score": 122.0,
  "yours": false,
  "topic_id": 1202,
  "topic_slug": "updates-to-the-gossip-1-75-proposal-post-ln-summit-meeting",
  "topic_title": "Updates to the Gossip 1.75 proposal post LN summit meeting",
  "topic_html_title": "Updates to the Gossip 1.75 proposal post LN summit meeting",
  "category_id": 7,
  "display_username": "Elle",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "Hey everyone! After the various discussions that were had at the summit about\nthe gossip updates, it is clear that the current proposal needs quite a few\nupdates. So before I go ahead and start pushing updates to the proposal PR,\nI thought I'd first make sure we are all on the same page and to make sure I didn't miss anything.\n\nThis post includes:\n1. My main action item takeaways from the summit in regard to updating the\n   existing proposal.\n2. A proposal for rolling out the full update via 3 feature bits.\n3. A thought on a potentially convenient side effect that could allow peers to\n   upgrade a channel from unannounced to announced.\n\n## A) Pure TLV for all new messages along with an unsigned range\n\nThe first update will be to change the current structure of all the new\nmessages (which has a fixed field for the signature followed by a TLV stream\nthat the signature completely covers) to instead follow the pattern used by\nsome of the Bolt 12 messages: make everything a TLV field (including the\nsignature) but have a designated TLV type range that the signature explicitly\nwill not cover. afaict, it makes sense just to use the same range that the\nBolt 12 messages use (where all signed fields are in the inclusive ranges:\n0 to 159 and 1000000000 to 2999999999) (perhaps it also makes sense to define\nthis Pure TLV pattern separately from any particular bolt).\n\nWhy is this nice/useful?\n\n1) With this messages structure update, it will allow peers to request\n   additional information from their peers during gossip sync. For example, a\n   light-client could request that its peers include SPV proofs in any\n   `channel_announcement_2` messages that they forward. This proof can then be\n   added to the message under a TLV type that is not signed by the announcement\n   signature.\n2) Since the signature no longer covers the complete serialisation of the\n   message, a node that does not understand an optional field in the unsigned\n   range can throw it away before persisting it if they so choose. Same goes for\n   fields in the un-signed range that they do understand but don't need (such as\n   an SPV proof).\n\n## B) Using the new messages for P2WSH channel announcements and updates\n\nProbably the biggest update to the initial proposal is to make the new messages\nflexible enough such that they can be re-used for announcing P2WSH channels\n(both announcing new P2WSH channels and re-announcing existing channels).\n\nIn terms of creating a new `channel_announcement_2` for a legacy channel, if we\nwant to use a Schnorr signature for these, then the channel peers will first\nneed to swap nonces for both their node and BTC keys via `channel_ready` (as is\ndone in the existing proposal for when creating `channel_announcement_2` for\nsimple taproot channels) and then will go on to use `announcement_sigs_2` as\nnormal. In terms of verifying these messages, any verifying node will first need\nto obtain the pkscript of the funding transaction. From this, they can identify\nthe type of channel and will then know how the rest of the verification needs to\nbe done.\n\nThe biggest hurdle I see here (for LND at least) is that we really only expect\nto do this announcement signing flow once in the channel lifecycle. So\nimplementations would need to be ok with handling this signing & announcing at\nany time in the life cycle (I believe CLN already handles this?). Once this\nrefactor is complete then as long as both channel peers know how (see feature\nbit 2 below) then either side can decide to initiate the process of signing a\n`channel_announcement_2` for their P2WSH channel at any time (whether it be a\nnew channel or a long-standing one).\n\nA few rapid-fire points on this:\n- Initially, nodes will probably do both signing protocols for quite a while,\n  and then they can decide to start switching off the legacy protocol when the\n  time feels right (ie when most of the network seems to have upgraded).\n- If nodes can handle this signing of a channel announcement at any time, then\n  this could pave the way for channel peers to very easily decide to upgrade\n  a long-standing unannounced channel to an announced one. This could be as\n  simple as: If a node wants to upgrade the channel, they can send the\n  `channel_ready` with the nonces as the signal to do so. If the peer responds\n  with their own nonces, then they have agreed to the upgrade.\n- For nodes receiving both old and new messages, the rules should be quite\n  simple:\n    - For validating, writing and broadcasting the gossip they receive, they\n      should treat the two protocols as completely disjoint. For example, if a\n      node has `chan_ann_1` for channel X, they should accept `chan_update_1` for\n      the channel but should reject `chan_update_2` until they receive\n      `chan_ann_2` for the channel. The rules for when/if to send out `node_ann_2`\n      easily follow on from this.\n    - When using these announcements and updates for their own pathfinding and\n      graph view, nodes should favour the `v2` messages as the source of truth\n      when it comes to the channel announcement. For channel updates, they should\n      also try to favour the `v2` message where possible but should cater for\n      switching back to the `v1` message if the `v2` one becomes very outdated for\n      example.\n\n## C) Outpoint and optional inclusion of SPV proofs in `channel_announcement_2`\n\nThere are three types of nodes we want to consider:\n\n1) A node with a full chain backend without `txindex` enabled.\n2) A node with a full chain backend with `txindex` enabled.\n3) A light-client node (has easy access to block-headers).\n\nIn today's `channel_announcement(1)`, only the SCID of the funding transaction\nis communicated. This makes verification of the announcement difficult because\nall node types need to fetch the entire block that the transaction is in and\nnodes that do have `txindex` cannot make use of it for faster transaction\nretrieval. Just as a reminder, nodes want to fetch the transaction that the SCID\npoints to so that they can extract the pk script from it and then prove that the\nchannel_announcement indeed proves ownership over the output. As a bonus nodes\ngenerally also check that the output is unspent.\n\n- Including the outpoint of the funding transaction in the channel_announcement\n  should solve the issue for nodes that do have `txindex` enabled to make use\n  of their index to fetch the funding transaction.\n- Having the option of including an SPV proof in the new channel announcement\n  (in the un-signed range) covers the light-client case if we include the raw\n  transaction in the proof as well. The proof will thus contain the raw\n  transaction along with the remainder of the merkle proof hashes (the first can\n  be derived from the raw tx). The light-client can then: 1) extract the PK\n  script from the raw transaction (it uses the SCID to know which output to\n  use) 2) verify that the transaction is in the block specified by the SCID\n  given the merkle proof. Nodes without `txindex` may also choose to use this\n  verification process.\n\nSome questions and thoughts on the above:\n1. Adding the outpoint as a signed TLV technically adds 2 sources of truth to\n   the channel announcement. But I assume this is ok since the SCID still is\n   useful in its own right since it provides nodes with an easy way to link an\n   announcement to an update without having to derive the SCID. The other option\n   is to just leave the SCID and have the outpoint as an unsigned optional\n   field that nodes can specifically ask for via gossip sync feature bits.\n2. We could require that the channel peers create a hash of the SPV proof and\n   include that hash in the signed range of the message. That way nodes can do\n   a quick check to ensure that the proof they receive matches the hash before\n   making use of the proof. But I'm not sure that this is actually necessary\n   since the proof will in any case contain the raw tx with the pk script which\n   they can use to check the signature of the message against. So I think the\n   signature already commits to part of the proof in this way. Another\n   argument against including this hash is that both channel peers will need to\n   derive the proof when they are constructing the announcement, which may not \n   be feasible for some peers\n\n## D) Gossip 1.75 upgrade path via 3 feature bits\n\nSince the proposal is quite large and is a network wide upgrade, I propose that\nfor the sake of piece-meal implementation, we use 3 new feature bits for the\nfull upgrade. The feature bits will have the following meanings:\n\n### Feature bit 1:\n\nThis feature bit is the main \"gossip_v2\" feature bit that signals:\n- The node can understand the new gossip messages (meaning it also understands\n  what a taproot channel is and knows how to verify a taproot channel as well as\n  a P2WSH channel advertised via the new messages).\n- When used in combination with the \"simple_taproot_channels\" feature bit, this\n  also means that the node can create an advertised taproot channel (ie, it\n  knows how to construct a `channel_announcement_2` message with its channel\n  peer).\n\n### Feature bit 2:\n\n- Depends on bit 1\n- Signals to its channel peers that a node is able to and willing to re-announce\n  P2WSH channels using the new protocol.\n\n### Feature bit 3:\n\n- Depends on bit 1\n- Signals that a node is able and willing to provide SPV proofs of a funding\n  transaction along with `channel_announcement_2` messages if asked.\n\n## E) Upgrade channels from un-announced to announced (Feature bit 4?)\n\nAs mentioned in section B of this post, after the implementation of feature bit\n2 as defined above, a node should theoretically be set-up to be able to upgrade\nexisting channels from un-announced to announced. So potentially we could have\na fourth feature bit here that signals the ability to do this upgrade.\n\n\nCool - that's it I think!\nLooking forward to any thoughts.\n\nElle",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 309,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "heart",
      "type": "emoji",
      "count": 2
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}