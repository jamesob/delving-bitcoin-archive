{
  "id": 1784,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-03-04T20:37:46.561Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"josibake\" data-post=\"2\" data-topic=\"636\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/josibake/48/83_2.png\" class=\"avatar\"> josibake:</div>\n<blockquote>\n<p>Would we be able to take advantage of Formal Verification tooling that exists for LISP? You mention \u201clisp-variant,\u201d which makes me feel like the answer is no, but figured I\u2019d mention it.</p>\n</blockquote>\n</aside>\n<p>I think the most applicable formal verification work out there is probably the work that\u2019s been put into Simplicity. I think there\u2019s probably not too much work to match chia lisp against coq/lean/isabelle and the like: byte vectors and pairs are pretty basic building blocks. But when you add cryptographic security assumptions (\u201cthe odds of coming up with a valid signature without knowing the private key should be less than <span class=\"math\">2^{128}</span>\u201d) proving things gets pretty hard.</p>",
  "post_number": 3,
  "post_type": 1,
  "posts_count": 9,
  "updated_at": "2024-03-04T20:37:46.561Z",
  "reply_count": 1,
  "reply_to_post_number": 2,
  "quote_count": 1,
  "incoming_link_count": 18,
  "reads": 58,
  "readers_count": 57,
  "score": 106.6,
  "yours": false,
  "topic_id": 636,
  "topic_slug": "chia-lisp-for-bitcoiners",
  "topic_title": "Chia Lisp For Bitcoiners",
  "topic_html_title": "Chia Lisp For Bitcoiners",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"josibake, post:2, topic:636\"]\nWould we be able to take advantage of Formal Verification tooling that exists for LISP? You mention \u201clisp-variant,\u201d which makes me feel like the answer is no, but figured I\u2019d mention it.\n[/quote]\n\nI think the most applicable formal verification work out there is probably the work that's been put into Simplicity. I think there's probably not too much work to match chia lisp against coq/lean/isabelle and the like: byte vectors and pairs are pretty basic building blocks. But when you add cryptographic security assumptions (\"the odds of coming up with a valid signature without knowing the private key should be less than $2^{128}$\") proving things gets pretty hard.",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I think the most applicable formal verification work out there is probably the work that\u2019s been put into Simplicity. I think there\u2019s probably not too much work to match chia lisp against coq/lean/isabelle and the like: byte vectors and pairs are pretty basic building blocks. But when you add crypto&hellip;",
  "truncated": true,
  "post_url": "/t/chia-lisp-for-bitcoiners/636/3",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}