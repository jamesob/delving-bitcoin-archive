{
  "id": 1759,
  "name": "josie",
  "username": "josibake",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josibake/{size}/83_2.png",
  "created_at": "2024-03-01T17:59:02.190Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"MattCorallo\" data-post=\"11\" data-topic=\"630\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/e47c2d/48.png\" class=\"avatar\"> MattCorallo:</div>\n<blockquote>\n<p>but not sure if any existing implementations try to parse parameters as K/V and fail if there\u2019s no =</p>\n</blockquote>\n</aside>\n<p>If they are requiring an <code>=</code> they aren\u2019t spec compliant? <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"> But agree, we don\u2019t want to break anything. This is pretty easy to verify, though, since we have a good list of implementations listed at <a href=\"https://bitcoinqr.dev/\">https://bitcoinqr.dev/</a> which can be used to verify, and this is a somewhat trivial fix if they are requiring an <code>=</code>.</p>\n<p>This seems less risky then specifying <code>bitcoin:?key=val</code>, which seems <em>more</em> likely to break existing implementations since a spec compliant implementation <em>would</em> expect an address in the root of the URI.</p>\n<p>Furthermore, this can be used along side existing <code>key=val</code> parameter pairs, so you can even start using the new technique along with the old way in a backwards compatible way. Seems like a no brainer to me.</p>",
  "post_number": 12,
  "post_type": 1,
  "updated_at": "2024-03-01T18:05:00.158Z",
  "reply_count": 1,
  "reply_to_post_number": 11,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 6,
  "readers_count": 5,
  "score": 5.8,
  "yours": false,
  "topic_id": 630,
  "topic_slug": "revisiting-bip21",
  "topic_title": "Revisiting BIP21",
  "topic_html_title": "Revisiting BIP21",
  "category_id": 8,
  "display_username": "josie",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"MattCorallo, post:11, topic:630\"]\nbut not sure if any existing implementations try to parse parameters as K/V and fail if there\u2019s no =\n[/quote]\n\nIf they are requiring an `=` they aren't spec compliant? :) But agree, we don't want to break anything. This is pretty easy to verify, though, since we have a good list of implementations listed at https://bitcoinqr.dev/ which can be used to verify, and this is a somewhat trivial fix if they are requiring an `=`.\n\nThis seems less risky then specifying `bitcoin:?key=val`, which seems *more* likely to break existing implementations since a spec compliant implementation *would* expect an address in the root of the URI.\n\nFurthermore, this can be used along side existing `key=val` parameter pairs, so you can even start using the new technique along with the old way in a backwards compatible way. Seems like a no brainer to me.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 92,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}