{
  "id": 1753,
  "name": "josie",
  "username": "josibake",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josibake/{size}/83_2.png",
  "created_at": "2024-03-01T15:31:08.131Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"MattCorallo\" data-post=\"3\" data-topic=\"630\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/e47c2d/48.png\" class=\"avatar\"> MattCorallo:</div>\n<blockquote>\n<p>we should simply require the type of the address as the key - ie if its a taproot address the key should be ta or tp, silent payment sp, BOLT12 b12, etc. Those names are shorter but also allow wallets to know where to go look for things they know how to pay, and also know what kind of thing they\u2019re dealing with (if, for example, someone came up with an address type that doesn\u2019t identify itself in a bech32 HRP to keep QR code sizes small, not that anyone should).</p>\n</blockquote>\n</aside>\n<p>This doesn\u2019t address the concern of needing to retroactively define keys for the known address types and still requiring new BIPs to define a key to be usable with BIP21.</p>\n<p>But forgetting the new keys concern for a second, we could define a new generic <code>addr</code> key for BIP21 which is only usable with self-identifying address types (legacy, p2sh, segwit, taproot, any new address with an HRP), or only usable with addresses that have an HRP (bech32, bech32m) since the HRP is functionally equivalent to an extension key. This means existing address types just work and any new address type with an HRP would also just work. We would still need new payment protocols (<code>b12</code> for example) to define their own extension keys, but this seems strictly better than needing to define keys for <code>legacy</code>, <code>p2sh</code>, <code>bech32</code>, <code>bech32m/tr</code>, <code>bech32m/sp</code>, etc. Sure, the sending client would still need to check each <code>addr</code> option, but this seems trivial. If we defined <code>addr</code> as only allowing addresses with an HRP, its functionally the same since checking for an HRP is the same as checking for an extension key.</p>",
  "post_number": 6,
  "post_type": 1,
  "posts_count": 20,
  "updated_at": "2024-03-01T15:48:10.545Z",
  "reply_count": 1,
  "reply_to_post_number": 3,
  "quote_count": 1,
  "incoming_link_count": 8,
  "reads": 60,
  "readers_count": 59,
  "score": 57.0,
  "yours": false,
  "topic_id": 630,
  "topic_slug": "revisiting-bip21",
  "topic_title": "Revisiting BIP21",
  "topic_html_title": "Revisiting BIP21",
  "category_id": 8,
  "display_username": "josie",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"MattCorallo, post:3, topic:630\"]\nwe should simply require the type of the address as the key - ie if its a taproot address the key should be ta or tp, silent payment sp, BOLT12 b12, etc. Those names are shorter but also allow wallets to know where to go look for things they know how to pay, and also know what kind of thing they\u2019re dealing with (if, for example, someone came up with an address type that doesn\u2019t identify itself in a bech32 HRP to keep QR code sizes small, not that anyone should).\n[/quote]\n\nThis doesn't address the concern of needing to retroactively define keys for the known address types and still requiring new BIPs to define a key to be usable with BIP21.\n\nBut forgetting the new keys concern for a second, we could define a new generic `addr` key for BIP21 which is only usable with self-identifying address types (legacy, p2sh, segwit, taproot, any new address with an HRP), or only usable with addresses that have an HRP (bech32, bech32m) since the HRP is functionally equivalent to an extension key. This means existing address types just work and any new address type with an HRP would also just work. We would still need new payment protocols (`b12` for example) to define their own extension keys, but this seems strictly better than needing to define keys for `legacy`, `p2sh`, `bech32`, `bech32m/tr`, `bech32m/sp`, etc. Sure, the sending client would still need to check each `addr` option, but this seems trivial. If we defined `addr` as only allowing addresses with an HRP, its functionally the same since checking for an HRP is the same as checking for an extension key.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 92,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "This doesn\u2019t address the concern of needing to retroactively define keys for the known address types and still requiring new BIPs to define a key to be usable with BIP21. \nBut forgetting the new keys concern for a second, we could define a new generic addr key for BIP21 which is only usable with se&hellip;",
  "truncated": true,
  "post_url": "/t/revisiting-bip21/630/6",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}