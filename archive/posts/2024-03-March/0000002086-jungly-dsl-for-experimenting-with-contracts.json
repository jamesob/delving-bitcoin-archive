{
  "id": 2086,
  "name": "jungly",
  "username": "jungly",
  "avatar_template": "/user_avatar/delvingbitcoin.org/jungly/{size}/289_2.png",
  "created_at": "2024-03-29T16:50:26.252Z",
  "cooked": "<p>I want to share a DSL I am building for describing and running bitcoin contracts.</p>\n<p>It is <strong>not</strong> another effort to write Script in a higher level language. <img src=\"https://delvingbitcoin.org/images/emoji/twitter/sweat_smile.png?v=12\" title=\":sweat_smile:\" class=\"emoji\" alt=\":sweat_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>Instead, the DSL is a tool for describing transactions, sending them to bitcoin node, and running assertions on the state of the system - using a declarative syntax.</p>\n<p>The easiest way to describe it is by using an example</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/1X/b15677b99e3c35d405c12968b4f2ad8354bb7dfc.png\" data-download-href=\"https://delvingbitcoin.org/uploads/default/b15677b99e3c35d405c12968b4f2ad8354bb7dfc\" title=\"image\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/1X/b15677b99e3c35d405c12968b4f2ad8354bb7dfc_2_355x500.png\" alt=\"image\" data-base62-sha1=\"piNLDLRLnHgAhQ1bhLRKJiPLlZG\" width=\"355\" height=\"500\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/1X/b15677b99e3c35d405c12968b4f2ad8354bb7dfc_2_355x500.png, https://delvingbitcoin.org/uploads/default/optimized/1X/b15677b99e3c35d405c12968b4f2ad8354bb7dfc_2_532x750.png 1.5x, https://delvingbitcoin.org/uploads/default/optimized/1X/b15677b99e3c35d405c12968b4f2ad8354bb7dfc_2_710x1000.png 2x\" data-dominant-color=\"F5F6F8\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">800\u00d71126 95.4 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Docs: <a href=\"https://opdup.com/bitcoin-dsl/index.html\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Bitcoin DSL | Bitcoin DSL Docs</a></p>\n<p>Repo: <a href=\"https://github.com/pool2win/bitcoin-dsl\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - pool2win/bitcoin-dsl: Bitcoin DSL for scripting layer two contracts and interactions with bitcoin nodes</a></p>\n<p>The key features of the DSL are to provide a declarative syntax for the following:</p>\n<ol>\n<li>Describe transactions with a high level descriptive syntax</li>\n<li>Write locking using miniscript, descriptors and plain old Script</li>\n<li>Write unlocking scripts with high level constructs again - the runtime automatically tracks witness programs for generating signatures</li>\n<li>Execute multiple branches of contracts using system state transitions</li>\n<li>Interact with bitcoin node</li>\n<li>Assert system state</li>\n</ol>\n<p>There is still some more things I want to build, for example, incorporate taproot constructions and making it easy for users to run experimental versions of bitcoin.</p>\n<p>For the moment, I have example contracts for lightning (<a href=\"https://opdup.com/bitcoin-dsl/examples/lightning.html\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Lightning Contracts | Bitcoin DSL Docs</a>) and ARK (<a href=\"https://opdup.com/bitcoin-dsl/examples/ark.html\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">ARK | Bitcoin DSL Docs</a>) described using the DSL.</p>\n<p>Being able to write the ARK and lightning contracts and execute them on regtest using a high level DSL has been fun for me. I hope others will find the DSL useful too.</p>\n<p>Thanks,</p>\n<p>Jungly</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-03-29T16:50:26.252Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 0.8,
  "yours": false,
  "topic_id": 748,
  "topic_slug": "dsl-for-experimenting-with-contracts",
  "topic_title": "DSL for experimenting with contracts",
  "topic_html_title": "DSL for experimenting with contracts",
  "category_id": 8,
  "display_username": "jungly",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I want to share a DSL I am building for describing and running bitcoin contracts.\n\nIt is **not** another effort to write Script in a higher level language. :sweat_smile:\n\nInstead, the DSL is a tool for describing transactions, sending them to bitcoin node, and running assertions on the state of the system - using a declarative syntax.\n\nThe easiest way to describe it is by using an example\n\n![image|355x500](upload://piNLDLRLnHgAhQ1bhLRKJiPLlZG.png)\n\nDocs: https://opdup.com/bitcoin-dsl/index.html\n\nRepo: https://github.com/pool2win/bitcoin-dsl\n\nThe key features of the DSL are to provide a declarative syntax for the following:\n\n1. Describe transactions with a high level descriptive syntax \n2. Write locking using miniscript, descriptors and plain old Script\n3. Write unlocking scripts with high level constructs again - the runtime automatically tracks witness programs for generating signatures\n4. Execute multiple branches of contracts using system state transitions\n5. Interact with bitcoin node\n6. Assert system state\n\nThere is still some more things I want to build, for example, incorporate taproot constructions and making it easy for users to run experimental versions of bitcoin.\n\nFor the moment, I have example contracts for lightning (https://opdup.com/bitcoin-dsl/examples/lightning.html) and ARK (https://opdup.com/bitcoin-dsl/examples/ark.html) described using the DSL.\n\nBeing able to write the ARK and lightning contracts and execute them on regtest using a high level DSL has been fun for me. I hope others will find the DSL useful too.\n\nThanks,\n\nJungly",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 102,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}