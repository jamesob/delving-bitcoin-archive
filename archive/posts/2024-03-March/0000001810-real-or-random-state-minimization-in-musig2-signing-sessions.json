{
  "id": 1810,
  "name": "Tim Ruffing",
  "username": "real-or-random",
  "avatar_template": "/user_avatar/delvingbitcoin.org/real-or-random/{size}/413_2.png",
  "created_at": "2024-03-07T07:04:09.950Z",
  "cooked": "<p>Oh, I think what I had in mind is to pass the <span class=\"math\">(i,j)</span> pair as <code>extra_in</code> to NonceGen, and use <code>rand' := rand_root</code>. But yeah, that\u2019s i) not exactly CounterNonceGen, and ii) not clearly better.</p>\n<p>Note that the most natural cryptographic tool to generate <span class=\"math\">rand_{i,j}</span> from <code>rand_root</code> and <span class=\"math\">(i,j)</span>, at least from a theory point of view, is an RNG (e.g., ChaCha20) instead of a full-blown hash function. But a hash function is totally fine, it serves as a good RNG, it\u2019s just computationally more expensive. In some sense, the same applies to the internals of nonce generation in BIP327 and even BIP340. We simply picked SHA256 since implementations need it anyway for the challenge hash of the signature, and it\u2019s a bit perhaps a bit more conservative (or overkill, in other words).</p>\n<p>nit: I\u2019d call it <code>seed</code> or <code>psbt_seed</code> or <code>rand_seed</code> instead of <code>rand_root</code>. I think that\u2019s the most common word for such a thing.</p>\n<aside class=\"quote no-group\" data-username=\"salvatoshi\" data-post=\"1\" data-topic=\"626\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/salvatoshi/48/72_2.png\" class=\"avatar\"> salvatoshi:</div>\n<blockquote>\n<p>It is possible to generalize this to an arbitrary number of parallel signing sessions. Each session could be identified by a <code>session_id</code> computed by hashing enough information to (practically) uniquely identify the transaction being signed (making sure that the updated psbt presented in Phase 2 is unchanged); for example, it could be a commitment to the <code>txid</code> of the unsigned transaction contained in the PSBT, and the wallet policy used for signing.</p>\n</blockquote>\n</aside>\n<p>Hashing the commitment to the <code>txid</code> and the wallet policy sounds dangerous to me. What if you get a second PSBT for the same transaction? (It may very well be the case that I\u2019m misunderstanding \u2026)</p>",
  "post_number": 5,
  "post_type": 1,
  "updated_at": "2024-03-07T07:04:09.950Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 6.4,
  "yours": false,
  "topic_id": 626,
  "topic_slug": "state-minimization-in-musig2-signing-sessions",
  "topic_title": "State minimization in MuSig2 signing sessions",
  "topic_html_title": "State minimization in MuSig2 signing sessions",
  "category_id": 8,
  "display_username": "Tim Ruffing",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Oh, I think what I had in mind is to pass the $(i,j)$ pair as `extra_in` to NonceGen, and use `rand' := rand_root`. But yeah, that's i) not exactly CounterNonceGen, and ii) not clearly better.\n\nNote that the most natural cryptographic tool to generate $rand_{i,j}$ from `rand_root` and $(i,j)$, at least from a theory point of view, is an RNG (e.g., ChaCha20) instead of a full-blown hash function. But a hash function is totally fine, it serves as a good RNG, it's just computationally more expensive. In some sense, the same applies to the internals of nonce generation in BIP327 and even BIP340. We simply picked SHA256 since implementations need it anyway for the challenge hash of the signature, and it's a bit perhaps a bit more conservative (or overkill, in other words). \n\nnit: I'd call it `seed` or `psbt_seed` or `rand_seed` instead of `rand_root`. I think that's the most common word for such a thing.\n\n[quote=\"salvatoshi, post:1, topic:626\"]\nIt is possible to generalize this to an arbitrary number of parallel signing sessions. Each session could be identified by a `session_id` computed by hashing enough information to (practically) uniquely identify the transaction being signed (making sure that the updated psbt presented in Phase 2 is unchanged); for example, it could be a commitment to the `txid` of the unsigned transaction contained in the PSBT, and the wallet policy used for signing.\n[/quote]\n\nHashing the commitment to the `txid` and the wallet policy sounds dangerous to me. What if you get a second PSBT for the same transaction? (It may very well be the case that I'm misunderstanding ...)",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 340,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}