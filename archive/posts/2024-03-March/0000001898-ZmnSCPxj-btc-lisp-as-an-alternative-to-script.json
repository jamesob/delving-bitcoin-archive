{
  "id": 1898,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2024-03-14T22:19:45.194Z",
  "cooked": "<p>First and foremost: NACK ON THE ONE-CHARACTER NAMES (the <code>=</code> <code>+</code> etc get a pass, but not crap like <code>q</code>, <code>a</code>, <code>x</code>\u2026).  Just give the proper names <code>quote</code>, <code>apply</code>, etc.  Good call on <code>'foo</code> though.  Lisp also has quasiquotation <code>`(foo ,(cons '1 'nil))</code> syntax, maybe could use it as a shorthand for some combination of <code>apply</code> and <code>bintree</code> with automatic quotation?  Sure this is a compilation target but making it more readable so you can more easily debug a compiler without losing too much hair is always better.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"1\" data-topic=\"682\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>However the second challenge can\u2019t be resolved by leaving it up to the interpreter \u2013 working out when to interleave calculations might be possible to automate, but certainly seems to complex to add as a consensus feature.</p>\n</blockquote>\n</aside>\n<p>Alternatively, go the Haskell route and mandate everything be lazily evaluated all the time.  The interpreter can evaluate strictly but only if it does not diverge from the lazy-evaluation order.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-03-14T22:19:45.194Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 15,
  "readers_count": 14,
  "score": 2.8,
  "yours": false,
  "topic_id": 682,
  "topic_slug": "btc-lisp-as-an-alternative-to-script",
  "topic_title": "BTC Lisp as an alternative to Script",
  "topic_html_title": "BTC Lisp as an alternative to Script",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "First and foremost: NACK ON THE ONE-CHARACTER NAMES (the `=` `+` etc get a pass, but not crap like `q`, `a`, `x`...).  Just give the proper names `quote`, `apply`, etc.  Good call on `'foo` though.  Lisp also has quasiquotation [code]`(foo ,(cons '1 'nil))[/code] syntax, maybe could use it as a shorthand for some combination of `apply` and `bintree` with automatic quotation?  Sure this is a compilation target but making it more readable so you can more easily debug a compiler without losing too much hair is always better.\n\n[quote=\"ajtowns, post:1, topic:682\"]\nHowever the second challenge can\u2019t be resolved by leaving it up to the interpreter \u2013 working out when to interleave calculations might be possible to automate, but certainly seems to complex to add as a consensus feature.\n[/quote]\n\nAlternatively, go the Haskell route and mandate everything be lazily evaluated all the time.  The interpreter can evaluate strictly but only if it does not diverge from the lazy-evaluation order.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}