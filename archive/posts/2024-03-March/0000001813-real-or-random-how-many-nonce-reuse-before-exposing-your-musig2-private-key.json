{
  "id": 1813,
  "name": "Tim Ruffing",
  "username": "real-or-random",
  "avatar_template": "/user_avatar/delvingbitcoin.org/real-or-random/{size}/413_2.png",
  "created_at": "2024-03-07T10:21:47.492Z",
  "cooked": "<p>Indeed, you can\u2019t extract the signing key from just two signatures with the same nonce. You\u2019ll get two equations from the two signatures, but you have three unknowns.</p>\n<p>But what\u2019s also true is that security under concurrent sessions breaks down again. Assume the attacker can ask the honest signer for many concurrent signing sessions with limited reuse of nonces, i.e., each nonce (pair) may be used at most in two signing sessions. Then a forgery is possible.</p>\n<p>The attack is very similar to the attack on \u201cInsecureMuSig\u201d descriped in the <a href=\"https://eprint.iacr.org/2020/1261.pdf\" rel=\"noopener nofollow ugc\">MuSig2 paper</a> (pages 5 and 6). It just gets more hairy because we need to correct for <span class=\"math\">b</span> factors everywhere. Following the notation in the paper, the attacker opens <span class=\"math\">\n\\newcommand{\\si}{k}\n\\newcommand{\\smax}{k_{\\mathrm{max}}}\n\\newcommand{\\Hsig}{\\mathsf{H}_{\\mathrm{sig}}}\n\\newcommand{\\tX}{\\widetilde{X}}\n\\smax</span> session <em>pairs</em>, where the user reuses the same nonce pair in the two sessions belonging to a session pair. That is, the user (signer index <span class=\"math\">1</span>), responds with <span class=\"math\">\\smax</span> nonce pairs <span class=\"math\">(R_{1,1}^{(\\si)}, R_{1,2}^{(\\si)})</span>. The adversary (signer index <span class=\"math\">2</span>) chooses a targer message <span class=\"math\">m^*</span>, computes\n<span class=\"math\">\nR^* = \\prod_{k=1}^{\\smax} R_{1,1}^{(\\si)}\n</span>\nand uses <a href=\"https://web.archive.org/web/20230507110001/https://people.eecs.berkeley.edu/~daw/papers/genbday-long.ps\" rel=\"noopener nofollow ugc\">Wagner\u2019s algorithm</a> or the recently discovered and much faster <a href=\"https://eprint.iacr.org/2020/945.pdf\" rel=\"noopener nofollow ugc\">BLLOR algorithm</a> to find their nonce pairs <span class=\"math\">(R_{2,1}^{(k)}, R_{2,2}^{(k)})</span> for each session pair such that</p>\n<div class=\"math\">\n\\sum_{\\si=1}^{\\smax}\n  \\underbrace{ \n \\frac{b^{(\\si,2)}  c^{(\\si,1)} - b^{(\\si,1)} c^{(\\si,1)}}{b^{(\\si,2)} - b^{(\\si,1)}} \n  }_{=:\\,c^{(\\si)}}\n  = \\underbrace{\\Hsig(\\tX, R^*, m^*)}_{=:\\,c^*},\n</div>\n<p>where <span class=\"math\">b^{(\\si,1)}</span>, <span class=\"math\">b^{(\\si,2)}</span> are the two <span class=\"math\">b</span> values in the two sessions belonging to session pair <span class=\"math\">k</span>, and</p>\n<div class=\"math\">\nc^{(\\si,i)} := \\Hsig\\left(\\tX, R_{1,1}^{(\\si)}\\left(R_{1,2}^{(\\si)}\\right)^{b^{(\\si,i)}} R_{2,1}^{(\\si)} \\left(R_{2,2}^{(\\si)}\\right)^{b^{(\\si,i)}}, m^{(\\si)}\\right), \\qquad i \\in \\{1,2\\}.\n</div>\n<p>Having received <span class=\"math\">(R_{2,1}^{(k)}, R_{2,2}^{(k)})</span> in the two sessions, the honest signer will reply with partial signatures</p>\n<div class=\"math\">\ns_1^{(\\si,1)} = r_{1,1}^{(\\si)} + b^{(\\si,1)} r_{1,2}  + c^{(\\si,1)} \\cdot a_1x_1, \\\\\ns_1^{(\\si,2)} = r_{1,1}^{(\\si)} + b^{(\\si,2)} r_{1,2}  + c^{(\\si,2)} \\cdot a_1x_1.\n</div>\n<p>Multiplying the first equation with <span class=\"math\">b^{(\\si,2)}</span>, and the second with <span class=\"math\">-b^{(\\si,1)}</span>, and adding the two resulting equations yields</p>\n<div class=\"math\">\nb^{(\\si,2)} s_1^{(\\si,1)} -  b^{(\\si,1)} s_1^{(\\si,2)}  = (b^{(\\si,2)} - b^{(\\si,1)}) r_{1,1} ^{(\\si)} + (b^{(\\si,2)}  c^{(\\si,1)} - b^{(\\si,1)} c^{(\\si,1)}) \\cdot a_1x_1.\n</div>\n<p>By further dividing by <span class=\"math\">b^{(\\si,2)} - b^{(\\si,1)}</span> (which is non-zero with overwhelming probability), defining</p>\n<div class=\"math\">\ns_1^{(\\si)} := \\frac{ b^{(\\si,2)} s_1^{(\\si,1)} -  b^{(\\si,1)} s_1^{(\\si,2)}}{b^{(\\si,2)} - b^{(\\si,1)}},\n</div>\n<p>and substituting <span class=\"math\">r_1 := r_{1,1}</span>, we obtain</p>\n<div class=\"math\">\ns_1^{(\\si)}  =  r_1 ^{(\\si)} + c^{(k)} \\cdot a_1x_1\n</div>\n<p>exactly as in the paper.\nThe attack then proceeds as described in the paper.</p>\n<p><em>edit: If you see rendering errors in the equations, try to reload the page. I think Discourse here uses some optimizations where it loads the equations in the wrong order, and then they won\u2019t work.</em></p>\n<hr>\n<aside class=\"quote no-group\" data-username=\"t-bast\" data-post=\"1\" data-topic=\"217\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/t-bast/48/98_2.png\" class=\"avatar\"> t-bast:</div>\n<blockquote>\n<p>The <a href=\"https://github.com/bitcoin/bips/blob/e918b50731397872ad2922a1b08a5a4cd1d6d546/bip-0327.mediawiki\" rel=\"noopener nofollow ugc\">Musig2 BIP </a> says that signing two distinct messages with the same <code>secnonce</code> exposes your private key.</p>\n</blockquote>\n</aside>\n<p>Are you referring to the following statement from BIP327?</p>\n<blockquote>\n<p>The <em>Sign</em> algorithm must <strong>not</strong> be executed twice with the same <em>secnonce</em>. Otherwise, it is possible to extract the secret signing key from the two partial signatures output by the two executions of <em>Sign</em>.\u2019</p>\n</blockquote>\n<p>Hm, yes, we should probably change the wording here.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2024-03-07T12:29:08.770Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 10,
  "reads": 7,
  "readers_count": 6,
  "score": 66.2,
  "yours": false,
  "topic_id": 217,
  "topic_slug": "how-many-nonce-reuse-before-exposing-your-musig2-private-key",
  "topic_title": "How many nonce reuse before exposing your Musig2 private key?",
  "topic_html_title": "How many nonce reuse before exposing your Musig2 private key?",
  "category_id": 7,
  "display_username": "Tim Ruffing",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Indeed, you can't extract the signing key from just two signatures with the same nonce. You'll get two equations from the two signatures, but you have three unknowns.\n\nBut what's also true is that security under concurrent sessions breaks down again. Assume the attacker can ask the honest signer for many concurrent signing sessions with limited reuse of nonces, i.e., each nonce (pair) may be used at most in two signing sessions. Then a forgery is possible.\n\nThe attack is very similar to the attack on \"InsecureMuSig\" descriped in the [MuSig2 paper](https://eprint.iacr.org/2020/1261.pdf) (pages 5 and 6). It just gets more hairy because we need to correct for $b$ factors everywhere. Following the notation in the paper, the attacker opens $\n\\newcommand{\\si}{k}\n\\newcommand{\\smax}{k_{\\mathrm{max}}}\n\\newcommand{\\Hsig}{\\mathsf{H}_{\\mathrm{sig}}}\n\\newcommand{\\tX}{\\widetilde{X}}\n\\smax$ session *pairs*, where the user reuses the same nonce pair in the two sessions belonging to a session pair. That is, the user (signer index $1$), responds with $\\smax$ nonce pairs $(R_{1,1}^{(\\si)}, R_{1,2}^{(\\si)})$. The adversary (signer index $2$) chooses a targer message $m^*$, computes\n$\nR^* = \\prod_{k=1}^{\\smax} R_{1,1}^{(\\si)}\n$\nand uses [Wagner's algorithm](https://web.archive.org/web/20230507110001/https://people.eecs.berkeley.edu/~daw/papers/genbday-long.ps) or the recently discovered and much faster [BLLOR algorithm](https://eprint.iacr.org/2020/945.pdf) to find their nonce pairs $(R_{2,1}^{(k)}, R_{2,2}^{(k)})$ for each session pair such that\n$$\n  \\sum_{\\si=1}^{\\smax}\n  \\underbrace{ \n \\frac{b^{(\\si,2)}  c^{(\\si,1)} - b^{(\\si,1)} c^{(\\si,1)}}{b^{(\\si,2)} - b^{(\\si,1)}} \n  }_{=:\\,c^{(\\si)}}\n  = \\underbrace{\\Hsig(\\tX, R^*, m^*)}_{=:\\,c^*},\n$$\nwhere $b^{(\\si,1)}$, $b^{(\\si,2)}$ are the two $b$ values in the two sessions belonging to session pair $k$, and\n$$\nc^{(\\si,i)} := \\Hsig\\left(\\tX, R_{1,1}^{(\\si)}\\left(R_{1,2}^{(\\si)}\\right)^{b^{(\\si,i)}} R_{2,1}^{(\\si)} \\left(R_{2,2}^{(\\si)}\\right)^{b^{(\\si,i)}}, m^{(\\si)}\\right), \\qquad i \\in \\{1,2\\}.\n$$\nHaving received $(R_{2,1}^{(k)}, R_{2,2}^{(k)})$ in the two sessions, the honest signer will reply with partial signatures\n$$\ns_1^{(\\si,1)} = r_{1,1}^{(\\si)} + b^{(\\si,1)} r_{1,2}  + c^{(\\si,1)} \\cdot a_1x_1, \\\\\ns_1^{(\\si,2)} = r_{1,1}^{(\\si)} + b^{(\\si,2)} r_{1,2}  + c^{(\\si,2)} \\cdot a_1x_1.\n$$\nMultiplying the first equation with $b^{(\\si,2)}$, and the second with $-b^{(\\si,1)}$, and adding the two resulting equations yields\n$$\nb^{(\\si,2)} s_1^{(\\si,1)} -  b^{(\\si,1)} s_1^{(\\si,2)}  = (b^{(\\si,2)} - b^{(\\si,1)}) r_{1,1} ^{(\\si)} + (b^{(\\si,2)}  c^{(\\si,1)} - b^{(\\si,1)} c^{(\\si,1)}) \\cdot a_1x_1.\n$$\nBy further dividing by $b^{(\\si,2)} - b^{(\\si,1)}$ (which is non-zero with overwhelming probability), defining\n$$\ns_1^{(\\si)} := \\frac{ b^{(\\si,2)} s_1^{(\\si,1)} -  b^{(\\si,1)} s_1^{(\\si,2)}}{b^{(\\si,2)} - b^{(\\si,1)}},\n$$\nand substituting $r_1 := r_{1,1}$, we obtain\n$$\ns_1^{(\\si)}  =  r_1 ^{(\\si)} + c^{(k)} \\cdot a_1x_1\n$$\nexactly as in the paper.\nThe attack then proceeds as described in the paper.\n\n\n*edit: If you see rendering errors in the equations, try to reload the page. I think Discourse here uses some optimizations where it loads the equations in the wrong order, and then they won't work.*\n\n---\n\n\n[quote=\"t-bast, post:1, topic:217\"]\nThe [Musig2 BIP ](https://github.com/bitcoin/bips/blob/e918b50731397872ad2922a1b08a5a4cd1d6d546/bip-0327.mediawiki) says that signing two distinct messages with the same `secnonce` exposes your private key.\n[/quote]\n\nAre you referring to the following statement from BIP327?\n> The *Sign* algorithm must **not** be executed twice with the same *secnonce*. Otherwise, it is possible to extract the secret signing key from the two partial signatures output by the two executions of *Sign*.'\n\nHm, yes, we should probably change the wording here.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 340,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}