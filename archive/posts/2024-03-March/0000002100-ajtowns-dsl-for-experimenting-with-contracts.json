{
  "id": 2100,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-03-30T18:39:54.089Z",
  "cooked": "<p>Looking at the lightning examples, it seems like it would be helpful to have a <code>reorg_chain</code> command along the lines of \u201cextend_chain\u201d that combines <code>invalidateblock</code> and <code>generate</code> and potentially replaces some previously confirmed transactions.</p>\n<p>You might consider differentiating keys and addresses \u2013 eg</p>\n<pre data-code-wrap=\"raw\"><code class=\"lang-raw\">@alice_key = key :new \n@alice_addr = address :wpkh(alice)\n@alice_to_self = transaction inputs: [\n                              { tx: @alice_coinbase_tx, vout: 0, script_sig: '@alice_addr' }\n                            ],\n                            outputs: [\n                              { to: '@alice_addr', amount: 49.99.sats }\n                            ]\n</code></pre>\n<p>Seeing if you can rewrite <a href=\"https://github.com/bitcoin/bitcoin/blob/61de64df6790077857faba84796bb874b59c5d15/test/functional/feature_block.py\">feature_block.py</a> might be worth doing \u2013 then the test case could perhaps easily be run on other node implementations, and perhaps it might be easier to add other tests, or easier to understand what the existing tests do if your DSL is actually a better way to describe these things?</p>\n<p>Just some ideas, feel free to ignore!</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-03-30T18:44:58.745Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 1.6,
  "yours": false,
  "topic_id": 748,
  "topic_slug": "dsl-for-experimenting-with-contracts",
  "topic_title": "DSL for experimenting with contracts",
  "topic_html_title": "DSL for experimenting with contracts",
  "category_id": 8,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Looking at the lightning examples, it seems like it would be helpful to have a `reorg_chain` command along the lines of \"extend_chain\" that combines `invalidateblock` and `generate` and potentially replaces some previously confirmed transactions.\n\nYou might consider differentiating keys and addresses -- eg\n\n```raw\n@alice_key = key :new \n@alice_addr = address :wpkh(alice)\n@alice_to_self = transaction inputs: [\n                              { tx: @alice_coinbase_tx, vout: 0, script_sig: '@alice_addr' }\n                            ],\n                            outputs: [\n                              { to: '@alice_addr', amount: 49.99.sats }\n                            ]\n```\n\nSeeing if you can rewrite [feature_block.py](https://github.com/bitcoin/bitcoin/blob/61de64df6790077857faba84796bb874b59c5d15/test/functional/feature_block.py) might be worth doing -- then the test case could perhaps easily be run on other node implementations, and perhaps it might be easier to add other tests, or easier to understand what the existing tests do if your DSL is actually a better way to describe these things?\n\nJust some ideas, feel free to ignore!",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}