{
  "id": 1931,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-03-19T00:58:42.119Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"roconnor-blockstream\" data-post=\"6\" data-topic=\"636\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/roconnor-blockstream/48/427_2.png\" class=\"avatar\"> roconnor-blockstream:</div>\n<blockquote>\n<p>One feature of Simplicity is \u201cpruning\u201d. Simplicity programs are committed via a Merkle Tree structure and unexecuted branches are required to be trimmed when the program is revealed. This is kinda the opposite of the if statement that evaluates both branches that is described in Chia Lisp. Simplicity\u2019s pruning has potential privacy benefits as well as potential for reducing on chain data.</p>\n</blockquote>\n</aside>\n<p>This is something you can kind-of do in chia lisp, you just have to do it manually if you want to. The <a href=\"https://chialisp.com/standard-transactions/#code\">standard transaction format</a> implements the base taproot idea of being able to switch from providing just a signature to involving some more complicated script, calling it a \u201chidden puzzle\u201d. To do that, it generates a hash of the hidden script via the custom <code>sha256tree1</code> function. I don\u2019t think it would be much more hassle to add taproot-style MAST (where you just have a top level merkle tree of scripts, choosing one to evaluate), though you\u2019d need some cleverness to resolved a deeper AST (replacing <code>(i COND CODE hash)</code> with <code>(a (i COND (q . CODE) (q x)))</code> at the same time as building up the overall hash of the expression, perhaps).</p>",
  "post_number": 9,
  "post_type": 1,
  "updated_at": "2024-03-19T00:58:42.119Z",
  "reply_count": 0,
  "reply_to_post_number": 6,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 6,
  "readers_count": 5,
  "score": 1.0,
  "yours": false,
  "topic_id": 636,
  "topic_slug": "chia-lisp-for-bitcoiners",
  "topic_title": "Chia Lisp For Bitcoiners",
  "topic_html_title": "Chia Lisp For Bitcoiners",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"roconnor-blockstream, post:6, topic:636\"]\nOne feature of Simplicity is \u201cpruning\u201d. Simplicity programs are committed via a Merkle Tree structure and unexecuted branches are required to be trimmed when the program is revealed. This is kinda the opposite of the if statement that evaluates both branches that is described in Chia Lisp. Simplicity\u2019s pruning has potential privacy benefits as well as potential for reducing on chain data.\n[/quote]\n\nThis is something you can kind-of do in chia lisp, you just have to do it manually if you want to. The [standard transaction format](https://chialisp.com/standard-transactions/#code) implements the base taproot idea of being able to switch from providing just a signature to involving some more complicated script, calling it a \"hidden puzzle\". To do that, it generates a hash of the hidden script via the custom `sha256tree1` function. I don't think it would be much more hassle to add taproot-style MAST (where you just have a top level merkle tree of scripts, choosing one to evaluate), though you'd need some cleverness to resolved a deeper AST (replacing `(i COND CODE hash)` with `(a (i COND (q . CODE) (q x)))` at the same time as building up the overall hash of the expression, perhaps).",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}