{
  "id": 2067,
  "name": "Jeremy Rubin",
  "username": "JeremyRubin",
  "avatar_template": "/user_avatar/delvingbitcoin.org/jeremyrubin/{size}/264_2.png",
  "created_at": "2024-03-27T16:36:12.320Z",
  "cooked": "<p>Any protocol that is ever to be at all secure on Bitcoin has to be \u201cprogress friendly\u201d, that is, if there is a set of currently minable transactions <span class=\"math\">S</span>, the protocol works as expected if any <span class=\"math\">s \\in S</span> is mined, and any such <span class=\"math\">s</span> being mined is a good outcome.</p>\n<p>The idea that protocols could be \u201cunhappy\u201d if <span class=\"math\">s_0</span> is mined instead of <span class=\"math\">s_1</span> is weak.</p>\n<p>Suhas\u2019 point about pinning is rendered more or less moot if you, as a point of policy, only allow sponsors if they put a cluster into the next block (or maybe a few blocks out). All users will be happy in that case because \u2013 irrespective of if they were pinned for one block \u2013 their protocol has made progress as some tx has been mined. This isn\u2019t really a problem for sponsors, because theres no point in sponsoring far ahead of when it is likely to be included.</p>\n<p>For example, LN-Symmetry can be progress friendly because if the ratchet state is at 12321, and the miner chooses to mine state 112 instead of 12321 because of a sponsor, then 12321 can still be broadcast later at no additional cost to the participant wishing to finalize that state. Each update also expands the timeout before final claim, so there is always enough time even with a long sequence of bad updates.</p>\n<p>Should there be any protocol which is attaching any value to preferring <span class=\"math\">s_1</span> to <span class=\"math\">s_0</span>, and expecting to be able to have broadcast both to the network and have <span class=\"math\">s_1</span> be guaranteed to be mined, is not secure and there is no reason to even attempt to support it beyond miner rationality. Sponsors to the rescure \u2013 <span class=\"math\">s_1</span> or <span class=\"math\">s_0</span> are only preferred if they pay more directly or via a sponsor package.</p>\n<p>To make this even more abundantly clear, a malicious 3rd party is only willing to sponsor <span class=\"math\">s_0</span> over <span class=\"math\">s_1</span> when there is some profit extractable by including <span class=\"math\">s_0</span> instead of <span class=\"math\">s_1</span>. If there <em>is</em> such a profit to be extracted, then we should expect (with or without sponsors) a miner to either figure out how to extract that profit themselves, or to accept an out-of-band bribe to include <span class=\"math\">s_0</span> over <span class=\"math\">s_1</span>. Worse still, if out-of-band bribes are popular, you\u2019d only do it to \u201ctrustworthy\u201d miners, leading to a profit edge for centralization.</p>\n<p>To really take it home, even with a normal use case of RBF, the preferences are backwards. Suppose a set <span class=\"math\">S</span> where all <span class=\"math\">s</span> make the same payments, less fees taken from a change output, and fees are strictly increasing. In general, a user prefers if <span class=\"math\">s_0</span> is mined, as it pays lower fee, but only issues <span class=\"math\">s_1</span> because <span class=\"math\">s_0</span> didn\u2019t get mined. If <span class=\"math\">s_0</span> were to be instead bumped by an out-of-band payment, or by a sponsor, then that user would be happier than <span class=\"math\">s_1</span> was mined. Even if you do rolling batches from an exchange, where every <span class=\"math\">s_{i+1}</span> pays more people than in <span class=\"math\">s_i</span> (ignoring the minrelayfee increments meaning that <span class=\"math\">s_i</span> is better, a reason this technique isn\u2019t popular) the batcher would be perfectly happy with having someone else pay for inclusion of an earlier state, since ultimately it means a fee savings to them, even if they have to reissue another transaction later (e.g., out of the change to guarantee common input).</p>\n<p>The only case where you\u2019re unhappy with <span class=\"math\">s_0</span> over <span class=\"math\">s_1</span> is when you are making bad assumptions about how Bitcoin works.</p>\n<p>(N.B. <span class=\"math\">S</span> is the available transactions, so excluding future timelocked txs. Protocols like Lightning rely on an assumptions of execution speed)</p>",
  "post_number": 12,
  "post_type": 1,
  "updated_at": "2024-03-27T16:36:12.320Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 14,
  "readers_count": 13,
  "score": 2.6,
  "yours": false,
  "topic_id": 696,
  "topic_slug": "improving-transaction-sponsor-blockspace-efficiency",
  "topic_title": "Improving transaction sponsor blockspace efficiency",
  "topic_html_title": "Improving transaction sponsor blockspace efficiency",
  "category_id": 7,
  "display_username": "Jeremy Rubin",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Any protocol that is ever to be at all secure on Bitcoin has to be \"progress friendly\", that is, if there is a set of currently minable transactions $S$, the protocol works as expected if any $s \\in S$ is mined, and any such $s$ being mined is a good outcome.\n\nThe idea that protocols could be \"unhappy\" if $s_0$ is mined instead of $s_1$ is weak.\n\nSuhas' point about pinning is rendered more or less moot if you, as a point of policy, only allow sponsors if they put a cluster into the next block (or maybe a few blocks out). All users will be happy in that case because -- irrespective of if they were pinned for one block -- their protocol has made progress as some tx has been mined. This isn't really a problem for sponsors, because theres no point in sponsoring far ahead of when it is likely to be included.\n\nFor example, LN-Symmetry can be progress friendly because if the ratchet state is at 12321, and the miner chooses to mine state 112 instead of 12321 because of a sponsor, then 12321 can still be broadcast later at no additional cost to the participant wishing to finalize that state. Each update also expands the timeout before final claim, so there is always enough time even with a long sequence of bad updates.\n\nShould there be any protocol which is attaching any value to preferring $s_1$ to $s_0$, and expecting to be able to have broadcast both to the network and have $s_1$ be guaranteed to be mined, is not secure and there is no reason to even attempt to support it beyond miner rationality. Sponsors to the rescure -- $s_1$ or $s_0$ are only preferred if they pay more directly or via a sponsor package.\n\nTo make this even more abundantly clear, a malicious 3rd party is only willing to sponsor $s_0$ over $s_1$ when there is some profit extractable by including $s_0$ instead of $s_1$. If there _is_ such a profit to be extracted, then we should expect (with or without sponsors) a miner to either figure out how to extract that profit themselves, or to accept an out-of-band bribe to include $s_0$ over $s_1$. Worse still, if out-of-band bribes are popular, you'd only do it to \"trustworthy\" miners, leading to a profit edge for centralization.\n\nTo really take it home, even with a normal use case of RBF, the preferences are backwards. Suppose a set $S$ where all $s$ make the same payments, less fees taken from a change output, and fees are strictly increasing. In general, a user prefers if $s_0$ is mined, as it pays lower fee, but only issues $s_1$ because $s_0$ didn't get mined. If $s_0$ were to be instead bumped by an out-of-band payment, or by a sponsor, then that user would be happier than $s_1$ was mined. Even if you do rolling batches from an exchange, where every $s_{i+1}$ pays more people than in $s_i$ (ignoring the minrelayfee increments meaning that $s_i$ is better, a reason this technique isn't popular) the batcher would be perfectly happy with having someone else pay for inclusion of an earlier state, since ultimately it means a fee savings to them, even if they have to reissue another transaction later (e.g., out of the change to guarantee common input).\n\nThe only case where you're unhappy with $s_0$ over $s_1$ is when you are making bad assumptions about how Bitcoin works.\n\n(N.B. $S$ is the available transactions, so excluding future timelocked txs. Protocols like Lightning rely on an assumptions of execution speed)",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 224,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}