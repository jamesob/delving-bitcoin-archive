{
  "id": 1825,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/user_avatar/delvingbitcoin.org/chris_stewart_5/{size}/296_2.png",
  "created_at": "2024-03-07T14:50:32.548Z",
  "cooked": "<blockquote>\n<p>I did not take look in depth yet but it doesn\u2019t seem to be property based testing for black-box stuff (functional), right?</p>\n</blockquote>\n<p>This is correct.</p>\n<p>I guess I haven\u2019t heard of property based testing being used via networking layers, usually I\u2019ve heard it used (and what we do in <a href=\"https://github.com/bitcoin-s/bitcoin-s\" rel=\"noopener nofollow ugc\">bitcoin-s</a>) is accessing data structures directly for a couple of reasons</p>\n<ol>\n<li>Do we want to property based test the entire networking stack? That seems very inefficient and will probably lead to very flaky tests</li>\n<li>Higher maintenance burden (although since we already have test suites in c++ and python maybe this doesn\u2019t apply as much to bitcoin core).</li>\n</ol>\n<p>As a general note, I find the python test framework lacking in completeness compared to c++ implementation. For instance, when working on my <a href=\"https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397\">64 bit arithmetic PR</a> it seems we just <a href=\"https://github.com/bitcoin/bitcoin/blob/c2c6a7d1dc162945fa56deb6eaf2bdd7f84999e8/test/functional/test_framework/script.py#L410\" rel=\"noopener nofollow ugc\">assume correctness of values</a> given to the Python test framework. I\u2019m suspicious that this occurs more often that we would like.</p>\n<p>Of course you can take this to mean we <em>need</em> to do this work to find these bugs, but I think this will result in a secondary consensus implementation in Python :-). Reasonable minds can differ of course, but that is my two sats of input.</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2024-03-07T14:50:32.548Z",
  "reply_count": 1,
  "reply_to_post_number": 5,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 16,
  "readers_count": 15,
  "score": 7.8,
  "yours": false,
  "topic_id": 640,
  "topic_slug": "property-based-testing-for-bitcoin-core",
  "topic_title": "Property-based testing for Bitcoin Core",
  "topic_html_title": "Property-based testing for Bitcoin Core",
  "category_id": 8,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "bruno",
    "name": "Bruno Garcia",
    "avatar_template": "/user_avatar/delvingbitcoin.org/bruno/{size}/60_2.png"
  },
  "bookmarked": false,
  "raw": ">I did not take look in depth yet but it doesn\u2019t seem to be property based testing for black-box stuff (functional), right?\n\nThis is correct.\n\nI guess I haven't heard of property based testing being used via networking layers, usually I've heard it used (and what we do in [bitcoin-s](https://github.com/bitcoin-s/bitcoin-s)) is accessing data structures directly for a couple of reasons\n\n1. Do we want to property based test the entire networking stack? That seems very inefficient and will probably lead to very flaky tests\n2. Higher maintenance burden (although since we already have test suites in c++ and python maybe this doesn't apply as much to bitcoin core).\n\nAs a general note, I find the python test framework lacking in completeness compared to c++ implementation. For instance, when working on my [64 bit arithmetic PR](https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397) it seems we just [assume correctness of values](https://github.com/bitcoin/bitcoin/blob/c2c6a7d1dc162945fa56deb6eaf2bdd7f84999e8/test/functional/test_framework/script.py#L410) given to the Python test framework. I'm suspicious that this occurs more often that we would like. \n\nOf course you can take this to mean we _need_ to do this work to find these bugs, but I think this will result in a secondary consensus implementation in Python :-). Reasonable minds can differ of course, but that is my two sats of input.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}