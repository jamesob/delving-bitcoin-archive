{
  "id": 1779,
  "name": "josie",
  "username": "josibake",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josibake/{size}/83_2.png",
  "created_at": "2024-03-04T12:51:37.350Z",
  "cooked": "<p>This is a really cool idea, thanks for the detailed writeup! From the linked discussions, this point resonated with me:</p>\n<blockquote>\n<p>A particular advantage of lisp-like approaches is that they treat code\nand data exactly the same \u2013 so if we\u2019re trying to leave the option open\nfor a transaction to supply some unexpected code on the witness stack,\nthen lisp handles that really naturally: you were going to include data\non the stack anyway, and code and data are the same, so you don\u2019t have\nto do anything special at all</p>\n</blockquote>\n<p>Its also really nice to already have real-world usage, devtooling, known bugs, etc with chialisp.</p>\n<p>Would we be able to take advantage of Formal Verification tooling that exists for LISP? You mention \u201clisp-variant,\u201d which makes me feel like the answer is no, but figured I\u2019d mention it.</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-03-04T12:51:37.350Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 2.2,
  "yours": false,
  "topic_id": 636,
  "topic_slug": "chia-lisp-for-bitcoiners",
  "topic_title": "Chia Lisp For Bitcoiners",
  "topic_html_title": "Chia Lisp For Bitcoiners",
  "category_id": 7,
  "display_username": "josie",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "This is a really cool idea, thanks for the detailed writeup! From the linked discussions, this point resonated with me:\n\n> A particular advantage of lisp-like approaches is that they treat code\nand data exactly the same -- so if we're trying to leave the option open\nfor a transaction to supply some unexpected code on the witness stack,\nthen lisp handles that really naturally: you were going to include data\non the stack anyway, and code and data are the same, so you don't have\nto do anything special at all\n\nIts also really nice to already have real-world usage, devtooling, known bugs, etc with chialisp.\n\nWould we be able to take advantage of Formal Verification tooling that exists for LISP? You mention \"lisp-variant,\" which makes me feel like the answer is no, but figured I'd mention it.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 92,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}