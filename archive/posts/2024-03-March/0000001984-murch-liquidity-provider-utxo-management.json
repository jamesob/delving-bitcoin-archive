{
  "id": 1984,
  "name": "Murch",
  "username": "murch",
  "avatar_template": "/user_avatar/delvingbitcoin.org/murch/{size}/139_2.png",
  "created_at": "2024-03-21T19:36:01.685Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"remyers\" data-post=\"7\" data-topic=\"600\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/remyers/48/159_2.png\" class=\"avatar\"> remyers:</div>\n<blockquote>\n<p>Counter intuitively my initial tests showed all algos having slightly lower total fees and fewer median inputs than using only bnb+cg. I\u2019m running more tests to try to figure out why.</p>\n</blockquote>\n</aside>\n<p>I expect that you did, but I assume that you set the <code>consolidationfeerate</code> to 1000 or 0, which would make CoinGrinder work at every feerate? One downside might be that CoinGrinder prefers the lower input amount all other things equal, and therefore you might create useful change less often. Do you already set custom minimum change amounts in this experiment or is the <code>min_change</code> behavior the default one?</p>\n<aside class=\"quote no-group\" data-username=\"remyers\" data-post=\"8\" data-topic=\"600\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/remyers/48/159_2.png\" class=\"avatar\"> remyers:</div>\n<blockquote>\n<p>One additional idea I\u2019m exploring is to take advantage of an addition degree of freedom unique to Lightning funding transactions: we do not need to hit the exact amount requested. Any value over (or under) the target funding amount will do when funding a channel. The funder still controls the funding amount in the Lightning channel and can charge for the exact amount added.</p>\n</blockquote>\n</aside>\n<p>That\u2019s an interesting idea. Perhaps at that point, BnB is actually not useful at all, but you could try using just several calls to CoinGrinder with various <code>min_change</code> values from minimal plus different bucket minimums.</p>",
  "post_number": 9,
  "post_type": 1,
  "updated_at": "2024-03-21T19:36:01.685Z",
  "reply_count": 0,
  "reply_to_post_number": 7,
  "quote_count": 2,
  "incoming_link_count": 1,
  "reads": 3,
  "readers_count": 2,
  "score": 5.4,
  "yours": false,
  "topic_id": 600,
  "topic_slug": "liquidity-provider-utxo-management",
  "topic_title": "Liquidity provider utxo management",
  "topic_html_title": "Liquidity provider utxo management",
  "category_id": 8,
  "display_username": "Murch",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "[quote=\"remyers, post:7, topic:600\"]\nCounter intuitively my initial tests showed all algos having slightly lower total fees and fewer median inputs than using only bnb+cg. I\u2019m running more tests to try to figure out why.\n[/quote]\n\nI expect that you did, but I assume that you set the `consolidationfeerate` to 1000 or 0, which would make CoinGrinder work at every feerate? One downside might be that CoinGrinder prefers the lower input amount all other things equal, and therefore you might create useful change less often. Do you already set custom minimum change amounts in this experiment or is the `min_change` behavior the default one?\n\n[quote=\"remyers, post:8, topic:600\"]\nOne additional idea I\u2019m exploring is to take advantage of an addition degree of freedom unique to Lightning funding transactions: we do not need to hit the exact amount requested. Any value over (or under) the target funding amount will do when funding a channel. The funder still controls the funding amount in the Lightning channel and can charge for the exact amount added.\n[/quote]\n\nThat\u2019s an interesting idea. Perhaps at that point, BnB is actually not useful at all, but you could try using just several calls to CoinGrinder with various `min_change` values from minimal plus different bucket minimums.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 58,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}