{
  "id": 1946,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-03-20T01:06:56.589Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"35\" data-topic=\"553\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>I\u2019m pretty sure we\u2019re now measuring 0.8% of \u201cNever Happens\u201d though. This doesn\u2019t seem to be the kind of thing that happens much by accident, but only as a result of deliberate attack. And that won\u2019t happen in the scenario where 50% of miners are doing this?</p>\n</blockquote>\n</aside>\n<p>Ah, but we don\u2019t have 50% of miners doing this now; we have ~100% of miners requiring a 100% increased absolute fee. Those miners are in different pools though, which is a different constraint. For the first pool to defect from requiring 100% absolute fee, I think the numbers look like:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>pool hash rate</th>\n<th>7 blocks</th>\n<th>10</th>\n<th>20</th>\n<th>50</th>\n<th>100</th>\n<th>135</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0.1%</td>\n<td>12.54%</td>\n<td>9.14%</td>\n<td>4.81%</td>\n<td>2.01%</td>\n<td>1.04%</td>\n<td>0.79%</td>\n</tr>\n<tr>\n<td>1%</td>\n<td>12.94%</td>\n<td>9.55%</td>\n<td>5.26%</td>\n<td>2.49%</td>\n<td>1.57%</td>\n<td>1.34%</td>\n</tr>\n<tr>\n<td>5%</td>\n<td>14.86%</td>\n<td>11.60%</td>\n<td>7.58%</td>\n<td>5.39%</td>\n<td>5.03%</td>\n<td>5.00%</td>\n</tr>\n<tr>\n<td>10%</td>\n<td>17.56%</td>\n<td>14.57%</td>\n<td>11.23%</td>\n<td>10.05%</td>\n<td>10.00%</td>\n<td>10.00%</td>\n</tr>\n<tr>\n<td>20%</td>\n<td>24.03%</td>\n<td>21.88%</td>\n<td>20.19%</td>\n<td>20.00%</td>\n<td>20.00%</td>\n<td>20.00%</td>\n</tr>\n<tr>\n<td>30%</td>\n<td>31.84%</td>\n<td>30.61%</td>\n<td>30.02%</td>\n<td>30.00%</td>\n<td>30.00%</td>\n<td>30.00%</td>\n</tr>\n<tr>\n<td>50%</td>\n<td>50.20%</td>\n<td>50.02%</td>\n<td>50.00%</td>\n<td>50.00%</td>\n<td>50.00%</td>\n<td>50.00%</td>\n</tr>\n<tr>\n<td>70%</td>\n<td>70.00%</td>\n<td>70.00%</td>\n<td>70.00%</td>\n<td>70.00%</td>\n<td>70.00%</td>\n<td>70.00%</td>\n</tr>\n<tr>\n<td>100%</td>\n<td>100.00%</td>\n<td>100.00%</td>\n<td>100.00%</td>\n<td>100.00%</td>\n<td>100.00%</td>\n<td>100.00%</td>\n</tr>\n</tbody>\n</table>\n</div><p>(Formula here is <span class=\"math\">x \\ge \\frac{h}{1-(1-h)^{n+1}}</span> \u2013 if you keep doing what everyone else is doing, you\u2019re expected revenue is <span class=\"math\">h \\cdot f</span> where <span class=\"math\">f</span> is the original fee, if you accept a replacement then either you\u2019ll mine it if you get a block, or the original will be mined by someone else at block <span class=\"math\">n+1</span>, so your expected revenue is <span class=\"math\">(1-(1-h)^{n+1}) \\cdot xf</span> where the replacement is paying a total fee of <span class=\"math\">xf</span>. Accepting the replacement has higher expected value when <span class=\"math\">x</span> satisfies the formula above. I think that table keeps working for the second defector and so on, provided all the defectors stick to their own optimal settings)</p>\n<p>The question is \u201cI\u2019m writing an app that wants to urgently replace some transaction, and I have to choose a fee for that. Obviously I\u2019m going to choose a high feerate because otherwise it definitely won\u2019t get mined soon, but do I have to boost that feerate even higher than the bottom-of-the-top-block feerate, and if so, by how much?\u201d</p>\n<p>At the moment, the answer is very much yes \u2013 you need to make sure your total fee is strictly greater than what you\u2019re replacing.</p>\n<p>If we change that rule, we need to figure out a new answer to the conflict between what miners would like (more fees better!) and what users want (less fees better!). But miners are getting the final choice as to whether to use the replacement or not, so it\u2019s likely that their decision matters most.</p>\n<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"35\" data-topic=\"553\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>So I think you\u2019ve convinced me that it will come down to whatever\u2019s simplest to implement?</p>\n</blockquote>\n</aside>\n<p>Simpler is always better, but the simplest solution is always to stick with what we\u2019ve already got.</p>\n<p>The good thing is that, going by the tables above and previously, what we\u2019ve already got <strong>isn\u2019t</strong> optimal for either miners (they\u2019d be better off to accept some replacements paying a lower absolute fee both today with competing pools, and even in a stratum v2 world with a ~100% pool) or users (less fees good!), so there\u2019s some concrete justification for change.</p>\n<p>I think the above table implies that for any tx that\u2019s 5MvB deep in the mempool or more, and is being replaced by a tx with a mining score that will put it in the next block, then we could reduce the total fee requirement to only need to pay 40% of the total fees of the replaced txs, and that would be a win for any pool with less than 40% hashrate. Probably still requires cluster mempool first in order to efficiently estimate mempool depth and next block feerate, but otherwise might be reasonably simple.</p>",
  "post_number": 36,
  "post_type": 1,
  "updated_at": "2024-03-20T01:08:26.651Z",
  "reply_count": 0,
  "reply_to_post_number": 35,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 16.8,
  "yours": false,
  "topic_id": 553,
  "topic_slug": "mempool-incentive-compatibility",
  "topic_title": "Mempool Incentive Compatibility",
  "topic_html_title": "Mempool Incentive Compatibility",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"rustyrussell, post:35, topic:553\"]\nI\u2019m pretty sure we\u2019re now measuring 0.8% of \u201cNever Happens\u201d though. This doesn\u2019t seem to be the kind of thing that happens much by accident, but only as a result of deliberate attack. And that won\u2019t happen in the scenario where 50% of miners are doing this?\n[/quote]\n\nAh, but we don't have 50% of miners doing this now; we have ~100% of miners requiring a 100% increased absolute fee. Those miners are in different pools though, which is a different constraint. For the first pool to defect from requiring 100% absolute fee, I think the numbers look like:\n\n|pool hash rate | 7 blocks | 10 | 20 | 50 | 100 | 135 |\n|--- | --- | --- | --- | --- | --- | ---|\n| 0.1% | 12.54% | 9.14% | 4.81% | 2.01% | 1.04% | 0.79%\n|  1% | 12.94% | 9.55% | 5.26% | 2.49% | 1.57% | 1.34%\n|  5% | 14.86% | 11.60% | 7.58% | 5.39% | 5.03% | 5.00%\n| 10% | 17.56% | 14.57% | 11.23% | 10.05% | 10.00% | 10.00%\n| 20% | 24.03% | 21.88% | 20.19% | 20.00% | 20.00% | 20.00%\n| 30% | 31.84% | 30.61% | 30.02% | 30.00% | 30.00% | 30.00%\n| 50% | 50.20% | 50.02% | 50.00% | 50.00% | 50.00% | 50.00%\n| 70% | 70.00% | 70.00% | 70.00% | 70.00% | 70.00% | 70.00%\n| 100% | 100.00% | 100.00% | 100.00% | 100.00% | 100.00% | 100.00%\n\n(Formula here is $x \\ge \\frac{h}{1-(1-h)^{n+1}}$ -- if you keep doing what everyone else is doing, you're expected revenue is $h \\cdot f$ where $f$ is the original fee, if you accept a replacement then either you'll mine it if you get a block, or the original will be mined by someone else at block $n+1$, so your expected revenue is $(1-(1-h)^{n+1}) \\cdot xf$ where the replacement is paying a total fee of $xf$. Accepting the replacement has higher expected value when $x$ satisfies the formula above. I think that table keeps working for the second defector and so on, provided all the defectors stick to their own optimal settings)\n\nThe question is \"I'm writing an app that wants to urgently replace some transaction, and I have to choose a fee for that. Obviously I'm going to choose a high feerate because otherwise it definitely won't get mined soon, but do I have to boost that feerate even higher than the bottom-of-the-top-block feerate, and if so, by how much?\"\n\nAt the moment, the answer is very much yes -- you need to make sure your total fee is strictly greater than what you're replacing.\n\nIf we change that rule, we need to figure out a new answer to the conflict between what miners would like (more fees better!) and what users want (less fees better!). But miners are getting the final choice as to whether to use the replacement or not, so it's likely that their decision matters most.\n\n[quote=\"rustyrussell, post:35, topic:553\"]\nSo I think you\u2019ve convinced me that it will come down to whatever\u2019s simplest to implement?\n[/quote]\n\nSimpler is always better, but the simplest solution is always to stick with what we've already got.\n\nThe good thing is that, going by the tables above and previously, what we've already got **isn't** optimal for either miners (they'd be better off to accept some replacements paying a lower absolute fee both today with competing pools, and even in a stratum v2 world with a ~100% pool) or users (less fees good!), so there's some concrete justification for change.\n\nI think the above table implies that for any tx that's 5MvB deep in the mempool or more, and is being replaced by a tx with a mining score that will put it in the next block, then we could reduce the total fee requirement to only need to pay 40% of the total fees of the replaced txs, and that would be a win for any pool with less than 40% hashrate. Probably still requires cluster mempool first in order to efficiently estimate mempool depth and next block feerate, but otherwise might be reasonably simple.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}