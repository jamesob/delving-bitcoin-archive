{
  "id": 1815,
  "name": "Tim Ruffing",
  "username": "real-or-random",
  "avatar_template": "/user_avatar/delvingbitcoin.org/real-or-random/{size}/413_2.png",
  "created_at": "2024-03-07T10:55:38.720Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"ZmnSCPxj\" data-post=\"2\" data-topic=\"224\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/z/ee7513/48.png\" class=\"avatar\"> ZmnSCPxj:</div>\n<blockquote>\n<p>Maybe the best bet would be to focus on the \u201cpure math\u201d SECP256K1 signature validations (i.e. have the <code>SIGHASH</code>es come from the CPU and then push them into the GPU for validation).</p>\n</blockquote>\n</aside>\n<p>This may indeed work, and it has been discussed before:</p>\n<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://bitcointalk.org/index.php?topic=3238.20\">\n  <header class=\"source\">\n\n      <a href=\"https://bitcointalk.org/index.php?topic=3238.20\" target=\"_blank\" rel=\"noopener nofollow ugc\">bitcointalk.org</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    \n\n<h3><a href=\"https://bitcointalk.org/index.php?topic=3238.20\" target=\"_blank\" rel=\"noopener nofollow ugc\">Speeding up signature verification</a></h3>\n\n  <p>Speeding up signature verification</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n<aside class=\"onebox githubissue\" data-onebox-src=\"https://github.com/bitcoin-core/secp256k1/issues/1214\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/bitcoin-core/secp256k1/issues/1214\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/bitcoin-core/secp256k1</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\">\n  <div class=\"github-icon-container\" title=\"Issue\">\n\t  <svg width=\"60\" height=\"60\" class=\"github-icon\" viewBox=\"0 0 14 16\" aria-hidden=\"true\"><path fill-rule=\"evenodd\" d=\"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"></path></svg>\n  </div>\n\n  <div class=\"github-info-container\">\n    <h4>\n      <a href=\"https://github.com/bitcoin-core/secp256k1/issues/1214\" target=\"_blank\" rel=\"noopener nofollow ugc\">OpenCL support</a>\n    </h4>\n\n    <div class=\"github-info\">\n      <div class=\"date\">\n        opened <span class=\"discourse-local-date\" data-format=\"ll\" data-date=\"2023-02-25\" data-time=\"02:25:05\" data-timezone=\"UTC\">02:25AM - 25 Feb 23 UTC</span>\n      </div>\n\n\n      <div class=\"user\">\n        <a href=\"https://github.com/cryptoquick\" target=\"_blank\" rel=\"noopener nofollow ugc\">\n          <img alt=\"cryptoquick\" src=\"https://delvingbitcoin.org/uploads/default/original/1X/3a769fc230594bb1e35bdb78a3922e0265fd6c49.png\" class=\"onebox-avatar-inline\" width=\"20\" height=\"20\" data-dominant-color=\"7F3745\">\n          cryptoquick\n        </a>\n      </div>\n    </div>\n\n    <div class=\"labels\">\n    </div>\n  </div>\n</div>\n\n  <div class=\"github-row\">\n    <p class=\"github-body-container\">I've been looking for versions of secp256k1 that can run on GPUs. I've found thi<span class=\"show-more-container\"><a href=\"\" rel=\"noopener\" class=\"show-more\">\u2026</a></span><span class=\"excerpt hidden\">s project, which seems like a fork: https://github.com/ilaychen/ECDSA-OpenCL\n\nMaybe it would make sense to upstream some of these changes, to better support GPU acceleration? Am willing to donate 7900 XTX to Sipa.\n\nI saw this comment: https://github.com/bitcoin-core/secp256k1/issues/502#issuecomment-357767815\n\nI'm not sure what that meant other than it's possible, and GPUs certainly have improved since that paper was written 10 years ago. It might make sense to revisit this.</span></p>\n  </div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>But I\u2019m not aware that anyone is seriously looking into it, at least not currently.</p>\n<aside class=\"quote no-group\" data-username=\"ZmnSCPxj\" data-post=\"2\" data-topic=\"224\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/z/ee7513/48.png\" class=\"avatar\"> ZmnSCPxj:</div>\n<blockquote>\n<p>I believe SECP256K1 Schnorr signatures as used in Taproot can be batch validated, meaning you only do a single calculation to validate multiple transactions that use the keyspend path. Since only a single calculation is needed, there seems to be no advantage to using a GPU in that case.</p>\n</blockquote>\n</aside>\n<p>Yes, but batch verification does not mean that the work of verifying <span class=\"math\">n</span> Schnorr signatures is the same (or similar) to the work of verifying a single Schnorr signature. Batch verification of <span class=\"math\">n</span> signatures will yield nice speed-ups as compared to verifying the <span class=\"math\">n</span> signatures individually, but it\u2019s <a href=\"https://github.com/jonasnick/secp256k1/blob/869e7097d9835945a1663a321239418ad2f93ca4/doc/speedup-batch.md\" rel=\"noopener nofollow ugc\">at most a factor of ~2 in practice</a>.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-03-07T11:00:44.563Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 1.8,
  "yours": false,
  "topic_id": 224,
  "topic_slug": "can-block-validation-benefit-from-cuda",
  "topic_title": "Can block validation benefit from CUDA?",
  "topic_html_title": "Can block validation benefit from CUDA?",
  "category_id": 8,
  "display_username": "Tim Ruffing",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"ZmnSCPxj, post:2, topic:224\"]\nMaybe the best bet would be to focus on the \u201cpure math\u201d SECP256K1 signature validations (i.e. have the `SIGHASH`es come from the CPU and then push them into the GPU for validation).\n[/quote]\n\nThis may indeed work, and it has been discussed before:\n\nhttps://bitcointalk.org/index.php?topic=3238.20\nhttps://github.com/bitcoin-core/secp256k1/issues/1214\n\nBut I'm not aware that anyone is seriously looking into it, at least not currently.\n\n[quote=\"ZmnSCPxj, post:2, topic:224\"]\nI believe SECP256K1 Schnorr signatures as used in Taproot can be batch validated, meaning you only do a single calculation to validate multiple transactions that use the keyspend path. Since only a single calculation is needed, there seems to be no advantage to using a GPU in that case.\n[/quote]\n\nYes, but batch verification does not mean that the work of verifying $n$ Schnorr signatures is the same (or similar) to the work of verifying a single Schnorr signature. Batch verification of $n$ signatures will yield nice speed-ups as compared to verifying the $n$ signatures individually, but it's [at most a factor of ~2 in practice](https://github.com/jonasnick/secp256k1/blob/869e7097d9835945a1663a321239418ad2f93ca4/doc/speedup-batch.md).",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 340,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}