{
  "id": 1874,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-03-13T14:58:33.260Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"roconnor-blockstream\" data-post=\"6\" data-topic=\"636\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/roconnor-blockstream/48/427_2.png\" class=\"avatar\"> roconnor-blockstream:</div>\n<blockquote>\n<p>Chia Lisp solutions seems to take a NOP approach where softforked opcodes must return nil and the computational content is all in whether the opcode fails or not. I suppose this approach could also be done in Simplicity by only allowing softforks of jets that return Simplicity\u2019s equivalent of nil.</p>\n</blockquote>\n</aside>\n<p>Ah, it\u2019s different to that: it takes the approach where soft forked opcodes must be run in a <strong>subprogram</strong> that returns nil (or aborts); within that subprogram the soft forked opcodes can do whatever they please. So the new <code>(coinid P H A)</code> operation can calculate and return a hash value, but (prior to a hardfork) you can only use that within a program that has \u201cverify\u201d behaviour, eg something like:</p>\n<pre><code class=\"lang-auto\">(softfork COST 0 \n    (q a (i (= (coinid P H A) X) (q q nil) (q x))) \n    1\n)\n</code></pre>\n<p>With a structure like that, you could have <code>P H A X</code> pulled from the environment (<code>1</code>), the code within <code>softfork</code> checks that <code>X</code> is calculated correctly (manually aborting if it\u2019s not via the <code>(a (i COND (q q nil) (q x)))</code> pattern), then additional code outside the <code>softfork</code> can make use of an otherwise untrusted <code>X</code>, having now established it correctly matches <code>P H A</code>.</p>",
  "post_number": 7,
  "post_type": 1,
  "updated_at": "2024-03-13T14:58:33.260Z",
  "reply_count": 1,
  "reply_to_post_number": 6,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 1.4,
  "yours": false,
  "topic_id": 636,
  "topic_slug": "chia-lisp-for-bitcoiners",
  "topic_title": "Chia Lisp For Bitcoiners",
  "topic_html_title": "Chia Lisp For Bitcoiners",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"roconnor-blockstream, post:6, topic:636\"]\nChia Lisp solutions seems to take a NOP approach where softforked opcodes must return nil and the computational content is all in whether the opcode fails or not. I suppose this approach could also be done in Simplicity by only allowing softforks of jets that return Simplicity\u2019s equivalent of nil.\n[/quote]\n\nAh, it's different to that: it takes the approach where soft forked opcodes must be run in a **subprogram** that returns nil (or aborts); within that subprogram the soft forked opcodes can do whatever they please. So the new `(coinid P H A)` operation can calculate and return a hash value, but (prior to a hardfork) you can only use that within a program that has \"verify\" behaviour, eg something like:\n\n```\n(softfork COST 0 \n    (q a (i (= (coinid P H A) X) (q q nil) (q x))) \n    1\n)\n```\n\nWith a structure like that, you could have `P H A X` pulled from the environment (`1`), the code within `softfork` checks that `X` is calculated correctly (manually aborting if it's not via the `(a (i COND (q q nil) (q x)))` pattern), then additional code outside the `softfork` can make use of an otherwise untrusted `X`, having now established it correctly matches `P H A`.",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}