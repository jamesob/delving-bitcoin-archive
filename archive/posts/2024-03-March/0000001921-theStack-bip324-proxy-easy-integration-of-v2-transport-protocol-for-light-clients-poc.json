{
  "id": 1921,
  "name": "Sebastian Falbesoner",
  "username": "theStack",
  "avatar_template": "/user_avatar/delvingbitcoin.org/thestack/{size}/420_2.png",
  "created_at": "2024-03-17T19:48:10.014Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"rustaceanrob\" data-post=\"8\" data-topic=\"678\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustaceanrob/48/443_2.png\" class=\"avatar\"> rustaceanrob:</div>\n<blockquote>\n<p>Hey, super cool project. I am happy to see other people excited about BIP324 and building tools to drive p2p towards v2. A friend and I have been working on a Rust implementation that will act as an API for clients to place into their pre-existing TCP logic, and we would appreciate some further guidance/contribution. Our main priority has been removing dependencies, and we are now down to just a few from <code>rust-bitcoin</code>. My main concern now is building the top level API around the Floresta Rust client, and I will be working on that this week. Our code is <a href=\"https://github.com/rustaceanrob/bip324\" rel=\"noopener nofollow ugc\">here </a>.</p>\n</blockquote>\n</aside>\n<p>Nice, that\u2019s great to hear and comes at the perfect point of time! I\u2019m sure there will be some further questions / suggestions when it comes to the details of the API, but at a first glance this seems like exactly what we need for BIP324 Proxy. Just being curious, what was the motivation to reduce the cryptography dependencies and reimplement them? Do the available Rust crates have any significant drawbacks, or is that more a generic philosophical decision of the library? I\u2019m not saying it\u2019s a bad idea (we actually do the same in Bitcoin Core), I just assumed that in Rust the package management works well enough, and I think I wouldn\u2019t have a problem depending on a well-maintained cryptographic library, which ideally has the resources to investigate optimizations etc.</p>\n<p>As a small update, I\u2019ve started the Rust rewrite branch yesterday: <a href=\"https://github.com/theStack/bip324-proxy/tree/rust_rewrite\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - theStack/bip324-proxy at rust_rewrite</a>\nIt\u2019s still tiny, so far it only creates the local server socket and displays a mesage for an incoming client connection, without spinning up a new thread yet. The plan would be to implement a dummy proxy (v1&lt;-&gt;v1) first and only then plug in all the BIP324 related stuff. Let\u2019s see how that goes. As always, contributions in any form are welcome (even if it\u2019s recommended book material / common pitfalls for network programming in Rust or whatever).</p>",
  "post_number": 9,
  "post_type": 1,
  "updated_at": "2024-03-17T19:48:10.014Z",
  "reply_count": 1,
  "reply_to_post_number": 8,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 9,
  "readers_count": 8,
  "score": 21.8,
  "yours": false,
  "topic_id": 678,
  "topic_slug": "bip324-proxy-easy-integration-of-v2-transport-protocol-for-light-clients-poc",
  "topic_title": "BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)",
  "topic_html_title": "BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)",
  "category_id": 8,
  "display_username": "Sebastian Falbesoner",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"rustaceanrob, post:8, topic:678, full:true\"]\nHey, super cool project. I am happy to see other people excited about BIP324 and building tools to drive p2p towards v2. A friend and I have been working on a Rust implementation that will act as an API for clients to place into their pre-existing TCP logic, and we would appreciate some further guidance/contribution. Our main priority has been removing dependencies, and we are now down to just a few from `rust-bitcoin`. My main concern now is building the top level API around the Floresta Rust client, and I will be working on that this week. Our code is [here ](https://github.com/rustaceanrob/bip324).\n[/quote]\n\nNice, that's great to hear and comes at the perfect point of time! I'm sure there will be some further questions / suggestions when it comes to the details of the API, but at a first glance this seems like exactly what we need for BIP324 Proxy. Just being curious, what was the motivation to reduce the cryptography dependencies and reimplement them? Do the available Rust crates have any significant drawbacks, or is that more a generic philosophical decision of the library? I'm not saying it's a bad idea (we actually do the same in Bitcoin Core), I just assumed that in Rust the package management works well enough, and I think I wouldn't have a problem depending on a well-maintained cryptographic library, which ideally has the resources to investigate optimizations etc.\n\nAs a small update, I've started the Rust rewrite branch yesterday: https://github.com/theStack/bip324-proxy/tree/rust_rewrite\nIt's still tiny, so far it only creates the local server socket and displays a mesage for an incoming client connection, without spinning up a new thread yet. The plan would be to implement a dummy proxy (v1<->v1) first and only then plug in all the BIP324 related stuff. Let's see how that goes. As always, contributions in any form are welcome (even if it's recommended book material / common pitfalls for network programming in Rust or whatever).",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 346,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}