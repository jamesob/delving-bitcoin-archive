{
  "id": 1877,
  "name": "Sebastian Falbesoner",
  "username": "theStack",
  "avatar_template": "/user_avatar/delvingbitcoin.org/thestack/{size}/420_2.png",
  "created_at": "2024-03-13T17:32:11.483Z",
  "cooked": "<p>Hi,</p>\n<p>I\u2019ve been working on a small tool for enabling peer-to-peer encryption for\nbitcoin clients that haven\u2019t implemented BIP324 yet.</p>\n<p>The basic idea is to run a local process with the sole purpose of translating between p2p v1 and v2 protocols.\nThe proxy starts a server socket on local TCP port 1324 [1] and spins up a new thread for every\nincoming v1 connection. The remote peer address is determined from the incoming first\nVERSION message which conveniently contains this information in the <code>addr_recv</code> field\n(see <a href=\"https://en.bitcoin.it/wiki/Protocol_documentation#version\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Protocol documentation - Bitcoin Wiki</a>).\nAfter performing the v2 handshake [2], the previously received VERSION message is sent to the remote node\nand subsequently, the proxy fowards incoming messages from either side to the opposite side,\ntranslating it to the corresponding p2p version format.</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/1X/e0dc32fc16fd357a8f66772892f49a5d78f07ecc.png\" data-download-href=\"https://delvingbitcoin.org/uploads/default/e0dc32fc16fd357a8f66772892f49a5d78f07ecc\" title=\"image\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/1X/e0dc32fc16fd357a8f66772892f49a5d78f07ecc_2_517x266.png\" alt=\"image\" data-base62-sha1=\"w5cJ83Hb5sef1EN4HLxg8tNPoHG\" width=\"517\" height=\"266\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/1X/e0dc32fc16fd357a8f66772892f49a5d78f07ecc_2_517x266.png, https://delvingbitcoin.org/uploads/default/optimized/1X/e0dc32fc16fd357a8f66772892f49a5d78f07ecc_2_775x399.png 1.5x, https://delvingbitcoin.org/uploads/default/original/1X/e0dc32fc16fd357a8f66772892f49a5d78f07ecc.png 2x\" data-dominant-color=\"ECEDEE\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">image</span><span class=\"informations\">937\u00d7483 65 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>To take use of BIP324 proxy, all a light client has to do is to initiate all outbound\nP2P connections to localhost:1324 instead of the actual remote peer address on the TCP level.\nThis usually doesn\u2019t need more than a single-line patch if hardcoded, though ideally a client should\nprovide this as a command-line option (e.g. <code>-bip324proxy=</code>\u2026).</p>\n<p>The implementation is written in Python3 without any external dependencies. Most of the code,\nespecially the cryptographic primitives, are not by me, but taken from Bitcoin Core\u2019s\nBIP324 implementation in the functional test framework (Kudos to stratospher and sipa).\nNote that this project is still in proof-of-concept phase, terribly slow and vulnerable to side-channel attacks. It\u2019s not recommended to use it for anything but tests right now. To reflect that, only signet is supported (though it\u2019s trivial to enable other networks by changing the <code>NET_MAGIC</code> constant).</p>\n<p>The plan is to do an efficient rewrite in Rust. As I\u2019m not fluent in this language, this\ncould take a while. Here are the links to the Github repository and a presentation that I held recently in a Brink engineering call:</p>\n<aside class=\"onebox allowlistedgeneric\" data-onebox-src=\"https://github.com/theStack/bip324-proxy\">\n  <header class=\"source\">\n      <img src=\"https://github.githubassets.com/favicons/favicon.svg\" class=\"site-icon\" width=\"32\" height=\"32\">\n\n      <a href=\"https://github.com/theStack/bip324-proxy\" target=\"_blank\" rel=\"noopener nofollow ugc\">GitHub</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"aspect-image\" style=\"--aspect-ratio:690/344;\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/1X/bcf32ef52c4436324b853616aee3d1e9996d62ef_2_690x345.png\" class=\"thumbnail\" data-dominant-color=\"E5E7E8\" width=\"690\" height=\"345\"></div>\n\n<h3><a href=\"https://github.com/theStack/bip324-proxy\" target=\"_blank\" rel=\"noopener nofollow ugc\">GitHub - theStack/bip324-proxy: BIP324 Proxy: Easy v2 transport protocol...</a></h3>\n\n  <p>BIP324 Proxy: Easy v2 transport protocol integration for light clients - theStack/bip324-proxy</p>\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n<aside class=\"onebox pdf\" data-onebox-src=\"https://raw.githubusercontent.com/theStack/bip324-proxy/master/doc/bip324-proxy_presentation.pdf\">\n  <header class=\"source\">\n\n      <a href=\"https://raw.githubusercontent.com/theStack/bip324-proxy/master/doc/bip324-proxy_presentation.pdf\" target=\"_blank\" rel=\"noopener nofollow ugc\">raw.githubusercontent.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <a href=\"https://raw.githubusercontent.com/theStack/bip324-proxy/master/doc/bip324-proxy_presentation.pdf\" target=\"_blank\" rel=\"noopener nofollow ugc\"><span class=\"pdf-onebox-logo\"></span></a>\n\n<h3><a href=\"https://raw.githubusercontent.com/theStack/bip324-proxy/master/doc/bip324-proxy_presentation.pdf\" target=\"_blank\" rel=\"noopener nofollow ugc\">bip324-proxy_presentation.pdf</a></h3>\n\n  <p class=\"filesize\">598.37 KB</p>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>The slides contain a few examples of light clients that I\u2019ve tested the BIP324 proxy with,\nshowing patches that are needed for redirection to the proxy.</p>\n<p>Suggestions and ideas are very welcome.</p>\n<p>Cheers,\nSebastian</p>\n<p>[1] Note that the port 324 would have been a nice choice reflecting the BIP number, but TCP/IP\nports below 1024 need superuser privileges at least on Unix-like operating systems,\nhence I added a \u201c1\u201d (standing for \u201cv1\u201d) in front. 1324 is not taken yet, according to some well-known\nport lists that I checked, so it shouldn\u2019t collide with other local services and I think\nit\u2019s still a nice, somewhat easy-to-remember choice.</p>\n<p>[2] Note that reconnection with v1 (if the v2 handshake fails) is implemented, but currently hardcoded to be disabled, in order to keep the full promise of a \u201cBIP324 proxy\u201d, i.e. <em>only</em> v2 connections are allowed. As v2 support is still not widespread on listening nodes, it\u2019s probably not a good idea to use this yet, as one could end up without any connection.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-03-13T17:32:11.483Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 4,
  "readers_count": 3,
  "score": 0.8,
  "yours": false,
  "topic_id": 678,
  "topic_slug": "bip324-proxy-easy-integration-of-v2-transport-protocol-for-light-clients-poc",
  "topic_title": "BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)",
  "topic_html_title": "BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)",
  "category_id": 8,
  "display_username": "Sebastian Falbesoner",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Hi,\n\nI've been working on a small tool for enabling peer-to-peer encryption for\nbitcoin clients that haven't implemented BIP324 yet.\n\nThe basic idea is to run a local process with the sole purpose of translating between p2p v1 and v2 protocols.\nThe proxy starts a server socket on local TCP port 1324 [1] and spins up a new thread for every\nincoming v1 connection. The remote peer address is determined from the incoming first\nVERSION message which conveniently contains this information in the `addr_recv` field\n(see https://en.bitcoin.it/wiki/Protocol_documentation#version).\nAfter performing the v2 handshake [2], the previously received VERSION message is sent to the remote node\nand subsequently, the proxy fowards incoming messages from either side to the opposite side,\ntranslating it to the corresponding p2p version format. \n\n![image|690x355, 75%](upload://w5cJ83Hb5sef1EN4HLxg8tNPoHG.png)\n\n\nTo take use of BIP324 proxy, all a light client has to do is to initiate all outbound\nP2P connections to localhost:1324 instead of the actual remote peer address on the TCP level.\nThis usually doesn't need more than a single-line patch if hardcoded, though ideally a client should\nprovide this as a command-line option (e.g. `-bip324proxy=`...).\n\nThe implementation is written in Python3 without any external dependencies. Most of the code,\nespecially the cryptographic primitives, are not by me, but taken from Bitcoin Core's\nBIP324 implementation in the functional test framework (Kudos to stratospher and sipa).\nNote that this project is still in proof-of-concept phase, terribly slow and vulnerable to side-channel attacks. It's not recommended to use it for anything but tests right now. To reflect that, only signet is supported (though it's trivial to enable other networks by changing the `NET_MAGIC` constant).\n\nThe plan is to do an efficient rewrite in Rust. As I'm not fluent in this language, this\ncould take a while. Here are the links to the Github repository and a presentation that I held recently in a Brink engineering call:\n\nhttps://github.com/theStack/bip324-proxy\nhttps://github.com/theStack/bip324-proxy/raw/master/doc/bip324-proxy_presentation.pdf\n\nThe slides contain a few examples of light clients that I've tested the BIP324 proxy with,\nshowing patches that are needed for redirection to the proxy.\n\nSuggestions and ideas are very welcome.\n\nCheers,\nSebastian\n\n[1] Note that the port 324 would have been a nice choice reflecting the BIP number, but TCP/IP\nports below 1024 need superuser privileges at least on Unix-like operating systems,\nhence I added a \"1\" (standing for \"v1\") in front. 1324 is not taken yet, according to some well-known\nport lists that I checked, so it shouldn't collide with other local services and I think\nit's still a nice, somewhat easy-to-remember choice.\n\n[2] Note that reconnection with v1 (if the v2 handshake fails) is implemented, but currently hardcoded to be disabled, in order to keep the full promise of a \"BIP324 proxy\", i.e. _only_ v2 connections are allowed. As v2 support is still not widespread on listening nodes, it's probably not a good idea to use this yet, as one could end up without any connection.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 346,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}