{
  "id": 1755,
  "name": "Matt Corallo",
  "username": "MattCorallo",
  "avatar_template": "/letter_avatar_proxy/v4/letter/m/e47c2d/{size}.png",
  "created_at": "2024-03-01T17:15:53.418Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"RubenSomsen\" data-post=\"5\" data-topic=\"630\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rubensomsen/48/188_2.png\" class=\"avatar\"> RubenSomsen:</div>\n<blockquote>\n<p>Similarly, an updated BIP21 should address the question of which address has priority when off-chain addresses have their own custom parameters. E.g. if we take <code>bitcoin:[address1]?option2=[address2]&amp;b12=[b12_address]</code> how do you signify that <code>b12_address</code> takes precedence? You could put it before <code>address2</code> but now you\u2019ve introduced order dependence at the URI level.</p>\n<p>Perhaps this is an argument for not making the distinction between on-chain and off-chain addresses, but we\u2019d still need to support the old parameters for backwards compatibility reasons so we\u2019d probably still need to come up with some kind of deterministic order of preference.</p>\n</blockquote>\n</aside>\n<p>I don\u2019t believe the recipient should decide the payment instructions they wish to use. The URI should simply list all the payment instructions the recipient is willing to accept and the sender (who nearly always shoulders the fees) should pick the one they prefer. I don\u2019t se why there should be any distinction between on-chain and off-chain payment instructions.</p>\n<blockquote>\n<p>This doesn\u2019t address the concern of needing to retroactively define keys for the known address types and still requiring new BIPs to define a key to be usable with BIP21.</p>\n</blockquote>\n<p>This is a fair point, however I think we can simply mark them as \u201cexisting ones\u201d and leave them in the URI body rather than in query parameters. There are already many implementations that assume they\u2019re there/place them there, and the ship has kinda sailed on changing that. You could make an argument that we should add an option to put taproot/bech32m instructions in the query parameters to let folks offer both Segwit/bech32 and taproot/bech32m instructions in the same URI, but I don\u2019t really see a super compelling use for that, and I think its just too late.</p>\n<blockquote>\n<p>But forgetting the new keys concern for a second, we could define a new generic <code>addr</code> key for BIP21 which is only usable with self-identifying address types (legacy, p2sh, segwit, taproot, any new address with an HRP), or only usable with addresses that have an HRP (bech32, bech32m) since the HRP is functionally equivalent to an extension key. This means existing address types just work and any new address type with an HRP would also just work. We would still need new payment protocols (<code>b12</code> for example) to define their own extension keys, but this seems strictly better than needing to define keys for <code>legacy</code>, <code>p2sh</code>, <code>bech32</code>, <code>bech32m/tr</code>, <code>bech32m/sp</code>, etc. Sure, the sending client would still need to check each <code>addr</code> option, but this seems trivial. If we defined <code>addr</code> as only allowing addresses with an HRP, its functionally the same since checking for an HRP is the same as checking for an extension key.</p>\n</blockquote>\n<p>I\u2019m not sure what the advantage of <code>addr</code> is over simply reusing the HRP - it just seems less descriptive for no reason. I went ahead and wrote up the concrete set of changes I think make sense at <a href=\"https://github.com/bitcoin/bips/pull/1555\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Update BIP 21 with information about more modern usage of it by TheBlueMatt \u00b7 Pull Request #1555 \u00b7 bitcoin/bips \u00b7 GitHub</a></p>\n<blockquote>\n<p>The more I think about it, this seems like a nice middle ground: update BIP21 to allow anything that already self identifies with an HRP to be included as a parameter. If it doesn\u2019t have an HRP or if the HRP doesn\u2019t indicate the protocol being used (payjoin, for example), it needs an extension key. This would allow URIs of the form:</p>\n</blockquote>\n<p>This doesn\u2019t allow, for example, offering both Silent Payment instructions as well as Lightning.</p>",
  "post_number": 8,
  "post_type": 1,
  "updated_at": "2024-03-01T17:16:26.045Z",
  "reply_count": 2,
  "reply_to_post_number": 5,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 11.8,
  "yours": false,
  "topic_id": 630,
  "topic_slug": "revisiting-bip21",
  "topic_title": "Revisiting BIP21",
  "topic_html_title": "Revisiting BIP21",
  "category_id": 8,
  "display_username": "Matt Corallo",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"RubenSomsen, post:5, topic:630, full:true\"]\nSimilarly, an updated BIP21 should address the question of which address has priority when off-chain addresses have their own custom parameters. E.g. if we take `bitcoin:[address1]?option2=[address2]&b12=[b12_address]` how do you signify that `b12_address` takes precedence? You could put it before `address2` but now you\u2019ve introduced order dependence at the URI level.\n\nPerhaps this is an argument for not making the distinction between on-chain and off-chain addresses, but we\u2019d still need to support the old parameters for backwards compatibility reasons so we\u2019d probably still need to come up with some kind of deterministic order of preference.\n[/quote]\n\nI don't believe the recipient should decide the payment instructions they wish to use. The URI should simply list all the payment instructions the recipient is willing to accept and the sender (who nearly always shoulders the fees) should pick the one they prefer. I don't se why there should be any distinction between on-chain and off-chain payment instructions.\n\n> This doesn\u2019t address the concern of needing to retroactively define keys for the known address types and still requiring new BIPs to define a key to be usable with BIP21.\n\nThis is a fair point, however I think we can simply mark them as \"existing ones\" and leave them in the URI body rather than in query parameters. There are already many implementations that assume they're there/place them there, and the ship has kinda sailed on changing that. You could make an argument that we should add an option to put taproot/bech32m instructions in the query parameters to let folks offer both Segwit/bech32 and taproot/bech32m instructions in the same URI, but I don't really see a super compelling use for that, and I think its just too late.\n\n> But forgetting the new keys concern for a second, we could define a new generic `addr` key for BIP21 which is only usable with self-identifying address types (legacy, p2sh, segwit, taproot, any new address with an HRP), or only usable with addresses that have an HRP (bech32, bech32m) since the HRP is functionally equivalent to an extension key. This means existing address types just work and any new address type with an HRP would also just work. We would still need new payment protocols (`b12` for example) to define their own extension keys, but this seems strictly better than needing to define keys for `legacy`, `p2sh`, `bech32`, `bech32m/tr`, `bech32m/sp`, etc. Sure, the sending client would still need to check each `addr` option, but this seems trivial. If we defined `addr` as only allowing addresses with an HRP, its functionally the same since checking for an HRP is the same as checking for an extension key.\n\nI'm not sure what the advantage of `addr` is over simply reusing the HRP - it just seems less descriptive for no reason. I went ahead and wrote up the concrete set of changes I think make sense at https://github.com/bitcoin/bips/pull/1555\n\n> The more I think about it, this seems like a nice middle ground: update BIP21 to allow anything that already self identifies with an HRP to be included as a parameter. If it doesn\u2019t have an HRP or if the HRP doesn\u2019t indicate the protocol being used (payjoin, for example), it needs an extension key. This would allow URIs of the form:\n\nThis doesn't allow, for example, offering both Silent Payment instructions as well as Lightning.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 50,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}