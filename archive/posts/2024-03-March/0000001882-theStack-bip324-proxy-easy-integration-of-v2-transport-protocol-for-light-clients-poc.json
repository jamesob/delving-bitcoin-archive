{
  "id": 1882,
  "name": "Sebastian Falbesoner",
  "username": "theStack",
  "avatar_template": "/user_avatar/delvingbitcoin.org/thestack/{size}/420_2.png",
  "created_at": "2024-03-14T02:20:39.181Z",
  "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"0xB10C\" data-post=\"2\" data-topic=\"678\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/0xb10c/48/15_2.png\" class=\"avatar\"> 0xB10C:</div>\n<blockquote>\n<aside class=\"quote no-group quote-modified\" data-username=\"theStack\" data-post=\"1\" data-topic=\"678\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/thestack/48/420_2.png\" class=\"avatar\"> theStack:</div>\n<blockquote>\n<p>The remote peer address is determined from the incoming first VERSION message which conveniently contains this information in the <code>addr_recv</code> field.</p>\n</blockquote>\n</aside>\n<p>There are P2P clients that don\u2019t put their address in <code>addr_recv</code>. They put, e.g. <code>127.0.0.1</code>, <code>0.0.0.0</code>, or whatever in there. Would this be a problem?</p>\n</blockquote>\n</aside>\n<p>Oh, that\u2019s good to know, I wasn\u2019t aware. If the VERSION\u2019s <code>addr_recv</code> field doesn\u2019t contain the real address of the remote node, that would indeed be a problem, as this is the only way for the proxy to know where to initiate the v2 connection to. If set to an arbitrary value, the connection would then very likely fail (or connect to a different peer than intended, which is probably even worse).</p>\n<p>Do you know of any concrete P2P clients that follow this practice (or is it more like connections with obscure user agents that can\u2019t be tied to a concrete implementation)? I might add a prerequisites section to README.md mentioning the reliance on <code>addr_recv</code> being set correctly, together with a list of clients that are already known to be incompatible with BIP324 proxy.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"0xB10C\" data-post=\"2\" data-topic=\"678\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/0xb10c/48/15_2.png\" class=\"avatar\"> 0xB10C:</div>\n<blockquote>\n<aside class=\"quote no-group\" data-username=\"theStack\" data-post=\"1\" data-topic=\"678\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/thestack/48/420_2.png\" class=\"avatar\"> theStack:</div>\n<blockquote>\n<p>The plan is to do an efficient rewrite in Rust.</p>\n</blockquote>\n</aside>\n<p>I haven\u2019t seen anyone working on a BIP324 implementation in Rust. Might fit well in the excellent <a href=\"https://github.com/rust-bitcoin/rust-bitcoin\" rel=\"noopener nofollow ugc\">rust-bitcoin </a> library or some other place in their ecosystem (e.g. rust-bitcoin/bip324).</p>\n</blockquote>\n</aside>\n<p>Yeah, I also thought that putting some parts of BIP324 to a library might be a good idea. Will for sure take a deeper look at rust-bitcoin at some point in the course of my upcoming Rust journey.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-03-14T02:20:39.181Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 2,
  "incoming_link_count": 1,
  "reads": 12,
  "readers_count": 11,
  "score": 27.4,
  "yours": false,
  "topic_id": 678,
  "topic_slug": "bip324-proxy-easy-integration-of-v2-transport-protocol-for-light-clients-poc",
  "topic_title": "BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)",
  "topic_html_title": "BIP324 Proxy: easy integration of v2 transport protocol for light clients (PoC)",
  "category_id": 8,
  "display_username": "Sebastian Falbesoner",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"0xB10C, post:2, topic:678\"]\n[quote=\"theStack, post:1, topic:678\"]\nThe remote peer address is determined from the incoming first VERSION message which conveniently contains this information in the `addr_recv` field.\n[/quote]\n\nThere are P2P clients that don\u2019t put their address in `addr_recv`. They put, e.g. `127.0.0.1`, `0.0.0.0`, or whatever in there. Would this be a problem?\n[/quote]\n\nOh, that's good to know, I wasn't aware. If the VERSION's `addr_recv` field doesn't contain the real address of the remote node, that would indeed be a problem, as this is the only way for the proxy to know where to initiate the v2 connection to. If set to an arbitrary value, the connection would then very likely fail (or connect to a different peer than intended, which is probably even worse).\n\nDo you know of any concrete P2P clients that follow this practice (or is it more like connections with obscure user agents that can't be tied to a concrete implementation)? I might add a prerequisites section to README.md mentioning the reliance on `addr_recv` being set correctly, together with a list of clients that are already known to be incompatible with BIP324 proxy.\n\n[quote=\"0xB10C, post:2, topic:678\"]\n[quote=\"theStack, post:1, topic:678\"]\nThe plan is to do an efficient rewrite in Rust.\n[/quote]\n\nI haven\u2019t seen anyone working on a BIP324 implementation in Rust. Might fit well in the excellent [rust-bitcoin ](https://github.com/rust-bitcoin/rust-bitcoin) library or some other place in their ecosystem (e.g. rust-bitcoin/bip324).\n[/quote]\n\nYeah, I also thought that putting some parts of BIP324 to a library might be a good idea. Will for sure take a deeper look at rust-bitcoin at some point in the course of my upcoming Rust journey.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 346,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}