{
  "id": 1790,
  "name": "josie",
  "username": "josibake",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josibake/{size}/83_2.png",
  "created_at": "2024-03-05T08:27:58.842Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"MattCorallo\" data-post=\"16\" data-topic=\"630\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/e47c2d/48.png\" class=\"avatar\"> MattCorallo:</div>\n<blockquote>\n<p>Mmm, fair point, though now we\u2019re saving two chars to avoid a K/V pair? I\u2019m not really sure its worth it, and if at some point we move on from bech32m-based addresses or something that has a less-visible HRP it avoids needing to parse the whole blob</p>\n</blockquote>\n</aside>\n<p>I\u2019m not sure where you\u2019re getting two chars from? My point was that bech32(m) addresses <em>already</em> are a key-value pair, i.e. <code>HRP (key) 1 (=) &lt;data&gt; (value)</code>, so requiring a key for them is redundant and creates more work for wallets since they now need two ways of recognizing the address: one for normal use, and one for identifying the BIP21 specific key. It\u2019s a nice side effect that we can reduce the QR code size, but that\u2019s not the main benefit.</p>\n<aside class=\"quote no-group\" data-username=\"MattCorallo\" data-post=\"16\" data-topic=\"630\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/e47c2d/48.png\" class=\"avatar\"> MattCorallo:</div>\n<blockquote>\n<p>Hmm? You still have to split on &amp;s to separate the various addresses, as well as parse K-V pairs for other parameters (like comments, amounts, lightning, etc), so you can\u2019t avoid any of that complexity no matter what.</p>\n</blockquote>\n</aside>\n<p>My point was about removing the ambiguity about what goes in the root vs what goes in the keys. Parsing the URI simplifies to \u201clook for your preferred HRP or KV protocol,\u201d with all the other parsing remaining the same.</p>\n<aside class=\"quote no-group\" data-username=\"MattCorallo\" data-post=\"16\" data-topic=\"630\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/m/e47c2d/48.png\" class=\"avatar\"> MattCorallo:</div>\n<blockquote>\n<p>I also want to highlight here that we <em>really</em> shouldn\u2019t be assuming that we\u2019ll always and forever use bech32(m) for any new address type, so we don\u2019t want to bake that in as a super deep assumption (though doing something special for bech32(m) is kinda maybe reasonable?).</p>\n</blockquote>\n</aside>\n<p>I\u2019m not. My assumption is that it is the best option for the foreseeable future (and already standard across bitcoin and lightning). It also allows us to address the current problem of existing address types that <em>are</em> bech32(m) encoded and <em>don\u2019t</em> have a BIP21 extension key in a simple and efficient manner. We also automatically support any new address type that is bech32(m) encoded. For everything else we can keep using key-value pairs.</p>",
  "post_number": 18,
  "post_type": 1,
  "updated_at": "2024-03-05T13:17:49.316Z",
  "reply_count": 0,
  "reply_to_post_number": 16,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 2.0,
  "yours": false,
  "topic_id": 630,
  "topic_slug": "revisiting-bip21",
  "topic_title": "Revisiting BIP21",
  "topic_html_title": "Revisiting BIP21",
  "category_id": 8,
  "display_username": "josie",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"MattCorallo, post:16, topic:630\"]\nMmm, fair point, though now we\u2019re saving two chars to avoid a K/V pair? I\u2019m not really sure its worth it, and if at some point we move on from bech32m-based addresses or something that has a less-visible HRP it avoids needing to parse the whole blob\n[/quote]\n\nI'm not sure where you're getting two chars from? My point was that bech32(m) addresses _already_ are a key-value pair, i.e. `HRP (key) 1 (=) <data> (value)`, so requiring a key for them is redundant and creates more work for wallets since they now need two ways of recognizing the address: one for normal use, and one for identifying the BIP21 specific key. It's a nice side effect that we can reduce the QR code size, but that's not the main benefit.\n\n\n[quote=\"MattCorallo, post:16, topic:630\"]\nHmm? You still have to split on &s to separate the various addresses, as well as parse K-V pairs for other parameters (like comments, amounts, lightning, etc), so you can\u2019t avoid any of that complexity no matter what.\n[/quote]\n\nMy point was about removing the ambiguity about what goes in the root vs what goes in the keys. Parsing the URI simplifies to \"look for your preferred HRP or KV protocol,\" with all the other parsing remaining the same.\n\n[quote=\"MattCorallo, post:16, topic:630\"]\nI also want to highlight here that we *really* shouldn\u2019t be assuming that we\u2019ll always and forever use bech32(m) for any new address type, so we don\u2019t want to bake that in as a super deep assumption (though doing something special for bech32(m) is kinda maybe reasonable?).\n[/quote]\n\nI'm not. My assumption is that it is the best option for the foreseeable future (and already standard across bitcoin and lightning). It also allows us to address the current problem of existing address types that *are* bech32(m) encoded and *don't* have a BIP21 extension key in a simple and efficient manner. We also automatically support any new address type that is bech32(m) encoded. For everything else we can keep using key-value pairs.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 92,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}