{
  "id": 2053,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-03-27T02:08:03.854Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"sdaftuar\" data-post=\"8\" data-topic=\"696\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/s/0ea827/48.png\" class=\"avatar\"> sdaftuar:</div>\n<blockquote>\n<p>Unless I\u2019m missing something, I think any scripts that could be deployed using just tools like this would in fact be reorg safe \u2013 you\u2019d need a way for a script to pull in data from the active headers chain itself in order to become invalid on a reorg.</p>\n</blockquote>\n</aside>\n<p>I have a concept for per-input timelocks and reorg safety that would trigger that, for what it\u2019s worth: namely \u201cany input can present an annex entry that commits to <code>height || bytes</code>; if there is not a prior block at height <code>height</code> whose hash ends with <code>bytes</code>, the tx is invalid\u201d. Presuming the script could access that annex entry, it could check that <code>bytes</code> is 32B long, then check for a 48B+32B value that hashes to it, then use the 32B value as the tx merkle root.</p>\n<p>The \u201cnormal\u201d use of that annex entry would be either as a per-input timelock (0-length bytes), so that presigned spends that use variable timelocks could be combined into a single tx (HTLC spends?), to prevent signet/testnet signatures being replayed on mainnet (commit to the last byte of block 1), to fork coins in a hardfork scenario (BCH\u2019s block 478559 ends in <code>ec</code>, BTC\u2019s ends in <code>48</code>), or (perhaps) to invalidate a tx should a reorg occur (you refund 0.5 BTC due to a mistaken payment, but the refund doesn\u2019t actually spend the payment txo, perhaps because that was already spent for some other reason, so you commit to the last 4 bytes of a subsequent block\u2019s hash effectively increasing the PoW required to replace it by 4B times). I say \u201cperhaps\u201d in the last case, because I could at least imagine this having an \u201cimplies a timelock of height+100 blocks\u201d restriction which would make that usecase not very useful.</p>",
  "post_number": 10,
  "post_type": 1,
  "posts_count": 15,
  "updated_at": "2024-03-27T02:08:03.854Z",
  "reply_count": 0,
  "reply_to_post_number": 8,
  "quote_count": 1,
  "incoming_link_count": 2,
  "reads": 29,
  "readers_count": 28,
  "score": 15.8,
  "yours": false,
  "topic_id": 696,
  "topic_slug": "improving-transaction-sponsor-blockspace-efficiency",
  "topic_title": "Improving transaction sponsor blockspace efficiency",
  "topic_html_title": "Improving transaction sponsor blockspace efficiency",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"sdaftuar, post:8, topic:696\"]\nUnless I\u2019m missing something, I think any scripts that could be deployed using just tools like this would in fact be reorg safe \u2013 you\u2019d need a way for a script to pull in data from the active headers chain itself in order to become invalid on a reorg.\n[/quote]\n\nI have a concept for per-input timelocks and reorg safety that would trigger that, for what it's worth: namely \"any input can present an annex entry that commits to `height || bytes`; if there is not a prior block at height `height` whose hash ends with `bytes`, the tx is invalid\". Presuming the script could access that annex entry, it could check that `bytes` is 32B long, then check for a 48B+32B value that hashes to it, then use the 32B value as the tx merkle root.\n\nThe \"normal\" use of that annex entry would be either as a per-input timelock (0-length bytes), so that presigned spends that use variable timelocks could be combined into a single tx (HTLC spends?), to prevent signet/testnet signatures being replayed on mainnet (commit to the last byte of block 1), to fork coins in a hardfork scenario (BCH's block 478559 ends in `ec`, BTC's ends in `48`), or (perhaps) to invalidate a tx should a reorg occur (you refund 0.5 BTC due to a mistaken payment, but the refund doesn't actually spend the payment txo, perhaps because that was already spent for some other reason, so you commit to the last 4 bytes of a subsequent block's hash effectively increasing the PoW required to replace it by 4B times). I say \"perhaps\" in the last case, because I could at least imagine this having an \"implies a timelock of height+100 blocks\" restriction which would make that usecase not very useful.",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I have a concept for per-input timelocks and reorg safety that would trigger that, for what it\u2019s worth: namely \u201cany input can present an annex entry that commits to height || bytes; if there is not a prior block at height height whose hash ends with bytes, the tx is invalid\u201d. Presuming the script c&hellip;",
  "truncated": true,
  "post_url": "/t/improving-transaction-sponsor-blockspace-efficiency/696/10",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}