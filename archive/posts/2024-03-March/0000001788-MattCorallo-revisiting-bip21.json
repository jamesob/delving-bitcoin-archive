{
  "id": 1788,
  "name": "Matt Corallo",
  "username": "MattCorallo",
  "avatar_template": "/letter_avatar_proxy/v4/letter/m/e47c2d/{size}.png",
  "created_at": "2024-03-05T02:46:25.711Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"josibake\" data-post=\"14\" data-topic=\"630\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/josibake/48/83_2.png\" class=\"avatar\"> josibake:</div>\n<blockquote>\n<p>You can also do this in a way that ensures you won\u2019t break existing implementations: just include an optional <code>=v</code> dummy value at the end. Still smaller than the kv approach and after a long enough period has passed where we are sure clients are using the new logic, receivers can drop the dummy values to save even more space in the QR code.</p>\n</blockquote>\n</aside>\n<p>Mmm, fair point, though now we\u2019re saving two chars to avoid a K/V pair? I\u2019m not really sure its worth it, and if at some point we move on from bech32m-based addresses or something that has a less-visible HRP it avoids needing to parse the whole blob. Not like any of this matters all that much, though, really, might as well flip a coin at this point.</p>\n<blockquote>\n<p>This is another reason to prefer the no-KV approach: there is no more ambiguity around putting a new address in the root vs putting it in a kv pair. Senders just need to split the URI on <code>?</code> and look for their preferred HRP/<code>extensionkey</code>. This is also nice for new clients supporting the new address type: all they need to do is be able to recognize and parse the new address type, so no extra test cases needed for checking the root for the new address vs checking the <code>kv</code> pairs for the new address.</p>\n</blockquote>\n<p>Hmm? You still have to split on &amp;s to separate the various addresses, as well as parse K-V pairs for other parameters (like comments, amounts, lightning, etc), so you can\u2019t avoid any of that complexity no matter what. I also want to highlight here that we <em>really</em> shouldn\u2019t be assuming that we\u2019ll always and forever use bech32(m) for any new address type, so we don\u2019t want to bake that in as a super deep assumption (though doing something special for bech32(m) is kinda maybe reasonable?).</p>\n<blockquote>\n<p>I\u2019m not sure if this is the right place to bring this up, but I have been hoping to see BIP21 expanded to allow split payments, for example:</p>\n</blockquote>\n<p>This seems like a pretty separate conversation, and also one that is going to break compatibility with all existing wallets :/. Not sure how to go about such a large-scale change.</p>",
  "post_number": 16,
  "post_type": 1,
  "posts_count": 20,
  "updated_at": "2024-03-05T02:47:02.536Z",
  "reply_count": 2,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 1,
  "reads": 38,
  "readers_count": 37,
  "score": 22.6,
  "yours": false,
  "topic_id": 630,
  "topic_slug": "revisiting-bip21",
  "topic_title": "Revisiting BIP21",
  "topic_html_title": "Revisiting BIP21",
  "category_id": 8,
  "display_username": "Matt Corallo",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"josibake, post:14, topic:630\"]\nYou can also do this in a way that ensures you won\u2019t break existing implementations: just include an optional `=v` dummy value at the end. Still smaller than the kv approach and after a long enough period has passed where we are sure clients are using the new logic, receivers can drop the dummy values to save even more space in the QR code.\n[/quote]\n\nMmm, fair point, though now we're saving two chars to avoid a K/V pair? I'm not really sure its worth it, and if at some point we move on from bech32m-based addresses or something that has a less-visible HRP it avoids needing to parse the whole blob. Not like any of this matters all that much, though, really, might as well flip a coin at this point.\n\n> This is another reason to prefer the no-KV approach: there is no more ambiguity around putting a new address in the root vs putting it in a kv pair. Senders just need to split the URI on `?` and look for their preferred HRP/`extensionkey`. This is also nice for new clients supporting the new address type: all they need to do is be able to recognize and parse the new address type, so no extra test cases needed for checking the root for the new address vs checking the `kv` pairs for the new address.\n\nHmm? You still have to split on &s to separate the various addresses, as well as parse K-V pairs for other parameters (like comments, amounts, lightning, etc), so you can't avoid any of that complexity no matter what. I also want to highlight here that we *really* shouldn't be assuming that we'll always and forever use bech32(m) for any new address type, so we don't want to bake that in as a super deep assumption (though doing something special for bech32(m) is kinda maybe reasonable?).\n\n> I\u2019m not sure if this is the right place to bring this up, but I have been hoping to see BIP21 expanded to allow split payments, for example:\n\nThis seems like a pretty separate conversation, and also one that is going to break compatibility with all existing wallets :/. Not sure how to go about such a large-scale change.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 50,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Mmm, fair point, though now we\u2019re saving two chars to avoid a K/V pair? I\u2019m not really sure its worth it, and if at some point we move on from bech32m-based addresses or something that has a less-visible HRP it avoids needing to parse the whole blob. Not like any of this matters all that much, thou&hellip;",
  "truncated": true,
  "post_url": "/t/revisiting-bip21/630/16",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}