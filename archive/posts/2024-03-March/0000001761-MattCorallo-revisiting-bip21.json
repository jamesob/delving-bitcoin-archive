{
  "id": 1761,
  "name": "Matt Corallo",
  "username": "MattCorallo",
  "avatar_template": "/letter_avatar_proxy/v4/letter/m/e47c2d/{size}.png",
  "created_at": "2024-03-01T18:23:01.069Z",
  "cooked": "<blockquote>\n<p>If they are requiring an <code>=</code> they aren\u2019t spec compliant? <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"> But agree, we don\u2019t want to break anything. This is pretty easy to verify, though, since we have a good list of implementations listed at <a href=\"https://bitcoinqr.dev/\" rel=\"noopener nofollow ugc\">https://bitcoinqr.dev/</a> which can be used to verify, and this is a somewhat trivial fix if they are requiring an <code>=</code>.</p>\n</blockquote>\n<p>Yea, I mean if someone wants to do the legwork I\u2019d be happy to see the no-KV version, just not sure its worth someone\u2019s time to do that :).</p>\n<blockquote>\n<p>This seems less risky then specifying <code>bitcoin:?key=val</code>, which seems <em>more</em> likely to break existing implementations since a spec compliant implementation <em>would</em> expect an address in the root of the URI.</p>\n</blockquote>\n<p>The point of this is that it is <em>only</em> done for new key types which are already, today, unsupported. So the options are bitcoin:newaddressformat or bitcoin:?k=newaddressformat. The same set of wallets is broken by both, at least as long as those adding support for newaddressformat support the empty-body version as a part of rolling out the upgrade. Luckily this is a bit easier to test - simply provide test cases for both in the BIP defining newaddressformat.</p>\n<p>Further, it seems marginally less likely to break for us to go from bitcoin:oldaddressformat?k=newaddressformat to bitcoin:?k=newaddressformat rather than bitcoin:newaddressformat, not to mention its just nice to only have one format/place to look for newaddressformat. Though, the same \u201cpeople should test this as a part of the rollout\u201d argument applies, of course.</p>",
  "post_number": 13,
  "post_type": 1,
  "updated_at": "2024-03-01T18:35:38.569Z",
  "reply_count": 0,
  "reply_to_post_number": 12,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 4,
  "readers_count": 3,
  "score": 0.8,
  "yours": false,
  "topic_id": 630,
  "topic_slug": "revisiting-bip21",
  "topic_title": "Revisiting BIP21",
  "topic_html_title": "Revisiting BIP21",
  "category_id": 8,
  "display_username": "Matt Corallo",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "josibake",
    "name": "josie",
    "avatar_template": "/user_avatar/delvingbitcoin.org/josibake/{size}/83_2.png"
  },
  "bookmarked": false,
  "raw": "> If they are requiring an `=` they aren\u2019t spec compliant? :slight_smile: But agree, we don\u2019t want to break anything. This is pretty easy to verify, though, since we have a good list of implementations listed at https://bitcoinqr.dev/ which can be used to verify, and this is a somewhat trivial fix if they are requiring an `=`.\n\nYea, I mean if someone wants to do the legwork I'd be happy to see the no-KV version, just not sure its worth someone's time to do that :).\n\n> This seems less risky then specifying `bitcoin:?key=val`, which seems *more* likely to break existing implementations since a spec compliant implementation *would* expect an address in the root of the URI.\n\nThe point of this is that it is *only* done for new key types which are already, today, unsupported. So the options are bitcoin:newaddressformat or bitcoin:?k=newaddressformat. The same set of wallets is broken by both, at least as long as those adding support for newaddressformat support the empty-body version as a part of rolling out the upgrade. Luckily this is a bit easier to test - simply provide test cases for both in the BIP defining newaddressformat.\n\nFurther, it seems marginally less likely to break for us to go from bitcoin:oldaddressformat?k=newaddressformat to bitcoin:?k=newaddressformat rather than bitcoin:newaddressformat, not to mention its just nice to only have one format/place to look for newaddressformat. Though, the same \"people should test this as a part of the rollout\" argument applies, of course.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 50,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}