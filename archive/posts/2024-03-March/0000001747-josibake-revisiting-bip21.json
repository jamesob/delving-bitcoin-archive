{
  "id": 1747,
  "name": "josie",
  "username": "josibake",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josibake/{size}/83_2.png",
  "created_at": "2024-03-01T13:48:06.851Z",
  "cooked": "<p>Recently had a discussion on <a href=\"https://github.com/bitcoin/bips/pull/1458#issuecomment-1954819980\">BIP352</a> regarding specifying a BIP21 extension for silent payment addresses and I felt it would be better to open this as a broader topic since its not BIP352 specific and this also came up in the newly proposed <a href=\"https://github.com/bitcoin/bips/pull/1551#discussion_r1485390796\">human readable payment instructions</a> BIP proposal.</p>\n<h2><a name=\"bip21-the-spec-1\" class=\"anchor\" href=\"#bip21-the-spec-1\"></a>BIP21 (the spec)</h2>\n<p>Here is a quick summary of the relevant (for this discussion) parts of <a href=\"https://github.com/bitcoin/bips/blob/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed/bip-0021.mediawiki\">BIP21</a>:</p>\n<ul>\n<li>URIs must have a base58 encoded (legacy) address at the root</li>\n<li>New address types are specified via extension parameters, e.g. <code>?p2sh=</code>, <code>?bech32=</code>, <code>?bech32m=</code></li>\n<li>New payment protocols are specified via extension parameters, e.g. <code>?pj=</code>, <code>?lightning=</code></li>\n<li>URIs should not represent an exchange of personal information, but a one-time payment</li>\n<li>(not mentioned in BIP21, but worth mentioning for this discussion) For privacy conscious users, URIs should only be used over a secure channel i.e. not posted in public, even when only used once</li>\n</ul>\n<p>In theory, this provides a fully backwards compatible URI scheme. You can imagine a BIP21 URI of the form <code>bitcoin:1..?p2sh=3..?bech32=bc1q..?bech32m=bc1p..?lightning=&lt;bolt11&gt;</code> which almost guarantees that any sender who supports BIP21 would be able to successfully make a payment.</p>\n<h2><a name=\"bip21-in-the-wild-2\" class=\"anchor\" href=\"#bip21-in-the-wild-2\"></a>BIP21 (in the wild)</h2>\n<p>In practice, however, BIP21 is implemented and used in a non-spec compliant way, namely:</p>\n<ul>\n<li>URIs are used as static personal identifiers, leading to address reuse and loss of privacy</li>\n<li>URIs use <em>any</em> on-chain address for the root, e.g. <code>bitcoin:bc1pxxx</code></li>\n<li>URIs are used with the root omitted, e.g. <code>bitcoin:?b12=&lt;&gt;</code></li>\n<li>Extensions for new address types and new payment protocols were never defined</li>\n</ul>\n<p>This means if I were to use a URI of the form <code>bitcoin:bc1p..</code>, the payment will fail if the sender doesn\u2019t understand taproot and there is no way for me to specify a URI of the form <code>bitcoin:1..?bech32m=bc1p..</code>.</p>\n<p>As such, its not possible to use BIP21 in a fully backwards compatible way. Furthermore, there have been a number of improvements in address formats since BIP21 was written, namely:</p>\n<ul>\n<li><code>bech32m</code> encoded addresses have a self-identifying HRP, a versioning scheme, and are forwards compatible</li>\n<li>New protocols for static identifiers are being built:\n<ul>\n<li>BIP352: an on-chain address<sup class=\"footnote-ref\"><a href=\"#footnote-1747-1\" id=\"footnote-ref-1747-1\">[1]</a></sup> that is safe to post in public without loss of privacy and without on-chain address reuse</li>\n<li>BOLT12: a static invoice that can be used non-interactively</li>\n</ul>\n</li>\n</ul>\n<p>HRPs are functionally the same as an extension key and new proposals for non-interactive, private payments allow BIP21 URIs to safely be used statically as a personal identifier.</p>\n<h2><a name=\"a-proposed-solution-3\" class=\"anchor\" href=\"#a-proposed-solution-3\"></a>A proposed solution</h2>\n<p>We could define extensions for existing address types so that URIs of the form <code>bitcoin:1..?bech32m=bc1p..</code> are possible. But this seems less ideal now given that newer address types already have an HRP and its not clear to me where this should be documented. This also means wallets would need to update with support for each new extension keys (despite already supporting the address types). Each new address format / payment protocol would also need to define an extension key, but learning from history indicates this approach does not work. I think it\u2019s more likely we would find ourselves in the exact same position in a few years.</p>\n<p><a class=\"mention\" href=\"/u/rubensomsen\">@RubenSomsen</a> has a proposal<sup class=\"footnote-ref\"><a href=\"#footnote-1747-2\" id=\"footnote-ref-1747-2\">[2]</a></sup> which I think is more aligned with how BIP21 is used today and more future proof:</p>\n<blockquote>\n<p>While I agree that adding a new field for every possible address type is one way to solve this, the much more straightforward way to go about this is to extend BIP21 to allow for more than one address field. E.g. <code>bitcoin:[address1]?option2=[address2]&amp;option3=[address3]</code> etc.</p>\n<p>The advantage of this approach is that there\u2019s less of a chance of implementation splintering (e.g. some implementations may only recognize <code>bitcoin:[SP address]</code> and others <code>sp=[SP address]</code> - the exact opposite of what a standard like BIP21 is meant to prevent) and newly introduced address types won\u2019t require a new field, so BIPs like this one won\u2019t need to be concerned with how they\u2019re going to fit into BIP21.</p>\n</blockquote>\n<p>With this proposal, you specify the address type you would like to receive to at the root of the URI, and provide a number of fall back options (if desired) for backwards compatibility, e.g. <code>bitcoin:sp1qxxx?option1=bc1pxxx&amp;option2=bc1qxxx&amp;option3=175xxx?</code>. This doesn\u2019t require existing BIPs to change anything and would work with any new address format out of the box, making BIP21 forward compatible with any address format proposals.</p>\n<p>I think there are advantages to keeping this new \u201cfallback option\u201d scoped to only on-chain addresses, but you could extend this to any self-describing payment instructions, where the root of the URI indicates the receivers preference, and fall backs are specified as <code>options</code>, e.g. <code>bitcoin:&lt;bolt12&gt;?option1=sp1q..?option2=bc1p..?option3=bc1q..</code>. The benefit here is BIP21 would be forward compatible without requiring each new protocol to specify an extension. Not specifying an extension could happen for a number of reasons:</p>\n<ul>\n<li>They forget/are unaware of BIP21</li>\n<li>They don\u2019t care/feel its out of scope for their BIP</li>\n<li>They don\u2019t agree with BIP21 usage for their protocol</li>\n</ul>\n<p>Allowing BIP21 users to use specify payment protocols without putting the burden on each individual protocol to define a BIP21 extension alleviates the concern of having history repeat itself with new extension keys not being defined.</p>\n<p>Curious to hear what others think and happy to help collaborate on a BIP21 update, if folks agree that\u2019s the best way forward.</p>\n<hr class=\"footnotes-sep\">\n\n<ol class=\"footnotes-list\">\n<li id=\"footnote-1747-1\" class=\"footnote-item\"><p>While technically not an encoding of a scriptPubKey, a silent payment address is a <code>bech32m</code> encoded ECDH-based address generating a taproot scriptPubKey(s) for the receiver. Conceptually, this is different than something like a <code>?pj=</code> extension or a <code>?lightning=</code> extension which represent different bitcoin payment protocols. <a href=\"#footnote-ref-1747-1\" class=\"footnote-backref\">\u21a9\ufe0e</a></p>\n</li>\n<li id=\"footnote-1747-2\" class=\"footnote-item\"><p>Source: <a href=\"https://github.com/bitcoin/bips/pull/1458#issuecomment-1969380724\" class=\"inline-onebox\">BIP 352: Silent Payments by josibake \u00b7 Pull Request #1458 \u00b7 bitcoin/bips \u00b7 GitHub</a> <a href=\"#footnote-ref-1747-2\" class=\"footnote-backref\">\u21a9\ufe0e</a></p>\n</li>\n</ol>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-03-01T14:51:14.800Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 93,
  "reads": 24,
  "readers_count": 23,
  "score": 469.8,
  "yours": false,
  "topic_id": 630,
  "topic_slug": "revisiting-bip21",
  "topic_title": "Revisiting BIP21",
  "topic_html_title": "Revisiting BIP21",
  "category_id": 8,
  "display_username": "josie",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Recently had a discussion on [BIP352](https://github.com/bitcoin/bips/pull/1458#issuecomment-1954819980) regarding specifying a BIP21 extension for silent payment addresses and I felt it would be better to open this as a broader topic since its not BIP352 specific and this also came up in the newly proposed [human readable payment instructions](https://github.com/bitcoin/bips/pull/1551#discussion_r1485390796) BIP proposal. \n\n## BIP21 (the spec)\nHere is a quick summary of the relevant (for this discussion) parts of [BIP21](https://github.com/bitcoin/bips/blob/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed/bip-0021.mediawiki):\n\n* URIs must have a base58 encoded (legacy) address at the root\n* New address types are specified via extension parameters, e.g. `?p2sh=`, `?bech32=`, `?bech32m=`\n* New payment protocols are specified via extension parameters, e.g. `?pj=`, `?lightning=`\n* URIs should not represent an exchange of personal information, but a one-time payment\n* (not mentioned in BIP21, but worth mentioning for this discussion) For privacy conscious users, URIs should only be used over a secure channel i.e. not posted in public, even when only used once\n\nIn theory, this provides a fully backwards compatible URI scheme. You can imagine a BIP21 URI of the form `bitcoin:1..?p2sh=3..?bech32=bc1q..?bech32m=bc1p..?lightning=<bolt11>` which almost guarantees that any sender who supports BIP21 would be able to successfully make a payment. \n\n## BIP21 (in the wild)\nIn practice, however, BIP21 is implemented and used in a non-spec compliant way, namely:\n\n* URIs are used as static personal identifiers, leading to address reuse and loss of privacy\n* URIs use *any* on-chain address for the root, e.g. `bitcoin:bc1pxxx`\n* URIs are used with the root omitted, e.g. `bitcoin:?b12=<>`\n* Extensions for new address types and new payment protocols were never defined\n\nThis means if I were to use a URI of the form `bitcoin:bc1p..`, the payment will fail if the sender doesn't understand taproot and there is no way for me to specify a URI of the form `bitcoin:1..?bech32m=bc1p..`. \n\nAs such, its not possible to use BIP21 in a fully backwards compatible way. Furthermore, there have been a number of improvements in address formats since BIP21 was written, namely:\n\n* `bech32m` encoded addresses have a self-identifying HRP, a versioning scheme, and are forwards compatible\n* New protocols for static identifiers are being built:\n  * BIP352: an on-chain address^[While technically not an encoding of a scriptPubKey, a silent payment address is a `bech32m` encoded ECDH-based address generating a taproot scriptPubKey(s) for the receiver. Conceptually, this is different than something like a `?pj=` extension or a `?lightning=` extension which represent different bitcoin payment protocols.] that is safe to post in public without loss of privacy and without on-chain address reuse\n  * BOLT12: a static invoice that can be used non-interactively\n\nHRPs are functionally the same as an extension key and new proposals for non-interactive, private payments allow BIP21 URIs to safely be used statically as a personal identifier.\n\n## A proposed solution\n\nWe could define extensions for existing address types so that URIs of the form `bitcoin:1..?bech32m=bc1p..` are possible. But this seems less ideal now given that newer address types already have an HRP and its not clear to me where this should be documented. This also means wallets would need to update with support for each new extension keys (despite already supporting the address types). Each new address format / payment protocol would also need to define an extension key, but learning from history indicates this approach does not work. I think it's more likely we would find ourselves in the exact same position in a few years.\n\n@RubenSomsen has a proposal^[Source: https://github.com/bitcoin/bips/pull/1458#issuecomment-1969380724] which I think is more aligned with how BIP21 is used today and more future proof:\n\n> While I agree that adding a new field for every possible address type is one way to solve this, the much more straightforward way to go about this is to extend BIP21 to allow for more than one address field. E.g. `bitcoin:[address1]?option2=[address2]&option3=[address3]` etc.\n>\n> The advantage of this approach is that there's less of a chance of implementation splintering (e.g. some implementations may only recognize `bitcoin:[SP address]` and others `sp=[SP address]` - the exact opposite of what a standard like BIP21 is meant to prevent) and newly introduced address types won't require a new field, so BIPs like this one won't need to be concerned with how they're going to fit into BIP21.\n\nWith this proposal, you specify the address type you would like to receive to at the root of the URI, and provide a number of fall back options (if desired) for backwards compatibility, e.g. `bitcoin:sp1qxxx?option1=bc1pxxx&option2=bc1qxxx&option3=175xxx?`. This doesn't require existing BIPs to change anything and would work with any new address format out of the box, making BIP21 forward compatible with any address format proposals.\n\nI think there are advantages to keeping this new \"fallback option\" scoped to only on-chain addresses, but you could extend this to any self-describing payment instructions, where the root of the URI indicates the receivers preference, and fall backs are specified as `options`, e.g. `bitcoin:<bolt12>?option1=sp1q..?option2=bc1p..?option3=bc1q..`. The benefit here is BIP21 would be forward compatible without requiring each new protocol to specify an extension. Not specifying an extension could happen for a number of reasons:\n\n* They forget/are unaware of BIP21\n* They don't care/feel its out of scope for their BIP\n* They don't agree with BIP21 usage for their protocol\n\nAllowing BIP21 users to use specify payment protocols without putting the burden on each individual protocol to define a BIP21 extension alleviates the concern of having history repeat itself with new extension keys not being defined.\n\nCurious to hear what others think and happy to help collaborate on a BIP21 update, if folks agree that's the best way forward.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 92,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}