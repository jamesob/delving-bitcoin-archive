{
  "id": 2101,
  "name": "jungly",
  "username": "jungly",
  "avatar_template": "/user_avatar/delvingbitcoin.org/jungly/{size}/289_2.png",
  "created_at": "2024-03-30T21:52:17.324Z",
  "cooked": "<p>Thanks for the excellent suggestions.</p>\n<p>The address suggestion is neat. It can help break away from the <code>sig:</code> prefixed construction. I\u2019ll have to see how we can translate that into plain Script usage, e.g. in situations where we do things like <code>script_sig: 'sig:@alice \"\"'</code>, etc.</p>\n<p>Writing features.py with this DSL will be a neat way to validate the expressiveness of the DSL, so I\u2019ll try to do that. I do want to say that the goals of features.py and this DSL are slightly different. The goal here is to write contracts and system state transitions at a high level to facilitate clearer communication between developers and to quickly experiment with ideas.</p>\n<p><code>reorg_chain</code> is interesting idea too. I\u2019ll definitely incorporate it.  I have taken a slightly different approach until now and that is to <a href=\"https://opdup.com/bitcoin-dsl/overview/contract_branch_executions.html\" rel=\"noopener nofollow ugc\">reset the system state to run a different set of transitions</a>, but I can see some situations and developers will benefit from a <code>reorg_chain</code> approach.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-03-30T21:52:17.324Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 1.6,
  "yours": false,
  "topic_id": 748,
  "topic_slug": "dsl-for-experimenting-with-contracts",
  "topic_title": "DSL for experimenting with contracts",
  "topic_html_title": "DSL for experimenting with contracts",
  "category_id": 8,
  "display_username": "jungly",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thanks for the excellent suggestions.\n\nThe address suggestion is neat. It can help break away from the `sig:` prefixed construction. I'll have to see how we can translate that into plain Script usage, e.g. in situations where we do things like `script_sig: 'sig:@alice \"\"'`, etc.\n\nWriting features.py with this DSL will be a neat way to validate the expressiveness of the DSL, so I'll try to do that. I do want to say that the goals of features.py and this DSL are slightly different. The goal here is to write contracts and system state transitions at a high level to facilitate clearer communication between developers and to quickly experiment with ideas.\n\n`reorg_chain` is interesting idea too. I'll definitely incorporate it.  I have taken a slightly different approach until now and that is to [reset the system state to run a different set of transitions](https://opdup.com/bitcoin-dsl/overview/contract_branch_executions.html), but I can see some situations and developers will benefit from a `reorg_chain` approach.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 102,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}