{
  "id": 1943,
  "name": "David A. Harding",
  "username": "harding",
  "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/6_2.png",
  "created_at": "2024-03-19T21:13:07.372Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"reardencode\" data-post=\"2\" data-topic=\"696\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/reardencode/48/27_2.png\" class=\"avatar\"> reardencode:</div>\n<blockquote>\n<p>As I <a href=\"https://twitter.com/reardencode/status/1770094336434430157\">posted</a> on X, the biggest complication with sponsors is that the sponsor transaction can become invalid depending on innocent block reorderings, which would require it to be treated as a coinbase output and mature before it can be used in a normal transaction.</p>\n</blockquote>\n</aside>\n<p>Right, that was a <a href=\"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018195.html\">concern</a> of <a class=\"mention\" href=\"/u/sdaftuar\">@sdaftuar</a>\u2019s in the original thread.  I agree that reorg safety has been a useful property these past 15 years, but I wonder if it will continue to be as useful in the future:</p>\n<ul>\n<li>Several of the soft fork proposals people are currently advocating for will allow scripts to verify SPV proofs, at which point it\u2019ll be possible for scripts to implement the functionality of transaction sponsorship, <code>OP_EXPIRE</code>, and several other features that are not reorg safe.</li>\n<li>No one can safely rely upon an input in a contract protocol unless it\u2019s been highly confirmed or comes from a chain of transactions they controlled that is rooted entirely in one or more highly confirmed transactions.  Reorg safety is a convenience feature; contract protocols must not rely on it for security.</li>\n<li>Frequent use of RBF fee bumping on the network can also lead to completely accidental invalidation during reorgs.</li>\n</ul>\n<p>If we expect the near future to include more expressive scripting, more use of contract protocols, and more use of RBF, then I don\u2019t think we need to be as careful about protecting transaction chains against  reorgs as we have been in the past.</p>\n<aside class=\"quote no-group\" data-username=\"reardencode\" data-post=\"2\" data-topic=\"696\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/reardencode/48/27_2.png\" class=\"avatar\"> reardencode:</div>\n<blockquote>\n<p>That said, sponsors (or other transactions that are provably re-bindable to either a current txo or one of its ancestors) could be allowed to spend before maturation</p>\n</blockquote>\n</aside>\n<p>I think that works fine with the scheme described in my OP.  If we set a coinbase-like maturity limit on the output of any sponsor transaction, then any one of those outputs could be spent as the input to another sponsor transaction prior to maturity.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-03-19T21:13:07.372Z",
  "reply_count": 1,
  "reply_to_post_number": 2,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 18,
  "readers_count": 17,
  "score": 8.6,
  "yours": false,
  "topic_id": 696,
  "topic_slug": "improving-transaction-sponsor-blockspace-efficiency",
  "topic_title": "Improving transaction sponsor blockspace efficiency",
  "topic_html_title": "Improving transaction sponsor blockspace efficiency",
  "category_id": 7,
  "display_username": "David A. Harding",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"reardencode, post:2, topic:696\"]\nAs I [posted](https://twitter.com/reardencode/status/1770094336434430157) on X, the biggest complication with sponsors is that the sponsor transaction can become invalid depending on innocent block reorderings, which would require it to be treated as a coinbase output and mature before it can be used in a normal transaction.\n[/quote]\n\nRight, that was a [concern](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-September/018195.html) of @sdaftuar's in the original thread.  I agree that reorg safety has been a useful property these past 15 years, but I wonder if it will continue to be as useful in the future:\n\n- Several of the soft fork proposals people are currently advocating for will allow scripts to verify SPV proofs, at which point it'll be possible for scripts to implement the functionality of transaction sponsorship, `OP_EXPIRE`, and several other features that are not reorg safe.\n- No one can safely rely upon an input in a contract protocol unless it's been highly confirmed or comes from a chain of transactions they controlled that is rooted entirely in one or more highly confirmed transactions.  Reorg safety is a convenience feature; contract protocols must not rely on it for security.\n- Frequent use of RBF fee bumping on the network can also lead to completely accidental invalidation during reorgs.\n\nIf we expect the near future to include more expressive scripting, more use of contract protocols, and more use of RBF, then I don't think we need to be as careful about protecting transaction chains against  reorgs as we have been in the past.\n\n[quote=\"reardencode, post:2, topic:696\"]\nThat said, sponsors (or other transactions that are provably re-bindable to either a current txo or one of its ancestors) could be allowed to spend before maturation\n[/quote]\n\nI think that works fine with the scheme described in my OP.  If we set a coinbase-like maturity limit on the output of any sponsor transaction, then any one of those outputs could be spent as the input to another sponsor transaction prior to maturity.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 6,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}