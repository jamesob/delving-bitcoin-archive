{
  "id": 2102,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2024-03-30T23:35:31.225Z",
  "cooked": "<p>The bespoke protocol for channel opening is less about MuSig2 and more about the fact that Alice needs to show that ALL inputs are swap-in-potentiam and that the output is to a specific 2-of-2, specifically the channel outpoint.  Rather than define a vendor-specific extension to PSBT to show that all inputs are actively swap-in-potentiam, which would require external code anyway to support beyond PSBT library, just put a bespoke protoccol that is focused on this specific need.  The risk here is that the specification might underspecify the PSBT-based extension, and implementations may neglect to perform specific checks on the PSBT that would allow an attacker to insert additional fields that inadvertently remove the security of Bob \u2014 keep it simple, sir.</p>\n<p>For the onchain spend protocol, PSBT use is fairly standard and Bob is doing nothing more complicated than what a hardware wallet does, so PSBT here is safer.  It is the trust-minimized 0-conf Lightning funding that is novel and thus potentially risky when combined with new PSBT fields.  <strong>More specifically</strong>: for the onchain spend, Bob has no stake in the funds, and thus has no risk here, and Alice is using Bob as nothing more than an extra hardware wallet that it contacts remotely over the Internet, which while risky for Alice, is a risk Alice is already taking with a hot wallet model implied by Lightning anyway.</p>\n<p>The reason Bob can accept 0-conf offchain operation is precisely that <em><strong>all inputs are from swap-in-potentiam</strong></em>.  If the Source Of Funds is not spending  swap-in-potentiam funds with the same Bob, then Bob cannot accept 0-conf channel funding, but must wait for confirmation.</p>\n<p>In particular, the advantage of swap-in-potentiam is precisely that Alice can go offline.  In this model, Alice is very rarely online (e.g. mobile wallet).  An edge case that can only trigger when Alice is also online is useful, but not very valuable compared to ensuring correct behavior in the common case.</p>",
  "post_number": 5,
  "post_type": 1,
  "updated_at": "2024-03-30T23:42:18.063Z",
  "reply_count": 0,
  "reply_to_post_number": 4,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 0.8,
  "yours": false,
  "topic_id": 749,
  "topic_slug": "payjoin-in-potentiam-externally-fund-an-lsp-channel-open-with-one-transaction",
  "topic_title": "Payjoin-in-Potentiam: Externally fund an LSP channel open with one transaction",
  "topic_html_title": "Payjoin-in-Potentiam: Externally fund an LSP channel open with one transaction",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "bitgould",
    "name": "Dan Gould",
    "avatar_template": "/letter_avatar_proxy/v4/letter/b/ac91a4/{size}.png"
  },
  "bookmarked": false,
  "raw": "The bespoke protocol for channel opening is less about MuSig2 and more about the fact that Alice needs to show that ALL inputs are swap-in-potentiam and that the output is to a specific 2-of-2, specifically the channel outpoint.  Rather than define a vendor-specific extension to PSBT to show that all inputs are actively swap-in-potentiam, which would require external code anyway to support beyond PSBT library, just put a bespoke protoccol that is focused on this specific need.  The risk here is that the specification might underspecify the PSBT-based extension, and implementations may neglect to perform specific checks on the PSBT that would allow an attacker to insert additional fields that inadvertently remove the security of Bob --- keep it simple, sir.\n\nFor the onchain spend protocol, PSBT use is fairly standard and Bob is doing nothing more complicated than what a hardware wallet does, so PSBT here is safer.  It is the trust-minimized 0-conf Lightning funding that is novel and thus potentially risky when combined with new PSBT fields.  **More specifically**: for the onchain spend, Bob has no stake in the funds, and thus has no risk here, and Alice is using Bob as nothing more than an extra hardware wallet that it contacts remotely over the Internet, which while risky for Alice, is a risk Alice is already taking with a hot wallet model implied by Lightning anyway.\n\nThe reason Bob can accept 0-conf offchain operation is precisely that ***all inputs are from swap-in-potentiam***.  If the Source Of Funds is not spending  swap-in-potentiam funds with the same Bob, then Bob cannot accept 0-conf channel funding, but must wait for confirmation.\n\nIn particular, the advantage of swap-in-potentiam is precisely that Alice can go offline.  In this model, Alice is very rarely online (e.g. mobile wallet).  An edge case that can only trigger when Alice is also online is useful, but not very valuable compared to ensuring correct behavior in the common case.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}