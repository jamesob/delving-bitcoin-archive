{
  "id": 356,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2023-11-09T00:21:17.951Z",
  "cooked": "<blockquote>\n<p>The sensible thing to do would be for you to reject the HTLC when it reached you, refusing to forward it to D, because your channel isn\u2019t suitable for zeroconf use, because you don\u2019t control all the inputs.</p>\n</blockquote>\n<p>\u2026which basically means it is not possible to batch a splice with a JIT channel open, as a JIT channel open basically opens the channel in response to an HTLC to be forwarded.</p>\n<blockquote>\n<p>I think if you have a splice transaction that spends utxo X, but utxo X was already spent by transaction T that\u2019s had 6 confirmations, dropping the splice transaction should be fine?</p>\n</blockquote>\n<p>Yes, but implementations need to be aware that they have to implement this, and you need some kind of coordination with the peer similar to how we do <code>channel_ready</code> except this time <code>splice_cancelled</code> or <code>splice_ready</code>.  In particular, it means implementations have to actively monitor the blockchain for this use-case, not use timeouts: a splice transaction can remain valid but unconfirmed for several thousand blocks due to mempool congestion and then it confirms, at the same time the peer could double-spend the other splice-in input.</p>",
  "post_number": 7,
  "post_type": 1,
  "updated_at": "2023-11-09T00:21:17.951Z",
  "reply_count": 0,
  "reply_to_post_number": 5,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 1,
  "readers_count": 0,
  "score": 0.2,
  "yours": false,
  "topic_id": 170,
  "topic_slug": "batched-splicing-considered-risky",
  "topic_title": "Batched Splicing Considered Risky",
  "topic_html_title": "Batched Splicing Considered Risky",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "ajtowns",
    "name": "Anthony Towns",
    "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/3_2.png"
  },
  "bookmarked": false,
  "raw": "> The sensible thing to do would be for you to reject the HTLC when it reached you, refusing to forward it to D, because your channel isn\u2019t suitable for zeroconf use, because you don\u2019t control all the inputs.\n\n...which basically means it is not possible to batch a splice with a JIT channel open, as a JIT channel open basically opens the channel in response to an HTLC to be forwarded.\n\n>I think if you have a splice transaction that spends utxo X, but utxo X was already spent by transaction T that\u2019s had 6 confirmations, dropping the splice transaction should be fine?\n\nYes, but implementations need to be aware that they have to implement this, and you need some kind of coordination with the peer similar to how we do `channel_ready` except this time `splice_cancelled` or `splice_ready`.  In particular, it means implementations have to actively monitor the blockchain for this use-case, not use timeouts: a splice transaction can remain valid but unconfirmed for several thousand blocks due to mempool congestion and then it confirms, at the same time the peer could double-spend the other splice-in input.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}