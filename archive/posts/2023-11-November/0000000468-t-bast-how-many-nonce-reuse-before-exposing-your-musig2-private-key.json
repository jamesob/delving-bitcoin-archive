{
  "id": 468,
  "name": "Bastien Teinturier",
  "username": "t-bast",
  "avatar_template": "/user_avatar/delvingbitcoin.org/t-bast/{size}/98_2.png",
  "created_at": "2023-11-23T15:02:56.514Z",
  "cooked": "<p>The <a href=\"https://github.com/bitcoin/bips/blob/e918b50731397872ad2922a1b08a5a4cd1d6d546/bip-0327.mediawiki\">Musig2 BIP</a> says that signing two distinct messages with the same <code>secnonce</code> exposes your private key. While I know we must absolutely not reuse <code>secnonces</code>, I wanted to check how the private key extraction worked and the difference with a standard schnorr sig.</p>\n<p>And I couldn\u2019t figure it out! It seems to me that an attacker would need <strong>three</strong> partial sigs for distinct messages using the same <code>secnonce</code>, <strong>two</strong> doesn\u2019t seem to be enough?</p>\n<p>Here is a simplified write-up of the equations, with a slightly different naming than the BIP to focus only on the important parts:</p>\n<pre><code class=\"lang-auto\">Alice has public key Pa = ka*G\nBob has public key Pb = kb*G\nQ is the aggregated public key\nR is the public aggregated nonce\n\nb = H(\"noncecoef\" || R || Q || m)\ne = H(\"challenge\" || R || Q || m)\n\n=&gt; implies that an attacker cannot choose (rb1', rb2') to influence b' thanks to H's preimage resistance\n\nFirst signature for message m1:\n\n  sa1 = ra1 + b1*ra2 + e1*a*ka\n  sb1 = rb1 + b1*rb2 + e1*a*kb\n\nSecond signature for message m2 where Alice reuses ra1 and ra2:\n\n  sa2 = ra1 + b2*ra2 + e2*a*ka\n  sb2 = rb1' + b2*rb2' + e2*a*kb\n\nThe attacker ends up with:\n\n  sa2 - sa1 = (b2 - b1)*ra2 + a*(e2 - e1)*ka\n</code></pre>\n<p>The attacker ends up with one equation but two unknowns (<code>ra2</code> and <code>ka</code>), so it\u2019s not sufficient to extract <code>ka</code>? It needs a third signature to obtain a second equation and solve for both <code>ra2</code> and <code>ka</code>? What am I missing?</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2023-11-23T15:08:03.531Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 29,
  "reads": 15,
  "readers_count": 14,
  "score": 7.4,
  "yours": false,
  "topic_id": 217,
  "topic_slug": "how-many-nonce-reuse-before-exposing-your-musig2-private-key",
  "topic_title": "How many nonce reuse before exposing your Musig2 private key?",
  "topic_html_title": "How many nonce reuse before exposing your Musig2 private key?",
  "category_id": 7,
  "display_username": "Bastien Teinturier",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "The [Musig2 BIP](https://github.com/bitcoin/bips/blob/e918b50731397872ad2922a1b08a5a4cd1d6d546/bip-0327.mediawiki) says that signing two distinct messages with the same `secnonce` exposes your private key. While I know we must absolutely not reuse `secnonces`, I wanted to check how the private key extraction worked and the difference with a standard schnorr sig.\n\nAnd I couldn't figure it out! It seems to me that an attacker would need **three** partial sigs for distinct messages using the same `secnonce`, **two** doesn't seem to be enough?\n\nHere is a simplified write-up of the equations, with a slightly different naming than the BIP to focus only on the important parts:\n\n```\nAlice has public key Pa = ka*G\nBob has public key Pb = kb*G\nQ is the aggregated public key\nR is the public aggregated nonce\n\nb = H(\"noncecoef\" || R || Q || m)\ne = H(\"challenge\" || R || Q || m)\n\n=> implies that an attacker cannot choose (rb1', rb2') to influence b' thanks to H's preimage resistance\n\nFirst signature for message m1:\n\n  sa1 = ra1 + b1*ra2 + e1*a*ka\n  sb1 = rb1 + b1*rb2 + e1*a*kb\n\nSecond signature for message m2 where Alice reuses ra1 and ra2:\n\n  sa2 = ra1 + b2*ra2 + e2*a*ka\n  sb2 = rb1' + b2*rb2' + e2*a*kb\n\nThe attacker ends up with:\n\n  sa2 - sa1 = (b2 - b1)*ra2 + a*(e2 - e1)*ka\n```\n\nThe attacker ends up with one equation but two unknowns (`ra2` and `ka`), so it's not sufficient to extract `ka`? It needs a third signature to obtain a second equation and solve for both `ra2` and `ka`? What am I missing?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 101,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}