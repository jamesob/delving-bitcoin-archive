{
  "id": 5380,
  "name": "",
  "username": "roasbeef",
  "avatar_template": "/user_avatar/delvingbitcoin.org/roasbeef/{size}/160_2.png",
  "created_at": "2025-06-30T19:23:57.410Z",
  "cooked": "<blockquote>\n<p>What your proposal appears to be missing is a way to handle DoS/onion message peer selection in a useful way.</p>\n</blockquote>\n<p>Peers would be free to <em>reject</em> an attempt to create an onion link if the requesting peer doesn\u2019t already have a channel with the responding node.</p>\n<p><em>Requiring</em> that a channel already exists doesn\u2019t necessarily provide DoS protection. It just increases the cost to creating an onion link. The onion link establishment protocol sketched out in the OP can be extended to require an upfront payment, require presenting a UTXO provably locked to a future time, stream funds to maintain link uptime, etc.</p>\n<blockquote>\n<p>There\u2019s nothing in the spec that mandates this.</p>\n</blockquote>\n<p>That mandates that the same TCP connection be used? Can you point to where this is explicitly outlined? I can find no text that discusses anything of the sort. Minimally, it would need to select/dictate a new port. Implicitly, after BOLT 1, all p2p interaction is assumed to take place over a single port.</p>\n<blockquote>\n<p>but AFAIK all such clients have active queue management to address the QoS concerns</p>\n</blockquote>\n<p>Can you describe such active queue management? Last time I asked about how clients handle active queue management (BOLT issue where I brought up QUIC), the responses were all something along the lines of \u201cwe make sure not to send too much\u201d. Which is a writer side heuristic, rather than a reader side queue management.</p>\n<p>No matter what type of active queue management takes place, a single global TCP connection for all p2p messages will <em>still</em> run into head-of-line blocking.</p>",
  "post_number": 4,
  "post_type": 1,
  "posts_count": 4,
  "updated_at": "2025-06-30T19:23:57.410Z",
  "reply_count": 0,
  "reply_to_post_number": 3,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 12,
  "readers_count": 11,
  "score": 2.2,
  "yours": false,
  "topic_id": 1799,
  "topic_slug": "reimagining-onion-messages-as-an-overlay-layer",
  "topic_title": "Reimagining Onion Messages as an Overlay Layer",
  "topic_html_title": "Reimagining Onion Messages as an Overlay Layer",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 50,
    "username": "MattCorallo",
    "name": "Matt Corallo",
    "avatar_template": "/letter_avatar_proxy/v4/letter/m/e47c2d/{size}.png"
  },
  "bookmarked": false,
  "raw": "> What your proposal appears to be missing is a way to handle DoS/onion message peer selection in a useful way.\n\nPeers would be free to _reject_ an attempt to create an onion link if the requesting peer doesn't already have a channel with the responding node. \n\n_Requiring_ that a channel already exists doesn't necessarily provide DoS protection. It just increases the cost to creating an onion link. The onion link establishment protocol sketched out in the OP can be extended to require an upfront payment, require presenting a UTXO provably locked to a future time, stream funds to maintain link uptime, etc.  \n\n> There\u2019s nothing in the spec that mandates this. \n\nThat mandates that the same TCP connection be used? Can you point to where this is explicitly outlined? I can find no text that discusses anything of the sort. Minimally, it would need to select/dictate a new port. Implicitly, after BOLT 1, all p2p interaction is assumed to take place over a single port. \n\n> but AFAIK all such clients have active queue management to address the QoS concerns\n\nCan you describe such active queue management? Last time I asked about how clients handle active queue management (BOLT issue where I brought up QUIC), the responses were all something along the lines of \"we make sure not to send too much\". Which is a writer side heuristic, rather than a reader side queue management. \n\nNo matter what type of active queue management takes place, a single global TCP connection for all p2p messages will _still_ run into head-of-line blocking.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 143,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "What your proposal appears to be missing is a way to handle DoS/onion message peer selection in a useful way. \n\nPeers would be free to reject an attempt to create an onion link if the requesting peer doesn\u2019t already have a channel with the responding node. \nRequiring that a channel already exists d&hellip;",
  "truncated": true,
  "post_url": "/t/reimagining-onion-messages-as-an-overlay-layer/1799/4",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}