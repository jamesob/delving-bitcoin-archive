{
  "id": 5294,
  "name": "plebhash",
  "username": "plebhash",
  "avatar_template": "/user_avatar/delvingbitcoin.org/plebhash/{size}/302_2.png",
  "created_at": "2025-06-13T14:56:51.916Z",
  "cooked": "<p>Some words about how this relates to Stratum V2.</p>\n<p>Recently, we had some discussions on Coinbase Output allocation on the spec repo: <a href=\"https://github.com/stratum-mining/sv2-spec/pull/138\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">clarify `AllocateMiningJobToken.Succes`, `DeclareMiningJob.Success` and `SetCustomMiningJob`; and remove `SetCustomMiningJob.coinbase_tx_value_remaining` by plebhash \u00b7 Pull Request #138 \u00b7 stratum-mining/sv2-spec \u00b7 GitHub</a></p>\n<p>We realized that there\u2019s a there\u2019s a chicken-and-egg problem that\u2019s very hard to solve without introducing new round-trip messages into the canonical Sv2 Job Declaration (JD) process.</p>\n<p>In the bootstrapping phase of the Sv2 JD, the following Sv2 messages need to happen in sequence:</p>\n<ul>\n<li><a href=\"https://github.com/stratum-mining/sv2-spec/blob/66287a5d9e8d94a681febadcaffa6e141e3cf4b4/06-Job-Declaration-Protocol.md#642-allocateminingjobtoken-jdc---jds\" rel=\"noopener nofollow ugc\"><code>AllocateMiningJobToken</code></a> (JD Client / Miner \u2192 JD Server / Pool)</li>\n<li><a href=\"https://github.com/stratum-mining/sv2-spec/blob/66287a5d9e8d94a681febadcaffa6e141e3cf4b4/06-Job-Declaration-Protocol.md#643-allocateminingjobtokensuccess-server---client\" rel=\"noopener nofollow ugc\"><code>AllocateMiningJobToken.Success</code></a> (JD Server / Pool \u2192 JD Client / Miner)</li>\n<li><a href=\"https://github.com/stratum-mining/sv2-spec/blob/66287a5d9e8d94a681febadcaffa6e141e3cf4b4/07-Template-Distribution-Protocol.md#71-coinbaseoutputconstraints-client---server\" rel=\"noopener nofollow ugc\"><code>CoinbaseOutputConstraints</code></a> (JD Client / Miner \u2192 Template Provider / Miner)</li>\n</ul>\n<p><code>AllocateMiningJobToken.Success.coinbase_tx_outputs</code> is how JD Server / Pool informs the bare minimum information that it expects to see in the Coinbase Outputs in order to acknowledge work. At this point, neither Pool nor Miner know the template revenue, because the Template Provider still wasn\u2019t informed about the blockspace and sigops budget available for creating the template (that happens over <code>CoinbaseOutputConstraints</code>).</p>\n<p>So we established a convention where the first output of <code>AllocateMiningJobToken.Success.coinbase_tx_outputs</code> dictates where the pooled mining goes. This output is informed as a 0 valued output, and it is up to the JD Client / Miner to fill it on subsequent JD messages (<code>DeclareMiningJob</code> and <code>SetCustomMiningJob</code>) with the amount of sats it wants to allocate towards pooled mining.</p>\n<p>This is enough to establish a sequence of causality in the chain of messages listed above. JD Client has enough data to inform the Template Provider about the available blockspace and sigops budget via <code>CoinbaseOutputConstraints</code>, and later it can continue with the JD process without violating the agreements with the Pool.</p>\n<p>This is however a compromise that sacrifices non-custodial payouts under the canonical Sv2 JD spec. Pool / JDS cannot determine non-custodial payouts without knowledge of template revenue. Miner / JDC cannot inform template revenue without knowledge of blockspace/sigops budget. <img src=\"https://delvingbitcoin.org/images/emoji/twitter/chicken.png?v=14\" title=\":chicken:\" class=\"emoji\" alt=\":chicken:\" loading=\"lazy\" width=\"20\" height=\"20\"><img src=\"https://delvingbitcoin.org/images/emoji/twitter/egg.png?v=14\" title=\":egg:\" class=\"emoji\" alt=\":egg:\" loading=\"lazy\" width=\"20\" height=\"20\">.</p>\n<p>Some protocol extension would be needed to unblock non-custodial payouts, be it multi-output or CTV-based.</p>",
  "post_number": 14,
  "post_type": 1,
  "posts_count": 14,
  "updated_at": "2025-06-13T15:01:56.233Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 4,
  "readers_count": 3,
  "score": 15.8,
  "yours": false,
  "topic_id": 1753,
  "topic_slug": "scaling-noncustodial-mining-payouts-with-ctv",
  "topic_title": "Scaling Noncustodial Mining Payouts with CTV",
  "topic_html_title": "Scaling Noncustodial Mining Payouts with CTV",
  "category_id": 7,
  "display_username": "plebhash",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Some words about how this relates to Stratum V2.\n\nRecently, we had some discussions on Coinbase Output allocation on the spec repo: https://github.com/stratum-mining/sv2-spec/pull/138\n\nWe realized that there's a there's a chicken-and-egg problem that's very hard to solve without introducing new round-trip messages into the canonical Sv2 Job Declaration (JD) process.\n\nIn the bootstrapping phase of the Sv2 JD, the following Sv2 messages need to happen in sequence:\n- [`AllocateMiningJobToken`](https://github.com/stratum-mining/sv2-spec/blob/66287a5d9e8d94a681febadcaffa6e141e3cf4b4/06-Job-Declaration-Protocol.md#642-allocateminingjobtoken-jdc---jds) (JD Client / Miner -> JD Server / Pool)\n- [`AllocateMiningJobToken.Success`](https://github.com/stratum-mining/sv2-spec/blob/66287a5d9e8d94a681febadcaffa6e141e3cf4b4/06-Job-Declaration-Protocol.md#643-allocateminingjobtokensuccess-server---client) (JD Server / Pool -> JD Client / Miner)\n- [`CoinbaseOutputConstraints`](https://github.com/stratum-mining/sv2-spec/blob/66287a5d9e8d94a681febadcaffa6e141e3cf4b4/07-Template-Distribution-Protocol.md#71-coinbaseoutputconstraints-client---server) (JD Client / Miner -> Template Provider / Miner)\n\n`AllocateMiningJobToken.Success.coinbase_tx_outputs` is how JD Server / Pool informs the bare minimum information that it expects to see in the Coinbase Outputs in order to acknowledge work. At this point, neither Pool nor Miner know the template revenue, because the Template Provider still wasn't informed about the blockspace and sigops budget available for creating the template (that happens over `CoinbaseOutputConstraints`).\n\nSo we established a convention where the first output of `AllocateMiningJobToken.Success.coinbase_tx_outputs` dictates where the pooled mining goes. This output is informed as a 0 valued output, and it is up to the JD Client / Miner to fill it on subsequent JD messages (`DeclareMiningJob` and `SetCustomMiningJob`) with the amount of sats it wants to allocate towards pooled mining.\n\nThis is enough to establish a sequence of causality in the chain of messages listed above. JD Client has enough data to inform the Template Provider about the available blockspace and sigops budget via `CoinbaseOutputConstraints`, and later it can continue with the JD process without violating the agreements with the Pool.\n\nThis is however a compromise that sacrifices non-custodial payouts under the canonical Sv2 JD spec. Pool / JDS cannot determine non-custodial payouts without knowledge of template revenue. Miner / JDC cannot inform template revenue without knowledge of blockspace/sigops budget. \ud83d\udc14\ud83e\udd5a.\n\nSome protocol extension would be needed to unblock non-custodial payouts, be it multi-output or CTV-based.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 249,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Some words about how this relates to Stratum V2. \nRecently, we had some discussions on Coinbase Output allocation on the spec repo: <a href=\"https://github.com/stratum-mining/sv2-spec/pull/138\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">clarify `AllocateMiningJobToken.Succes`, `DeclareMiningJob.Success` and `SetCustomMiningJob`; and remove `SetCustomMiningJob.coinbase_tx_value_remaining` by plebhash \u00b7 &hellip;</a>",
  "truncated": true,
  "post_url": "/t/scaling-noncustodial-mining-payouts-with-ctv/1753/14",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}