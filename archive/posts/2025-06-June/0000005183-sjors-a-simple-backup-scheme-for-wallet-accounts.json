{
  "id": 5183,
  "name": "Sjors Provoost",
  "username": "sjors",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sjors/{size}/59_2.png",
  "created_at": "2025-06-01T07:05:45.540Z",
  "cooked": "<p>I hadn\u2019t thought about the interactivity requirement for making T match. My implicit assumption was that one party collects the xpubs, picks T, generates the descriptors and sends them back.</p>\n<p>But by making T part of the key, you lose the property of having a predictable xpub to recover from.</p>\n<p>A related issue is that Bitcoin Core normalizes descriptors to the last hardened derivation step, so aside from musig() which is a bit special, [a]/T would just become [aT] and we lose the predictable xpub.</p>\n<p>Another thing I realized is that BIP32 only allows for 31 bit numbers (and one bit is reserved for the hardening flag), so this scheme would break in 2048. We could divide the timestamp by 3600 to work around that. Hourly precision should be enough to avoid duplicates.</p>",
  "post_number": 18,
  "post_type": 1,
  "posts_count": 31,
  "updated_at": "2025-06-01T07:08:14.744Z",
  "reply_count": 1,
  "reply_to_post_number": 17,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 42,
  "readers_count": 41,
  "score": 13.4,
  "yours": false,
  "topic_id": 1607,
  "topic_slug": "a-simple-backup-scheme-for-wallet-accounts",
  "topic_title": "A simple backup scheme for wallet accounts",
  "topic_html_title": "A simple backup scheme for wallet accounts",
  "category_id": 8,
  "display_username": "Sjors Provoost",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 81,
    "username": "salvatoshi",
    "name": "salvatoshi",
    "avatar_template": "/user_avatar/delvingbitcoin.org/salvatoshi/{size}/72_2.png"
  },
  "bookmarked": false,
  "raw": "I hadn't thought about the interactivity requirement for making T match. My implicit assumption was that one party collects the xpubs, picks T, generates the descriptors and sends them back.\n\nBut by making T part of the key, you lose the property of having a predictable xpub to recover from.\n\nA related issue is that Bitcoin Core normalizes descriptors to the last hardened derivation step, so aside from musig() which is a bit special, [a]/T would just become [aT] and we lose the predictable xpub.\n\nAnother thing I realized is that BIP32 only allows for 31 bit numbers (and one bit is reserved for the hardening flag), so this scheme would break in 2048. We could divide the timestamp by 3600 to work around that. Hourly precision should be enough to avoid duplicates.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 71,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I hadn\u2019t thought about the interactivity requirement for making T match. My implicit assumption was that one party collects the xpubs, picks T, generates the descriptors and sends them back. \nBut by making T part of the key, you lose the property of having a predictable xpub to recover from. \nA rela&hellip;",
  "truncated": true,
  "post_url": "/t/a-simple-backup-scheme-for-wallet-accounts/1607/18",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}