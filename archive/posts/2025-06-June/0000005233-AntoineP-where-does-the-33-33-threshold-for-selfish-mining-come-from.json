{
  "id": 5233,
  "name": "Antoine Poinsot",
  "username": "AntoineP",
  "avatar_template": "/user_avatar/delvingbitcoin.org/antoinep/{size}/483_2.png",
  "created_at": "2025-06-05T20:26:39.357Z",
  "cooked": "<p>Clara Shikhelman and i went through the maths of the 2013 <a href=\"https://arxiv.org/pdf/1311.0243\">research paper</a> \u201cMajority is not enough\u201d. Selfish mining is often ill-understood, and the paper goes quickly over some of the calculations. So i figured it would be helpful to post an explanation of the math so others (as well as my future self!) don\u2019t have to figure it out from scratch again.</p>\n<h2><a name=\"p-5233-the-selfish-mining-strategy-1\" class=\"anchor\" href=\"#p-5233-the-selfish-mining-strategy-1\"></a>The Selfish Mining strategy</h2>\n<p>A selfish miner aims to contribute more blocks to the main chain than would be expected based on its share of the network\u2019s total hashrate. To achieve this it will attempt to cause more stale blocks to its competition than to itself, by only opportunistically revealing the blocks it mines. Past a certain threshold of network hashrate controlled, this strategy will bring more revenue to a miner than always publishing its blocks as soon as they are found.</p>\n<p>How low this threshold is depends on another parameter than its share of the network hashrate. This is the ability of the selfish miner to learn about a block found by another miner before all other miners, and to reach them before the other miner\u2019s block does. This ability allows a selfish miner to get some portion of the rest of miners to mine on its own block rather than a competing one in the event of a 1-block race. The higher this ability, the lower the hashrate threshold at which selfish mining becomes profitable.</p>\n<p>However this ability is <em>not a requirement</em> for selfish mining to be profitable. Without it selfish mining becomes profitable for a miner controlling more than 1/3 of the network hashrate. In this post, we will only analyse this \u201cworst case\u201d scenario, that is all other miners will mine on top of the competing block and not the selfish miner\u2019s in the event of a 1-block race.</p>\n<p>The selfish mining strategy (section 3.2 of the paper) is the following:</p>\n<ul>\n<li>Upon finding a block:\n<ul>\n<li>If we are in a 1-block race with the public chain, publish the conflicting block along with the newfound block;</li>\n<li>Else do not publish the block, start mining on top of it.</li>\n</ul>\n</li>\n<li>Upon another miner finding a block:\n<ul>\n<li>If we do not have any unpublished block, switch to mining on top of it;</li>\n<li>Else if we have a single conflicting unpublished block, publish it and keep mining on top of our own block;</li>\n<li>Else if we have two conflicting unpublished blocks, publish them both and keep mining on top of them;</li>\n<li>Else (we have a conflicting chain of more than two blocks), publish our oldest block and keep mining on top of our private chain.</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-5233-selfish-mining-analysis-2\" class=\"anchor\" href=\"#p-5233-selfish-mining-analysis-2\"></a>Selfish Mining analysis</h2>\n<h3><a name=\"p-5233-state-probabilities-3\" class=\"anchor\" href=\"#p-5233-state-probabilities-3\"></a>State probabilities</h3>\n<p>To compute the expected revenue of this strategy, we need to first compute the probability associated with each of its states. We will analyze the state machine for a selfish miner with a proportion <span class=\"math\">\\alpha</span> of the network hashrate, as introduced in Fig. 1 in section 4 of the paper. Our version will be slightly simplified since here we always assume the worst case scenario for the selfish miner (i.e. it can never propagate its own block first in the event of a 1-block race, in the paper <span class=\"math\">\\gamma = 0</span>).</p>\n<pre data-code-wrap=\"mermaid\"><code class=\"lang-mermaid\">stateDiagram-v2\n    direction LR\n    0 --&gt; 0   : 1 - \u03b1\n    0' --&gt; 0  : \u03b1\n    0' --&gt; 0  : 1 - \u03b1\n    0 --&gt; 1   : \u03b1\n    1 --&gt; 0'  : 1 - \u03b1\n    1 --&gt; 2   : \u03b1\n    2 --&gt; 3   : \u03b1\n    2 --&gt; 0   : 1 - \u03b1\n    3 --&gt; ..  : \u03b1\n    3 --&gt; 2   : 1 - \u03b1\n    .. --&gt; 3  : 1 - \u03b1\n</code></pre>\n<p>Each state represents the lead of the selfish miner compared to the rest of the network. At state 0, the selfish miner mines on top of the same block as everyone else. At state 1, the selfish miner mines on top of a single unpublished block. At state 2, the selfish miner mines on top of two unpublished blocks. And so on. The selfish miner moves from State <span class=\"math\">n</span> to state <span class=\"math\">n+1</span> with probability <span class=\"math\">\\alpha</span>. It may stay on State 0 upon the rest of the network finding a block (probability <span class=\"math\">1 - \\alpha</span>). State 0\u2019 represents a 1-block race between the selfish miner and the rest of the network. It happens when the selfish miner had a one block lead and the rest of the network found a block. The race is resolved by either the selfish miner finding another block on top of its own (probability <span class=\"math\">\\alpha</span>) or the rest of the network finding another block on top of the other one (probability <span class=\"math\">1 - \\alpha</span>). In both cases the selfish miner then moves on to mining on top of the same block as the rest of the network.</p>\n<p>The above state machine is a <a href=\"https://en.wikipedia.org/wiki/Markov_chain\">Markov Chain</a> with the following state transition matrix:</p>\n<div class=\"math\">\nP =\n\\begin{array}{c@{\\hspace{2pt}}l}\n   &amp; \\begin{array}{cccccc}\n&amp;&amp;&amp;&amp;&amp; \\text{to:} &amp;&amp;&amp; \\\\\n    &amp; \\text{0'} &amp;&amp; 0 &amp;&amp; 1 &amp;&amp; 2 &amp;&amp; 3 &amp; \\cdots\n   \\end{array} \\\\\n\\begin{array}{cc}\n  &amp;\\text{0'} \\\\\n  &amp;0 \\\\\n  \\text{from:}&amp;1 \\\\\n  &amp;2 \\\\\n  &amp;3 \\\\\n  &amp;\\vdots\n\\end{array}\n&amp;\n\\left(\n\\begin{array}{cccccc}\n  0          &amp; 1          &amp; 0      &amp; 0          &amp; 0      &amp; \\cdots \\\\\n  0          &amp; 1 - \\alpha &amp; \\alpha &amp; 0          &amp; 0      &amp; \\cdots \\\\\n  1 - \\alpha &amp; 0          &amp; 0      &amp; \\alpha     &amp; 0      &amp; \\cdots \\\\\n  0          &amp; 1 - \\alpha &amp; 0      &amp; 0          &amp; \\alpha &amp; \\cdots \\\\\n  0          &amp; 0          &amp; 0      &amp; 1 - \\alpha &amp; 0      &amp; \\cdots \\\\\n  \\vdots     &amp; \\vdots     &amp; \\vdots &amp; \\vdots     &amp; \\vdots &amp; \\ddots \\\\\n\\end{array}\n\\right)\n\\end{array}\n</div>\n<p>Because the above Markov Chain is aperiodic and irreducible we have that it has <a href=\"https://en.wikipedia.org/wiki/Discrete-time_Markov_chain#Stationary_distributions\">stationary distribution</a> <span class=\"math\">\\begin{pmatrix} P_{0'} &amp; P_{0} &amp; P_{1} &amp; P_{2} &amp; P_{3} &amp; \\cdots \\end{pmatrix}</span> with:</p>\n<div class=\"math\">\n\\begin{pmatrix} P_{0'} &amp; P_{0} &amp; P_{1} &amp; P_{2} &amp; P_{3} &amp; \\cdots \\end{pmatrix}\n*\n\\begin{pmatrix}\n0          &amp; 1          &amp; 0      &amp; 0          &amp; 0      &amp; 0      &amp; \\cdots \\\\\n0          &amp; 1 - \\alpha &amp; \\alpha &amp; 0          &amp; 0      &amp; 0      &amp; \\cdots \\\\\n1 - \\alpha &amp; 0          &amp; 0      &amp; \\alpha     &amp; 0      &amp; 0      &amp; \\cdots \\\\\n0          &amp; 1 - \\alpha &amp; 0      &amp; 0          &amp; \\alpha &amp; 0      &amp; \\cdots \\\\\n0          &amp; 0          &amp; 0      &amp; 1 - \\alpha &amp; 0      &amp; \\alpha &amp; \\cdots \\\\\n\\vdots     &amp; \\vdots     &amp; \\vdots &amp; \\vdots     &amp; \\vdots &amp; \\vdots &amp; \\ddots \\\\\n\\end{pmatrix}\n=\n\\begin{pmatrix} P_{0'} &amp; P_{0} &amp; P_{1} &amp; P_{2} &amp; P_{3} &amp; \\cdots \\end{pmatrix}\n</div>\n<p>From which we derive the following system of equations:</p>\n<div class=\"math\">\n\\left\\{\n\\begin{array}{ll}\nP_{0'} = (1 - \\alpha) P_{1} \\\\\nP_0 = (1 - \\alpha) P_0 + (1 - \\alpha) P_2 + 1 P_{0'} \\\\\nP_1 = \\alpha P_0 \\\\\nP_2 = \\alpha P_1 + (1 - \\alpha) P_3 \\\\\n\\end{array}\n\\right.\n</div>\n<p>From this system of equations we start by re-arranging the second equation:</p>\n<div class=\"math\">\n\\begin{align*}\nP_0 &amp;= P_0 - \\alpha P_0 + (1 - \\alpha) P_2 + P_{0'} \\\\\n\\implies 0 &amp;= - \\alpha P_0 + (1 - \\alpha) P_2 + P_{0'}\n\\end{align*}\n</div>\n<p>This gives us <span class=\"math\">(0)</span>:</p>\n<div class=\"math\">\nP_{0'} = \\alpha P_0 - (1 - \\alpha) P_2\n</div>\n<p>And <span class=\"math\">(1)</span>:</p>\n<div class=\"math\">\n\\alpha P_0 = P_{0'} + (1 - \\alpha) P_2\n</div>\n<p>Re-arranging the first equation from the system above and substituting per <span class=\"math\">(0)</span> and the third equation from the system we have:</p>\n<div class=\"math\">\n\\begin{align*}\nP_{0'} &amp;= (1 - \\alpha) P_1 \\\\ \\implies\n\\alpha P_1 &amp;= P_1 - P_{0'} \\\\ \\implies\n\\alpha P_1 &amp;= \\alpha P_0 - \\alpha P_0 + (1 - \\alpha) P_2 \\\\ \\implies\n\\alpha P_1 &amp;= (1 - \\alpha) P_2\n\\end{align*}\n</div>\n<p>Now starting from <span class=\"math\">(1)</span> and substituting per the first equation we have:</p>\n<div class=\"math\">\n\\alpha P_0 = P_{0'} + (1 - \\alpha) P_2 \\\\ \\implies\n\\alpha P_0 = (1 - \\alpha) P_{1} + (1 - \\alpha) P_2\n</div>\n<p>Therefore we have:</p>\n<div class=\"math\">\n\\left\\{\n\\begin{array}{ll}\n\\alpha P_0 = (1 - \\alpha) P_{1} + (1 - \\alpha) P_2 \\\\\nP_{0'} = (1 - \\alpha) P_{1} \\\\\n\\alpha P_1 = (1 - \\alpha) P_2\n\\end{array}\n\\right.\n</div>\n<p>We have effectively derived the first three equations from the system of equations presented in section 4.1 of the paper.</p>\n<p>The next two equations used in the calculation of state probabilities in the paper are <span class=\"math\">P_{0'} + \\sum_{k=0}^\\infty P_k = 1</span> and <span class=\"math\">\\forall k \\ge 2: \\alpha P_k = (1 - \\alpha) P_{k+1}</span>. The former comes by definition as these are all the possible states and the latter can be proven by induction for <span class=\"math\">k \\ge 1</span>:</p>\n<ul>\n<li>We have shown above that <span class=\"math\">\\alpha P_1 = (1 - \\alpha) P_2</span>. Therefore <span class=\"math\">P_k = (1 - \\alpha) P_{k+1}</span> is true for <span class=\"math\">k=1</span> (base case).</li>\n<li>Now per the transition matrix <span class=\"math\">P</span> above and stationary distribution property, <span class=\"math\">P_k = \\alpha P_{k-1} + (1 - \\alpha) P_{k+1}</span>. Assuming <span class=\"math\">\\alpha P_{k-1} = (1 - \\alpha) P_{k}</span> (our induction hypothesis) we have <span class=\"math\">P_k = (1 - \\alpha) P_{k} + (1 - \\alpha) P_{k+1} \\implies \\alpha P_k = (1 - \\alpha) P_{k+1}.</span></li>\n<li>Therefore it holds that <span class=\"math\">\\forall k \\ge 1: \\alpha P_k = (1 - \\alpha) P_{k+1}</span> (and of course <span class=\"math\">\\forall k \\ge 2: \\alpha P_k = (1 - \\alpha) P_{k+1}</span> which we\u2019ll use below).</li>\n</ul>\n<p>We have derived the five equations used in Appendix A of the paper to calculate the state probabilities <span class=\"math\">P_0</span>, <span class=\"math\">P_{0'}</span>, <span class=\"math\">P_1</span>, <span class=\"math\">\\forall k \\ge 2: P_k</span>.  Let\u2019s now go through the calculation in Appendix A step by step. The goal here is to express all state probabilities in terms of <span class=\"math\">\\alpha</span>. This is achieved by first expressing <span class=\"math\">P_0</span>, <span class=\"math\">P_{0'}</span>, and <span class=\"math\">\\forall k \\ge 2: P_k</span> in terms of <span class=\"math\">P_1</span>.</p>\n<p>We start with the probability of <span class=\"math\">\\forall k \\ge 2: P_k</span>. We have that <span class=\"math\">\\alpha P_k = (1 - \\alpha) P_{k+1}</span>. Therefore <span class=\"math\">P_{k+1} = \\frac{\\alpha}{1-\\alpha}P_k = \\frac{\\alpha}{1-\\alpha}\\frac{\\alpha}{1-\\alpha}P_{k-1} = (\\prod_{i=2}^{k+1} \\frac{\\alpha}{1 - \\alpha}) P_{1} = \\frac{\\alpha}{1 - \\alpha}^{k} P_1</span>. Therefore we have:</p>\n<div class=\"math\">\n\\forall k \\ge 2: P_k = \\frac{\\alpha}{1 - \\alpha}^{k-1} P_1\n</div>\n<p>Then (in an alternative manner to the one used in the paper) we can simply substitute the third equation in our system above in the first equation: <span class=\"math\">\\alpha P_0 = (1 - \\alpha) P_{1} + (1 - \\alpha) P_2 \\implies \\alpha P_0 = (1 - \\alpha) P_{1} + \\alpha P_1 \\implies \\alpha P_0 = P_1</span>.</p>\n<p>The next step is to express <span class=\"math\">P_{0'} + \\sum_{k=0}^\\infty P_k = 1</span> in terms of <span class=\"math\">P_1</span>. We start by stripping the <span class=\"math\">k = 0</span> case from the sum and using the property we just derived above for <span class=\"math\">k \\ge 2</span> (which is trivially true for <span class=\"math\">k = 1</span>) to get <span class=\"math\">P_{0'} + P_0 + \\sum_{k=1}^\\infty P_k = 1 \\implies P_{0'} + P_0 + \\sum_{k=1}^\\infty (\\frac{\\alpha}{1 - \\alpha}^{k-1} P_1) = 1</span>. From there we can substitute <span class=\"math\">P_{0'}</span> from the first equation in the system above and <span class=\"math\">P_0</span> using the property derived in the previous step. Therefore we have:</p>\n<div class=\"math\">\n(1 - \\alpha) P_{1} + \\frac{1}{\\alpha} P_1 + \\sum_{k=1}^\\infty (\\frac{\\alpha}{1 - \\alpha}^{k-1} P_1) = 1\n</div>\n<p>From this we can deduce the probability for every state. Let\u2019s start with <span class=\"math\">P_1</span>. Using the formula for geometric series and re-arranging:</p>\n<div class=\"math\">\n\\begin{align*}\n&amp;(1 - \\alpha) P_1 + \\frac{P_1}{\\alpha} + \\frac{P_1}{1 - \\frac{\\alpha}{1 - \\alpha}} &amp;= 1 \\\\\n\\implies &amp;P_1 (1 - \\alpha + \\frac{1}{\\alpha} + \\frac{1}{1 - \\frac{\\alpha}{1 - \\alpha}}) &amp;= 1 \\\\\n\\implies &amp;P_1 (\\frac{\\alpha (1 - \\alpha) + 1}{\\alpha} + \\frac{1}{1 - \\frac{\\alpha}{1 - \\alpha}}) &amp;= 1 \\\\\n\\implies &amp;P_1 \\frac{(\\alpha (1 - \\alpha) + 1) (1 - \\frac{\\alpha}{1 - \\alpha}) + \\alpha}{\\alpha (1 - \\frac{\\alpha}{1 - \\alpha})} &amp;= 1 \\\\\n\\implies &amp;P_1 \\frac{\\alpha (1 - \\alpha) - \\frac{\\alpha^2 (1 - \\alpha)}{1 - \\alpha} + 1 - \\frac{\\alpha}{1 - \\alpha} + \\alpha}{\\frac{-2 \\alpha^2 + \\alpha}{1 - \\alpha}} &amp;= 1 \\\\\n\\implies &amp;P_1 \\frac{-2 \\alpha^2 + \\frac{\\alpha - 2 \\alpha^2}{1 - \\alpha} + 1}{\\frac{-2 \\alpha^2 + \\alpha}{1 - \\alpha}} &amp;= 1 \\\\\n\\implies &amp;P_1 \\frac{-2 \\alpha^2 + 2 \\alpha^3 + \\alpha - 2 \\alpha^2 + 1}{-2 \\alpha^2 + \\alpha} &amp;= 1 \\\\\n\\implies &amp;P_1 = \\frac{-2 \\alpha^2 + \\alpha}{2 \\alpha^3 -4 \\alpha^2 + 1}\n\\end{align*}\n</div>\n<p>Now for <span class=\"math\">P_0</span> we can simply substitute:</p>\n<div class=\"math\">\n\\begin{align*}\nP_0 &amp;= \\frac{P_1}{\\alpha} \\\\\n\\implies P_0 &amp;= \\frac{-2 \\alpha^2 + \\alpha}{2 \\alpha^4 -4 \\alpha^3 + \\alpha}\n\\end{align*}\n</div>\n<p>Similarly for <span class=\"math\">P_{0'}</span>:</p>\n<div class=\"math\">\n\\begin{align*}\nP_{0'} &amp;= (1 - \\alpha) P_1 \\\\\n\\implies P_{0'} &amp;= \\frac{2 \\alpha^3 - 3 \\alpha^2 + \\alpha}{2 \\alpha^3 -4 \\alpha^2 + 1}\n\\end{align*}\n</div>\n<p>This concludes our analysis of the state probabilities. We have:</p>\n<div class=\"math\">\n\\left\\{\n\\begin{array}{ll}\nP_{0'} &amp;= \\frac{2 \\alpha^3 - 3 \\alpha^2 + \\alpha}{2 \\alpha^3 -4 \\alpha^2 + 1} \\\\\nP_0 &amp;= \\frac{-2 \\alpha^2 + \\alpha}{2 \\alpha^4 -4 \\alpha^3 + \\alpha} \\\\\nP_1 &amp;= \\frac{-2 \\alpha^2 + \\alpha}{2 \\alpha^3 -4 \\alpha^2 + 1} \\\\\n\\forall k \\ge 2: P_k &amp;= \\frac{\\alpha}{1 - \\alpha}^{k-1} \\frac{-2 \\alpha^2 + \\alpha}{2 \\alpha^3 -4 \\alpha^2 + 1} \\\\\n\\end{array}\n\\right.\n</div>\n<h3><a name=\"p-5233-expected-revenue-4\" class=\"anchor\" href=\"#p-5233-expected-revenue-4\"></a>Expected revenue</h3>\n<p>Let\u2019s now move on to section 4.2 of the paper, which analyzes the revenue of a selfish miner. This can be analyzed by looking at the proportion of blocks included in the best chain found by the selfish miner. To this end the paper defines <span class=\"math\">r_{pool}</span>, the proportion of blocks found by the selfish miner, and <span class=\"math\">r_{others}</span>, the proportion of blocks found by the rest of the network. Note that because of the high rate of stale blocks, <span class=\"math\">r_{pool} + r_{others}</span> is well below <span class=\"math\">1</span>. Due to the difficulty adjustment (which disregards stale blocks), the revenue of the selfish miner are therefore <span class=\"math\">R = \\frac{r_{pool}}{r_{pool} + r_{others}}</span>.</p>\n<p>Let\u2019s express <span class=\"math\">r_{pool}</span> and <span class=\"math\">r_{others}</span> in terms of the state probabilities we derived in the previous section. Note we are still using the <span class=\"math\">\\gamma = 0</span> simplification compared to section 4.2 of the paper, i.e. in state <span class=\"math\">0'</span> no other miner mine on top of the selfish miner\u2019s block.</p>\n<p>In our model the states in which a selfish miner gets one (or more) block(s) in the best chain are:</p>\n<ul>\n<li>In state <span class=\"math\">0'</span> when it wins the race, both the block that is being raced for and the block found on top of it will be included in the best chain (i.e. reward of 2 blocks);</li>\n<li>In state <span class=\"math\">2</span> when the rest of the network finds a block, the selfish miner will get both its block included in the best chain (i.e. reward of 2 blocks);</li>\n<li>In state <span class=\"math\">i \\ge 3</span> when the rest of the network finds a block (i.e. is catching up to the selfish miner\u2019s longer private chain), the selfish miner broadcast one of its block that is guaranteed to be included in the best chain (i.e. reward of 1 block) eventually when the last two blocks are broadcast in state <span class=\"math\">2</span>.</li>\n</ul>\n<p>Therefore we have:</p>\n<div class=\"math\">\nr_{pool} = 2 P_{0'} \\alpha + 2 P_{2} (1 - \\alpha) + 1 P_{i \\gt 2} (1 - \\alpha) \n</div>\n<p>Similarly the rest of the miners get one (or more) block(s) in the best chain in the following scenarii:</p>\n<ul>\n<li>In state <span class=\"math\">0'</span> when they win the race, both the block that is being raced for and the block found on top of it are included in the best chain (i.e. reward of 2 blocks);</li>\n<li>In state <span class=\"math\">0</span> when they find a block it will be included in the best chain as the selfish miner switches to mining on top of it (i.e. reward of 1 block).</li>\n</ul>\n<p>Therefore we have:</p>\n<div class=\"math\">\nr_{others} = 2 P_{0'} (1 - \\alpha) + P_0 (1 - \\alpha)\n</div>\n<h3><a name=\"p-5233-profitability-5\" class=\"anchor\" href=\"#p-5233-profitability-5\"></a>Profitability</h3>\n<p>It becomes (eventually) profitable for a miner to follow the selfish mining strategy when the proportion of blocks it finds <span class=\"math\">R</span> is greater than the proportion of network hashrate it controls <span class=\"math\">\\alpha</span>. We can verify the findings discussed in section 4.4 of the paper by solving this inequality using the equations from the previous section:</p>\n<div class=\"math\">\nR &gt; \\alpha \\\\\n\\implies \\frac{r_{pool}}{r_{pool} + r_{others}} &gt; \\alpha \\\\\n</div>\n<p>We can express <span class=\"math\">r_{pool}</span> and <span class=\"math\">r_{others}</span> in terms of <span class=\"math\">\\alpha</span> using the state probabilities we derived previously.</p>\n<div class=\"math\">\n\\begin{align*}\nr_{others} &amp;= 2 P_{0'} (1 - \\alpha) + P_0 (1 - \\alpha) \\\\\n&amp;= 2 P_1 (1 - \\alpha)^2 + \\frac{P_1}{\\alpha} (1 - \\alpha) \\\\\n&amp;= P_1 (1 - \\alpha) (2 (1 - \\alpha) + \\frac{1}{\\alpha})\n\\end{align*}\n</div>\n<div class=\"math\">\n\\begin{align*}\nr_{pool} &amp;= 2 P_{0'} \\alpha + 2 P_{2} (1 - \\alpha) + 1 P_{i \\gt 2} (1 - \\alpha) \\\\\n&amp;= 2 P_1 (1 - \\alpha) \\alpha + 2 \\frac{\\alpha}{1 - \\alpha} P_1 (1 - \\alpha) + \\sum_{i = 3}^\\infty \\frac{\\alpha}{1 - \\alpha}^{i-1} P_1 (1 - \\alpha) \\\\\n&amp;= 2 P_1 (1 - \\alpha) \\alpha + 2 P_1 \\alpha + (\\frac{1}{1 - \\frac{\\alpha}{1 - \\alpha}} - \\frac{\\alpha}{1 - \\alpha}^{0} - \\frac{\\alpha}{1 - \\alpha}^1) P_1 (1 - \\alpha) \\\\\n&amp;= 2 P_1 (1 - \\alpha) \\alpha + 2 P_1 \\alpha + (\\frac{1}{1 - \\frac{\\alpha}{1 - \\alpha}} - 1 - \\frac{\\alpha}{1 - \\alpha}) P_1 (1 - \\alpha) \\\\\n&amp;= 2 P_1 (1 - \\alpha) \\alpha + 2 P_1 \\alpha + \\frac{\\alpha^2}{(1 - \\alpha) (1 - 2 \\alpha)} P_1 (1 - \\alpha) \\\\\n&amp;= P_1 \\alpha (2 (1 - \\alpha) + \\frac{\\alpha}{(1 - 2 \\alpha)} + 2)\n\\end{align*}\n</div>\n<p>Substituting in the equation we get:</p>\n<div class=\"math\">\n\\begin{align*}\n&amp;\\frac{P_1 \\alpha (2 (1 - \\alpha) + \\frac{\\alpha}{(1 - 2 \\alpha)} + 2)\n}{P_1 \\alpha (2 (1 - \\alpha) + \\frac{\\alpha}{(1 - 2 \\alpha)} + 2)\n + P_1 (1 - \\alpha) (2 (1 - \\alpha) + \\frac{1}{\\alpha})} &amp;&gt; \\alpha \\\\\n\\implies &amp;\\frac{\\alpha (2 (1 - \\alpha) + \\frac{\\alpha}{(1 - 2 \\alpha)} + 2)}{\\alpha (2 (1 - \\alpha) + \\frac{\\alpha}{(1 - 2 \\alpha)} + 2) + (1 - \\alpha) (2 (1 - \\alpha) + \\frac{1}{\\alpha})} &amp;&gt; \\alpha\n\\end{align*}\n</div>\n<p>Plugging it <a href=\"https://www.wolframalpha.com/input?i2d=true&amp;i=+Divide%5Bx%5C%2840%292%5C%2840%291-x%5C%2841%29%2B+Divide%5Bx%2C%5C%2840%291-2x%5C%2841%29%5D%2B2%5C%2841%29%2Cx%5C%2840%292%5C%2840%291-x%5C%2841%29%2B+Divide%5Bx%2C%5C%2840%291-2x%5C%2841%29%5D%2B2%5C%2841%29%2B+%5C%2840%291-x%5C%2841%29%5C%2840%292%5C%2840%291-x%5C%2841%29+%2B+Divide%5B1%2Cx%5D%5C%2841%29%5D++%3E+x\">into WolframAlpha</a> gives us:</p>\n<div class=\"math\">\n\\alpha &gt; \\frac{1}{3}\n</div>\n<p>The proportion of controlled network hashrate above which adopting the selfish mining strategy becomes profitable is <span class=\"math\">1/3</span>. That is the worst case scenario for a selfish miner, i.e. the selfish miner can never get any portion of the rest of the network to mine on top of its own block in the event of a 1-block race.</p>\n<h2><a name=\"p-5233-selfish-mining-simulation-6\" class=\"anchor\" href=\"#p-5233-selfish-mining-simulation-6\"></a>Selfish mining simulation</h2>\n<p>Besides, i have implemented a simple-yet-realistic simulation of the Bitcoin mining process. The simulation advances time by steps of 1ms, samples the next block interval from an exponential distribution and picks which miner found it depending on its share of network hashrate controlled. The simulation takes into account (simplified) block propagation: each miner has a setting for how long it takes before all the other miners see a block it broadcast.</p>\n<p>I have implemented the worst-case Selfish Mining strategy (<span class=\"math\">\\gamma = 0</span>) in this simulation. The result from running the simulation with various sets of miners with different hashrates confirms the finding of the paper that past a certain hashrate threshold it is more profitable for a miner to adopt the Selfish Mining strategy regardless of the <span class=\"math\">\\gamma</span> parameter. However in my simulation i have this parameter between 36% and 37%. It should also not be overlooked that adopting this strategy would incur significant cost to the selfish miner in the short run which it would only make up for after the difficulty adjusts, which the simulation does not model.</p>\n<p>You can try for yourself here:\n</p><aside class=\"onebox githubrepo\" data-onebox-src=\"https://github.com/darosior/miningsimulation\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/darosior/miningsimulation\" target=\"_blank\" rel=\"noopener\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <div class=\"github-row\" data-github-private-repo=\"false\">\n  <img width=\"690\" height=\"344\" src=\"https://delvingbitcoin.org/uploads/default/optimized/2X/4/4224c7825cbff2e93e7a7ec429068b2b083a1d36_2_690x344.png\" class=\"thumbnail\" data-dominant-color=\"F1EDEF\">\n\n  <h3><a href=\"https://github.com/darosior/miningsimulation\" target=\"_blank\" rel=\"noopener\">GitHub - darosior/miningsimulation: Simulation of the Bitcoin mining process taking...</a></h3>\n\n    <p><span class=\"github-repo-description\">Simulation of the Bitcoin mining process taking into account block propagation time and alternate strategies such as selfish mining.</span></p>\n</div>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>Here is an example result with 5 miners after 100 days:</p>\n<pre><code class=\"lang-auto\">After 8640000s (100d) and 9806 blocks found:\n  - Miner 0 (10% of network hashrate) found 872 blocks i.e. 8.89251% of blocks. Stale rate: 64.6789%.\n  - Miner 1 (15% of network hashrate) found 1333 blocks i.e. 13.5937% of blocks. Stale rate: 67.2918%.\n  - Miner 2 (15% of network hashrate) found 1281 blocks i.e. 13.0634% of blocks. Stale rate: 64.5589%.\n  - Miner 3 (20% of network hashrate) found 1725 blocks i.e. 17.5913% of blocks. Stale rate: 72.058%.\n  - Miner 4 (40% of network hashrate) found 4595 blocks i.e. 46.8591% of blocks. Stale rate: 25.3972%. ('selfish mining' strategy)\n</code></pre>\n<h2><a name=\"p-5233-credits-7\" class=\"anchor\" href=\"#p-5233-credits-7\"></a>Credits</h2>\n<p>Thanks to <a class=\"mention\" href=\"/u/clarashk\">@ClaraShk</a> for going over the math in the paper with me, explaining me some of the calculations in more details, and for giving me feedback on this post. (Any remaining mistake mine, of course.)</p>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 1,
  "updated_at": "2025-06-05T20:26:39.357Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 51,
  "reads": 21,
  "readers_count": 20,
  "score": 222.6,
  "yours": false,
  "topic_id": 1757,
  "topic_slug": "where-does-the-33-33-threshold-for-selfish-mining-come-from",
  "topic_title": "Where does the 33.33% threshold for selfish mining come from?",
  "topic_html_title": "Where does the 33.33% threshold for selfish mining come from?",
  "category_id": 7,
  "display_username": "Antoine Poinsot",
  "primary_group_name": null,
  "flair_name": "wg-consensus-cleanup",
  "flair_url": "/uploads/default/original/1X/856d779f9ec58484f3a96285a21a813538b689f6.png",
  "flair_bg_color": "",
  "flair_color": "",
  "flair_group_id": 43,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "Regular",
  "title_is_group": false,
  "bookmarked": false,
  "raw": "Clara Shikhelman and i went through the maths of the 2013 [research paper](https://arxiv.org/pdf/1311.0243) \"Majority is not enough\". Selfish mining is often ill-understood, and the paper goes quickly over some of the calculations. So i figured it would be helpful to post an explanation of the math so others (as well as my future self!) don't have to figure it out from scratch again.\n\n## The Selfish Mining strategy\n\nA selfish miner aims to contribute more blocks to the main chain than would be expected based on its share of the network\u2019s total hashrate. To achieve this it will attempt to cause more stale blocks to its competition than to itself, by only opportunistically revealing the blocks it mines. Past a certain threshold of network hashrate controlled, this strategy will bring more revenue to a miner than always publishing its blocks as soon as they are found.\n\nHow low this threshold is depends on another parameter than its share of the network hashrate. This is the ability of the selfish miner to learn about a block found by another miner before all other miners, and to reach them before the other miner's block does. This ability allows a selfish miner to get some portion of the rest of miners to mine on its own block rather than a competing one in the event of a 1-block race. The higher this ability, the lower the hashrate threshold at which selfish mining becomes profitable.\n\nHowever this ability is *not a requirement* for selfish mining to be profitable. Without it selfish mining becomes profitable for a miner controlling more than 1/3 of the network hashrate. In this post, we will only analyse this \"worst case\" scenario, that is all other miners will mine on top of the competing block and not the selfish miner's in the event of a 1-block race.\n\nThe selfish mining strategy (section 3.2 of the paper) is the following:\n- Upon finding a block:\n    - If we are in a 1-block race with the public chain, publish the conflicting block along with the newfound block;\n    - Else do not publish the block, start mining on top of it.\n- Upon another miner finding a block:\n    - If we do not have any unpublished block, switch to mining on top of it;\n    - Else if we have a single conflicting unpublished block, publish it and keep mining on top of our own block;\n    - Else if we have two conflicting unpublished blocks, publish them both and keep mining on top of them;\n    - Else (we have a conflicting chain of more than two blocks), publish our oldest block and keep mining on top of our private chain.\n\n## Selfish Mining analysis\n\n### State probabilities\n\nTo compute the expected revenue of this strategy, we need to first compute the probability associated with each of its states. We will analyze the state machine for a selfish miner with a proportion $\\alpha$ of the network hashrate, as introduced in Fig. 1 in section 4 of the paper. Our version will be slightly simplified since here we always assume the worst case scenario for the selfish miner (i.e. it can never propagate its own block first in the event of a 1-block race, in the paper $\\gamma = 0$).\n\n```mermaid\nstateDiagram-v2\n    direction LR\n    0 --> 0   : 1 - \u03b1\n    0' --> 0  : \u03b1\n    0' --> 0  : 1 - \u03b1\n    0 --> 1   : \u03b1\n    1 --> 0'  : 1 - \u03b1\n    1 --> 2   : \u03b1\n    2 --> 3   : \u03b1\n    2 --> 0   : 1 - \u03b1\n    3 --> ..  : \u03b1\n    3 --> 2   : 1 - \u03b1\n    .. --> 3  : 1 - \u03b1\n```\n\nEach state represents the lead of the selfish miner compared to the rest of the network. At state 0, the selfish miner mines on top of the same block as everyone else. At state 1, the selfish miner mines on top of a single unpublished block. At state 2, the selfish miner mines on top of two unpublished blocks. And so on. The selfish miner moves from State $n$ to state $n+1$ with probability $\\alpha$. It may stay on State 0 upon the rest of the network finding a block (probability $1 - \\alpha$). State 0' represents a 1-block race between the selfish miner and the rest of the network. It happens when the selfish miner had a one block lead and the rest of the network found a block. The race is resolved by either the selfish miner finding another block on top of its own (probability $\\alpha$) or the rest of the network finding another block on top of the other one (probability $1 - \\alpha$). In both cases the selfish miner then moves on to mining on top of the same block as the rest of the network.\n\nThe above state machine is a [Markov Chain](https://en.wikipedia.org/wiki/Markov_chain) with the following state transition matrix:\n$$\nP =\n\\begin{array}{c@{\\hspace{2pt}}l}\n   & \\begin{array}{cccccc}\n&&&&& \\text{to:} &&& \\\\\n    & \\text{0'} && 0 && 1 && 2 && 3 & \\cdots\n   \\end{array} \\\\\n\\begin{array}{cc}\n  &\\text{0'} \\\\\n  &0 \\\\\n  \\text{from:}&1 \\\\\n  &2 \\\\\n  &3 \\\\\n  &\\vdots\n\\end{array}\n&\n\\left(\n\\begin{array}{cccccc}\n  0          & 1          & 0      & 0          & 0      & \\cdots \\\\\n  0          & 1 - \\alpha & \\alpha & 0          & 0      & \\cdots \\\\\n  1 - \\alpha & 0          & 0      & \\alpha     & 0      & \\cdots \\\\\n  0          & 1 - \\alpha & 0      & 0          & \\alpha & \\cdots \\\\\n  0          & 0          & 0      & 1 - \\alpha & 0      & \\cdots \\\\\n  \\vdots     & \\vdots     & \\vdots & \\vdots     & \\vdots & \\ddots \\\\\n\\end{array}\n\\right)\n\\end{array}\n$$\n\nBecause the above Markov Chain is aperiodic and irreducible we have that it has [stationary distribution](https://en.wikipedia.org/wiki/Discrete-time_Markov_chain#Stationary_distributions) $\\begin{pmatrix} P_{0'} & P_{0} & P_{1} & P_{2} & P_{3} & \\cdots \\end{pmatrix}$ with:\n$$\n\\begin{pmatrix} P_{0'} & P_{0} & P_{1} & P_{2} & P_{3} & \\cdots \\end{pmatrix}\n*\n\\begin{pmatrix}\n0          & 1          & 0      & 0          & 0      & 0      & \\cdots \\\\\n0          & 1 - \\alpha & \\alpha & 0          & 0      & 0      & \\cdots \\\\\n1 - \\alpha & 0          & 0      & \\alpha     & 0      & 0      & \\cdots \\\\\n0          & 1 - \\alpha & 0      & 0          & \\alpha & 0      & \\cdots \\\\\n0          & 0          & 0      & 1 - \\alpha & 0      & \\alpha & \\cdots \\\\\n\\vdots     & \\vdots     & \\vdots & \\vdots     & \\vdots & \\vdots & \\ddots \\\\\n\\end{pmatrix}\n=\n\\begin{pmatrix} P_{0'} & P_{0} & P_{1} & P_{2} & P_{3} & \\cdots \\end{pmatrix}\n$$\n\nFrom which we derive the following system of equations:\n$$\n\\left\\{\n\\begin{array}{ll}\nP_{0'} = (1 - \\alpha) P_{1} \\\\\nP_0 = (1 - \\alpha) P_0 + (1 - \\alpha) P_2 + 1 P_{0'} \\\\\nP_1 = \\alpha P_0 \\\\\nP_2 = \\alpha P_1 + (1 - \\alpha) P_3 \\\\\n\\end{array}\n\\right.\n$$\n\nFrom this system of equations we start by re-arranging the second equation: \n$$\n\\begin{align*}\nP_0 &= P_0 - \\alpha P_0 + (1 - \\alpha) P_2 + P_{0'} \\\\\n\\implies 0 &= - \\alpha P_0 + (1 - \\alpha) P_2 + P_{0'}\n\\end{align*}\n$$\n\nThis gives us $(0)$:\n$$\nP_{0'} = \\alpha P_0 - (1 - \\alpha) P_2\n$$\n\nAnd $(1)$:\n$$\n\\alpha P_0 = P_{0'} + (1 - \\alpha) P_2\n$$\n\nRe-arranging the first equation from the system above and substituting per $(0)$ and the third equation from the system we have:\n$$\n\\begin{align*}\nP_{0'} &= (1 - \\alpha) P_1 \\\\ \\implies\n\\alpha P_1 &= P_1 - P_{0'} \\\\ \\implies\n\\alpha P_1 &= \\alpha P_0 - \\alpha P_0 + (1 - \\alpha) P_2 \\\\ \\implies\n\\alpha P_1 &= (1 - \\alpha) P_2\n\\end{align*}\n$$\n\nNow starting from $(1)$ and substituting per the first equation we have:\n$$\n\\alpha P_0 = P_{0'} + (1 - \\alpha) P_2 \\\\ \\implies\n\\alpha P_0 = (1 - \\alpha) P_{1} + (1 - \\alpha) P_2\n$$\n\nTherefore we have:\n$$\n\\left\\{\n\\begin{array}{ll}\n\\alpha P_0 = (1 - \\alpha) P_{1} + (1 - \\alpha) P_2 \\\\\nP_{0'} = (1 - \\alpha) P_{1} \\\\\n\\alpha P_1 = (1 - \\alpha) P_2\n\\end{array}\n\\right.\n$$\n\nWe have effectively derived the first three equations from the system of equations presented in section 4.1 of the paper.\n\nThe next two equations used in the calculation of state probabilities in the paper are $P_{0'} + \\sum_{k=0}^\\infty P_k = 1$ and $\\forall k \\ge 2: \\alpha P_k = (1 - \\alpha) P_{k+1}$. The former comes by definition as these are all the possible states and the latter can be proven by induction for $k \\ge 1$:\n- We have shown above that $\\alpha P_1 = (1 - \\alpha) P_2$. Therefore $P_k = (1 - \\alpha) P_{k+1}$ is true for $k=1$ (base case).\n- Now per the transition matrix $P$ above and stationary distribution property, $P_k = \\alpha P_{k-1} + (1 - \\alpha) P_{k+1}$. Assuming $\\alpha P_{k-1} = (1 - \\alpha) P_{k}$ (our induction hypothesis) we have $P_k = (1 - \\alpha) P_{k} + (1 - \\alpha) P_{k+1} \\implies \\alpha P_k = (1 - \\alpha) P_{k+1}.$\n- Therefore it holds that $\\forall k \\ge 1: \\alpha P_k = (1 - \\alpha) P_{k+1}$ (and of course $\\forall k \\ge 2: \\alpha P_k = (1 - \\alpha) P_{k+1}$ which we'll use below).\n\nWe have derived the five equations used in Appendix A of the paper to calculate the state probabilities $P_0$, $P_{0'}$, $P_1$, $\\forall k \\ge 2: P_k$.  Let's now go through the calculation in Appendix A step by step. The goal here is to express all state probabilities in terms of $\\alpha$. This is achieved by first expressing $P_0$, $P_{0'}$, and $\\forall k \\ge 2: P_k$ in terms of $P_1$.\n\nWe start with the probability of $\\forall k \\ge 2: P_k$. We have that $\\alpha P_k = (1 - \\alpha) P_{k+1}$. Therefore $P_{k+1} = \\frac{\\alpha}{1-\\alpha}P_k = \\frac{\\alpha}{1-\\alpha}\\frac{\\alpha}{1-\\alpha}P_{k-1} = (\\prod_{i=2}^{k+1} \\frac{\\alpha}{1 - \\alpha}) P_{1} = \\frac{\\alpha}{1 - \\alpha}^{k} P_1$. Therefore we have:\n$$\n\\forall k \\ge 2: P_k = \\frac{\\alpha}{1 - \\alpha}^{k-1} P_1\n$$\n\nThen (in an alternative manner to the one used in the paper) we can simply substitute the third equation in our system above in the first equation: $\\alpha P_0 = (1 - \\alpha) P_{1} + (1 - \\alpha) P_2 \\implies \\alpha P_0 = (1 - \\alpha) P_{1} + \\alpha P_1 \\implies \\alpha P_0 = P_1$.\n\nThe next step is to express $P_{0'} + \\sum_{k=0}^\\infty P_k = 1$ in terms of $P_1$. We start by stripping the $k = 0$ case from the sum and using the property we just derived above for $k \\ge 2$ (which is trivially true for $k = 1$) to get $P_{0'} + P_0 + \\sum_{k=1}^\\infty P_k = 1 \\implies P_{0'} + P_0 + \\sum_{k=1}^\\infty (\\frac{\\alpha}{1 - \\alpha}^{k-1} P_1) = 1$. From there we can substitute $P_{0'}$ from the first equation in the system above and $P_0$ using the property derived in the previous step. Therefore we have:\n$$\n(1 - \\alpha) P_{1} + \\frac{1}{\\alpha} P_1 + \\sum_{k=1}^\\infty (\\frac{\\alpha}{1 - \\alpha}^{k-1} P_1) = 1\n$$\n\nFrom this we can deduce the probability for every state. Let's start with $P_1$. Using the formula for geometric series and re-arranging:\n$$\n\\begin{align*}\n&(1 - \\alpha) P_1 + \\frac{P_1}{\\alpha} + \\frac{P_1}{1 - \\frac{\\alpha}{1 - \\alpha}} &= 1 \\\\\n\\implies &P_1 (1 - \\alpha + \\frac{1}{\\alpha} + \\frac{1}{1 - \\frac{\\alpha}{1 - \\alpha}}) &= 1 \\\\\n\\implies &P_1 (\\frac{\\alpha (1 - \\alpha) + 1}{\\alpha} + \\frac{1}{1 - \\frac{\\alpha}{1 - \\alpha}}) &= 1 \\\\\n\\implies &P_1 \\frac{(\\alpha (1 - \\alpha) + 1) (1 - \\frac{\\alpha}{1 - \\alpha}) + \\alpha}{\\alpha (1 - \\frac{\\alpha}{1 - \\alpha})} &= 1 \\\\\n\\implies &P_1 \\frac{\\alpha (1 - \\alpha) - \\frac{\\alpha^2 (1 - \\alpha)}{1 - \\alpha} + 1 - \\frac{\\alpha}{1 - \\alpha} + \\alpha}{\\frac{-2 \\alpha^2 + \\alpha}{1 - \\alpha}} &= 1 \\\\\n\\implies &P_1 \\frac{-2 \\alpha^2 + \\frac{\\alpha - 2 \\alpha^2}{1 - \\alpha} + 1}{\\frac{-2 \\alpha^2 + \\alpha}{1 - \\alpha}} &= 1 \\\\\n\\implies &P_1 \\frac{-2 \\alpha^2 + 2 \\alpha^3 + \\alpha - 2 \\alpha^2 + 1}{-2 \\alpha^2 + \\alpha} &= 1 \\\\\n\\implies &P_1 = \\frac{-2 \\alpha^2 + \\alpha}{2 \\alpha^3 -4 \\alpha^2 + 1}\n\\end{align*}\n$$\n\nNow for $P_0$ we can simply substitute:\n$$\n\\begin{align*}\nP_0 &= \\frac{P_1}{\\alpha} \\\\\n\\implies P_0 &= \\frac{-2 \\alpha^2 + \\alpha}{2 \\alpha^4 -4 \\alpha^3 + \\alpha}\n\\end{align*}\n$$\n\nSimilarly for $P_{0'}$:\n$$\n\\begin{align*}\nP_{0'} &= (1 - \\alpha) P_1 \\\\\n\\implies P_{0'} &= \\frac{2 \\alpha^3 - 3 \\alpha^2 + \\alpha}{2 \\alpha^3 -4 \\alpha^2 + 1}\n\\end{align*}\n$$\n\nThis concludes our analysis of the state probabilities. We have:\n$$\n\\left\\{\n\\begin{array}{ll}\nP_{0'} &= \\frac{2 \\alpha^3 - 3 \\alpha^2 + \\alpha}{2 \\alpha^3 -4 \\alpha^2 + 1} \\\\\nP_0 &= \\frac{-2 \\alpha^2 + \\alpha}{2 \\alpha^4 -4 \\alpha^3 + \\alpha} \\\\\nP_1 &= \\frac{-2 \\alpha^2 + \\alpha}{2 \\alpha^3 -4 \\alpha^2 + 1} \\\\\n\\forall k \\ge 2: P_k &= \\frac{\\alpha}{1 - \\alpha}^{k-1} \\frac{-2 \\alpha^2 + \\alpha}{2 \\alpha^3 -4 \\alpha^2 + 1} \\\\\n\\end{array}\n\\right.\n$$\n\n### Expected revenue\n\nLet's now move on to section 4.2 of the paper, which analyzes the revenue of a selfish miner. This can be analyzed by looking at the proportion of blocks included in the best chain found by the selfish miner. To this end the paper defines $r_{pool}$, the proportion of blocks found by the selfish miner, and $r_{others}$, the proportion of blocks found by the rest of the network. Note that because of the high rate of stale blocks, $r_{pool} + r_{others}$ is well below $1$. Due to the difficulty adjustment (which disregards stale blocks), the revenue of the selfish miner are therefore $R = \\frac{r_{pool}}{r_{pool} + r_{others}}$.\n\nLet's express $r_{pool}$ and $r_{others}$ in terms of the state probabilities we derived in the previous section. Note we are still using the $\\gamma = 0$ simplification compared to section 4.2 of the paper, i.e. in state $0'$ no other miner mine on top of the selfish miner's block.\n\nIn our model the states in which a selfish miner gets one (or more) block(s) in the best chain are:\n- In state $0'$ when it wins the race, both the block that is being raced for and the block found on top of it will be included in the best chain (i.e. reward of 2 blocks);\n- In state $2$ when the rest of the network finds a block, the selfish miner will get both its block included in the best chain (i.e. reward of 2 blocks);\n- In state $i \\ge 3$ when the rest of the network finds a block (i.e. is catching up to the selfish miner's longer private chain), the selfish miner broadcast one of its block that is guaranteed to be included in the best chain (i.e. reward of 1 block) eventually when the last two blocks are broadcast in state $2$.\n\nTherefore we have:\n$$\nr_{pool} = 2 P_{0'} \\alpha + 2 P_{2} (1 - \\alpha) + 1 P_{i \\gt 2} (1 - \\alpha) \n$$\n\nSimilarly the rest of the miners get one (or more) block(s) in the best chain in the following scenarii:\n- In state $0'$ when they win the race, both the block that is being raced for and the block found on top of it are included in the best chain (i.e. reward of 2 blocks);\n- In state $0$ when they find a block it will be included in the best chain as the selfish miner switches to mining on top of it (i.e. reward of 1 block).\n\nTherefore we have:\n$$\nr_{others} = 2 P_{0'} (1 - \\alpha) + P_0 (1 - \\alpha)\n$$\n\n### Profitability\n\nIt becomes (eventually) profitable for a miner to follow the selfish mining strategy when the proportion of blocks it finds $R$ is greater than the proportion of network hashrate it controls $\\alpha$. We can verify the findings discussed in section 4.4 of the paper by solving this inequality using the equations from the previous section:\n$$\nR > \\alpha \\\\\n\\implies \\frac{r_{pool}}{r_{pool} + r_{others}} > \\alpha \\\\\n$$\n\nWe can express $r_{pool}$ and $r_{others}$ in terms of $\\alpha$ using the state probabilities we derived previously.\n\n$$\n\\begin{align*}\nr_{others} &= 2 P_{0'} (1 - \\alpha) + P_0 (1 - \\alpha) \\\\\n&= 2 P_1 (1 - \\alpha)^2 + \\frac{P_1}{\\alpha} (1 - \\alpha) \\\\\n&= P_1 (1 - \\alpha) (2 (1 - \\alpha) + \\frac{1}{\\alpha})\n\\end{align*}\n$$\n\n$$\n\\begin{align*}\nr_{pool} &= 2 P_{0'} \\alpha + 2 P_{2} (1 - \\alpha) + 1 P_{i \\gt 2} (1 - \\alpha) \\\\\n&= 2 P_1 (1 - \\alpha) \\alpha + 2 \\frac{\\alpha}{1 - \\alpha} P_1 (1 - \\alpha) + \\sum_{i = 3}^\\infty \\frac{\\alpha}{1 - \\alpha}^{i-1} P_1 (1 - \\alpha) \\\\\n&= 2 P_1 (1 - \\alpha) \\alpha + 2 P_1 \\alpha + (\\frac{1}{1 - \\frac{\\alpha}{1 - \\alpha}} - \\frac{\\alpha}{1 - \\alpha}^{0} - \\frac{\\alpha}{1 - \\alpha}^1) P_1 (1 - \\alpha) \\\\\n&= 2 P_1 (1 - \\alpha) \\alpha + 2 P_1 \\alpha + (\\frac{1}{1 - \\frac{\\alpha}{1 - \\alpha}} - 1 - \\frac{\\alpha}{1 - \\alpha}) P_1 (1 - \\alpha) \\\\\n&= 2 P_1 (1 - \\alpha) \\alpha + 2 P_1 \\alpha + \\frac{\\alpha^2}{(1 - \\alpha) (1 - 2 \\alpha)} P_1 (1 - \\alpha) \\\\\n&= P_1 \\alpha (2 (1 - \\alpha) + \\frac{\\alpha}{(1 - 2 \\alpha)} + 2)\n\\end{align*}\n$$\n\nSubstituting in the equation we get:\n$$\n\\begin{align*}\n&\\frac{P_1 \\alpha (2 (1 - \\alpha) + \\frac{\\alpha}{(1 - 2 \\alpha)} + 2)\n}{P_1 \\alpha (2 (1 - \\alpha) + \\frac{\\alpha}{(1 - 2 \\alpha)} + 2)\n + P_1 (1 - \\alpha) (2 (1 - \\alpha) + \\frac{1}{\\alpha})} &> \\alpha \\\\\n\\implies &\\frac{\\alpha (2 (1 - \\alpha) + \\frac{\\alpha}{(1 - 2 \\alpha)} + 2)}{\\alpha (2 (1 - \\alpha) + \\frac{\\alpha}{(1 - 2 \\alpha)} + 2) + (1 - \\alpha) (2 (1 - \\alpha) + \\frac{1}{\\alpha})} &> \\alpha\n\\end{align*}\n$$\n\nPlugging it [into WolframAlpha](https://www.wolframalpha.com/input?i2d=true&i=+Divide%5Bx%5C%2840%292%5C%2840%291-x%5C%2841%29%2B+Divide%5Bx%2C%5C%2840%291-2x%5C%2841%29%5D%2B2%5C%2841%29%2Cx%5C%2840%292%5C%2840%291-x%5C%2841%29%2B+Divide%5Bx%2C%5C%2840%291-2x%5C%2841%29%5D%2B2%5C%2841%29%2B+%5C%2840%291-x%5C%2841%29%5C%2840%292%5C%2840%291-x%5C%2841%29+%2B+Divide%5B1%2Cx%5D%5C%2841%29%5D++%3E+x) gives us:\n$$\n\\alpha > \\frac{1}{3}\n$$\n\nThe proportion of controlled network hashrate above which adopting the selfish mining strategy becomes profitable is $1/3$. That is the worst case scenario for a selfish miner, i.e. the selfish miner can never get any portion of the rest of the network to mine on top of its own block in the event of a 1-block race.\n\n## Selfish mining simulation\n\nBesides, i have implemented a simple-yet-realistic simulation of the Bitcoin mining process. The simulation advances time by steps of 1ms, samples the next block interval from an exponential distribution and picks which miner found it depending on its share of network hashrate controlled. The simulation takes into account (simplified) block propagation: each miner has a setting for how long it takes before all the other miners see a block it broadcast.\n\nI have implemented the worst-case Selfish Mining strategy ($\\gamma = 0$) in this simulation. The result from running the simulation with various sets of miners with different hashrates confirms the finding of the paper that past a certain hashrate threshold it is more profitable for a miner to adopt the Selfish Mining strategy regardless of the $\\gamma$ parameter. However in my simulation i have this parameter between 36% and 37%. It should also not be overlooked that adopting this strategy would incur significant cost to the selfish miner in the short run which it would only make up for after the difficulty adjusts, which the simulation does not model.\n\nYou can try for yourself here:\nhttps://github.com/darosior/miningsimulation\n\nHere is an example result with 5 miners after 100 days:\n```\nAfter 8640000s (100d) and 9806 blocks found:\n  - Miner 0 (10% of network hashrate) found 872 blocks i.e. 8.89251% of blocks. Stale rate: 64.6789%.\n  - Miner 1 (15% of network hashrate) found 1333 blocks i.e. 13.5937% of blocks. Stale rate: 67.2918%.\n  - Miner 2 (15% of network hashrate) found 1281 blocks i.e. 13.0634% of blocks. Stale rate: 64.5589%.\n  - Miner 3 (20% of network hashrate) found 1725 blocks i.e. 17.5913% of blocks. Stale rate: 72.058%.\n  - Miner 4 (40% of network hashrate) found 4595 blocks i.e. 46.8591% of blocks. Stale rate: 25.3972%. ('selfish mining' strategy)\n```\n\n## Credits\n\nThanks to @ClaraShk for going over the math in the paper with me, explaining me some of the calculations in more details, and for giving me feedback on this post. (Any remaining mistake mine, of course.)",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 12,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Clara Shikhelman and i went through the maths of the 2013 <a href=\"https://arxiv.org/pdf/1311.0243\">research paper</a> \u201cMajority is not enough\u201d. Selfish mining is often ill-understood, and the paper goes quickly over some of the calculations. So i figured it would be helpful to post an explanation of the math so others (as well as my future sel&hellip;",
  "truncated": true,
  "post_url": "/t/where-does-the-33-33-threshold-for-selfish-mining-come-from/1757/1",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 2
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}