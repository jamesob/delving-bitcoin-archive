{
  "id": 5248,
  "name": "James O'Beirne",
  "username": "jamesob",
  "avatar_template": "/user_avatar/delvingbitcoin.org/jamesob/{size}/271_2.png",
  "created_at": "2025-06-07T14:06:24.476Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"instagibbs\" data-post=\"58\" data-topic=\"1509\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/instagibbs/48/28_2.png\" class=\"avatar\"> instagibbs:</div>\n<blockquote>\n<p>FYI: after discussion a while back, I hacked together very small loc changes that:</p>\n<ol>\n<li>Makes bare CTV a first class citizen</li>\n<li>Converts CTV into a push-onto-stack taproot-only opcode</li>\n</ol>\n</blockquote>\n</aside>\n<p>This is a cool patch, thanks for doing it.</p>\n<p>I still prefer the existing CTV impl. for a few reasons:</p>\n<ol>\n<li>Bare legacy CTV is upgradeable (i.e. &gt;32byte CTV hashes). Though you could make your patch upgradeable by returning true for any witV2 with a program size of over 32 bytes.</li>\n<li>In wit v0 CTV, you can have scripts that are more complicated than just a single CTV invocation, but avoid the Taproot control block overhead of 33vB (e.g. in <a href=\"https://github.com/jamesob/simple-ctv-vault/blob/7dd6c4ca25debb2140cdefb79b302c65d1b24937/main.py#L303-L316\">simple-ctv-vault</a>). 33vB may well be worth fretting over in the future.</li>\n<li>This is probably fringe, but one \u201cnice\u201d thing about bare CTV legacy scripts is that because they don\u2019t have an associated address, accidental address reuse by a human is impossible (i.e. erroneous send to an already-setup vault). <s>Of course your witV2 scheme doesn\u2019t define an address format, but it would be easy to.</s> Edit: witV2 by default <a href=\"https://github.com/bitcoin/bitcoin/blob/e2174378aa8a339c7be8b4e91311513ed520a16d/src/key_io.cpp#L68-L78\">uses bech32m addresses</a>.</li>\n</ol>",
  "post_number": 73,
  "post_type": 1,
  "posts_count": 71,
  "updated_at": "2025-06-07T16:06:31.512Z",
  "reply_count": 0,
  "reply_to_post_number": 58,
  "quote_count": 1,
  "incoming_link_count": 3,
  "reads": 13,
  "readers_count": 12,
  "score": 17.6,
  "yours": false,
  "topic_id": 1509,
  "topic_slug": "ctv-csfs-can-we-reach-consensus-on-a-first-step-towards-covenants",
  "topic_title": "CTV+CSFS: Can we reach consensus on a first step towards covenants?",
  "topic_html_title": "CTV+CSFS: Can we reach consensus on a first step towards covenants?",
  "category_id": 7,
  "display_username": "James O'Beirne",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 5,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"instagibbs, post:58, topic:1509\"]\nFYI: after discussion a while back, I hacked together very small loc changes that:\n\n1. Makes bare CTV a first class citizen\n2. Converts CTV into a push-onto-stack taproot-only opcode\n[/quote]\n\nThis is a cool patch, thanks for doing it.\n\nI still prefer the existing CTV impl. for a few reasons:\n\n1. Bare legacy CTV is upgradeable (i.e. >32byte CTV hashes). Though you could make your patch upgradeable by returning true for any witV2 with a program size of over 32 bytes.\n2. In wit v0 CTV, you can have scripts that are more complicated than just a single CTV invocation, but avoid the Taproot control block overhead of 33vB (e.g. in [simple-ctv-vault](https://github.com/jamesob/simple-ctv-vault/blob/7dd6c4ca25debb2140cdefb79b302c65d1b24937/main.py#L303-L316)). 33vB may well be worth fretting over in the future.\n3. This is probably fringe, but one \"nice\" thing about bare CTV legacy scripts is that because they don't have an associated address, accidental address reuse by a human is impossible (i.e. erroneous send to an already-setup vault). ~~Of course your witV2 scheme doesn't define an address format, but it would be easy to.~~ Edit: witV2 by default [uses bech32m addresses](https://github.com/bitcoin/bitcoin/blob/e2174378aa8a339c7be8b4e91311513ed520a16d/src/key_io.cpp#L68-L78).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 9,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "This is a cool patch, thanks for doing it. \nI still prefer the existing CTV impl. for a few reasons: \n\nBare legacy CTV is upgradeable (i.e. &gt;32byte CTV hashes). Though you could make your patch upgradeable by returning true for any witV2 with a program size of over 32 bytes.\nIn wit v0 CTV, you can &hellip;",
  "truncated": true,
  "post_url": "/t/ctv-csfs-can-we-reach-consensus-on-a-first-step-towards-covenants/1509/73",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}