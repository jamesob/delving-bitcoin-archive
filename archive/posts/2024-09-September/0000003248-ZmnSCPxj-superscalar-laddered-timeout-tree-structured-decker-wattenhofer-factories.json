{
  "id": 3248,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2024-09-23T06:46:21.024Z",
  "cooked": "<p>Another idea proposed in the Lightning proto dev summit is with LSP-assisted exit.  If a client exits from one factory with no intention to ever return to that factory (either by exiting onchain, or to a new factory during the dying period of the previous factory) then the client can use PTLCs to offer the private key it uses inside the factory.  For example, if client <code>A</code> wants to permanently exit using an LSP-assisted exit to an onchain address, then <code>A</code> can offer an in-factory PTLC to the LSP, where the payment point is the public key of <code>A</code>. Then the LSP has to make an onchain PTLC with the same payment point, which is claimable by <code>A</code>.  <code>A</code> can then claim the onchain PTLC into its own onchain address with a fresh keypair, revealing the scalar behind the payment point, which is equal to the private key of <code>A</code>.</p>\n<p>The advantage of this private key turnover is that if <code>A</code> and <code>B</code> are on the same leaf, <code>A</code> has performed this assisted exit and never comes online again, the LSP can, with <code>B</code> and its private key copy of <code>A</code>, sign a new leaf state, without <code>A</code> ever talking to the LSP ever again.  The LSP can even use the funds of the <code>A</code>-<code>L</code> channel to provide additional liquidity to the remaining client <code>B</code>!</p>\n<p>If the same mechanism is used for transferring from a dying factory to the next laddered factory, then if all clients exit the dying factory, the LSP is now in possession of all the private keys and can claim using the <code>A &amp; B &amp; ... &amp; G &amp; H</code> branch. This can be a Taproot keyspend path, which is just a single signature without revealing a special <code>OP_CLTV</code> script, and which is indistinguishable from many other P2TR spends, giving better privacy to the LSP (and by implication, its clients).  If all clients exit before the actual end-of-life of the channel factory (i.e. before the end of the dying phase) then the LSP can recover its funds \u201cearly\u201d, even, which might be strategically important in funding decisions.</p>\n<p>Because of this, the LSP may now have an incentive to cover some of the cost to perform an assisted exit \u2014 that is, the assisted exit can be cheaper, for the client, than the unilateral exit case, because the LSP has an advantage that it can sockpuppet the exiting client for the rest of the lifetime of the individual factory.  The LSP can offer to pay for the privilege of sockpuppeting the client when it assisted-exits, by reducing the cost (on the client) for exiting onchain.</p>",
  "post_number": 12,
  "post_type": 1,
  "updated_at": "2024-09-23T06:57:54.275Z",
  "reply_count": 0,
  "reply_to_post_number": 10,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 1.4,
  "yours": false,
  "topic_id": 1143,
  "topic_slug": "superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories",
  "topic_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "topic_html_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "ZmnSCPxj",
    "name": "ZmnSCPxj jxPCSnmZ",
    "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png"
  },
  "bookmarked": false,
  "raw": "Another idea proposed in the Lightning proto dev summit is with LSP-assisted exit.  If a client exits from one factory with no intention to ever return to that factory (either by exiting onchain, or to a new factory during the dying period of the previous factory) then the client can use PTLCs to offer the private key it uses inside the factory.  For example, if client `A` wants to permanently exit using an LSP-assisted exit to an onchain address, then `A` can offer an in-factory PTLC to the LSP, where the payment point is the public key of `A`. Then the LSP has to make an onchain PTLC with the same payment point, which is claimable by `A`.  `A` can then claim the onchain PTLC into its own onchain address with a fresh keypair, revealing the scalar behind the payment point, which is equal to the private key of `A`.\n\nThe advantage of this private key turnover is that if `A` and `B` are on the same leaf, `A` has performed this assisted exit and never comes online again, the LSP can, with `B` and its private key copy of `A`, sign a new leaf state, without `A` ever talking to the LSP ever again.  The LSP can even use the funds of the `A`-`L` channel to provide additional liquidity to the remaining client `B`!\n\nIf the same mechanism is used for transferring from a dying factory to the next laddered factory, then if all clients exit the dying factory, the LSP is now in possession of all the private keys and can claim using the `A & B & ... & G & H` branch. This can be a Taproot keyspend path, which is just a single signature without revealing a special `OP_CLTV` script, and which is indistinguishable from many other P2TR spends, giving better privacy to the LSP (and by implication, its clients).  If all clients exit before the actual end-of-life of the channel factory (i.e. before the end of the dying phase) then the LSP can recover its funds \"early\", even, which might be strategically important in funding decisions.\n\nBecause of this, the LSP may now have an incentive to cover some of the cost to perform an assisted exit --- that is, the assisted exit can be cheaper, for the client, than the unilateral exit case, because the LSP has an advantage that it can sockpuppet the exiting client for the rest of the lifetime of the individual factory.  The LSP can offer to pay for the privilege of sockpuppeting the client when it assisted-exits, by reducing the cost (on the client) for exiting onchain.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}