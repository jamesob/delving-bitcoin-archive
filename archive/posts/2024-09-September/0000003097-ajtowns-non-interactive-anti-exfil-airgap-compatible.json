{
  "id": 3097,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-09-04T03:39:06.312Z",
  "cooked": "<p>The notation there confuses me (if <code>e1</code> is <code>H(k1*G,pubkey,m1)</code>, then you can\u2019t choose <code>k1</code> depending on it, eg). On the offchance that anyone else also find it confusing, I\u2019d write the \u201cDark Smoothie\u201d approach as:</p>\n<pre><code class=\"lang-auto\">HMAC(s) = sha256(attacker secret, s)\nsecret = 256 bit wallet seed, encrypted to attacker\n\nr1 = HMAC(pubkey, m1)*privkey\nr2 = secret\n\ns1 = r1 + H(r1*G, pubkey, m1)*privkey\ns2 = r2 + H(r2*G, pubkey, m2)*privkey\n</code></pre>\n<p><code>(r1*G, s1, pubkey, m1)</code> and <code>(r2*G, s2, pubkey, m2)</code> are valid Schnorr signatures.</p>\n<p>The attacker can quickly check that <code>r1*G</code> matches <code>HMAC(pubkey, m1)*pubkey</code>, to work out which transactions are providing secrets. This first signature allows the attacker to determine <code>privkey</code>:</p>\n<pre><code class=\"lang-auto\">s1 = r1 + H(r1*G, pubkey, m1)*privkey\ns1 = (HMAC(pubkey, m1) + H(r1*G, pubkey, m1))*privkey\nprivkey = s1 / (HMAC(pubkey, m1) + H(r1*G, pubkey, m1))\n</code></pre>\n<p>But that might be a hardened privkey from a HD wallet, so to compromise the entire wallet you want the seed, for which we use the second signature, and the fact that we already know the privkey:</p>\n<pre><code class=\"lang-auto\">s2 = r2 + H(r2*G, pubkey, m2)*privkey\ns2 = secret + H(r2*G, pubkey, m2)*privkey\nsecret = H(r2*G, pubkey, m2)*privkey - s2\nseed = decrypt secret\n</code></pre>",
  "post_number": 15,
  "post_type": 1,
  "updated_at": "2024-09-04T03:39:06.312Z",
  "reply_count": 0,
  "reply_to_post_number": 14,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 0.6,
  "yours": false,
  "topic_id": 1081,
  "topic_slug": "non-interactive-anti-exfil-airgap-compatible",
  "topic_title": "Non interactive anti-exfil (airgap compatible)",
  "topic_html_title": "Non interactive anti-exfil (airgap compatible)",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "moonsettler",
    "name": "moonsettler",
    "avatar_template": "/user_avatar/delvingbitcoin.org/moonsettler/{size}/38_2.png"
  },
  "bookmarked": false,
  "raw": "The notation there confuses me (if `e1` is `H(k1*G,pubkey,m1)`, then you can't choose `k1` depending on it, eg). On the offchance that anyone else also find it confusing, I'd write the \"Dark Smoothie\" approach as:\n\n```\nHMAC(s) = sha256(attacker secret, s)\nsecret = 256 bit wallet seed, encrypted to attacker\n\nr1 = HMAC(pubkey, m1)*privkey\nr2 = secret\n\ns1 = r1 + H(r1*G, pubkey, m1)*privkey\ns2 = r2 + H(r2*G, pubkey, m2)*privkey\n```\n\n`(r1*G, s1, pubkey, m1)` and `(r2*G, s2, pubkey, m2)` are valid Schnorr signatures.\n\nThe attacker can quickly check that `r1*G` matches `HMAC(pubkey, m1)*pubkey`, to work out which transactions are providing secrets. This first signature allows the attacker to determine `privkey`:\n\n```\ns1 = r1 + H(r1*G, pubkey, m1)*privkey\ns1 = (HMAC(pubkey, m1) + H(r1*G, pubkey, m1))*privkey\nprivkey = s1 / (HMAC(pubkey, m1) + H(r1*G, pubkey, m1))\n```\n\nBut that might be a hardened privkey from a HD wallet, so to compromise the entire wallet you want the seed, for which we use the second signature, and the fact that we already know the privkey:\n\n```\ns2 = r2 + H(r2*G, pubkey, m2)*privkey\ns2 = secret + H(r2*G, pubkey, m2)*privkey\nsecret = H(r2*G, pubkey, m2)*privkey - s2\nseed = decrypt secret\n```",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}