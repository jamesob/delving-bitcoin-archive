{
  "id": 3203,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-09-17T02:00:23.698Z",
  "cooked": "<p>I think in comparison to <a href=\"https://github.com/jonasnick/taproot-ringsig\">taproot ring signatures</a> this doesn\u2019t require that the verifier have the full utxo set, just the corresponding \u201cutreexo\u201d root, which seems like a win.</p>\n<p>I don\u2019t think it\u2019s quite accurate to call this \u201cutreexo\u201d:</p>\n<blockquote>\n<p>The tool works with the UTXO set dump from Bitcoin Core. It uses this dump to create a <a href=\"https://dci.mit.edu/utreexo\">Utreexo</a> representation of the UTXO set</p>\n</blockquote>\n<p>The normal utreexo construction depends on the entire history of the utxo set, and can\u2019t just be reconstructed from the current utxo set (otherwise you\u2019d often need to rearrange utxos that weren\u2019t touched by a block when figuring out the new utreexo structure after a block comes in). So I think this is just a regular merkle tree of the utxo set, not really a \u201cutreexo\u201d thing per se.</p>\n<p>I don\u2019t see how this really works for lightning channel announcements \u2013 can\u2019t you just give a proof for a utxo as at block X, then spend it in block X+1? ie, at best, isn\u2019t this just proof-of-use-of-blockspace?</p>\n<p>Also, can\u2019t you use the same utxo multiple times with different blinding factors to advertise multiple lightning channels? If you make the \u201cverifier\u2019s public key\u201d (<code>P'</code> in <code>P' = P+bG</code>) be the channel\u2019s advertised public key (<code>musig(A,B)</code>?) that might be good enough to prevent selling utxos.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-09-17T02:00:23.698Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.4,
  "yours": false,
  "topic_id": 1142,
  "topic_slug": "proving-utxo-set-inclusion-in-zero-knowledge",
  "topic_title": "Proving UTXO set inclusion in zero-knowledge",
  "topic_html_title": "Proving UTXO set inclusion in zero-knowledge",
  "category_id": 8,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I think in comparison to [taproot ring signatures](https://github.com/jonasnick/taproot-ringsig) this doesn't require that the verifier have the full utxo set, just the corresponding \"utreexo\" root, which seems like a win.\n\nI don't think it's quite accurate to call this \"utreexo\":\n\n> The tool works with the UTXO set dump from Bitcoin Core. It uses this dump to create a [Utreexo](https://dci.mit.edu/utreexo) representation of the UTXO set\n\nThe normal utreexo construction depends on the entire history of the utxo set, and can't just be reconstructed from the current utxo set (otherwise you'd often need to rearrange utxos that weren't touched by a block when figuring out the new utreexo structure after a block comes in). So I think this is just a regular merkle tree of the utxo set, not really a \"utreexo\" thing per se.\n\nI don't see how this really works for lightning channel announcements -- can't you just give a proof for a utxo as at block X, then spend it in block X+1? ie, at best, isn't this just proof-of-use-of-blockspace?\n\nAlso, can't you use the same utxo multiple times with different blinding factors to advertise multiple lightning channels? If you make the \"verifier's public key\" (`P'` in `P' = P+bG`) be the channel's advertised public key (`musig(A,B)`?) that might be good enough to prevent selling utxos.",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}