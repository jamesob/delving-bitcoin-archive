{
  "id": 3210,
  "name": "Johan T. Halseth",
  "username": "halseth",
  "avatar_template": "/user_avatar/delvingbitcoin.org/halseth/{size}/198_2.png",
  "created_at": "2024-09-17T08:50:38.823Z",
  "cooked": "<blockquote>\n<p>So I think this is just a regular merkle tree of the utxo set, not really a \u201cutreexo\u201d thing per se.</p>\n</blockquote>\n<p>Yes, you are right. This could have been done with just a regular merkle tree over the UTXO set, but I chose to use the utreexo data structure since it it is pretty straight forward to convert it to the \u201cproper\u201d utreexo representation that is per block deterministic.</p>\n<blockquote>\n<p>I don\u2019t see how this really works for lightning channel announcements \u2013 can\u2019t you just give a proof for a utxo as at block X, then spend it in block X+1? ie, at best, isn\u2019t this just proof-of-use-of-blockspace?</p>\n</blockquote>\n<p>This is a very good point. I can prove that a channel was opened, but there is no guarantee that it will stay open. Maybe one could require the proofs to be \u201crefreshed\u201d every X blocks? Each proof could also contain a proof of channel-age.</p>\n<blockquote>\n<p>Also, can\u2019t you use the same utxo multiple times with different blinding factors to advertise multiple lightning channels? If you make the \u201cverifier\u2019s public key\u201d (<code>P'</code> in <code>P' = P+bG</code> ) be the channel\u2019s advertised public key (<code>musig(A,B)</code> ?) that might be good enough to prevent selling utxos.</p>\n</blockquote>\n<p>The current setup is proving that the proper public key (not the blinded one) is commited to in the utreexo structure, so the blinding factor doesn\u2019t matter. But there is currently no way of telling whether a public key has been reused for multiple proofs, so that should be added for the LN use case.</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2024-09-17T08:50:38.823Z",
  "reply_count": 0,
  "reply_to_post_number": 3,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 2.0,
  "yours": false,
  "topic_id": 1142,
  "topic_slug": "proving-utxo-set-inclusion-in-zero-knowledge",
  "topic_title": "Proving UTXO set inclusion in zero-knowledge",
  "topic_html_title": "Proving UTXO set inclusion in zero-knowledge",
  "category_id": 8,
  "display_username": "Johan T. Halseth",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "ajtowns",
    "name": "Anthony Towns",
    "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png"
  },
  "bookmarked": false,
  "raw": "> So I think this is just a regular merkle tree of the utxo set, not really a \u201cutreexo\u201d thing per se.\n\nYes, you are right. This could have been done with just a regular merkle tree over the UTXO set, but I chose to use the utreexo data structure since it it is pretty straight forward to convert it to the \"proper\" utreexo representation that is per block deterministic.\n\n> I don\u2019t see how this really works for lightning channel announcements \u2013 can\u2019t you just give a proof for a utxo as at block X, then spend it in block X+1? ie, at best, isn\u2019t this just proof-of-use-of-blockspace?\n\nThis is a very good point. I can prove that a channel was opened, but there is no guarantee that it will stay open. Maybe one could require the proofs to be \"refreshed\" every X blocks? Each proof could also contain a proof of channel-age.\n\n> Also, can\u2019t you use the same utxo multiple times with different blinding factors to advertise multiple lightning channels? If you make the \u201cverifier\u2019s public key\u201d (`P'` in `P' = P+bG` ) be the channel\u2019s advertised public key (`musig(A,B)` ?) that might be good enough to prevent selling utxos.\n\nThe current setup is proving that the proper public key (not the blinded one) is commited to in the utreexo structure, so the blinding factor doesn't matter. But there is currently no way of telling whether a public key has been reused for multiple proofs, so that should be added for the LN use case.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 163,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}