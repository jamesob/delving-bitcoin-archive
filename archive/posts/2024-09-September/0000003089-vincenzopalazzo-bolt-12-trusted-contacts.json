{
  "id": 3089,
  "name": "",
  "username": "vincenzopalazzo",
  "avatar_template": "/user_avatar/delvingbitcoin.org/vincenzopalazzo/{size}/11_2.png",
  "created_at": "2024-09-02T15:06:10.533Z",
  "cooked": "<p>Thanks, t-bast, for working on this. I had been thinking about implementing something similar in CLN a while back.</p>\n<aside class=\"quote no-group\" data-username=\"harding\" data-post=\"2\" data-topic=\"1046\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>Sorry if this is a foolish question, but is this something that requires cryptography to solve? If Alice wants Bob to know that a payment came from her, why not simply add a text <code>from</code> field to the onion that gets encrypted to the recipient that can say: <code>from: Alice</code>?</p>\n</blockquote>\n</aside>\n<p>This makes sense if you\u2019re not building a payment system that requires verification. For example, today you can use one of the Bolt12 methods used by Ocean to send a payout to a miner, and someone could try to send a payment with a spam description. This is one reason why Ocean includes a description, so if a spammer sends a payment, the miner just ends up with more money.</p>\n<p>Currently, there\u2019s no way to identify that the payer wasn\u2019t Ocean without going to Ocean and asking, \u2018Hey, was this you?\u2019 Ocean can then prove with the <code>invoice_payer_id</code> that it was someone else.</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"harding\" data-post=\"1\" data-topic=\"1046\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/harding/48/6_2.png\" class=\"avatar\"> harding:</div>\n<blockquote>\n<p>When Alice wants to pay Bob (who is one of her trusted contacts), Alice can optionally decide to use her own <code>contact_key</code> to reveal her identity to Bob. Bob should only learn that the payment comes from Alice if Alice is also on Bob\u2019s contacts list.</p>\n</blockquote>\n</aside>\n<p>Personally, I prefer Option 1 because it\u2019s simple (and it aligns with my design <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"> so I\u2019m biased here).</p>\n<p>However, I\u2019m not sure I fully understand the use case for Option 2. Why do you think a user might need a per-contact <code>invreq_payer_id</code>?</p>\n<p>Probably regarding privacy for the <code>invreq_payer_id</code>? Do you think this could be an additional feature?</p>\n<p>Finally, I also think that bLIP-31 is a bit overcomplicated for a feature like this, but I want to think more about it. It\u2019s possible I haven\u2019t encountered a use case where this protocol could be used for exchanging contact IDs.</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2024-09-02T15:06:10.533Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 2,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 1.4,
  "yours": false,
  "topic_id": 1046,
  "topic_slug": "bolt-12-trusted-contacts",
  "topic_title": "Bolt 12 Trusted Contacts",
  "topic_html_title": "Bolt 12 Trusted Contacts",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thanks, t-bast, for working on this. I had been thinking about implementing something similar in CLN a while back.\n\n[quote=\"harding, post:2, topic:1046\"]\nSorry if this is a foolish question, but is this something that requires cryptography to solve? If Alice wants Bob to know that a payment came from her, why not simply add a text `from` field to the onion that gets encrypted to the recipient that can say: `from: Alice`?\n[/quote]\n\nThis makes sense if you're not building a payment system that requires verification. For example, today you can use one of the Bolt12 methods used by Ocean to send a payout to a miner, and someone could try to send a payment with a spam description. This is one reason why Ocean includes a description, so if a spammer sends a payment, the miner just ends up with more money.\n\nCurrently, there's no way to identify that the payer wasn\u2019t Ocean without going to Ocean and asking, 'Hey, was this you?' Ocean can then prove with the `invoice_payer_id` that it was someone else.\n\n[quote=\"harding, post:1, topic:1046\"]\nWhen Alice wants to pay Bob (who is one of her trusted contacts), Alice can optionally decide to use her own `contact_key` to reveal her identity to Bob. Bob should only learn that the payment comes from Alice if Alice is also on Bob\u2019s contacts list.\n[/quote]\n\nPersonally, I prefer Option 1 because it\u2019s simple (and it aligns with my design :slight_smile: so I\u2019m biased here).\n\nHowever, I\u2019m not sure I fully understand the use case for Option 2. Why do you think a user might need a per-contact `invreq_payer_id`?\n\nProbably regarding privacy for the `invreq_payer_id`? Do you think this could be an additional feature?\n\nFinally, I also think that bLIP-31 is a bit overcomplicated for a feature like this, but I want to think more about it. It's possible I haven't encountered a use case where this protocol could be used for exchanging contact IDs.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 13,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}