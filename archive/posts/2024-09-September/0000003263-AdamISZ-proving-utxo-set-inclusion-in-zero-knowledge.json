{
  "id": 3263,
  "name": "Adam Gibson",
  "username": "AdamISZ",
  "avatar_template": "/user_avatar/delvingbitcoin.org/adamisz/{size}/418_2.png",
  "created_at": "2024-09-24T20:53:35.232Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"halseth\" data-post=\"12\" data-topic=\"1142\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/halseth/48/198_2.png\" class=\"avatar\"> halseth:</div>\n<blockquote>\n<p>What are the limitations to what you can prove about the UTXO using aut-ct? (at the extreme, can you prove something like \u201cI know a witness that let me execute the script to this utxo\u201d ?)</p>\n</blockquote>\n</aside>\n<p>At a rough assessment, without delving into detail, it will be definitely straightforwardly possible for sPKs that are just logical conjunctions of keys or otherwise use EC arithmetic (thinking taproot style tweaks), since that\u2019s in EC-land so to speak; for sPKs that are based on hash locks, then clearly it\u2019s problematic for the usual reason: proofs of non-algebraic hashes (like SHA2) in such a system are extremely unwieldy. (which is of course why i use only taproot anon sets in these examples).</p>",
  "post_number": 14,
  "post_type": 1,
  "posts_count": 16,
  "updated_at": "2024-09-24T20:53:35.232Z",
  "reply_count": 0,
  "reply_to_post_number": 12,
  "quote_count": 1,
  "incoming_link_count": 1,
  "reads": 29,
  "readers_count": 28,
  "score": 10.8,
  "yours": false,
  "topic_id": 1142,
  "topic_slug": "proving-utxo-set-inclusion-in-zero-knowledge",
  "topic_title": "Proving UTXO set inclusion in zero-knowledge",
  "topic_html_title": "Proving UTXO set inclusion in zero-knowledge",
  "category_id": 8,
  "display_username": "Adam Gibson",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"halseth, post:12, topic:1142\"]\nWhat are the limitations to what you can prove about the UTXO using aut-ct? (at the extreme, can you prove something like \u201cI know a witness that let me execute the script to this utxo\u201d ?)\n[/quote]\n\nAt a rough assessment, without delving into detail, it will be definitely straightforwardly possible for sPKs that are just logical conjunctions of keys or otherwise use EC arithmetic (thinking taproot style tweaks), since that's in EC-land so to speak; for sPKs that are based on hash locks, then clearly it's problematic for the usual reason: proofs of non-algebraic hashes (like SHA2) in such a system are extremely unwieldy. (which is of course why i use only taproot anon sets in these examples).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 343,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "At a rough assessment, without delving into detail, it will be definitely straightforwardly possible for sPKs that are just logical conjunctions of keys or otherwise use EC arithmetic (thinking taproot style tweaks), since that\u2019s in EC-land so to speak; for sPKs that are based on hash locks, then c&hellip;",
  "truncated": true,
  "post_url": "/t/proving-utxo-set-inclusion-in-zero-knowledge/1142/14",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}