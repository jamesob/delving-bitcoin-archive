{
  "id": 3098,
  "name": "David A. Harding",
  "username": "harding",
  "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/6_2.png",
  "created_at": "2024-09-04T11:08:40.364Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"43\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>sha256 includes the size of its input when calculating the hash, so implicit in being provided a midstate is being provided the number of bytes that went into the midstate, in bitcoin that\u2019s <code>s</code> (the midstate), <code>buf</code> (the remaining bytes that will build the next chunk) and <code>bytes</code> (the number of bytes that went into both those things). So a preimage for the txid of a very large coinbase tx can still be reduced to as few as 104 bytes.</p>\n</blockquote>\n</aside>\n<p>It took me a while to figure out how knowing the number of bytes used to\ncreate a digest was an alternative to validating the structure of a\ncoinbase transaction.  Do I accurately understand that you propose the\nfollowing:</p>\n<ol>\n<li>\n<p>Prover provides the coinbase transaction midstate (including size)\nfor all but the final chunk of the first of the double SHA256 hashes,\nplus the final chunk.</p>\n</li>\n<li>\n<p>Prover provides a partial merkle branch for the coinbase transaction.</p>\n</li>\n<li>\n<p>Verifier uses the midstate (including size) and the final chunk to\ngenerate the coinbase txid.</p>\n</li>\n<li>\n<p>Verifier checks all provided nodes in the partial merkle branch are\non the right side (i.e., that the branch is for the first transaction in\na block, i.e. the coinbase transaction).</p>\n</li>\n<li>\n<p>Verifier inserts its generated coinbase txid into the partial merkle\nbranch and verifies up the tree until it connects to the merkle root in\nthe block header.</p>\n</li>\n</ol>\n<p>After the above process, the verifier can be certain of the following:</p>\n<ul>\n<li>\n<p>The number of bytes used to generate the digest (txid).</p>\n<ul>\n<li>\n<p>If the number of bytes is not equal to 64, then the digested data\nmust have been a transaction (or the block was invalid).</p>\n</li>\n<li>\n<p>If the number of bytes is equal to 64, then the digested data may\nhave been either a transaction or concatenated digests for an\ninternal merkle node.  The verifier can distinguish between these by\nchecking whether the 64-byte chunk provided to it matches a coinbase\ntransaction pattern.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The verified transaction is a coinbase transaction given the inability\nto use CVE-2017-12842 to forge coinbase transactions and the position\nof the transaction in the merkle tree (or the block was invalid).</p>\n</li>\n<li>\n<p>The depth of the coinbase transaction, which is the same depth as all\nother transactions in the tree.</p>\n</li>\n</ul>",
  "post_number": 44,
  "post_type": 1,
  "updated_at": "2024-09-04T11:08:40.364Z",
  "reply_count": 0,
  "reply_to_post_number": 43,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 2.0,
  "yours": false,
  "topic_id": 710,
  "topic_slug": "great-consensus-cleanup-revival",
  "topic_title": "Great Consensus Cleanup Revival",
  "topic_html_title": "Great Consensus Cleanup Revival",
  "category_id": 7,
  "display_username": "David A. Harding",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"ajtowns, post:43, topic:710\"]\nsha256 includes the size of its input when calculating the hash, so implicit in being provided a midstate is being provided the number of bytes that went into the midstate, in bitcoin that\u2019s `s` (the midstate), `buf` (the remaining bytes that will build the next chunk) and `bytes` (the number of bytes that went into both those things). So a preimage for the txid of a very large coinbase tx can still be reduced to as few as 104 bytes.\n[/quote]\n\nIt took me a while to figure out how knowing the number of bytes used to \ncreate a digest was an alternative to validating the structure of a \ncoinbase transaction.  Do I accurately understand that you propose the \nfollowing:\n\n1. Prover provides the coinbase transaction midstate (including size)\nfor all but the final chunk of the first of the double SHA256 hashes,\nplus the final chunk.\n\n2. Prover provides a partial merkle branch for the coinbase transaction.\n\n3. Verifier uses the midstate (including size) and the final chunk to\ngenerate the coinbase txid.\n\n4. Verifier checks all provided nodes in the partial merkle branch are\non the right side (i.e., that the branch is for the first transaction in \na block, i.e. the coinbase transaction).\n\n5. Verifier inserts its generated coinbase txid into the partial merkle\nbranch and verifies up the tree until it connects to the merkle root in \nthe block header.\n\nAfter the above process, the verifier can be certain of the following:\n\n- The number of bytes used to generate the digest (txid).\n\n  - If the number of bytes is not equal to 64, then the digested data\n    must have been a transaction (or the block was invalid).\n\n  - If the number of bytes is equal to 64, then the digested data may\n    have been either a transaction or concatenated digests for an \n    internal merkle node.  The verifier can distinguish between these by\n    checking whether the 64-byte chunk provided to it matches a coinbase\n    transaction pattern.\n\n- The verified transaction is a coinbase transaction given the inability \n  to use CVE-2017-12842 to forge coinbase transactions and the position\n  of the transaction in the merkle tree (or the block was invalid).  \n  \n- The depth of the coinbase transaction, which is the same depth as all\n  other transactions in the tree.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 6,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}