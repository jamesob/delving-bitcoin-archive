{
  "id": 3270,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2024-09-25T02:19:24.055Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"renepickhardt\" data-post=\"2\" data-topic=\"1163\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/renepickhardt/48/7_2.png\" class=\"avatar\"> renepickhardt:</div>\n<blockquote>\n<p>However I have not quantified the downsides of such constructs with respect to on chain bandwidth and costs of unilateral exists yet. So I am not sure yet about the tradeoffs that come with such constructs.</p>\n</blockquote>\n</aside>\n<p>Sure. Not being a mathist, I only have my engineering intuition here.</p>\n<p>An intuition is that:</p>\n<ul>\n<li>As the number of participants increases, the probability <em>one</em> of them has a reason to force-close must increase. Assuming there is some reasonable average (mean) probability of force-close at any moment of time, <code>P(c)</code>. Then for N participants, the probability of force-close at any moment of time is <code>1 - (1 - P(c))^n</code>.</li>\n<li>More concretely: HTLCs are the most common reason for force-closing. In particular, once you participate in public routing, some fraction of your <em>incoming</em> HTLCs can be held hostage by your <em>outgoing</em> HTLCs, for a time.  If the outgoing HTLCs are <em>not</em> resolved, you need to drop them onchain.  If it resolves onchain, great, but if the outgoing HTLC is <em><strong>not</strong></em> confirmed onchain, <em><strong>or</strong></em> you, by complete accident, are forced offline (e.g. clumsy human foot kicking power supply), then your <em>incoming</em> HTLC is also dropped onchain.\n<ul>\n<li>Dropping an HTLC onchain <em>usually</em> means the hosting mechanism is <em>also</em> dropped onchain, i.e. force-closed.</li>\n<li>Force-close due to HTLC timeout affects <em><strong>all</strong></em> participants in the mechanism; usually, the mechanism cannot continue operating offchain if <em>any</em> hosted HTLC has to be dropped onchain due to the accepting node going offline.</li>\n</ul>\n</li>\n</ul>\n<p>Thus, unless a multi-party mechanism can drop individual HTLCs onchain <em><strong>and</strong></em> continue operating, then N-party mechanisms are more brittle than 2-party channels.</p>\n<p>It is probably measurable how much uptime a random node gets (just try to <code>connect</code> to a bunch of them, divide the successes by the number of attempts), and from there, we can assume that probability that an HTLC will time out due to timeout based on the probability of a random node being offline.  We can then compute the brittleness of N-party mechanisms as we vary N.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2024-09-25T02:22:49.798Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 1.6,
  "yours": false,
  "topic_id": 1163,
  "topic_slug": "a-lightning-network-of-multi-party-mechanisms",
  "topic_title": "A Lightning Network of multi-party mechanisms",
  "topic_html_title": "A Lightning Network of multi-party mechanisms",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"renepickhardt, post:2, topic:1163\"]\nHowever I have not quantified the downsides of such constructs with respect to on chain bandwidth and costs of unilateral exists yet. So I am not sure yet about the tradeoffs that come with such constructs.\n[/quote]\n\nSure. Not being a mathist, I only have my engineering intuition here.\n\nAn intuition is that:\n\n* As the number of participants increases, the probability *one* of them has a reason to force-close must increase. Assuming there is some reasonable average (mean) probability of force-close at any moment of time, `P(c)`. Then for N participants, the probability of force-close at any moment of time is `1 - (1 - P(c))^n`.\n* More concretely: HTLCs are the most common reason for force-closing. In particular, once you participate in public routing, some fraction of your *incoming* HTLCs can be held hostage by your *outgoing* HTLCs, for a time.  If the outgoing HTLCs are *not* resolved, you need to drop them onchain.  If it resolves onchain, great, but if the outgoing HTLC is ***not*** confirmed onchain, ***or*** you, by complete accident, are forced offline (e.g. clumsy human foot kicking power supply), then your *incoming* HTLC is also dropped onchain.\n  * Dropping an HTLC onchain *usually* means the hosting mechanism is *also* dropped onchain, i.e. force-closed.\n  * Force-close due to HTLC timeout affects ***all*** participants in the mechanism; usually, the mechanism cannot continue operating offchain if *any* hosted HTLC has to be dropped onchain due to the accepting node going offline.\n\nThus, unless a multi-party mechanism can drop individual HTLCs onchain ***and*** continue operating, then N-party mechanisms are more brittle than 2-party channels.\n\nIt is probably measurable how much uptime a random node gets (just try to `connect` to a bunch of them, divide the successes by the number of attempts), and from there, we can assume that probability that an HTLC will time out due to timeout based on the probability of a random node being offline.  We can then compute the brittleness of N-party mechanisms as we vary N.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}