{
  "id": 3262,
  "name": "Johan T. Halseth",
  "username": "halseth",
  "avatar_template": "/user_avatar/delvingbitcoin.org/halseth/{size}/198_2.png",
  "created_at": "2024-09-24T20:28:57.889Z",
  "cooked": "<blockquote>\n<p>This feels like the most important question. Currently announcements are made publically of channel utxos. Assuming the key image (no double spend) thing mentioned above, how much worse is it to announce privately a utxo of the same size, for DOS resistance?</p>\n</blockquote>\n<p>The way current channels are announced, they prove that a certain UTXO on-chain opens a channel, such that nodes watching the chain can know when that UTXO is spent and prune the channel from their graph accordingly.</p>\n<p>In the zero-knowledge setting we can still prove that a UTXO was created (\u201cI opened a channel between block height <code>X</code> and <code>X+10</code>\u201d), but as a LN node maintaining a channel graph you cannot know when channels close.</p>\n<p>To a certain degree this problem exists already, in case a channel \u201cdies\u201d without being closed on-chain (nodes go offline, key loss etc). So as a good steward of your channel graph, you should probably be maintaining it and pruning inactive channels from your graph regardless, so maybe a heuristic like this can make up for not knowing whether it was closed on-chain.</p>\n<p>As the public channel graph grows it will most likely be infeasible to keep track of every channel in any case, so one needs to be picky about which ones to keep.</p>\n<p>Light client LN nodes are already using certain heuristics AFAIK to prune the graph, for example by removing channels where a channel update hasn\u2019t been sent recently.</p>",
  "post_number": 13,
  "post_type": 1,
  "updated_at": "2024-09-24T20:28:57.889Z",
  "reply_count": 1,
  "reply_to_post_number": 10,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 12,
  "readers_count": 11,
  "score": 22.2,
  "yours": false,
  "topic_id": 1142,
  "topic_slug": "proving-utxo-set-inclusion-in-zero-knowledge",
  "topic_title": "Proving UTXO set inclusion in zero-knowledge",
  "topic_html_title": "Proving UTXO set inclusion in zero-knowledge",
  "category_id": 8,
  "display_username": "Johan T. Halseth",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "AdamISZ",
    "name": "Adam Gibson",
    "avatar_template": "/user_avatar/delvingbitcoin.org/adamisz/{size}/418_2.png"
  },
  "bookmarked": false,
  "raw": "> This feels like the most important question. Currently announcements are made publically of channel utxos. Assuming the key image (no double spend) thing mentioned above, how much worse is it to announce privately a utxo of the same size, for DOS resistance?\n\nThe way current channels are announced, they prove that a certain UTXO on-chain opens a channel, such that nodes watching the chain can know when that UTXO is spent and prune the channel from their graph accordingly.\n\nIn the zero-knowledge setting we can still prove that a UTXO was created (\"I opened a channel between block height `X` and `X+10`\"), but as a LN node maintaining a channel graph you cannot know when channels close. \n\nTo a certain degree this problem exists already, in case a channel \"dies\" without being closed on-chain (nodes go offline, key loss etc). So as a good steward of your channel graph, you should probably be maintaining it and pruning inactive channels from your graph regardless, so maybe a heuristic like this can make up for not knowing whether it was closed on-chain.\n\nAs the public channel graph grows it will most likely be infeasible to keep track of every channel in any case, so one needs to be picky about which ones to keep.\n\nLight client LN nodes are already using certain heuristics AFAIK to prune the graph, for example by removing channels where a channel update hasn't been sent recently.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 163,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}