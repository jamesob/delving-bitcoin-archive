{
  "id": 3217,
  "name": "Bastien Teinturier",
  "username": "t-bast",
  "avatar_template": "/user_avatar/delvingbitcoin.org/t-bast/{size}/98_2.png",
  "created_at": "2024-09-18T14:37:42.673Z",
  "cooked": "<p>Thanks for this detailed post, this is well explained and the diagrams are very clear.</p>\n<p>There are two cases that I\u2019d like to understand better:</p>\n<ul>\n<li>how exactly can the LSP add liquidity when its <code>L</code> leaf outputs are depleted</li>\n<li>the state of the factory after a unilateral exit</li>\n</ul>\n<h3><a name=\"p-3217-adding-liquidity-when-the-l-leaf-outputs-are-depleted-1\" class=\"anchor\" href=\"#p-3217-adding-liquidity-when-the-l-leaf-outputs-are-depleted-1\"></a>Adding liquidity when the <code>L</code> leaf outputs are depleted</h3>\n<aside class=\"quote no-group\" data-username=\"ZmnSCPxj\" data-post=\"1\" data-topic=\"1143\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/z/ee7513/48.png\" class=\"avatar\"> ZmnSCPxj:</div>\n<blockquote>\n<p>Of course, if <code>B</code> cannot come online, the LSP does have to fall back to alternate methods, such as onchain. This can lead to onchain fees needing to be paid, which the LSP would pass on to <code>A</code>.</p>\n</blockquote>\n</aside>\n<p>I don\u2019t see how that works: to add on-chain funds, the LSP needs to modify the root transaction to add more funds to it, right? Which means it has to modify the whole tree to propagate those added funds to some of the leaf outputs, which requires waking up every node in the tree? Or am I misunderstanding how that would work?</p>\n<p>Another possibility is that when this happens, the LSP simply doesn\u2019t honor the liquidity request, and will only honor it when other participants can come online to transfer from within the factory, or when moving to a new factory (and thus broadcasting a new on-chain root transaction).</p>\n<h3><a name=\"p-3217-state-after-a-unilateral-exit-2\" class=\"anchor\" href=\"#p-3217-state-after-a-unilateral-exit-2\"></a>State after a unilateral exit</h3>\n<aside class=\"quote no-group\" data-username=\"ZmnSCPxj\" data-post=\"1\" data-topic=\"1143\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/z/ee7513/48.png\" class=\"avatar\"> ZmnSCPxj:</div>\n<blockquote>\n<p>Thus, in the case that <code>A</code> wants to exit, not only are the clients on the same leaf transaction (<code>B</code>) are inadvertently exited, but also sibling clients on the next higher level, <code>C</code> and <code>D</code>.</p>\n</blockquote>\n</aside>\n<p>Can you tell me whether the following is correct in this scenario:</p>\n<ul>\n<li>B, C and D have been exited, which means they now have a \u201cplain\u201d lightning channels whose funding output is confirmed on-chain: this is fine, they can enroll into a new factory using a splice on that existing channel?</li>\n<li>E, F, G and H are still in a factory that is one level smaller than the previous one and consists of the subtree with those 4 nodes: the number of available state transitions has been reduced (since we lost one level of the tree), but apart from that nothing has changed for them?</li>\n</ul>\n<h3><a name=\"p-3217-synchronization-issues-with-concurrent-liquidity-requests-3\" class=\"anchor\" href=\"#p-3217-synchronization-issues-with-concurrent-liquidity-requests-3\"></a>Synchronization issues with concurrent liquidity requests</h3>\n<p>It seems to me that there are non-trivial synchronization issues when moving liquidity inside the factory. If A wants liquidity and B isn\u2019t online, the LSP may reach out to C and D to use their leaf node. If that happens, we still need B to come online as well to exchange all the signature needed to complete the liquidity allocation, right?</p>\n<p>While we\u2019re waiting for one of those nodes to come online, we may have other, conflicting liquidity allocation requests happening. I\u2019m not sure how we can resolve them and avoid being in a huge mess where software need to track concurrent, incompatible asynchronous operations? Unless the LSP imposes a strict ordering, which may take a very long time to complete to get all the signatories online in the right order?</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2024-09-18T14:37:42.673Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.2,
  "yours": false,
  "topic_id": 1143,
  "topic_slug": "superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories",
  "topic_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "topic_html_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "category_id": 7,
  "display_username": "Bastien Teinturier",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thanks for this detailed post, this is well explained and the diagrams are very clear.\n\nThere are two cases that I'd like to understand better:\n\n- how exactly can the LSP add liquidity when its `L` leaf outputs are depleted\n- the state of the factory after a unilateral exit\n\n### Adding liquidity when the `L` leaf outputs are depleted\n\n[quote=\"ZmnSCPxj, post:1, topic:1143\"]\nOf course, if `B` cannot come online, the LSP does have to fall back to alternate methods, such as onchain. This can lead to onchain fees needing to be paid, which the LSP would pass on to `A`.\n[/quote]\n\nI don't see how that works: to add on-chain funds, the LSP needs to modify the root transaction to add more funds to it, right? Which means it has to modify the whole tree to propagate those added funds to some of the leaf outputs, which requires waking up every node in the tree? Or am I misunderstanding how that would work?\n\nAnother possibility is that when this happens, the LSP simply doesn't honor the liquidity request, and will only honor it when other participants can come online to transfer from within the factory, or when moving to a new factory (and thus broadcasting a new on-chain root transaction).\n\n### State after a unilateral exit\n\n[quote=\"ZmnSCPxj, post:1, topic:1143\"]\nThus, in the case that `A` wants to exit, not only are the clients on the same leaf transaction (`B`) are inadvertently exited, but also sibling clients on the next higher level, `C` and `D`.\n[/quote]\n\nCan you tell me whether the following is correct in this scenario:\n\n- B, C and D have been exited, which means they now have a \"plain\" lightning channels whose funding output is confirmed on-chain: this is fine, they can enroll into a new factory using a splice on that existing channel?\n- E, F, G and H are still in a factory that is one level smaller than the previous one and consists of the subtree with those 4 nodes: the number of available state transitions has been reduced (since we lost one level of the tree), but apart from that nothing has changed for them?\n\n### Synchronization issues with concurrent liquidity requests\n\nIt seems to me that there are non-trivial synchronization issues when moving liquidity inside the factory. If A wants liquidity and B isn't online, the LSP may reach out to C and D to use their leaf node. If that happens, we still need B to come online as well to exchange all the signature needed to complete the liquidity allocation, right?\n\nWhile we're waiting for one of those nodes to come online, we may have other, conflicting liquidity allocation requests happening. I'm not sure how we can resolve them and avoid being in a huge mess where software need to track concurrent, incompatible asynchronous operations? Unless the LSP imposes a strict ordering, which may take a very long time to complete to get all the signatories online in the right order?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 101,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}