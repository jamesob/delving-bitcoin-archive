{
  "id": 3094,
  "name": "David A. Harding",
  "username": "harding",
  "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/6_2.png",
  "created_at": "2024-09-03T17:21:52.883Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"AntoineP\" data-post=\"41\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/antoinep/48/483_2.png\" class=\"avatar\"> AntoineP:</div>\n<blockquote>\n<p>This change would allow merkle proofs to be ~50% smaller in both the worst and average cases for a typical 200 bytes transaction [0]</p>\n</blockquote>\n</aside>\n<p>As mentioned [<a href=\"https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/31\">1</a>], I think the worst case proof size now is actually ~1 MB.  For example, imagine we have the following block (P2P <code>block</code> serialization):</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">Bytes</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">80</td>\n<td>Header</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">1</td>\n<td>Tx count</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">999,826</td>\n<td>Coinbase tx</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">93</td>\n<td>1-in, 1-out P2TR (stripped size)</td>\n</tr>\n</tbody>\n</table>\n</div><p>A lite client performing whitepaper-style SPV can be tricked into accepting a fake transaction if the coinbase transaction was actually 64 bytes.  To avoid that, it needs to learn the contents of the entire coinbase transaction in order to derive its txid for verifying its depth in the merkle tree.  That means, even with optimizations, a proof size of about 1 MB.</p>\n<p>Obviously, very large coinbase transactions will be rare given that they reduce miners\u2019 ability include fee-paying transactions, but I think it\u2019s worth noting in discussion and documentation that the worst case is ~1 MB.  It should still be possible to validate a worst-case merkle proof with coinbase in witness data (given other soft fork changes), but it would be ~2,000x more expensive than validating a merkle proof that didn\u2019t require a copy of the entire coinbase transaction.</p>\n<aside class=\"quote no-group\" data-username=\"AntoineP\" data-post=\"41\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/antoinep/48/483_2.png\" class=\"avatar\"> AntoineP:</div>\n<blockquote>\n<p>Anything i\u2019m missing?</p>\n</blockquote>\n</aside>\n<p><a class=\"mention\" href=\"/u/evoskuil\">@evoskuil</a> mentioned an alternative potential soft fork: a commitment to tree depth, which could be done for any depth possible with the current consensus rules[1] using only 4 bits.  He didn\u2019t suggest where the commitment could be stored, but I think it\u2019s clear that we\u2019re probably never going to use all BIP8/9 versionbits and miners currently seem satisfied with the 16 BIP320 version bits, meaning we could probably put the commitment it the block header version.  That wouldn\u2019t require any extra bandwidth for SPV.</p>\n<p>I think the two cons of that approach are:</p>\n<ul>\n<li>We might want to give more (eventually all of the available) versionbits to miners in the future as hashrate increases; that way individual hardware doesn\u2019t need to create coinbase extranonces or use hacks like nTime rolling.</li>\n<li>It still makes SPV more complicated than described in the whitepaper, although only slightly more so.</li>\n</ul>\n<p>[1] 4 bits can express a maximum depth of 16 and a tree of depth 16 can have up to 65,536 transactions.  However, the minimum possible transaction size is <a href=\"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017883.html\">60 bytes</a> and a 999,919-byte block (excluding header and tx count) can only fit a maximum of 16,665 transactions of that size.</p>",
  "post_number": 42,
  "post_type": 1,
  "updated_at": "2024-09-03T17:21:52.883Z",
  "reply_count": 1,
  "reply_to_post_number": 41,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 21.0,
  "yours": false,
  "topic_id": 710,
  "topic_slug": "great-consensus-cleanup-revival",
  "topic_title": "Great Consensus Cleanup Revival",
  "topic_html_title": "Great Consensus Cleanup Revival",
  "category_id": 7,
  "display_username": "David A. Harding",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"AntoineP, post:41, topic:710\"]\nThis change would allow merkle proofs to be ~50% smaller in both the worst and average cases for a typical 200 bytes transaction [0]\n[/quote]\n\nAs mentioned [[1](https://delvingbitcoin.org/t/great-consensus-cleanup-revival/710/31?u=harding)], I think the worst case proof size now is actually ~1 MB.  For example, imagine we have the following block (P2P `block` serialization):\n\n| Bytes | Description |\n|--:|--|\n| 80 | Header |\n| 1 | Tx count |\n| 999,826 | Coinbase tx |\n| 93 | 1-in, 1-out P2TR (stripped size) |\n\nA lite client performing whitepaper-style SPV can be tricked into accepting a fake transaction if the coinbase transaction was actually 64 bytes.  To avoid that, it needs to learn the contents of the entire coinbase transaction in order to derive its txid for verifying its depth in the merkle tree.  That means, even with optimizations, a proof size of about 1 MB.\n\nObviously, very large coinbase transactions will be rare given that they reduce miners' ability include fee-paying transactions, but I think it's worth noting in discussion and documentation that the worst case is ~1 MB.  It should still be possible to validate a worst-case merkle proof with coinbase in witness data (given other soft fork changes), but it would be ~2,000x more expensive than validating a merkle proof that didn't require a copy of the entire coinbase transaction.\n\n[quote=\"AntoineP, post:41, topic:710\"]\nAnything i\u2019m missing?\n[/quote]\n\n@evoskuil mentioned an alternative potential soft fork: a commitment to tree depth, which could be done for any depth possible with the current consensus rules[1] using only 4 bits.  He didn't suggest where the commitment could be stored, but I think it's clear that we're probably never going to use all BIP8/9 versionbits and miners currently seem satisfied with the 16 BIP320 version bits, meaning we could probably put the commitment it the block header version.  That wouldn't require any extra bandwidth for SPV.\n\nI think the two cons of that approach are:\n\n- We might want to give more (eventually all of the available) versionbits to miners in the future as hashrate increases; that way individual hardware doesn't need to create coinbase extranonces or use hacks like nTime rolling.\n- It still makes SPV more complicated than described in the whitepaper, although only slightly more so.\n\n[1] 4 bits can express a maximum depth of 16 and a tree of depth 16 can have up to 65,536 transactions.  However, the minimum possible transaction size is [60 bytes](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017883.html) and a 999,919-byte block (excluding header and tx count) can only fit a maximum of 16,665 transactions of that size.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 6,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}