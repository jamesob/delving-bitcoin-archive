{
  "id": 3100,
  "name": "Eric Voskuil",
  "username": "evoskuil",
  "avatar_template": "/user_avatar/delvingbitcoin.org/evoskuil/{size}/391_2.png",
  "created_at": "2024-09-04T15:48:55.104Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"43\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>I think the reduction in complexity is more of an advantage tbh:</p>\n</blockquote>\n</aside>\n<p>I agree, as the average absolute bandwidth is trivial, can be easily reduced by another 36 bytes, and can be amortized over an entire block of transactions.</p>\n<aside class=\"quote no-group\" data-username=\"AntoineP\" data-post=\"41\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/antoinep/48/483_2.png\" class=\"avatar\"> AntoineP:</div>\n<blockquote>\n<p>Looking at the worst case cost is not a valid way of judging efficiency gains.</p>\n</blockquote>\n</aside>\n<p>And as the above implies, worst case should not be a consideration given that it is reasonably bounded.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"43\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/417_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>you need a combined merkle path to both the coinbase and the tx; you need to check they\u2019re the same depth; you need to check the coinbase is valid; in order to minimise bandwidth you need to deal with sha256 midstates</p>\n</blockquote>\n</aside>\n<p>Given that bandwidth is not a material issue, adding sha256 midstates is unnecessary complexity.</p>\n<p>Also, by simply compacting out the excess 36 bytes as mentioned above there is no need to validate the coinbase. Reconstituting it with the presumed null point is sufficient  (e.g. defaulting a tx deserialization with no input point to a null input point).</p>\n<p>Consequently the complexity comparison becomes:</p>\n<ul>\n<li>Ensure that the stripped transaction is not 64 bytes, and ensure that its Merkle path is valid.</li>\n</ul>\n<p>vs:</p>\n<ul>\n<li>Ensure that the (reconstituted) coinbase Merkle path is valid, and ensure the same valid Merkle depth for any tx in the block.</li>\n</ul>\n<p>Validating the coinbase Merkle path is of course code reuse, so the new logic is checking the Merkle path size. This is the tradeoff in the SPV wallet. The tradeoff in the full node is mandatory checking of the stripped size of all transactions (and soft fork) vs. doing nothing (possibly \u201ccompressing\u201d null points for SPV clients).</p>",
  "post_number": 45,
  "post_type": 1,
  "updated_at": "2024-09-04T16:01:43.718Z",
  "reply_count": 0,
  "reply_to_post_number": 43,
  "quote_count": 2,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 2.2,
  "yours": false,
  "topic_id": 710,
  "topic_slug": "great-consensus-cleanup-revival",
  "topic_title": "Great Consensus Cleanup Revival",
  "topic_html_title": "Great Consensus Cleanup Revival",
  "category_id": 7,
  "display_username": "Eric Voskuil",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"ajtowns, post:43, topic:710\"]\nI think the reduction in complexity is more of an advantage tbh:\n[/quote]\n\nI agree, as the average absolute bandwidth is trivial, can be easily reduced by another 36 bytes, and can be amortized over an entire block of transactions.\n\n[quote=\"AntoineP, post:41, topic:710\"]\nLooking at the worst case cost is not a valid way of judging efficiency gains.\n[/quote]\n\nAnd as the above implies, worst case should not be a consideration given that it is reasonably bounded.\n\n[quote=\"ajtowns, post:43, topic:710\"]\nyou need a combined merkle path to both the coinbase and the tx; you need to check they\u2019re the same depth; you need to check the coinbase is valid; in order to minimise bandwidth you need to deal with sha256 midstates\n[/quote]\n\nGiven that bandwidth is not a material issue, adding sha256 midstates is unnecessary complexity.\n\nAlso, by simply compacting out the excess 36 bytes as mentioned above there is no need to validate the coinbase. Reconstituting it with the presumed null point is sufficient  (e.g. defaulting a tx deserialization with no input point to a null input point). \n\nConsequently the complexity comparison becomes:\n\n* Ensure that the stripped transaction is not 64 bytes, and ensure that its Merkle path is valid.\n\nvs:\n\n* Ensure that the (reconstituted) coinbase Merkle path is valid, and ensure the same valid Merkle depth for any tx in the block.\n\nValidating the coinbase Merkle path is of course code reuse, so the new logic is checking the Merkle path size. This is the tradeoff in the SPV wallet. The tradeoff in the full node is mandatory checking of the stripped size of all transactions (and soft fork) vs. doing nothing (possibly \"compressing\" null points for SPV clients).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 324,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}