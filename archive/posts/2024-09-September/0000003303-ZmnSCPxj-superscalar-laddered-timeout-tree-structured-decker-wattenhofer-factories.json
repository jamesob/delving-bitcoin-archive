{
  "id": 3303,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2024-09-29T23:59:52.199Z",
  "cooked": "<blockquote>\n<p>Also any assisted exit sounds a double-edged sword mechanism as it could be leveraged to kick out a user, at the worst time e.g when the on-chain fees are full.</p>\n</blockquote>\n<p>An assisted exit is a PTLC in the in-factory construction from user to LSP, followed by an onchain PTLC from LSP to user, with the scalar being the private key that client is using for the in-factory constructions.  It is <em><strong>not</strong></em> the LSP initiating a unilateral exit for a user and assisting it by paying for onchain fees.  The client is the one that initiates this; it has to actually offer a PTLC inside the in-factory construction before the LSP can safely put the swap PTLC onchain.  Thus, the client can choose to <em><strong>not</strong></em> initiate an assisted exit during high-fee times.  The LSP has no incentive to eject clients during high fees.</p>\n<p>An assisted exit like this allows the LSP to recover its in-factory funds earlier. If all clients perform assisted exits (including assisted exits from the current factory to a newer factory) then the LSP can recover funds directly from the funding outpoint, <em><strong>and</strong></em> can get those funds <em><strong>immediately</strong></em>, before the end of the timeout period (which is safe since all the clients have exited; the entire fund is now solely owned by the LSP). This is in contrast with evicting clients by unilaterally exiting them: the LSP has to wait for some time due to the extra Decker-Wattenhofer steps along the way, and has to actively pay for fees if the LSP does it during high-fee periods.  That is, the LSP has an incentive to keep clients in the tree until the clients perform an assisted exit, because the assisted exit lets the LSP use less blockspace to recover its funds.  It has nothing to do with the LSP fee policy, simply the pragmatic realization that the private key of the client is valuable (and the client can safely hand it over in exchange for getting its funds out of the construction and into another one, either onchain or to a new factory) because it allows the LSP to close the construction earlier and with just a simple 1-input 1-output tx with a single signature, without even having to show the <code>L &amp; CLTV</code> script tapleaf.</p>\n<p>Even if not all clients perform an assisted exit (say, a client never comes online again because the underlying phone hardware was destroyed or irretrievably lost) the LSP would still prefer an assisted exit from the <em>other</em> clients, because each node has a <code>A &amp; B &amp; C &amp; ... &amp; Z &amp; L</code> branch and once a subset is reached that is a strict subset of the clients that <em>have</em> performed assisted exit, the LSP can recover the rest of its funds from that output using the \u201ceveryone signs\u201d branch without publishing that subtree, because it is now in possession of everyone\u2019s keys.  This is still cheaper than the LSP preemptively evicting non-responsive clients; the LSP can always hold out and hope that the  client comes back online and performs an assisted exit (which it would need to perform to transfer from one tree to the next).</p>\n<p>Private key handover is <em><strong>AWESOME</strong></em>.</p>",
  "post_number": 15,
  "post_type": 1,
  "posts_count": 31,
  "updated_at": "2024-09-30T00:10:27.537Z",
  "reply_count": 1,
  "reply_to_post_number": 14,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 31,
  "readers_count": 30,
  "score": 26.2,
  "yours": false,
  "topic_id": 1143,
  "topic_slug": "superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories",
  "topic_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "topic_html_title": "SuperScalar: Laddered Timeout-Tree-Structured Decker-Wattenhofer Factories",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 5,
    "username": "ariard",
    "name": "Antoine Riard",
    "avatar_template": "/letter_avatar_proxy/v4/letter/a/c67d28/{size}.png"
  },
  "bookmarked": false,
  "raw": ">Also any assisted exit sounds a double-edged sword mechanism as it could be leveraged to kick out a user, at the worst time e.g when the on-chain fees are full.\n\nAn assisted exit is a PTLC in the in-factory construction from user to LSP, followed by an onchain PTLC from LSP to user, with the scalar being the private key that client is using for the in-factory constructions.  It is ***not*** the LSP initiating a unilateral exit for a user and assisting it by paying for onchain fees.  The client is the one that initiates this; it has to actually offer a PTLC inside the in-factory construction before the LSP can safely put the swap PTLC onchain.  Thus, the client can choose to ***not*** initiate an assisted exit during high-fee times.  The LSP has no incentive to eject clients during high fees.\n\nAn assisted exit like this allows the LSP to recover its in-factory funds earlier. If all clients perform assisted exits (including assisted exits from the current factory to a newer factory) then the LSP can recover funds directly from the funding outpoint, ***and*** can get those funds ***immediately***, before the end of the timeout period (which is safe since all the clients have exited; the entire fund is now solely owned by the LSP). This is in contrast with evicting clients by unilaterally exiting them: the LSP has to wait for some time due to the extra Decker-Wattenhofer steps along the way, and has to actively pay for fees if the LSP does it during high-fee periods.  That is, the LSP has an incentive to keep clients in the tree until the clients perform an assisted exit, because the assisted exit lets the LSP use less blockspace to recover its funds.  It has nothing to do with the LSP fee policy, simply the pragmatic realization that the private key of the client is valuable (and the client can safely hand it over in exchange for getting its funds out of the construction and into another one, either onchain or to a new factory) because it allows the LSP to close the construction earlier and with just a simple 1-input 1-output tx with a single signature, without even having to show the `L & CLTV` script tapleaf.\n\nEven if not all clients perform an assisted exit (say, a client never comes online again because the underlying phone hardware was destroyed or irretrievably lost) the LSP would still prefer an assisted exit from the *other* clients, because each node has a `A & B & C & ... & Z & L` branch and once a subset is reached that is a strict subset of the clients that *have* performed assisted exit, the LSP can recover the rest of its funds from that output using the \"everyone signs\" branch without publishing that subtree, because it is now in possession of everyone's keys.  This is still cheaper than the LSP preemptively evicting non-responsive clients; the LSP can always hold out and hope that the  client comes back online and performs an assisted exit (which it would need to perform to transfer from one tree to the next).\n\nPrivate key handover is ***AWESOME***.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Also any assisted exit sounds a double-edged sword mechanism as it could be leveraged to kick out a user, at the worst time e.g when the on-chain fees are full. \n\nAn assisted exit is a PTLC in the in-factory construction from user to LSP, followed by an onchain PTLC from LSP to user, with the scala&hellip;",
  "truncated": true,
  "post_url": "/t/superscalar-laddered-timeout-tree-structured-decker-wattenhofer-factories/1143/15",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}