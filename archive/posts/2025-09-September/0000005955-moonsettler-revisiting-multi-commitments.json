{
  "id": 5955,
  "name": "moonsettler",
  "username": "moonsettler",
  "avatar_template": "/user_avatar/delvingbitcoin.org/moonsettler/{size}/38_2.png",
  "created_at": "2025-09-23T11:55:30.574Z",
  "cooked": "<h1><a name=\"p-5955-revisiting-multi-commitments-1\" class=\"anchor\" href=\"#p-5955-revisiting-multi-commitments-1\"></a>Revisiting Multi-Commitments</h1>\n<p>Based on my conversations with <a class=\"mention\" href=\"/u/jeremyrubin\">@JeremyRubin</a>, <a class=\"mention\" href=\"/u/salvatoshi\">@salvatoshi</a> and <a class=\"mention\" href=\"/u/reardencode\">@reardencode</a> this is an attempt to sum up the perceived tradeoffs of different approaches to proposed multi-commitments in bitcoin script.</p>\n<ul>\n<li><code>OP_CAT</code>: <code>&lt;x1&gt; &lt;x2&gt; OP_CAT</code></li>\n<li><code>OP_PAIRCOMMIT</code>: <code>&lt;x1&gt; &lt;x2&gt; OP_PAIRCOMMIT</code></li>\n<li><code>OP_VECTORCOMMIT</code>: <code>&lt;x1&gt; .. &lt;xn&gt; &lt;n&gt; OP_VECTORCOMMIT</code></li>\n<li><code>OP_TWEAKADD</code>: <code>&lt;t&gt; &lt;pub&gt; OP_TWEAKADD</code> (counts as SigOp)</li>\n<li><code>OP_SHA256TAGGED</code>: <code>&lt;msg&gt; &lt;tag&gt; OP_SHA256TAGGED</code></li>\n<li><code>OP_SHA256STREAM</code>: <code>OP_SHA256INIT &lt;x1&gt; OP_SHA256STREAM .. &lt;xn&gt; OP_SHA256STREAM OP_SHA256FINALIZE</code></li>\n</ul>\n<h2><a name=\"p-5955-in-a-world-where-script-is-restored-gsr-2\" class=\"anchor\" href=\"#p-5955-in-a-world-where-script-is-restored-gsr-2\"></a>In a world where script is restored (GSR):</h2>\n<ul>\n<li><code>OP_CAT</code> we naturally have, so all the concerns regarding introspection are already moot, big drawback is the witness malleability often requiring additional inefficiency introduced to scripts using it</li>\n</ul>\n<p>Preferred:</p>\n<ul>\n<li><code>OP_TWEAKADD</code> is pretty evidently useful. <code>OP_CAT</code> already enables state carrying with caboose, this would make it much neater (unlocks <a href=\"https://merkle.fun\" rel=\"noopener nofollow ugc\">MATT</a>). <code>OP_TWEAKADD</code> necessarily counts as a SigOp and as a multi-commitment has worse witness malleability (as per <a href=\"https://github.com/bitcoin/bips/pull/1944\" rel=\"noopener nofollow ugc\">BIP</a>) issues than <code>OP_CAT</code>.</li>\n<li><code>OP_SHA256STREAM</code> makes certain <code>OP_CAT</code> and <code>OP_SHA256</code> heavy scripts more streamlined, does not suffer from stack element size limit for overall message length, post GSR the execution cost assigned to all operations ensures safety.</li>\n</ul>\n<p>Neutral:</p>\n<ul>\n<li><code>OP_SHA256TAGGED</code> is a minor optimization of <code>&lt;msg&gt; &lt;tag&gt; OP_SHA256 OP_DUP OP_CAT OP_CAT OP_SHA256</code> where tagged midstates can be pre-computed or cached for efficiency.</li>\n</ul>\n<p>Bad fit:</p>\n<ul>\n<li><code>OP_PAIRCOMMIT</code> and</li>\n<li><code>OP_VECTORCOMMIT</code> are built around the assumption that consensus on <code>OP_CAT</code> can not be reached due to it being computationally complete with the other opcodes; thus making it hard to reason about second order effects.</li>\n</ul>\n<h2><a name=\"p-5955-in-a-world-without-cat-no-state-carrying-3\" class=\"anchor\" href=\"#p-5955-in-a-world-without-cat-no-state-carrying-3\"></a>In a world without CAT (no state carrying):</h2>\n<p>Preferred:</p>\n<ul>\n<li><code>OP_PAIRCOMMIT</code> does not enable\n<ul>\n<li>fine-grained introspection</li>\n<li>state-carrying covenants</li>\n<li>bigint operations</li>\n<li>new arithmetic capabilities using lookup tables</li>\n<li>manipulation of the taptree</li>\n</ul>\n</li>\n</ul>\n<p>Neutral:</p>\n<ul>\n<li><code>OP_VECTORCOMMIT</code> more general form, provides optimization over multiple calls of <code>OP_PAIRCOMMIT</code>, for larger number of smaller pieces the cost benefits are more significant</li>\n<li><code>OP_SHA256TAGGED</code> in the absence of <code>OP_TWEAKADD</code> and <code>OP_CAT</code> this opcode serves as a mildly less efficient but adequate pair-commitment</li>\n</ul>\n<p>Bad fit:</p>\n<ul>\n<li><code>OP_SHA256STREAM</code> would introduce a lot if not most of the capabilities (or shenanigans) that serve as rationale for not activating <code>OP_CAT</code>, trivially allows for transaction and parent transaction introspection via <a href=\"https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298\" rel=\"noopener nofollow ugc\">CAT tricks I</a> and <a href=\"https://medium.com/blockstream/cat-and-schnorr-tricks-ii-2f6ede3d7bb5\" rel=\"noopener nofollow ugc\">CAT tricks II</a></li>\n</ul>\n<h2><a name=\"p-5955-in-a-world-without-cat-but-with-matt-4\" class=\"anchor\" href=\"#p-5955-in-a-world-without-cat-but-with-matt-4\"></a>In a world without CAT (but with MATT):</h2>\n<p>Preferred:</p>\n<ul>\n<li><code>OP_TWEAKADD</code> and</li>\n<li><code>OP_VECTORCOMMIT</code> are the basic building primitives for <a href=\"https://merkle.fun\" rel=\"noopener nofollow ugc\">MATT</a>, vector state carrying can also be achieved with multiple calls to <code>OP_TWEAKADD</code> but witness malleability could be a problem as per <a href=\"https://github.com/bitcoin/bips/pull/1944\" rel=\"noopener nofollow ugc\">BIP</a> and complicate scripts unnecessarily.</li>\n</ul>\n<p>Neutral:</p>\n<ul>\n<li><code>OP_PAIRCOMMIT</code> in <a class=\"mention\" href=\"/u/salvatoshi\">@salvatoshi</a>\u2019s opinion MATT is expected to carry a more complex state than 2 elements</li>\n<li><code>OP_SHA256TAGGED</code> while it sounds more generally helpful, does not really enable the inspection or manipulation of the taproot script tree paired with <code>OP_TWEAKADD</code> due to lack of internal concatenation on the message part, still it is an adequate substitute for <code>OP_PAIRCOMMIT</code> and <code>OP_VECTORCOMMIT</code></li>\n</ul>\n<p>Bad fit:</p>\n<ul>\n<li><code>OP_SHA256STREAM</code> same rationale for all cases without <code>OP_CAT</code></li>\n</ul>\n<p>Feedback and preferences or corrections and alternative suggestions are welcome!</p>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 1,
  "updated_at": "2025-09-23T11:55:30.574Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 12,
  "readers_count": 11,
  "score": 7.4,
  "yours": false,
  "topic_id": 2009,
  "topic_slug": "revisiting-multi-commitments",
  "topic_title": "Revisiting Multi-Commitments",
  "topic_html_title": "Revisiting Multi-Commitments",
  "category_id": 7,
  "display_username": "moonsettler",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "# Revisiting Multi-Commitments\n\nBased on my conversations with @JeremyRubin, @salvatoshi and @reardencode this is an attempt to sum up the perceived tradeoffs of different approaches to proposed multi-commitments in bitcoin script.\n\n* `OP_CAT`: `<x1> <x2> OP_CAT`\n* `OP_PAIRCOMMIT`: `<x1> <x2> OP_PAIRCOMMIT`\n* `OP_VECTORCOMMIT`: `<x1> .. <xn> <n> OP_VECTORCOMMIT`\n* `OP_TWEAKADD`: `<t> <pub> OP_TWEAKADD` (counts as SigOp)\n* `OP_SHA256TAGGED`: `<msg> <tag> OP_SHA256TAGGED`\n* `OP_SHA256STREAM`: `OP_SHA256INIT <x1> OP_SHA256STREAM .. <xn> OP_SHA256STREAM OP_SHA256FINALIZE`\n\n## In a world where script is restored (GSR):\n\n* `OP_CAT` we naturally have, so all the concerns regarding introspection are already moot, big drawback is the witness malleability often requiring additional inefficiency introduced to scripts using it\n\nPreferred:\n\n* `OP_TWEAKADD` is pretty evidently useful. `OP_CAT` already enables state carrying with caboose, this would make it much neater (unlocks [MATT](https://merkle.fun)). `OP_TWEAKADD` necessarily counts as a SigOp and as a multi-commitment has worse witness malleability (as per [BIP](https://github.com/bitcoin/bips/pull/1944)) issues than `OP_CAT`.\n* `OP_SHA256STREAM` makes certain `OP_CAT` and `OP_SHA256` heavy scripts more streamlined, does not suffer from stack element size limit for overall message length, post GSR the execution cost assigned to all operations ensures safety.\n\nNeutral:\n\n* `OP_SHA256TAGGED` is a minor optimization of `<msg> <tag> OP_SHA256 OP_DUP OP_CAT OP_CAT OP_SHA256` where tagged midstates can be pre-computed or cached for efficiency.\n\nBad fit:\n\n* `OP_PAIRCOMMIT` and\n* `OP_VECTORCOMMIT` are built around the assumption that consensus on `OP_CAT` can not be reached due to it being computationally complete with the other opcodes; thus making it hard to reason about second order effects.\n\n## In a world without CAT (no state carrying):\n\nPreferred:\n\n* `OP_PAIRCOMMIT` does not enable\n  * fine-grained introspection\n  * state-carrying covenants\n  * bigint operations\n  * new arithmetic capabilities using lookup tables\n  * manipulation of the taptree\n\nNeutral:\n\n* `OP_VECTORCOMMIT` more general form, provides optimization over multiple calls of `OP_PAIRCOMMIT`, for larger number of smaller pieces the cost benefits are more significant\n* `OP_SHA256TAGGED` in the absence of `OP_TWEAKADD` and `OP_CAT` this opcode serves as a mildly less efficient but adequate pair-commitment \n\nBad fit:\n\n* `OP_SHA256STREAM` would introduce a lot if not most of the capabilities (or shenanigans) that serve as rationale for not activating `OP_CAT`, trivially allows for transaction and parent transaction introspection via [CAT tricks I](https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298) and [CAT tricks II](https://medium.com/blockstream/cat-and-schnorr-tricks-ii-2f6ede3d7bb5)\n\n## In a world without CAT (but with MATT):\n\nPreferred:\n\n* `OP_TWEAKADD` and \n* `OP_VECTORCOMMIT` are the basic building primitives for [MATT](https://merkle.fun), vector state carrying can also be achieved with multiple calls to `OP_TWEAKADD` but witness malleability could be a problem as per [BIP](https://github.com/bitcoin/bips/pull/1944) and complicate scripts unnecessarily.\n\nNeutral:\n\n* `OP_PAIRCOMMIT` in @salvatoshi\u2019s opinion MATT is expected to carry a more complex state than 2 elements\n* `OP_SHA256TAGGED` while it sounds more generally helpful, does not really enable the inspection or manipulation of the taproot script tree paired with `OP_TWEAKADD` due to lack of internal concatenation on the message part, still it is an adequate substitute for `OP_PAIRCOMMIT` and `OP_VECTORCOMMIT`\n\nBad fit:\n\n* `OP_SHA256STREAM` same rationale for all cases without `OP_CAT`\n\nFeedback and preferences or corrections and alternative suggestions are welcome!",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 48,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "<a name=\"p-5955-revisiting-multi-commitments-1\" class=\"anchor\" href=\"#p-5955-revisiting-multi-commitments-1\"></a>Revisiting Multi-Commitments\nBased on my conversations with <a class=\"mention\" href=\"/u/jeremyrubin\">@JeremyRubin</a>, <a class=\"mention\" href=\"/u/salvatoshi\">@salvatoshi</a> and <a class=\"mention\" href=\"/u/reardencode\">@reardencode</a> this is an attempt to sum up the perceived tradeoffs of different approaches to proposed multi-commitments in bitcoin script. \n\nOP_CAT: &lt;x1&gt; &lt;x2&gt; OP_CAT\nOP_PAIRCOMMIT: &lt;x1&gt; &lt;x2&gt; OP_PAIRCOMMIT\nOP_VE&hellip;",
  "truncated": true,
  "post_url": "/t/revisiting-multi-commitments/2009/1",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null,
  "can_vote": false
}