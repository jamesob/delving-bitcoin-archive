{
  "id": 5981,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2025-09-28T15:59:18.302Z",
  "cooked": "<p>Title: Flattening Nested 2-of-2 Of a 1-of-1 And a k-of-n</p>\n<h1><a name=\"p-5981-note-1\" class=\"anchor\" href=\"#p-5981-note-1\"></a>Note</h1>\n<p>It is possible to flatten the below into a single-layer\nquorum signing group:</p>\n<ul>\n<li>a 2-of-2 composed of:\n<ul>\n<li>a normal single signer</li>\n<li>a k-of-n quorum signer</li>\n</ul>\n</li>\n</ul>\n<p>This is done by simply requiring that the \u201csingle signer\u201d\nparticipant holds multiple shares in a larger non-nested\nk-of-n group.</p>\n<p>To determine the flattened k-of-n and the number of shares\nthe single signer has:</p>\n<pre><code class=\"lang-auto\">flattened_k = n + 1\nflattened_n = 2 * n - k + 1\nsingle_signer_shares = n - k + 1\n</code></pre>\n<p>Here are a few concrete examples:</p>\n<ul>\n<li>Example 1\n<ul>\n<li>Suppose we have:\n<ul>\n<li>Single Signer Ursula</li>\n<li>2-of-3 Signers Alice, Bob, Carol</li>\n</ul>\n</li>\n<li>This flattens to 4 of 5 with Ursula holding 2 shares:\n<ul>\n<li><code>flattened_k = 3 + 1 = 4</code></li>\n<li><code>flattened_n = 2 * 3 - 2 + 1 = 5</code></li>\n<li><code>single_signer_shares = 3 - 2 + 1 = 2</code></li>\n</ul>\n</li>\n<li>So we have Ursula1, Ursula2, Alice, Bob, and Carol.\n<ul>\n<li>Ursula1 and Ursula2, plus any 2 of the 3 Alice, Bob,\nand Carol, can form a quorum in the 4-of-5.</li>\n<li>The group Alice, Bob, and Carol is just 3, and cannot\nform a quorum of 4 to overpower Ursula.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Example 2\n<ul>\n<li>Suppose we have:\n<ul>\n<li>Single Signer Ursula</li>\n<li>2-of-5 Signers Alice, Bob, Carol, Dave, Evans</li>\n</ul>\n</li>\n<li>This flattens to 6 of 9 with Ursula holding 4 shares:\n<ul>\n<li><code>flattened_k = 5 + 1 = 6</code></li>\n<li><code>flattened_n = 2 * 5 - 2 + 1 = 9</code></li>\n<li><code>single_signer_shares = 5 - 2 + 1 = 4</code></li>\n</ul>\n</li>\n<li>So we have Ursula1, Ursula2, Ursula3, Ursula4, Alice,\nBob, Carol, Dave, Evans.\n<ul>\n<li>Ursula1, Ursula2, Ursula3, Ursula4, plus any 2 of\nAlice, Bob, Carol, Dave, and Evans, can form a\nquorum in the 6-of-9.</li>\n<li>The group Alice, Bob, Carol, Dave, and Evans is just\n5, and cannot form a quorum of 6 to overpower Ursula.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Example 3\n<ul>\n<li>Suppose we have:\n<ul>\n<li>Single Signer Ursula</li>\n<li>6-of-7 Signers Alice, Bob, Carol, Dave, Evans, Fergus,\nGreg</li>\n</ul>\n</li>\n<li>This flattens to 8 of 9 with Ursula holding 2 shares:\n<ul>\n<li><code>flattened_k = 7 + 1 = 8</code></li>\n<li><code>flattened_n = 2 * 7 - 6 + 1 = 9</code></li>\n<li><code>single_signer_shares = 7 - 6 + 1 = 2</code></li>\n</ul>\n</li>\n<li>So we have Ursula1, Ursula2, Alice, Bob, Carol, Dave,\nEvans, Fergus, Greg.\n<ul>\n<li>Ursula1 and Ursula2, plus any 6 of Alice, Bob, Carol,\nEvans, Fergus, and Greg, can form a quorum in the\n8-of-9.</li>\n<li>The group Alice, Bob, Carol, Dave, Evans, Fergus, and\nGreg is just 7, and cannot form a quorum of 8 to\noverpower Ursula.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-5981-derivation-2\" class=\"anchor\" href=\"#p-5981-derivation-2\"></a>Derivation</h2>\n<p>The key here is <code>flattened_k = n + 1</code>.\nThis assures us that the group of <code>n</code> participants cannot\noverpower the priveleged single signer, thus always\nrequiring the participation of the priveleged single\nsigner, as in the original 2-of-2 of the single signer\nplus the k-of-n quorum signers.</p>\n<p>From there, we need to ensure that the group of <code>n</code>\nparticipants all just retain having one share in the\ngroup, but the priveleged single signer needs to fill in\nmore than one share.\nAs the original is <code>k</code>, then the priveleged single\nsigner logically has to get the difference between\nthe <code>flattened_k</code> and <code>k</code>, or in other words,\n<code>single_signer_shares = flattened_k - k = n + 1 - k = n - k + 1</code>.</p>\n<p><code>single_signer_shares</code> cannot be less than that as\nthen even <code>k</code> of the quorum signers plus the single\nsigner would not even achieve <code>flattened_k</code>.\nIf it were more than that, then the priveleged single\nsigner could overpower the quorum signers by choosing\nless than <code>k</code> of the quorum signers to achieve\n<code>flattened_k</code>.</p>\n<p>There are still <code>n</code> participants in the quorum signing\ngroup, and the priveleged single signer has\n<code>single_signer_shares</code>, so adding them together gives us\nthe total new number of shares for the flattened group:\n<code>flattened_n = n + single_signer_shares = n + n - k + 1 = 2 * n - k + 1</code>.</p>\n<h2><a name=\"p-5981-applications-3\" class=\"anchor\" href=\"#p-5981-applications-3\"></a>Applications</h2>\n<ul>\n<li>Currently we have no proof that FROST-in-MuSig is safe.\nHowever, in many actual applications where such nesting\nmay be desirable, one side is often a single signer.\n<ul>\n<li>For example, a paranoid user might want to have k-of-n\nof their signing devices, and otherwise connect to the\nLightning Network, which uses 2-of-2 channels, with\nsome LSP as the other signer in the channel.</li>\n<li>For <a href=\"https://delvingbitcoin.org/t/multichannel-and-multiptlc-towards-a-global-high-availability-consistent-partition-tolerant-database-for-bitcoin-payments/1983\">MultiChannel</a>, Ursula is a priveleged single\nsigner that wants to use the same liquidity with the\nflexibility to offer outgoing HTLCs/PTLCs/MultiPTLCs\namongst N LSPs, with improved availability by allowing\none or more of the LSPs to go down when Ursula wants\nto make a payment.</li>\n</ul>\n</li>\n<li>Statechain BS can have its security \u201cimproved\u201d by having\nthe statechain operator be a k-of-n with the current user\nbeing a priveleged single signer.\n<ul>\n<li>Resharing inside a 2-of-2 of a k-of-n is actually\ncryptographically dubious as novel cryptography.\nHowever, resharing a flat k-of-n is not as novel.\n<ul>\n<li>There <em>are</em> a lot of broken VSS schemes still though.\nBut at least you are not adding even more brokenness\nby putting a 2-of-2 on top of a k-of-n and <em>then</em>\nresharing.</li>\n</ul>\n</li>\n<li>Against this, no amount of invoking the ghost of TEE\ncan protect end users against recovery of old backups\nof supposedly-deleted keys.\nLiterally my first job was an underpaid third-world\nengineer at just-above-minimum-wage (minumum wage for\nthird-worlders, not first-worlders) reverse-engineering\nICs: opening them up, taking pictures from microscopes,\ncarefully removing a metal layer, taking pictures again,\netc. until you reach the polysilicon and doped silicon\nlayers, and then figuring out the overall circuit so that\nthe parent company could check if patents were violated\nand sue.\nYes, you can see burnt fuses that way, it is just\nanother metal layer.\nFor reference, Intel SGX stores the per-chip hardware\nattestation key as burnt fuses on the integrated circuit,\nand Intel hands over possession of the CPU integrated\ncircuit to buyers, who can now open up the IC and\nextract the hardware attestation key to attest to\n<em>anything they want</em> and Intel will give its CA to\nsupport that \u201cremote\u201d hardware attestation key.\nPossession is eleven points of the law, and they say\nthere are but twelve.\nJust use a hardware wallet, because in that case, you\ncan hire the same team of underpaid third-world\nreverse-engineers to see if the wallet has any hidden\nprivate keys that the manufacturer embedded.\nUse real-world cut-and-choose (buy 2 HW wallets, mark\none \u201cheads\u201d the other \u201ctails\u201d, flip a coin, have the\nreverse-engineers work on the losing wallet, if they\nfind nothing wrong, that is good evidence you can\nrely on the winning wallet).</li>\n</ul>\n</li>\n</ul>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 1,
  "updated_at": "2025-09-28T15:59:18.302Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 0.4,
  "yours": false,
  "topic_id": 2018,
  "topic_slug": "flattening-nested-2-of-2-of-a-1-of-1-and-a-k-of-n",
  "topic_title": "Flattening Nested 2-of-2 Of a 1-of-1 And a k-of-n",
  "topic_html_title": "Flattening Nested 2-of-2 Of a 1-of-1 And a k-of-n",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Title: Flattening Nested 2-of-2 Of a 1-of-1 And a k-of-n\n\n# Note\n\nIt is possible to flatten the below into a single-layer\nquorum signing group:\n\n* a 2-of-2 composed of:\n  * a normal single signer\n  * a k-of-n quorum signer\n\nThis is done by simply requiring that the \u201csingle signer\u201d\nparticipant holds multiple shares in a larger non-nested\nk-of-n group.\n\nTo determine the flattened k-of-n and the number of shares\nthe single signer has:\n\n```\nflattened_k = n + 1\nflattened_n = 2 * n - k + 1\nsingle_signer_shares = n - k + 1\n```\n\nHere are a few concrete examples:\n\n* Example 1\n  * Suppose we have:\n    * Single Signer Ursula\n    * 2-of-3 Signers Alice, Bob, Carol\n  * This flattens to 4 of 5 with Ursula holding 2 shares:\n    * `flattened_k = 3 + 1 = 4`\n    * `flattened_n = 2 * 3 - 2 + 1 = 5`\n    * `single_signer_shares = 3 - 2 + 1 = 2`\n  * So we have Ursula1, Ursula2, Alice, Bob, and Carol.\n    * Ursula1 and Ursula2, plus any 2 of the 3 Alice, Bob,\n      and Carol, can form a quorum in the 4-of-5.\n    * The group Alice, Bob, and Carol is just 3, and cannot\n      form a quorum of 4 to overpower Ursula.\n* Example 2\n  * Suppose we have:\n    * Single Signer Ursula\n    * 2-of-5 Signers Alice, Bob, Carol, Dave, Evans\n  * This flattens to 6 of 9 with Ursula holding 4 shares:\n    * `flattened_k = 5 + 1 = 6`\n    * `flattened_n = 2 * 5 - 2 + 1 = 9`\n    * `single_signer_shares = 5 - 2 + 1 = 4`\n  * So we have Ursula1, Ursula2, Ursula3, Ursula4, Alice,\n    Bob, Carol, Dave, Evans.\n    * Ursula1, Ursula2, Ursula3, Ursula4, plus any 2 of\n      Alice, Bob, Carol, Dave, and Evans, can form a\n      quorum in the 6-of-9.\n    * The group Alice, Bob, Carol, Dave, and Evans is just\n      5, and cannot form a quorum of 6 to overpower Ursula.\n* Example 3\n  * Suppose we have:\n    * Single Signer Ursula\n    * 6-of-7 Signers Alice, Bob, Carol, Dave, Evans, Fergus,\n      Greg\n  * This flattens to 8 of 9 with Ursula holding 2 shares:\n    * `flattened_k = 7 + 1 = 8`\n    * `flattened_n = 2 * 7 - 6 + 1 = 9`\n    * `single_signer_shares = 7 - 6 + 1 = 2`\n  * So we have Ursula1, Ursula2, Alice, Bob, Carol, Dave,\n    Evans, Fergus, Greg.\n    * Ursula1 and Ursula2, plus any 6 of Alice, Bob, Carol,\n      Evans, Fergus, and Greg, can form a quorum in the\n      8-of-9.\n    * The group Alice, Bob, Carol, Dave, Evans, Fergus, and\n      Greg is just 7, and cannot form a quorum of 8 to\n      overpower Ursula.\n\n## Derivation\n\nThe key here is `flattened_k = n + 1`.\nThis assures us that the group of `n` participants cannot\noverpower the priveleged single signer, thus always\nrequiring the participation of the priveleged single\nsigner, as in the original 2-of-2 of the single signer\nplus the k-of-n quorum signers.\n\nFrom there, we need to ensure that the group of `n`\nparticipants all just retain having one share in the\ngroup, but the priveleged single signer needs to fill in\nmore than one share.\nAs the original is `k`, then the priveleged single\nsigner logically has to get the difference between\nthe `flattened_k` and `k`, or in other words,\n`single_signer_shares = flattened_k - k = n + 1 - k = n - k + 1`.\n\n`single_signer_shares` cannot be less than that as\nthen even `k` of the quorum signers plus the single\nsigner would not even achieve `flattened_k`.\nIf it were more than that, then the priveleged single\nsigner could overpower the quorum signers by choosing\nless than `k` of the quorum signers to achieve\n`flattened_k`.\n\nThere are still `n` participants in the quorum signing\ngroup, and the priveleged single signer has\n`single_signer_shares`, so adding them together gives us\nthe total new number of shares for the flattened group:\n`flattened_n = n + single_signer_shares = n + n - k + 1 = 2 * n - k + 1`.\n\n## Applications\n\n* Currently we have no proof that FROST-in-MuSig is safe.\n  However, in many actual applications where such nesting\n  may be desirable, one side is often a single signer.\n  * For example, a paranoid user might want to have k-of-n\n    of their signing devices, and otherwise connect to the\n    Lightning Network, which uses 2-of-2 channels, with\n    some LSP as the other signer in the channel.\n  * For [MultiChannel](https://delvingbitcoin.org/t/multichannel-and-multiptlc-towards-a-global-high-availability-consistent-partition-tolerant-database-for-bitcoin-payments/1983), Ursula is a priveleged single\n    signer that wants to use the same liquidity with the\n    flexibility to offer outgoing HTLCs/PTLCs/MultiPTLCs\n    amongst N LSPs, with improved availability by allowing\n    one or more of the LSPs to go down when Ursula wants\n    to make a payment.\n* Statechain BS can have its security \u201cimproved\u201d by having\n  the statechain operator be a k-of-n with the current user\n  being a priveleged single signer.\n  * Resharing inside a 2-of-2 of a k-of-n is actually\n    cryptographically dubious as novel cryptography.\n    However, resharing a flat k-of-n is not as novel.\n    * There *are* a lot of broken VSS schemes still though.\n      But at least you are not adding even more brokenness\n      by putting a 2-of-2 on top of a k-of-n and *then*\n      resharing.\n  * Against this, no amount of invoking the ghost of TEE\n    can protect end users against recovery of old backups\n    of supposedly-deleted keys.\n    Literally my first job was an underpaid third-world\n    engineer at just-above-minimum-wage (minumum wage for\n    third-worlders, not first-worlders) reverse-engineering\n    ICs: opening them up, taking pictures from microscopes,\n    carefully removing a metal layer, taking pictures again,\n    etc. until you reach the polysilicon and doped silicon\n    layers, and then figuring out the overall circuit so that\n    the parent company could check if patents were violated\n    and sue.\n    Yes, you can see burnt fuses that way, it is just\n    another metal layer.\n    For reference, Intel SGX stores the per-chip hardware\n    attestation key as burnt fuses on the integrated circuit,\n    and Intel hands over possession of the CPU integrated\n    circuit to buyers, who can now open up the IC and\n    extract the hardware attestation key to attest to\n    *anything they want* and Intel will give its CA to\n    support that \u201cremote\u201d hardware attestation key.\n    Possession is eleven points of the law, and they say\n    there are but twelve.\n    Just use a hardware wallet, because in that case, you\n    can hire the same team of underpaid third-world\n    reverse-engineers to see if the wallet has any hidden\n    private keys that the manufacturer embedded.\n    Use real-world cut-and-choose (buy 2 HW wallets, mark\n    one \u201cheads\u201d the other \u201ctails\u201d, flip a coin, have the\n    reverse-engineers work on the losing wallet, if they\n    find nothing wrong, that is good evidence you can\n    rely on the winning wallet).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Title: Flattening Nested 2-of-2 Of a 1-of-1 And a k-of-n \n<a name=\"p-5981-note-1\" class=\"anchor\" href=\"#p-5981-note-1\"></a>Note\nIt is possible to flatten the below into a single-layer\nquorum signing group: \n\na 2-of-2 composed of:\n\na normal single signer\na k-of-n quorum signer\n\n\n\nThis is done by simply requiring that the \u201csingle signer\u201d\nparticipant holds multiple &hellip;",
  "truncated": true,
  "post_url": "/t/flattening-nested-2-of-2-of-a-1-of-1-and-a-k-of-n/2018/1",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null,
  "can_vote": false
}