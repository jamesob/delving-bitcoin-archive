{
  "id": 5918,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2025-09-18T16:32:29.366Z",
  "cooked": "<ol>\n<li>My understanding is that lattices might get us similar features as ECC, possibly including something very much like a PTLC, especially the ability to homomorphically \u201cadd\u201d things together in the public-key space.  As <em><strong>I am not a mathist</strong></em>, I can only speculate on this, and work on stuff I do know how to use, already made by better mathists.</li>\n<li>Sorry.  I was deeply studying Lightning Network forwarding node resilience, and one of the things that came up was the use of highly-available databases, with strong consistency, like YugabyteDB, to ensure that data is well-replicated while ensuring consistency.  The YugabyteDB documentation was pretty thorough (and is what pointed out to me that you need 3 nodes for high-availability strong consistency) and it kinda uses \u201cCP\u201d in the CAP sense, such as: <a href=\"https://docs.yugabyte.com/preview/architecture/design-goals/#partition-tolerance-cap\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Design goals | YugabyteDB Docs</a> I kinda forgot \u201cCP\u201d has other meanings.  Mea culpa.</li>\n</ol>",
  "post_number": 8,
  "post_type": 1,
  "posts_count": 8,
  "updated_at": "2025-09-18T16:32:29.366Z",
  "reply_count": 0,
  "reply_to_post_number": 3,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 16.2,
  "yours": false,
  "topic_id": 1983,
  "topic_slug": "multichannel-and-multiptlc-towards-a-global-high-availability-consistent-partition-tolerant-database-for-bitcoin-payments",
  "topic_title": "MultiChannel and MultiPTLC: Towards A Global High-Availability Consistent/Partition-Tolerant Database For Bitcoin Payments",
  "topic_html_title": "MultiChannel and MultiPTLC: Towards A Global High-Availability Consistent/Partition-Tolerant Database For Bitcoin Payments",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 65,
    "username": "cryptoquick",
    "name": "Hunter Beast",
    "avatar_template": "/user_avatar/delvingbitcoin.org/cryptoquick/{size}/977_2.png"
  },
  "bookmarked": false,
  "raw": "1. My understanding is that lattices might get us similar features as ECC, possibly including something very much like a PTLC, especially the ability to homomorphically \u201cadd\u201d things together in the public-key space.  As ***I am not a mathist***, I can only speculate on this, and work on stuff I do know how to use, already made by better mathists.\n2. Sorry.  I was deeply studying Lightning Network forwarding node resilience, and one of the things that came up was the use of highly-available databases, with strong consistency, like YugabyteDB, to ensure that data is well-replicated while ensuring consistency.  The YugabyteDB documentation was pretty thorough (and is what pointed out to me that you need 3 nodes for high-availability strong consistency) and it kinda uses \u201cCP\u201d in the CAP sense, such as: https://docs.yugabyte.com/preview/architecture/design-goals/#partition-tolerance-cap I kinda forgot \u201cCP\u201d has other meanings.  Mea culpa.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "My understanding is that lattices might get us similar features as ECC, possibly including something very much like a PTLC, especially the ability to homomorphically \u201cadd\u201d things together in the public-key space.  As I am not a mathist, I can only speculate on this, and work on stuff I do know how &hellip;",
  "truncated": true,
  "post_url": "/t/multichannel-and-multiptlc-towards-a-global-high-availability-consistent-partition-tolerant-database-for-bitcoin-payments/1983/8",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}