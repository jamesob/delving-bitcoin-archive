{
  "id": 5916,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2025-09-18T14:33:39.030Z",
  "cooked": "<p>\u201cEverybody say \u2018fees\u2019!\u201d - some joker in Adelaide, 2017</p>\n<p>Unilateral exit has to pay onchain fees.  This is a rote fact.</p>\n<p>Nowadays we have P2A, and it is awesome that instagibbs managed to get that in before the local mempool management heuristics ossified.  In the bad old days Lightning Network participants had to agree on the same onchain feerates, and caused even more expensive channel closures if they disagreed.</p>\n<p>With P2A, however, offchain constructions have to have a separate UTXO \u2014 the \u201cexogenous fee UTXO\u201d \u2014 in order to pay for their unilateral exit in the future.  This is unfortunate:</p>\n<ul>\n<li>Liquidity in the exogenous fee UTXO cannot be spent in Lightning, and spending it onchain risks your future ability to unilaterally exit.</li>\n<li>It is another UTXO, increasing onchain resource consumption.</li>\n</ul>\n<p>There is, however, a curious wrinkle: the exogenous fee UTXO has to exist <em><strong>per participant,</strong></em> not per construction.  A participant with one construction, or millions, can maintain just one exogenous fee UTXO (in practice participants with millions of channels have to maintain more than one, but the point still stands).</p>\n<p>With millions of MultiChannels, there would be millions of Ursulae.  But there are still only three LSPs, Alice, Bob, and Carol.  So what we want to do is <em><strong>have unilateral exit be paid by LSPs</strong></em> (who will indirectly extract those fees from the Ursulae via routing fees, but because they aggregate the requirement for maintaining exogenous fee UTXO into a smaller number, they can get economies of scale, and pass on the savings to the Ursulae).  With this, onchain resource consumption is reduced and the Ursulae do not have to have extra liquidity they cannot spend.</p>\n<p>We can enforce this by returning revocation to the construction.</p>\n<p>For the decrementing-<code>nSequence</code>, the consumed input script (from the kickoff or from a previous decrementing-<code>nSequence</code>) has to have two branches:</p>\n<ul>\n<li>n-of-n of all participants.</li>\n<li>CSV(max-<code>nSequence</code>+1 hour) &amp;&amp; Ursula</li>\n</ul>\n<p>At the initial condition after setup or Onchain Cleanup, the decrementing-<code>nSequence</code> transactions all have the maximum <code>nSequence</code> value they start with (called \u201cmax-<code>nSequence</code> above).  By adding the alternate branch above, if the decrementing-<code>nSequence</code> transaction has not been confirmed after an hour or so after the <code>nSequence</code> makes it valid, Ursula can simply get all the funds.  Ursula can create a punishment transaction that pays for its own onchain fees here.  This forces the LSPs to pay for the decrementing-<code>nSequence</code> transaction within an hour.</p>\n<p>Now, to update the decrementing-<code>nSequence</code> to a later version, we have to import the \u201csign, then revoke\u201d dance from Poon-Dryja.</p>\n<ul>\n<li>First, everyone signs the next decrementing-<code>nSequence</code> state, with an <code>nSequence</code> that is one hour less than the current state (sign step).</li>\n<li>Then, the LSPs sign for every output of the current decrementing-<code>nSequence</code> state, signing a 0-fee transaction that spends that output and gives it outright to Ursula (revoke step).</li>\n</ul>\n<p>After the revoke step, the new state is now valid and the participants can proceed after the Cleanup operation.</p>\n<p>For intermediate decrementing-<code>nSequence</code> transactions, they only have one output, which is the \u201cn-of-n || (CSV &amp;&amp; Ursula)\u201d, and signing the revocation transaction is trivial.  For the final decrementing-<code>nSequence</code> transaction that instantiates the Spilman Complex, well, Spilman channels are all already \u201cn-of-n | (CSV &amp;&amp; participant)\u201d and can be revoked with the n-of-n branch.</p>\n<p>The complication here is with the Ursula-sourced Spilman channel.  The transaction that revokes this channel is an alternate transaction from the Spilman-exit transactions that Ursula has been giving to the LSPs, and the LSPs can make old state appear and pay for that to be confirmed.  To protect against this, the Spilman-exit transactions that Ursula gives to the LSPs have to have an <code>nSequence</code> that encodes 1 hour delay (the \u201cCSV &amp;&amp; participant\u201d branch then needs to have the CSV be at least 2 hours).  Then, a revocation of the Ursula-sourced Spilman channel has an <code>nSequence</code> of 0, allowing Ursula to spend it immediately if the old decrementing-<code>nSequence</code> state is published by the LSPs instead of the latest one.</p>\n<p>As noted, revocation is needed so that the latest decrementing-<code>nSequence</code> is confirmed by the LSPs in a timely manner; if they delay, they run the risk that Ursula is actually notorious hacker ZmnSCPxj, who then uses the not-latest, revoked, decrementing-<code>nSequence</code> to get all the funds from the MultiChannel.  Thus, the LSPs are forced to confirm the latest decrementing-<code>nSequence</code>.</p>\n<p>So much for revocation.</p>\n<p>Let us now turn to the Spilman Complex and how to force the LSPs to publish the latest state.  For the Ursula-sourced Spilman channel, this is already handled: if the LSPs do not publish <em><strong>any</strong></em> state, Ursula gets the funds in it, due to the \u201cCSV &amp;&amp; Ursula\u201d branch that Spilman has as part of itself.  If the LSPs publish old state, well, that has more funds to Ursula than the latest state, because of unidirectionality.</p>\n<p>The issue is with the LSP-sourced Spilman channels.  Unfortunately, those have to have endogenous fees, meaning the LSP has to keep a reserve fund (fortunately, Ursula does not need a reserve fund).  The Spilman-exit transactions given by the LSP to Ursula then spend that reserve fund as fees, to allow Ursula to get it confirmed. (I actually considered another revocation scheme here, but ran out of brainspace and started thrashing swap so I aborted the processing, falling back on endogenous fees).  The feerate for this can be fixed by protocol, so that it always propagates, and also have a P2A so that the LSP can, out of the goodness of its heart, get that confirmed.  Finally, any state other than the first has an output that Ursula can claim outright (either an HTLC (et al) where Ursula knows the preimage, or a plain Ursula-only output).  If that output is significant, Ursula can pay fees from that output directly; if the output is insignificant, Ursula would probably lose it in onchain fees anyway and can just tombstone it with an <code>OP_RETURN</code>.</p>",
  "post_number": 3,
  "post_type": 1,
  "posts_count": 3,
  "updated_at": "2025-09-18T14:45:54.213Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 6,
  "readers_count": 5,
  "score": 1.2,
  "yours": false,
  "topic_id": 1994,
  "topic_slug": "a-decker-wattenhofer-multichannel-for-reduced-inter-lsp-trust",
  "topic_title": "A Decker-Wattenhofer MultiChannel For Reduced Inter-LSP Trust",
  "topic_html_title": "A Decker-Wattenhofer MultiChannel For Reduced Inter-LSP Trust",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 104,
    "username": "ZmnSCPxj",
    "name": "ZmnSCPxj jxPCSnmZ",
    "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png"
  },
  "bookmarked": false,
  "raw": "\u201cEverybody say \u2018fees\u2019!\u201d - some joker in Adelaide, 2017\n\nUnilateral exit has to pay onchain fees.  This is a rote fact.\n\nNowadays we have P2A, and it is awesome that instagibbs managed to get that in before the local mempool management heuristics ossified.  In the bad old days Lightning Network participants had to agree on the same onchain feerates, and caused even more expensive channel closures if they disagreed.\n\nWith P2A, however, offchain constructions have to have a separate UTXO \u2014 the \u201cexogenous fee UTXO\u201d \u2014 in order to pay for their unilateral exit in the future.  This is unfortunate:\n\n* Liquidity in the exogenous fee UTXO cannot be spent in Lightning, and spending it onchain risks your future ability to unilaterally exit.\n* It is another UTXO, increasing onchain resource consumption.\n\nThere is, however, a curious wrinkle: the exogenous fee UTXO has to exist ***per participant,*** not per construction.  A participant with one construction, or millions, can maintain just one exogenous fee UTXO (in practice participants with millions of channels have to maintain more than one, but the point still stands).\n\nWith millions of MultiChannels, there would be millions of Ursulae.  But there are still only three LSPs, Alice, Bob, and Carol.  So what we want to do is ***have unilateral exit be paid by LSPs*** (who will indirectly extract those fees from the Ursulae via routing fees, but because they aggregate the requirement for maintaining exogenous fee UTXO into a smaller number, they can get economies of scale, and pass on the savings to the Ursulae).  With this, onchain resource consumption is reduced and the Ursulae do not have to have extra liquidity they cannot spend.\n\nWe can enforce this by returning revocation to the construction.\n\nFor the decrementing-`nSequence`, the consumed input script (from the kickoff or from a previous decrementing-`nSequence`) has to have two branches:\n\n* n-of-n of all participants.\n* CSV(max-`nSequence`+1 hour) && Ursula\n\nAt the initial condition after setup or Onchain Cleanup, the decrementing-`nSequence` transactions all have the maximum `nSequence` value they start with (called \u201cmax-`nSequence` above).  By adding the alternate branch above, if the decrementing-`nSequence` transaction has not been confirmed after an hour or so after the `nSequence` makes it valid, Ursula can simply get all the funds.  Ursula can create a punishment transaction that pays for its own onchain fees here.  This forces the LSPs to pay for the decrementing-`nSequence` transaction within an hour.\n\nNow, to update the decrementing-`nSequence` to a later version, we have to import the \u201csign, then revoke\u201d dance from Poon-Dryja.\n\n* First, everyone signs the next decrementing-`nSequence` state, with an `nSequence` that is one hour less than the current state (sign step).\n* Then, the LSPs sign for every output of the current decrementing-`nSequence` state, signing a 0-fee transaction that spends that output and gives it outright to Ursula (revoke step).\n\nAfter the revoke step, the new state is now valid and the participants can proceed after the Cleanup operation.\n\nFor intermediate decrementing-`nSequence` transactions, they only have one output, which is the \u201cn-of-n || (CSV && Ursula)\u201d, and signing the revocation transaction is trivial.  For the final decrementing-`nSequence` transaction that instantiates the Spilman Complex, well, Spilman channels are all already \u201cn-of-n | (CSV && participant)\u201d and can be revoked with the n-of-n branch.\n\nThe complication here is with the Ursula-sourced Spilman channel.  The transaction that revokes this channel is an alternate transaction from the Spilman-exit transactions that Ursula has been giving to the LSPs, and the LSPs can make old state appear and pay for that to be confirmed.  To protect against this, the Spilman-exit transactions that Ursula gives to the LSPs have to have an `nSequence` that encodes 1 hour delay (the \u201cCSV && participant\u201d branch then needs to have the CSV be at least 2 hours).  Then, a revocation of the Ursula-sourced Spilman channel has an `nSequence` of 0, allowing Ursula to spend it immediately if the old decrementing-`nSequence` state is published by the LSPs instead of the latest one.\n\nAs noted, revocation is needed so that the latest decrementing-`nSequence` is confirmed by the LSPs in a timely manner; if they delay, they run the risk that Ursula is actually notorious hacker ZmnSCPxj, who then uses the not-latest, revoked, decrementing-`nSequence` to get all the funds from the MultiChannel.  Thus, the LSPs are forced to confirm the latest decrementing-`nSequence`.\n\nSo much for revocation.\n\nLet us now turn to the Spilman Complex and how to force the LSPs to publish the latest state.  For the Ursula-sourced Spilman channel, this is already handled: if the LSPs do not publish ***any*** state, Ursula gets the funds in it, due to the \u201cCSV && Ursula\u201d branch that Spilman has as part of itself.  If the LSPs publish old state, well, that has more funds to Ursula than the latest state, because of unidirectionality.\n\nThe issue is with the LSP-sourced Spilman channels.  Unfortunately, those have to have endogenous fees, meaning the LSP has to keep a reserve fund (fortunately, Ursula does not need a reserve fund).  The Spilman-exit transactions given by the LSP to Ursula then spend that reserve fund as fees, to allow Ursula to get it confirmed. (I actually considered another revocation scheme here, but ran out of brainspace and started thrashing swap so I aborted the processing, falling back on endogenous fees).  The feerate for this can be fixed by protocol, so that it always propagates, and also have a P2A so that the LSP can, out of the goodness of its heart, get that confirmed.  Finally, any state other than the first has an output that Ursula can claim outright (either an HTLC (et al) where Ursula knows the preimage, or a plain Ursula-only output).  If that output is significant, Ursula can pay fees from that output directly; if the output is insignificant, Ursula would probably lose it in onchain fees anyway and can just tombstone it with an `OP_RETURN`.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "\u201cEverybody say \u2018fees\u2019!\u201d - some joker in Adelaide, 2017 \nUnilateral exit has to pay onchain fees.  This is a rote fact. \nNowadays we have P2A, and it is awesome that instagibbs managed to get that in before the local mempool management heuristics ossified.  In the bad old days Lightning Network parti&hellip;",
  "truncated": true,
  "post_url": "/t/a-decker-wattenhofer-multichannel-for-reduced-inter-lsp-trust/1994/3",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}