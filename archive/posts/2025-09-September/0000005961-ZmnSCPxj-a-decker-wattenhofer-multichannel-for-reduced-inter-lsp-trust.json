{
  "id": 5961,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2025-09-24T11:46:07.618Z",
  "cooked": "<p>I should note that fundamentally speaking, the construction shown in this post <em><strong>is</strong></em> in fact a Burchert-Decker-Wattenhofer channel factory, with the hosted channels being unidirectional Spilman channels.</p>\n<p>However, there are important facts:</p>\n<ul>\n<li>There are only N channels hosted in the factory, not the (N * (N - 1))/2 potential maximum a \u201ctrue\u201d factory can host.\n<ul>\n<li>The goal is availability for Ursula.  An \u201cextra\u201d channel between Alice and Bob is useless in terms of availability for Ursula since that channel would be down if <em><strong>either</strong></em> of Alice or Bob is down; what Ursula wants is to be able to increase its chances of routing, and that does not really help since if Alice is up, Ursula can just hop straight to Alice instead of using Ursula\u2192Bob\u2192Alice (and vice versa).  If Alice is down, then the Bob\u2192Alice channel is unuseable anyway.  Far more efficient liquidity-wise to <em><strong>not</strong></em> have an Alice-Bob channel and just put the liquidity that would have been placed there to point at Ursula.</li>\n</ul>\n</li>\n<li>The channel sourced from Ursula has the receiving end be a k-of-n of the LSPs.  You can plausibly argue that it is <em><strong>this</strong></em> channel that is the true core MultiChannel, and the decrementing-<code>nSequence</code> layers are actually a channel factory, and the other channels sourced from the LSPs are \u201conly\u201d Spilman 2-party Channels, and that would be an acceptable point-of-view.\n<ul>\n<li>The point here is that the MultiChannel is a <em><strong>single</strong></em> pool of funds that Ursula can use to send to <em><strong>any</strong></em>  of the LSPs, a one-to-many mapping, whereas a \u201ctrue\u201d channel factory allows Ursula to have <em><strong>multiple</strong></em> pools of funds to <em><strong>multiple</strong></em> LSPs, backed by a single onchain UTXO, but ultimately <em><strong>only</strong></em> a one-to-one mapping.  The innovation here is the possibility of a one-to-many mapping; that is the true innovation of MultiChannel and MultiPTLC.</li>\n</ul>\n</li>\n</ul>",
  "post_number": 4,
  "post_type": 1,
  "posts_count": 4,
  "updated_at": "2025-09-24T11:48:53.503Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 1.0,
  "yours": false,
  "topic_id": 1994,
  "topic_slug": "a-decker-wattenhofer-multichannel-for-reduced-inter-lsp-trust",
  "topic_title": "A Decker-Wattenhofer MultiChannel For Reduced Inter-LSP Trust",
  "topic_html_title": "A Decker-Wattenhofer MultiChannel For Reduced Inter-LSP Trust",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I should note that fundamentally speaking, the construction shown in this post ***is*** in fact a Burchert-Decker-Wattenhofer channel factory, with the hosted channels being unidirectional Spilman channels.\n\nHowever, there are important facts:\n\n* There are only N channels hosted in the factory, not the (N \\* (N - 1))/2 potential maximum a \u201ctrue\u201d factory can host.\n  * The goal is availability for Ursula.  An \u201cextra\u201d channel between Alice and Bob is useless in terms of availability for Ursula since that channel would be down if ***either*** of Alice or Bob is down; what Ursula wants is to be able to increase its chances of routing, and that does not really help since if Alice is up, Ursula can just hop straight to Alice instead of using Ursula\u2192Bob\u2192Alice (and vice versa).  If Alice is down, then the Bob\u2192Alice channel is unuseable anyway.  Far more efficient liquidity-wise to ***not*** have an Alice-Bob channel and just put the liquidity that would have been placed there to point at Ursula.\n* The channel sourced from Ursula has the receiving end be a k-of-n of the LSPs.  You can plausibly argue that it is ***this*** channel that is the true core MultiChannel, and the decrementing-`nSequence` layers are actually a channel factory, and the other channels sourced from the LSPs are \u201conly\u201d Spilman 2-party Channels, and that would be an acceptable point-of-view.\n  * The point here is that the MultiChannel is a ***single*** pool of funds that Ursula can use to send to ***any***  of the LSPs, a one-to-many mapping, whereas a \u201ctrue\u201d channel factory allows Ursula to have ***multiple*** pools of funds to ***multiple*** LSPs, backed by a single onchain UTXO, but ultimately ***only*** a one-to-one mapping.  The innovation here is the possibility of a one-to-many mapping; that is the true innovation of MultiChannel and MultiPTLC.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I should note that fundamentally speaking, the construction shown in this post is in fact a Burchert-Decker-Wattenhofer channel factory, with the hosted channels being unidirectional Spilman channels. \nHowever, there are important facts: \n\nThere are only N channels hosted in the factory, not the (N &hellip;",
  "truncated": true,
  "post_url": "/t/a-decker-wattenhofer-multichannel-for-reduced-inter-lsp-trust/1994/4",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}