{
  "id": 5962,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2025-09-24T12:13:14.481Z",
  "cooked": "<p>I was reminiscing about the good old days before Bitcoin ossified, and anyway \u2014 my initial design here was actually <em><strong>not</strong></em> to have a k-of-n trust requirement on the LSP side for its fellow LSPs.  Instead, each participant (though the really only important participant is Ursula) can offer to <em><strong>any</strong></em> of the other participants by using a pseudo-Spilman scheme with their \u201cself\u201d outputs signable using a single-use-seal.</p>\n<p>The single-use-seal can be implemented with <code>OP_CAT</code>; briefly, the \u201cself\u201d output of Ursula (et al) would have a branch where Ursula (et al) can sign unilaterally <em><strong>but</strong></em> the <code>R</code> is fixed constant in the script, which can then be reconstituted to a complete signature with <code>OP_CAT</code>; we could also spend an <code>OP_SUCCESS</code> on a new <code>OP_CHECKSEPARATEDSIG</code> where <code>R</code> is a separate stack item from <code>s</code>.  This is a \u201csingle-use-seal\u201d because if Ursula tries to sign that output again, the same <code>R</code> will leak the private key and potentially cause Ursula to lose funds.</p>\n<p>(I was desperate enough for a single-use-seal that I had to go look up the Lamport signatures scheme by Jeremy Rubin, but that is technically an <code>OP_CHECKSIGFROMSTACK</code> which cannot commit to any transaction details except <code>nLockTime</code> and <code>nSequence</code> via <code>OP_CHECKLOCKTIMEVERIFY</code> and <code>OP_CHECKSEQUENCEVERIFY</code> respectively. Sigh.)</p>\n<p>A Pseudo-Spilman is that instead of <em><strong>replacing</strong></em> the transaction, we build up a chain of transactions instead.  It has all the drawbacks of Spilman (unidirectionality) and all the drawbacks of onchain (long chains of big transactions).  However, there would be an outer, hosting Decker-Russel-Osuntokun n-of-n mechanism that hosts each of the per-participant outputs here, which would let us clean up the Pseudo-Spilman channels when all participants are online.</p>\n<p>Then, Ursula can offer a MultiPTLC (or alternatively, ask LSPs to probe separately, and pick a winning route and offer a plain PTLC or HTLC for that route, which is technically less reliable but may be reliable-enough-in-practice-and-simpler-too) by signing <em><strong>just by itself</strong></em>.  Thus, the uptime of the other participants becomes immaterial.  The other participants can then rely on the single-use-seal scheme to ensure that Ursula cannot walk it back without Ursula risking monetary loss.</p>\n<p>With this scheme, none of the LSPs even have to trust each other, though everyone does have reduced security for claimed funds from fulfilled MultiPTLC (et al): if the public transaction relay becomes utterly useless due to incoherent local mempool management heuristics, then participants in this mechanism can submit directly to miners, who would now have no incentive to participate in public transaction relay, and the single-use-seal of UTXO deletion trumps the single-use-seal of <code>R</code> reuse.  However, once everyone is online, they can then upgrade the security back to pristine Lightning security by updating the hosting mechanism to clean up the pseudo-Spilman mechanisms, thus time-bounding their risk in practice.</p>",
  "post_number": 12,
  "post_type": 1,
  "posts_count": 12,
  "updated_at": "2025-09-24T12:22:28.483Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 23,
  "readers_count": 22,
  "score": 14.6,
  "yours": false,
  "topic_id": 1983,
  "topic_slug": "multichannel-and-multiptlc-towards-a-global-high-availability-consistent-partition-tolerant-database-for-bitcoin-payments",
  "topic_title": "MultiChannel and MultiPTLC: Towards A Global High-Availability Consistent/Partition-Tolerant Database For Bitcoin Payments",
  "topic_html_title": "MultiChannel and MultiPTLC: Towards A Global High-Availability Consistent/Partition-Tolerant Database For Bitcoin Payments",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I was reminiscing about the good old days before Bitcoin ossified, and anyway \u2014 my initial design here was actually ***not*** to have a k-of-n trust requirement on the LSP side for its fellow LSPs.  Instead, each participant (though the really only important participant is Ursula) can offer to ***any*** of the other participants by using a pseudo-Spilman scheme with their \u201cself\u201d outputs signable using a single-use-seal.\n\nThe single-use-seal can be implemented with `OP_CAT`; briefly, the \u201cself\u201d output of Ursula (et al) would have a branch where Ursula (et al) can sign unilaterally ***but*** the `R` is fixed constant in the script, which can then be reconstituted to a complete signature with `OP_CAT`; we could also spend an `OP_SUCCESS` on a new `OP_CHECKSEPARATEDSIG` where `R` is a separate stack item from `s`.  This is a \u201csingle-use-seal\u201d because if Ursula tries to sign that output again, the same `R` will leak the private key and potentially cause Ursula to lose funds.\n\n(I was desperate enough for a single-use-seal that I had to go look up the Lamport signatures scheme by Jeremy Rubin, but that is technically an `OP_CHECKSIGFROMSTACK` which cannot commit to any transaction details except `nLockTime` and `nSequence` via `OP_CHECKLOCKTIMEVERIFY` and `OP_CHECKSEQUENCEVERIFY` respectively. Sigh.)\n\nA Pseudo-Spilman is that instead of ***replacing*** the transaction, we build up a chain of transactions instead.  It has all the drawbacks of Spilman (unidirectionality) and all the drawbacks of onchain (long chains of big transactions).  However, there would be an outer, hosting Decker-Russel-Osuntokun n-of-n mechanism that hosts each of the per-participant outputs here, which would let us clean up the Pseudo-Spilman channels when all participants are online.\n\nThen, Ursula can offer a MultiPTLC (or alternatively, ask LSPs to probe separately, and pick a winning route and offer a plain PTLC or HTLC for that route, which is technically less reliable but may be reliable-enough-in-practice-and-simpler-too) by signing ***just by itself***.  Thus, the uptime of the other participants becomes immaterial.  The other participants can then rely on the single-use-seal scheme to ensure that Ursula cannot walk it back without Ursula risking monetary loss.\n\nWith this scheme, none of the LSPs even have to trust each other, though everyone does have reduced security for claimed funds from fulfilled MultiPTLC (et al): if the public transaction relay becomes utterly useless due to incoherent local mempool management heuristics, then participants in this mechanism can submit directly to miners, who would now have no incentive to participate in public transaction relay, and the single-use-seal of UTXO deletion trumps the single-use-seal of `R` reuse.  However, once everyone is online, they can then upgrade the security back to pristine Lightning security by updating the hosting mechanism to clean up the pseudo-Spilman mechanisms, thus time-bounding their risk in practice.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I was reminiscing about the good old days before Bitcoin ossified, and anyway \u2014 my initial design here was actually not to have a k-of-n trust requirement on the LSP side for its fellow LSPs.  Instead, each participant (though the really only important participant is Ursula) can offer to any of the &hellip;",
  "truncated": true,
  "post_url": "/t/multichannel-and-multiptlc-towards-a-global-high-availability-consistent-partition-tolerant-database-for-bitcoin-payments/1983/12",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}