{
  "id": 5910,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2025-09-17T20:26:20.422Z",
  "cooked": "<p>Title: A Decker-Wattenhofer MultiChannel For Reduced Inter-LSP Trust</p>\n<h1><a name=\"p-5910-introduction-1\" class=\"anchor\" href=\"#p-5910-introduction-1\"></a>Introduction</h1>\n<p>The <a href=\"https://delvingbitcoin.org/t/multichannel-and-multiptlc-towards-a-global-high-availability-consistent-partition-tolerant-database-for-bitcoin-payments/1983\">MultiChannel and MultiPTLC</a> constructions are novel cryptocurrency\nsystems that provide high-Availability, Consistent, and Partition-Tolerant\naccess to the Lightning Network for end-users.</p>\n<p>Sadly, in order to achieve the high-availability goal, it degrades the\nsecurity of the LSPs, and requires that the LSPs trust their funds to a\nquorum of the other LSPs in the same MultiChannel.</p>\n<ul>\n<li>The user Ursula <em><strong>does not trust</strong></em> the LSPs for <em><strong>fund safety</strong></em>:\nnot all of them together, not a quorum, not a single one, there is no\ntrust necessary <em><strong>at all</strong></em> in any of them or in all of them.\n<ul>\n<li>The user Ursula <em><strong>does trust</strong></em> a quorum of LSPs to provide them\nwith the ability to send and receive payments.</li>\n<li>The user Ursula <em><strong>does trust</strong></em> a quorum of LSPs to not lock the\nUrsula funds for two weeks (or so) due to unilateral exit when\nUrsula is willing to cooperatively exit.</li>\n</ul>\n</li>\n<li>The LSPs Alice, Bob, and Carol <em><strong>do not trust</strong></em> Ursula for\n<em><strong>fund safety</strong></em>.\n<ul>\n<li>The LSPs Alice, Bob, and Carol <em><strong>do trust</strong></em> Ursula will not jam\ntheir public channels.</li>\n<li>The LSPs Alice, Bob, and Carol <em><strong>do trust</strong></em> Ursula will actually\nutilize any inbound liquidity they provide to Ursula.\nThis trust requirement can be removed if Ursula bought that\ninbound liquidity.</li>\n<li>The LPSs Alice, Bob, and Carol <em><strong>do trust</strong></em> Ursula to not lock\nLSP funds for two weeks (or so) due to unilateral exit when a\nquorum of LSPs is willing to cooperatively exit.</li>\n</ul>\n</li>\n<li>The LSPs Alice, Bob, and Carol <em><strong>do trust</strong></em> a quorum of their\npartner LSPs for <em><strong>fund safety</strong></em>.\n<ul>\n<li>A quorum of LSPs can outright steal funds from an LSP with no\nrecourse or theft punishment mechanism.\n<ul>\n<li>Even if this happens, fund safety is still assured for Ursula\n(and the theft would either require the cooperation of Ursula,\nor will nominally entirely benefit Ursula only).</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>In this writeup, I will present a variant of MultiChannel based on the\nnested Decker-Wattenhofer construction, which <em>reduces</em> but <em>does not\ncompletely eliminate</em> the trust that the LSPs have to have with a\nquorum of their partner LSPs.</p>\n<p>As a quick refresher, the full Decker-Wattenhofer Duplex\nMicropayment Channel is a nested construction:</p>\n<ul>\n<li>One or more nested layers of decrementing-<code>nSequence</code>\nconstructions.</li>\n<li>An innermost layer composed of two <code>nSequence</code>-variant Spilman\nunidirectional channels, one in each direction (the \u201cduplex\u201d).</li>\n</ul>\n<p>As a bonus, this construction also achieves the 0.5-roundtrip of\n\u201cfast forwards\u201d (and in fact, one can argue that the \u201cfast forward\u201d\nscheme is just the stealth use of Spilman inside Poon-Dryja, which\nis what actually achieves the 0.5-roundtrip).</p>\n<h1><a name=\"p-5910-motivation-2\" class=\"anchor\" href=\"#p-5910-motivation-2\"></a>Motivation</h1>\n<p>Let us review our base onlineness assumptions of the participants:</p>\n<ul>\n<li>Ursula is <em><strong>usually offline</strong></em>.\n<ul>\n<li>Ursula only comes online <em><strong>when she wants to pay</strong></em> or\n<em><strong>when she wants to check if she received</strong></em>.</li>\n<li>Ursula <em><strong>does not want to wait</strong></em>; if she has to pay right\nnow, she needs the Lightning connectivity service\n<em><strong>right now</strong></em>.</li>\n</ul>\n</li>\n<li>The LSPs are <em><strong>chronically online</strong></em>.\n<ul>\n<li>However, because of the large amounts of money in hot wallets,\nthe LSPs <em><strong>must take security seriously</strong></em>.</li>\n<li>This means that, at random times, when a security-critical\npatch is needed, <em><strong>the LSP MUST go offline to patch</strong></em>.</li>\n</ul>\n</li>\n</ul>\n<p>The classic Channel construction does not serve Ursula well:</p>\n<ul>\n<li>Suppose at a random time, a security bug forces the LSP to\ngo offline and patch the bug.</li>\n<li>Suppose while the LSP is offline, Ursula has to pay <em><strong>right\nnow</strong></em>.\n<ul>\n<li>Users do not care that 99.5% of the time the website loads\nin 0.05s, they care about that 0.5% of the time the\nwebsite took 2.0s to load.\nSimilarly, Ursula does not care that 99.5% of the timae,\nthe LSP was online and could have facilitated their\npayment, Ursula only cares about that 0.5% of the time\nwhen Ursula needed to pay <em><strong>right now</strong></em> but the LSP was\noffline for \u201croutine maintenance\u201d BS.</li>\n<li>Ursula <em>could</em> maintain multiple separate Channels to\nmultiple separate LSPs.\nUnfortunately, that increases the liquidity requirements\nand increases onchain resource usage, which Ursula has\nto pay for, directly or indirectly.</li>\n</ul>\n</li>\n</ul>\n<p>With a MultiChannel, Ursula does not have to maintain separate\nChannels to separate LSPs.\nUrsula can create a single MultiChannel pointed at multiple\nLSPs, and as long as at least a quorum of LSPs is online,\n(e.g. 2 of 3, 3 of 5) then Ursula can still make a payment.</p>\n<p>For example, even if the 3 LSPs Alice, Bob, and Carol are run\nby a single corporation, when a critical security update is\nneeded, that single corporation can use a \u201crolling update\u201d\nscheme where it only takes down one LSP, updates it, brings\nit back up, monitors it for a while to check for unexpected\nissues, then takes down the next LSP, etc., until all the\nLSPs are updated.\nWith a MultiChannel, the rolling updates ensure that Ursula\nstill has continuous service;\ncompared to a \u201cmultiple plain Channels\u201d scheme, Ursula gets:</p>\n<ul>\n<li>In a multiple plain Channels scheme, if one of the LSPs is\ndown, the liquidity in the plain Channel with that LSP is\nunuseable while that LSP is offline.\nWith a MultiChannel, all the liquidity in the single\nMultiChannel remains useable with the still-live LSPs.\n<ul>\n<li>With MultiPTLC, Ursula can give a MultiPTLC package to a\nquorum of the LSPs, and herself go offline, then when the\ndead LSP comes online, it can start participating in the\n\u201cstuckless a.k.a. \u2018parallel stuck is fine actually\u2019\u201d payment\nprotocol seamlessly without Ursula having to come back online\nto authorize it.</li>\n</ul>\n</li>\n<li>In a multiple plain Channels scheme, one UTXO is needed for\neach LSP that Ursula has, increasing onchain costs.\nWith a MultiChannel, only a single UTXO is needed for the\nsingle MultiChannel to multiple LSPs.</li>\n</ul>\n<p>The drawback of the MultiChannel is:</p>\n<blockquote>\n<ul>\n<li>The LSPs Alice, Bob, and Carol <em><strong>do trust</strong></em> a quorum of their\npartner LSPs for <em><strong>fund safety</strong></em>.</li>\n</ul>\n</blockquote>\n<p>Thus, while a single corporation might willingly run multiple\nLSPs and allow a MultiChannel from end-users to their LSPs,\nmultiple corporations may be unwilling to risk their funds\nto form MultiChannels with each other.</p>\n<p>This is problematic because:</p>\n<blockquote>\n<ul>\n<li>The user Ursula <em><strong>does trust</strong></em> a quorum of LSPs to provide them\nwith the ability to send and receive payments.</li>\n</ul>\n</blockquote>\n<p>A single corporation running all the LSPS of Ursula can\ntrivially form a quorum of the LSPs of Ursula, and deny\nUrsula the ability to send and receive payments.\nUrsula can still bring their funds onchain (this is the\n<em><strong>funds safety</strong></em> part) but this is expensive compared\nto Lightning, and can remain effective as a censorship\nmechanism.</p>\n<p>However, if we are able to reduce the trust requirements\nof LSPs to each other, this may be enough for multiple\ncorporations to allow their LSPs to run on the same\nMultiChannel, banking on reduced risk.\nIf the risks can be lowered, then it may become simply\n\u201cthe cost of doing business\u201d and acceptable to provide\nbetter service to end-users.\nIf so, no single corporation can outright deny Ursula\nservice, and the other corporations can still provide\nservice to Ursula, reducing the censorship risk.</p>\n<h1><a name=\"p-5910-concepts-3\" class=\"anchor\" href=\"#p-5910-concepts-3\"></a>Concepts</h1>\n<p>Before continuing with the actual construction, I will\npresent some concepts that are vital to the\nconstructions.</p>\n<p>First, let us refresh the onlineness of our participants:</p>\n<blockquote>\n<ul>\n<li>Ursula is <em><strong>usually offline</strong></em>.</li>\n<li>The LSPs are <em><strong>chronically online</strong></em>.</li>\n</ul>\n</blockquote>\n<p>Now let me present the concepts:</p>\n<ul>\n<li><em><strong>Update</strong></em> is an operation that requires\nUrsula to be online, plus at least a quorum (in our\nexample, 2 of 3) of Alice, Bob, and Carol.\n<ul>\n<li>Every payment (send or receive) is an update.</li>\n<li>Failed payments are also updates.</li>\n<li>As only a quorum of Alice, Bob, and Carol is\nneededd, it provides high availability to Ursula\nfor her sends and receives.</li>\n<li>Every update \u201cdirties\u201d the MultiChannel a little\nbit.\nWith enough dirtiness, the MultiChannel becomes\nunuseable, but a Cleanup (described below) will\nremove all the dirtiness.</li>\n</ul>\n</li>\n<li><em><strong>Cleanup</strong></em> is an operation that requires <em>all</em>\nparticipants (Ursula, Alice, Bob, and Carol) to be\nonline.\nIt <em>has</em> to happen or else the channel slowly becomes\nunuseable.\n<ul>\n<li>However, it is only needed periodically, e.g. at\nmost once a day, and can generally be run at\nany time.</li>\n<li>Cleanup only matters if Ursula is actively doing\nupdates to the MultiChannel state.\nIf Ursula does some updates (which dirties the\nMultiChannel) while only a quorum of LSPs is\navailable, then goes offline for weeks or months\nwithout sending or receiving, it is OK to leave\nthe MultiChannel in a \u201cdirty\u201d state until Ursula\nhappens to come online while all the LSPs\nare also online.</li>\n<li>Very rarely (at most once or twice a year)\nCleanup will create an onchain transaction,\nwhich is a simple one-input, one-output\ntransaction.\nThis is an <em><strong>Onchain Cleanup</strong></em>, compared to\nnormal Cleanups that happen completely offchain.\n<ul>\n<li>In case of an onchain splice (splice-in or\nsplice-out) the Onchain Cleanup can be\ncoalesced with the splice.\nSo, if Ursula or the LSPs initiate any splice\noperation, this will also count as a Cleanup\nand also defer the need for a future Onchain\nCleanup.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Presenting these concepts separately allows us to\nconsider their impacts to the UX first before we\nproceed to the details of the channel.</p>\n<p>While Cleanup requires a full consensus (i.e. all\nLSPs plus Ursula) to come online, it is a rare\noperation; if Ursula hardly ever uses the wallet,\nthen it is okay to not do Cleanups, too.\nCleanups really only become necessary if Ursula is\ndoing a lot of offchain receives and offchain sends\nalternately.</p>\n<p>An Onchain Cleanup is necessary after a few hundred\nCleanup operations.\nSo, if Cleanups are rare, an Onchain Cleanup is\neven rarer.</p>\n<p>Further, an Onchain Cleanup is also coalesced with\nany splice operation.\nAn Onchain Cleanup also counts as a Cleanup, so\nthat also enables in practice some amount of receives\nand sends.</p>\n<p>For example, if Ursula receives their monthly salary\nonchain, and then puts some of it into their Lightning\nwallet via splice-in, then that is an Onchain Cleanup\nas well.</p>\n<p>Alternately, if Ursula mostly receives money into\ntheir wallet, at some point the liquidity from the\nLSPs to the MultiChannel depletes.\nThe LSPs already have strong evidence that Ursula\nwill tend to receive funds, so they can justify\nsplicing in more liquidity towards Ursula.\nAgain, that splice-in is also coalesced with an Onchain\nCleanup.</p>\n<p>Thus, this construction would work fine for\nmostly-send and mostly-receive users, where Cleanup\noperations in the form of splices in and out of the\nMultiChannel would be enough to prevent the buildup\nof Update dirt.\nIt is somewhat more problematic for users that have a\nlot of activity that is mostly balanced between sends\nand receives, especially when alternating between them.</p>\n<p>Nevertheless, for many users, it would seamlessly\nallow them to make payments <em><strong>right now</strong></em>, even if\nsome less-than-quorum number of LSPs are down.\nCleanups do require the consensus set of LSPs, however,\nwe expect that most of the time, all the LSPs are\nchronically online anyway, and the Cleanup operations\ncan be done at almost any time when Ursula happens to\nbe online to spend or to check a received payment.</p>\n<h1><a name=\"p-5910-the-construction-4\" class=\"anchor\" href=\"#p-5910-the-construction-4\"></a>The Construction</h1>\n<p>I now present the jxPCSnmZ-Decker-Wattenhofer Complex\nMicropayment MultiChannel construction, a novel nested\nconstruction that achieves the characteristics of the\noriginal MultiChannel concept, while providing\nimproved trust-reduction for the LSPs.</p>\n<ul>\n<li>One or more nested layers of decrementing-<code>nSequence</code>\nconstructions.\n<ul>\n<li>Signers are all n-of-n participants.</li>\n</ul>\n</li>\n<li>An innermost layer composed of multiple <code>nSequence</code>-variant\nSpilman unidirectional channels (the \u201ccomplex\u201d), one for\neach participant.\n<ul>\n<li>The Ursula Spilman channel is slightly different: it is\nfrom Ursula, to a k-of-n of the LSPs.\n<ul>\n<li>The signer is a nested 2-of-2, where one side is Ursula\nalone, and the other side is a k-of-n of the LSPs.</li>\n</ul>\n</li>\n<li>The LSP Spilman channels are standard two-party\nunidirectional channels, from LSP to Ursula.</li>\n</ul>\n</li>\n</ul>\n<p>Immediately, the improved trust-reduction is apparent:</p>\n<ul>\n<li>The LSP Spilman channels follow <em><strong>NOT YOUR KEYS, NOT YOUR\nCOINS</strong></em>: the construction is an n-of-n with the LSP and\nUrsula, and every outer construction in the nested\nconstruction are <em>also</em> n-of-n, which includes the LSP and\nUrsula.\nThus, to spend from it, requires <strong>YOUR KEYS</strong>, thus the\ncoins inside it are <strong>YOUR COINS</strong>.\n<ul>\n<li>Thus, money held by the LSP and Ursula on the LSP Spilman\nchannels is completely safe (assuming adequate onchain\nmonitoring after a unilateral close).</li>\n</ul>\n</li>\n<li>The only thing with a degraded, trust-requiring k-of-n is\nthe Ursula Spilman channel.\n<ul>\n<li>Thus, money that the LSPs have already received via this\nchannel is at risk, and the LSPs trust a quorum of its\npartner LSPs to not steal those funds by publishing old\nstate or cooperating with Ursula.</li>\n<li>Ursula is a single signer on the 2-of-2 signing layer,\nthus has no trust requirement for its own funds here.</li>\n</ul>\n</li>\n</ul>\n<p>The trust requirement for <em><strong>fund safety</strong></em> is thus reduced\nfor LSPs towards their partner LSPs (Ursula has no trust\nrequirement for <em><strong>fund safety</strong></em> at all, as emphasized\nearlier).</p>\n<h2><a name=\"p-5910-on-spilman-unidirectionality-5\" class=\"anchor\" href=\"#p-5910-on-spilman-unidirectionality-5\"></a>On Spilman Unidirectionality</h2>\n<p>Technically speaking, if an HTLC, PTLC, or MultiPTLC is\nfailed offchain in a Spilman channel, this <em>returns</em> funds\nto the sender-side of the Spilman channel.\nThis violates the unidirectionality assumption of Spilman.</p>\n<p>As a concrete example, suppose an LSP forwards an HTLC to\nUrsula via a Spilman channel, from the public network.\nThis is a new state where some funds are now in an HTLC.\nHowever, Ursula says it does not know the preimage anyway,\nso they sign a new state where the funds are returned to\nthe LSP, creating a new state without the HTLC.\nThen the LSP propagates the failure back to the public\nnetwork, failing its incoming HTLC.</p>\n<p>Unfortunately for the LSP, \u201cUrsula\u201d was actually the\nsockpuppet of notorious hacker ZmnSCPxj.\nZmnSCPxj was the one who actually sent the HTLC from the\npublic network, and made \u201cUrsula\u201d fail it.\nSo when the HTLC failure has propagated back to ZmnSCPxj,\n\u201cUrsula\u201d unilaterally closes the Spilman channel using the\nold state where the Spilman channel still has the HTLC,\nand takes the H branch to get the funds.\nSince the incoming HTLC on the LSP side is already\nirrevocably committed as having been removed, the LSP cannot\nreclaim funds from the incoming channel with the now-revealed\npreimage.</p>\n<p>Thus, in general, HTLC, PTLC, and MultiPTLC failures\n<em><strong>cannot</strong></em> be performed offchain in a Spilman channel.\nOnce the funds from the sender-side of the Spilman channel\nhave been put into an HTLC or whatever, it either has to be\nclaimed by the receiver-side of the Spilman channel, or left\nas an HTLC or whatever until the Spilman channel state\nbecomes immaterial.</p>\n<p>This is actually one of the kinds of \u201cdirtiness\u201d in this\nmechanism.\nIf an offerred HTLC, PTLC, or MultiPTLC in a Spilman\nchannel is <em>supposed to be</em> failed, it has to remain as\n\u201cdefinitely still an HTLC / PTLC / MultiPTLC\u201d in the state\nof the channel going forward.\nObviously, that fund cannot be reused for a different\nHTLC, PTLC, or MultiPTLC, so if there are enough of this\nkind of dirtiness \u201cbuilt up\u201d, we need to somehow reset\nthe Spilman channel state.</p>\n<p>Thus, a \u201cCleanup\u201d is needed, as was discussed earlier, to\nget rid of this kind, as well as other kinds, of dirtiness.</p>\n<h3><a name=\"p-5910-lsp-to-ursula-payment-hop-6\" class=\"anchor\" href=\"#p-5910-lsp-to-ursula-payment-hop-6\"></a>LSP to Ursula Payment Hop</h3>\n<p>Due to the HTLC (et al) having to remain in the Spilman\nstate if it would fail, it means that payment faillure\n<em>cannot</em> be propagated back until a Cleanup.</p>\n<p>We can ameliorate this issue by doing a \u201cpre-check\u201d.\nWhen the LSP receives an HTLC (et al) from the public network\nto Ursula, instead of immediately fast-forwarding it, it\nfirst does a 1.0-roundtrip query with the hash (or point for\nPTLCs) to Ursula.</p>\n<p>Then, only if Ursula says it can claim that fund, will\nthe LSP actually provide the new state that forwards the\nHTLC (et al) to Ursula.\nIf instead, Ursula says \u201cI have never seen this hash in my\nlife\u201d it provides an payment failure return onion, and the\nLSP can fail its own incoming HTLC (et al) safely, as there\nis no outgoing HTLC (et al) to Ursula yet.</p>\n<p>Of course, if Ursula says \u201cyeah I know it, send it on\u201d and\nthen the LSP sends the new state, Ursula could just fail it\nanyway, and the LSP has to hold the corresponding incoming\nHTLC (et al) until a Cleanup can be done to remove the HTLC\ndirt.\nHowever, this jamming is covered in our trust assumptions:</p>\n<blockquote>\n<ul>\n<li>The LSPs Alice, Bob, and Carol <em><strong>do trust</strong></em> Ursula will not jam\ntheir public channels.</li>\n</ul>\n</blockquote>\n<h3><a name=\"p-5910-ursula-to-lsp-payment-hop-7\" class=\"anchor\" href=\"#p-5910-ursula-to-lsp-payment-hop-7\"></a>Ursula to LSP Payment Hop</h3>\n<p>Since Ursula is not a forwarder, we can leave a failed HTLC,\nPTLC, or MultiPTLC on its Spilman channel indefinitely.\nIt adds dirt, but all that dirt can be cleared by a later\nCleanup operation.</p>\n<p>(<em><strong>IMPORTANT</strong></em> It is <em>stil</em> unsafe to just return the HTLC\n(et al) to Ursula if the LSPs claim it is failed.\nEverything is a forwarder: if I am buying something from a\nstore, I am getting an item in exchange for funds, and thus I\nam a forwarder that accepts real-world items to forward Bitcoin\nover Lightning.\nMore concretely: suppose Ursula goes to a store, and then\nattempts to pay with Lightning, which creates an HTLC (et al)\non the MultiChannel.\nHowever, the LSP claims the payment failed, so, disappointed,\nUrsula leaves the store itemless, and goes on a flight to El\nSalvador, which has better Bitcoin support.\nOn landing, the Ursula wallet gets Internet and sees that the\nLSP dropped old state onchain, and claimed the HTLC and\nrevealed the preimage.\nWhat would the wallet do, say \u201cactually, remember that payment\nI said was definitely 100% failed?\nummmm actually it went through, happy now?\u201d\nUnfortunately, Ursula is already in El Salvador, very far\naway from the store.\nThus, it is <em><strong>still</strong></em> unsafe in general to return the\nHTLC (et al) on failure; it <em><strong>has to</strong></em> remain in the Spilman\nchannel state indefinitely, as dirt that is removed on the\nCleanup.)</p>\n<p>Just use a MultiPTLC if you are paying a PTLC-based invoice.</p>\n<p>The big advantage of the MultiPTLC is that Ursula can offer\njust a <em><strong>single</strong></em> MultiPTLC, and the LSPs can then operate\nthe \u201cstuckless because that is the name we are stuck with\u201d\npayment protocol, in parallel, backed by that single MultiPTLC.\nAs long as at least one of the attempts succeed, then the\nMultiPTLC <em>will</em> succeed and we are still properly\nunidirectional.</p>\n<p>With only PTLCs, Ursula has to either decide to offer just\none PTLC to one of the LSPs, which has low availability (if\nall paths through that LSP fail, then that offerred PTLC has\nto fail and remains as dirt on the MultiPTLC), or offer\nmultiple PTLCs, with the knowledge that at most one of those\nPTLCs will succeed and the other PTLCs will be dirt on the\nSpilman channel.\nThus, MultiPTLC is superior.</p>\n<p>Of course, we still need to work with HTLCs for a while.\nFor this case, Ursula can do the inverse of the \u201cpre-check\u201d\nused in the LSP-to-Ursula case: it asks the LSPs to probe\nthe network to reach the receiver.\nThe LSPs can even do this probing in parallel.</p>\n<p>Of course, that means that LSPs have to send out HTLCs on\nbehalf of Ursula while Ursula has no HTLCs to the LSP,\nwhich is risky on the LSP.\nWe can thus use a \u201cprovable probe attempt\u201d scheme by ajtowns\nlong ago (do not remember the link, sorry).</p>\n<p>In a provable probe, you generate a fake hash for your HTLC\nas below:</p>\n<ul>\n<li>Take a random 256-bit number, <code>proof_of_probe</code>.</li>\n<li>Get <code>real_hash = sha256(proof_of_probe)</code>.</li>\n<li>Use the hash <code>fake_hash = real_hash ^ 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</code>.</li>\n</ul>\n<p>What we do is, Ursula creates multiple possible onion\npaths, with <code>fake_hash</code>es generated above.\nUrsula then asks the LSPs to probe using HTLCs with those\n<code>fake_hash</code>es along those onion paths, and provides the\n<code>proof_of_probe</code>s for each one.\nThe LSPs thus know that the HTLC they are being asked to\nsend out is unclaimable unless SHA256 has been broken.</p>\n<p>The HTLCs sent out are definitely going to fail, and the\nLSPs return the payment failures back to Ursula, who can\ndecrypt them and see which ones reached the receiver.\nThese probe attempts can even be safely sent out in\nparallel.\nThen Ursula can select one of the successful payment paths,\nor if all of them fail before the receiver, can give up\nwithout putting HTLC dirt on the MultiChannel state.</p>\n<p>(A nice benefit of this is that even if a remote node goes\ndown while holding an HTLC lock, if it happens during this\nprobing stage, Ursula is unaffected as she has no HTLCs\nlocked in the HTLC-lock-chain.\nWe should probably consider implementing this on the\nexisting Lightning Network right now, even with just\nlow-availability Channels.)</p>\n<p>With MultiPTLC, pre-probing can still be done (the proof\nof probe is simpler in that the <code>sha256(proof_of_probe)</code> is\njust the X coordinate of the point), but Ursula can provide\n<em>all</em> successful paths in the MultiPTLC instead of just\nselecting one as with HTLC, and is protected agaisnt remote\nnodes going down while holding a PTLC (with HTLCs, there\nis still a tiny chance of failure (because the earlier\nfailure used in the probe also unlocked the HTLC lock-chain,\nthis is a double-checked-locking antipattern), and a tinier\nchance that a node on the selected path (which was OK just\nseveral hundred milliseconds ago?) will go down).</p>\n<p><em><strong>IMPORTANT</strong></em>: Regardless of whether we are using\nMultiPTLC or HTLC, the wallet MUST NOT show the payment as\nfailed until a Cleanup has occurred to actually remove the\nunderlying MultiPTLC or HTLC; it should still show it as\n\u201cpending\u201d, because technically it can still be claimed\nuntil timeout.</p>\n<h2><a name=\"p-5910-the-ursula-spilman-channel-8\" class=\"anchor\" href=\"#p-5910-the-ursula-spilman-channel-8\"></a>The Ursula Spilman Channel</h2>\n<p>As mentioned above, the Ursula Spilman channel is unusual\nin that one of the 2-of-2 is actually a k-of-n amongst\nthe LSPs.</p>\n<p>Largely, this changes the trust model for the LSPs only;\nin effect, any funds that an LSP has claimed from that channel\nfrom successfully forwarded HTLCs or MultiPTLCs, are delegated\nto a quorum of the LSPs.\nAs noted, this is part of the MultiChannel degraded security\nand is a deliberate tradeoff.</p>\n<p>Otherwise, there is no effect on Ursula.\nThat it is on an n-of-n signing layer means it has the same\ntrust assumptions as normal Spilman.</p>\n<p>I would like to emphasize that all existing LN implementations\n(should) sign unilateral closes only when they actually want\nto unilaterally close.\nOtherwise, they just store the signature coming from the other\nside.</p>\n<p>Similarly, when Ursula updates the state of the Ursula\nSpilman channel (to offer an HTLC or MultiPTLC, or to finalize a\nclaimed HTLC or MultiPTLC), it sends a signature for its share\nof the 2-of-2, but the quorum of LSPs <em><strong>MUST NOT</strong></em> create a\nsignature for the other part of the 2-of-2.\nInstead, they should defer signing their side until either a\nnew state is received (and they then never ever sign the old\nstate) or when a quorum agrees to unilaterally close the\nconstruction.</p>\n<h2><a name=\"p-5910-cleanup-and-onchain-cleanup-9\" class=\"anchor\" href=\"#p-5910-cleanup-and-onchain-cleanup-9\"></a>Cleanup and Onchain Cleanup</h2>\n<p>What I call a Cleanup is simply an update in the nested\ndecrementing-<code>nSequence</code>.\nSee the original Decker-Wattenhofer for details.</p>\n<p>Funds in the Ursula Spilman channel that are now owned by\none of the LSPs (which come from successful claims of HTLCs\nor MultiPTLCs) <em><strong>cannot</strong></em> be used as liquidity from LSP to\nUrsula.\nAgain, the Spilman channel is unidirectional, so there is\nno way to safely return funds to Ursula.\nThis is another example of \u201cdirt\u201d that builds up on the\nMultiChannel that needs to be cleaned up.</p>\n<p>Similarly, funds in any of the LSP Spilman channels that\nhave been claimed by Ursula cannot be sent out by Ursula\nuntil a Cleanup.</p>\n<p>However, we can still have some time where Cleanup is\nabsolutely necessary.\nFor as long as there is still plain liquidity from the source\nof each Spilman channel, the participants can continue making\nUpdates (adding new HTLCs, PTLCs, or MultiPTLCs) with a\ndirty MultiChannel and defer Cleanup.\nThus, we expect Cleanup to be reasonably rare, though\ncontinuous multidirectional send/receive/send/receive\nsequences increase the dirt and the need to Cleanup.</p>\n<p>When a Cleanup is done, the consensus adds up all the funds\nthat are definitely owned by each participant, and assigns\nthose as the initial state of each of the Spilman channels.\nAny pending HTLC, PTLC, and MultiPTLC that is neither claimed\nnor failed is retained in the Spilman channel they were in\nbefore Cleanup (ideally, Cleanup would not occur unless all\nHTLCs, PTLCs, and MultiPTLCs have been claimed or failed,\nbut the Cleanup code should definitely handle the case where\nCleanup occurs while locks are still held).\nThey then agree on what the next state on the\ndecrementing-<code>nSequence</code> nested mechanism looks like, and\nsign the necessary transactions to move to the new state\nand to start the recreated Spilman channels.</p>\n<p>Now, the decrementing-<code>nSequence</code> mechanism is effectively a\ncounter, and at some point, that counter drops to zero, and\nno more state changes can be done on the\ndecrementing-<code>nSequence</code> layer.\nWhen that happens, the participants absolutely need to do an\nOnchain Cleanup, which not only resets the Spilman complex\nlayer, but also resets the decrementing-<code>nSequence</code> layer\ncounter.</p>\n<p>Presumably, the LSPs will consider channel forwarding fees\nwith the knowledge that Onchain Cleanup will occur at\nsome point, and adjust the forwarding fee rates accordingly.\nThus, these Onchain Cleanups should be paid for by the LSPs\n(with the understanding that they will extract this from\nUrsula via channel forwarding fees, and if Ursula is truly\ninactive, just unilaterally close the construction).</p>\n<p>Splicing will require an onchain reseat of the backing UTXO\nanyway, so we may as well also reset the counter on the\ndecrementing-<code>nSequence</code> layer when that happens, thus\n\u201ccoalescing\u201d an Onchain Cleanup with a splice.\nThe cost of the splice can be billed to whoever initiates\nthe splice.</p>\n<p>Splicing in and out, as well as Onchain Cleanup and even\njust plain Cleanup, requires all participants to be online.\nThis allows the trust-reduction that this MultiChannel\nimplementation allows.</p>\n<p>A Cleanup is desirable for the LSPs if Ursula has\nsuccessfully sent funds.\nIn that condition, the Ursula Spilman channel has funds\nof one or more of the LSPs, which is at degraded\nsecurity for the LSPs due to being protected by a k-of-n\ninstead of a strict requirement for the owning LSP.\nA completed Cleanup will move those funds into the\nper-LSP Spilman channels, with the standard online\nLightning security model.</p>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 1,
  "updated_at": "2025-09-17T20:26:20.422Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 0.6,
  "yours": false,
  "topic_id": 1994,
  "topic_slug": "a-decker-wattenhofer-multichannel-for-reduced-inter-lsp-trust",
  "topic_title": "A Decker-Wattenhofer MultiChannel For Reduced Inter-LSP Trust",
  "topic_html_title": "A Decker-Wattenhofer MultiChannel For Reduced Inter-LSP Trust",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Title: A Decker-Wattenhofer MultiChannel For Reduced Inter-LSP Trust\n\n# Introduction\n\nThe [MultiChannel and MultiPTLC](https://delvingbitcoin.org/t/multichannel-and-multiptlc-towards-a-global-high-availability-consistent-partition-tolerant-database-for-bitcoin-payments/1983) constructions are novel cryptocurrency\nsystems that provide high-Availability, Consistent, and Partition-Tolerant\naccess to the Lightning Network for end-users.\n\nSadly, in order to achieve the high-availability goal, it degrades the\nsecurity of the LSPs, and requires that the LSPs trust their funds to a\nquorum of the other LSPs in the same MultiChannel.\n\n* The user Ursula ***does not trust*** the LSPs for ***fund safety***:\n  not all of them together, not a quorum, not a single one, there is no\n  trust necessary ***at all*** in any of them or in all of them.\n  * The user Ursula ***does trust*** a quorum of LSPs to provide them\n    with the ability to send and receive payments.\n  * The user Ursula ***does trust*** a quorum of LSPs to not lock the\n    Ursula funds for two weeks (or so) due to unilateral exit when\n    Ursula is willing to cooperatively exit.\n* The LSPs Alice, Bob, and Carol ***do not trust*** Ursula for\n  ***fund safety***.\n  * The LSPs Alice, Bob, and Carol ***do trust*** Ursula will not jam\n    their public channels.\n  * The LSPs Alice, Bob, and Carol ***do trust*** Ursula will actually\n    utilize any inbound liquidity they provide to Ursula.\n    This trust requirement can be removed if Ursula bought that\n    inbound liquidity.\n  * The LPSs Alice, Bob, and Carol ***do trust*** Ursula to not lock\n    LSP funds for two weeks (or so) due to unilateral exit when a\n    quorum of LSPs is willing to cooperatively exit.\n* The LSPs Alice, Bob, and Carol ***do trust*** a quorum of their\n  partner LSPs for ***fund safety***.\n  * A quorum of LSPs can outright steal funds from an LSP with no\n    recourse or theft punishment mechanism.\n    * Even if this happens, fund safety is still assured for Ursula\n      (and the theft would either require the cooperation of Ursula,\n      or will nominally entirely benefit Ursula only).\n\nIn this writeup, I will present a variant of MultiChannel based on the\nnested Decker-Wattenhofer construction, which *reduces* but *does not\ncompletely eliminate* the trust that the LSPs have to have with a\nquorum of their partner LSPs.\n\nAs a quick refresher, the full Decker-Wattenhofer Duplex\nMicropayment Channel is a nested construction:\n\n* One or more nested layers of decrementing-`nSequence`\n  constructions.\n* An innermost layer composed of two `nSequence`-variant Spilman\n  unidirectional channels, one in each direction (the \u201cduplex\u201d).\n\nAs a bonus, this construction also achieves the 0.5-roundtrip of\n\u201cfast forwards\u201d (and in fact, one can argue that the \u201cfast forward\u201d\nscheme is just the stealth use of Spilman inside Poon-Dryja, which\nis what actually achieves the 0.5-roundtrip).\n\n# Motivation\n\nLet us review our base onlineness assumptions of the participants:\n\n* Ursula is ***usually offline***.\n  * Ursula only comes online ***when she wants to pay*** or\n    ***when she wants to check if she received***.\n  * Ursula ***does not want to wait***; if she has to pay right\n    now, she needs the Lightning connectivity service\n    ***right now***.\n* The LSPs are ***chronically online***.\n  * However, because of the large amounts of money in hot wallets,\n    the LSPs ***must take security seriously***.\n  * This means that, at random times, when a security-critical\n    patch is needed, ***the LSP MUST go offline to patch***.\n\nThe classic Channel construction does not serve Ursula well:\n\n* Suppose at a random time, a security bug forces the LSP to\n  go offline and patch the bug.\n* Suppose while the LSP is offline, Ursula has to pay ***right\n  now***.\n  * Users do not care that 99.5% of the time the website loads\n    in 0.05s, they care about that 0.5% of the time the\n    website took 2.0s to load.\n    Similarly, Ursula does not care that 99.5% of the timae,\n    the LSP was online and could have facilitated their\n    payment, Ursula only cares about that 0.5% of the time\n    when Ursula needed to pay ***right now*** but the LSP was\n    offline for \u201croutine maintenance\u201d BS.\n  * Ursula *could* maintain multiple separate Channels to\n    multiple separate LSPs.\n    Unfortunately, that increases the liquidity requirements\n    and increases onchain resource usage, which Ursula has\n    to pay for, directly or indirectly.\n\nWith a MultiChannel, Ursula does not have to maintain separate\nChannels to separate LSPs.\nUrsula can create a single MultiChannel pointed at multiple\nLSPs, and as long as at least a quorum of LSPs is online,\n(e.g. 2 of 3, 3 of 5) then Ursula can still make a payment.\n\nFor example, even if the 3 LSPs Alice, Bob, and Carol are run\nby a single corporation, when a critical security update is\nneeded, that single corporation can use a \u201crolling update\u201d\nscheme where it only takes down one LSP, updates it, brings\nit back up, monitors it for a while to check for unexpected\nissues, then takes down the next LSP, etc., until all the\nLSPs are updated.\nWith a MultiChannel, the rolling updates ensure that Ursula\nstill has continuous service;\ncompared to a \u201cmultiple plain Channels\u201d scheme, Ursula gets:\n\n* In a multiple plain Channels scheme, if one of the LSPs is\n  down, the liquidity in the plain Channel with that LSP is\n  unuseable while that LSP is offline.\n  With a MultiChannel, all the liquidity in the single\n  MultiChannel remains useable with the still-live LSPs.\n  * With MultiPTLC, Ursula can give a MultiPTLC package to a\n    quorum of the LSPs, and herself go offline, then when the\n    dead LSP comes online, it can start participating in the\n    \u201cstuckless a.k.a. \u2018parallel stuck is fine actually\u2019\u201d payment\n    protocol seamlessly without Ursula having to come back online\n    to authorize it.\n* In a multiple plain Channels scheme, one UTXO is needed for\n  each LSP that Ursula has, increasing onchain costs.\n  With a MultiChannel, only a single UTXO is needed for the\n  single MultiChannel to multiple LSPs.\n\nThe drawback of the MultiChannel is:\n\n> * The LSPs Alice, Bob, and Carol ***do trust*** a quorum of their\n>   partner LSPs for ***fund safety***.\n\nThus, while a single corporation might willingly run multiple\nLSPs and allow a MultiChannel from end-users to their LSPs,\nmultiple corporations may be unwilling to risk their funds\nto form MultiChannels with each other.\n\nThis is problematic because:\n\n> * The user Ursula ***does trust*** a quorum of LSPs to provide them\n>   with the ability to send and receive payments.\n\nA single corporation running all the LSPS of Ursula can\ntrivially form a quorum of the LSPs of Ursula, and deny\nUrsula the ability to send and receive payments.\nUrsula can still bring their funds onchain (this is the\n***funds safety*** part) but this is expensive compared\nto Lightning, and can remain effective as a censorship\nmechanism.\n\nHowever, if we are able to reduce the trust requirements\nof LSPs to each other, this may be enough for multiple\ncorporations to allow their LSPs to run on the same\nMultiChannel, banking on reduced risk.\nIf the risks can be lowered, then it may become simply\n\u201cthe cost of doing business\u201d and acceptable to provide\nbetter service to end-users.\nIf so, no single corporation can outright deny Ursula\nservice, and the other corporations can still provide\nservice to Ursula, reducing the censorship risk.\n\n# Concepts\n\nBefore continuing with the actual construction, I will\npresent some concepts that are vital to the\nconstructions.\n\nFirst, let us refresh the onlineness of our participants:\n\n> * Ursula is ***usually offline***.\n> * The LSPs are ***chronically online***.\n\nNow let me present the concepts:\n\n* ***Update*** is an operation that requires\n  Ursula to be online, plus at least a quorum (in our\n  example, 2 of 3) of Alice, Bob, and Carol.\n  * Every payment (send or receive) is an update.\n  * Failed payments are also updates.\n  * As only a quorum of Alice, Bob, and Carol is\n    neededd, it provides high availability to Ursula\n    for her sends and receives.\n  * Every update \u201cdirties\u201d the MultiChannel a little\n    bit.\n    With enough dirtiness, the MultiChannel becomes\n    unuseable, but a Cleanup (described below) will\n    remove all the dirtiness.\n* ***Cleanup*** is an operation that requires *all*\n  participants (Ursula, Alice, Bob, and Carol) to be\n  online.\n  It *has* to happen or else the channel slowly becomes\n  unuseable.\n  * However, it is only needed periodically, e.g. at\n    most once a day, and can generally be run at\n    any time.\n  * Cleanup only matters if Ursula is actively doing\n    updates to the MultiChannel state.\n    If Ursula does some updates (which dirties the\n    MultiChannel) while only a quorum of LSPs is\n    available, then goes offline for weeks or months\n    without sending or receiving, it is OK to leave\n    the MultiChannel in a \u201cdirty\u201d state until Ursula\n    happens to come online while all the LSPs\n    are also online.\n  * Very rarely (at most once or twice a year)\n    Cleanup will create an onchain transaction,\n    which is a simple one-input, one-output\n    transaction.\n    This is an ***Onchain Cleanup***, compared to\n    normal Cleanups that happen completely offchain.\n    * In case of an onchain splice (splice-in or\n      splice-out) the Onchain Cleanup can be\n      coalesced with the splice.\n      So, if Ursula or the LSPs initiate any splice\n      operation, this will also count as a Cleanup\n      and also defer the need for a future Onchain\n      Cleanup.\n\nPresenting these concepts separately allows us to\nconsider their impacts to the UX first before we\nproceed to the details of the channel.\n\nWhile Cleanup requires a full consensus (i.e. all\nLSPs plus Ursula) to come online, it is a rare\noperation; if Ursula hardly ever uses the wallet,\nthen it is okay to not do Cleanups, too.\nCleanups really only become necessary if Ursula is\ndoing a lot of offchain receives and offchain sends\nalternately.\n\nAn Onchain Cleanup is necessary after a few hundred\nCleanup operations.\nSo, if Cleanups are rare, an Onchain Cleanup is\neven rarer.\n\nFurther, an Onchain Cleanup is also coalesced with\nany splice operation.\nAn Onchain Cleanup also counts as a Cleanup, so\nthat also enables in practice some amount of receives\nand sends.\n\nFor example, if Ursula receives their monthly salary\nonchain, and then puts some of it into their Lightning\nwallet via splice-in, then that is an Onchain Cleanup\nas well.\n\nAlternately, if Ursula mostly receives money into\ntheir wallet, at some point the liquidity from the\nLSPs to the MultiChannel depletes.\nThe LSPs already have strong evidence that Ursula\nwill tend to receive funds, so they can justify\nsplicing in more liquidity towards Ursula.\nAgain, that splice-in is also coalesced with an Onchain\nCleanup.\n\nThus, this construction would work fine for\nmostly-send and mostly-receive users, where Cleanup\noperations in the form of splices in and out of the\nMultiChannel would be enough to prevent the buildup\nof Update dirt.\nIt is somewhat more problematic for users that have a\nlot of activity that is mostly balanced between sends\nand receives, especially when alternating between them.\n\nNevertheless, for many users, it would seamlessly\nallow them to make payments ***right now***, even if\nsome less-than-quorum number of LSPs are down.\nCleanups do require the consensus set of LSPs, however,\nwe expect that most of the time, all the LSPs are\nchronically online anyway, and the Cleanup operations\ncan be done at almost any time when Ursula happens to\nbe online to spend or to check a received payment.\n\n# The Construction\n\nI now present the jxPCSnmZ-Decker-Wattenhofer Complex\nMicropayment MultiChannel construction, a novel nested\nconstruction that achieves the characteristics of the\noriginal MultiChannel concept, while providing\nimproved trust-reduction for the LSPs.\n\n* One or more nested layers of decrementing-`nSequence`\n  constructions.\n  * Signers are all n-of-n participants.\n* An innermost layer composed of multiple `nSequence`-variant\n  Spilman unidirectional channels (the \u201ccomplex\u201d), one for\n  each participant.\n  * The Ursula Spilman channel is slightly different: it is\n    from Ursula, to a k-of-n of the LSPs.\n    * The signer is a nested 2-of-2, where one side is Ursula\n      alone, and the other side is a k-of-n of the LSPs.\n  * The LSP Spilman channels are standard two-party\n    unidirectional channels, from LSP to Ursula.\n\nImmediately, the improved trust-reduction is apparent:\n\n* The LSP Spilman channels follow ***NOT YOUR KEYS, NOT YOUR\n  COINS***: the construction is an n-of-n with the LSP and\n  Ursula, and every outer construction in the nested\n  construction are *also* n-of-n, which includes the LSP and\n  Ursula.\n  Thus, to spend from it, requires **YOUR KEYS**, thus the\n  coins inside it are **YOUR COINS**.\n  * Thus, money held by the LSP and Ursula on the LSP Spilman\n    channels is completely safe (assuming adequate onchain\n    monitoring after a unilateral close).\n* The only thing with a degraded, trust-requiring k-of-n is\n  the Ursula Spilman channel.\n  * Thus, money that the LSPs have already received via this\n    channel is at risk, and the LSPs trust a quorum of its\n    partner LSPs to not steal those funds by publishing old\n    state or cooperating with Ursula.\n  * Ursula is a single signer on the 2-of-2 signing layer,\n    thus has no trust requirement for its own funds here.\n\nThe trust requirement for ***fund safety*** is thus reduced\nfor LSPs towards their partner LSPs (Ursula has no trust\nrequirement for ***fund safety*** at all, as emphasized\nearlier).\n\n## On Spilman Unidirectionality\n\nTechnically speaking, if an HTLC, PTLC, or MultiPTLC is\nfailed offchain in a Spilman channel, this *returns* funds\nto the sender-side of the Spilman channel.\nThis violates the unidirectionality assumption of Spilman.\n\nAs a concrete example, suppose an LSP forwards an HTLC to\nUrsula via a Spilman channel, from the public network.\nThis is a new state where some funds are now in an HTLC.\nHowever, Ursula says it does not know the preimage anyway,\nso they sign a new state where the funds are returned to\nthe LSP, creating a new state without the HTLC.\nThen the LSP propagates the failure back to the public\nnetwork, failing its incoming HTLC.\n\nUnfortunately for the LSP, \u201cUrsula\u201d was actually the\nsockpuppet of notorious hacker ZmnSCPxj.\nZmnSCPxj was the one who actually sent the HTLC from the\npublic network, and made \u201cUrsula\u201d fail it.\nSo when the HTLC failure has propagated back to ZmnSCPxj,\n\u201cUrsula\u201d unilaterally closes the Spilman channel using the\nold state where the Spilman channel still has the HTLC,\nand takes the H branch to get the funds.\nSince the incoming HTLC on the LSP side is already\nirrevocably committed as having been removed, the LSP cannot\nreclaim funds from the incoming channel with the now-revealed\npreimage.\n\nThus, in general, HTLC, PTLC, and MultiPTLC failures\n***cannot*** be performed offchain in a Spilman channel.\nOnce the funds from the sender-side of the Spilman channel\nhave been put into an HTLC or whatever, it either has to be\nclaimed by the receiver-side of the Spilman channel, or left\nas an HTLC or whatever until the Spilman channel state\nbecomes immaterial.\n\nThis is actually one of the kinds of \u201cdirtiness\u201d in this\nmechanism.\nIf an offerred HTLC, PTLC, or MultiPTLC in a Spilman\nchannel is *supposed to be* failed, it has to remain as\n\u201cdefinitely still an HTLC / PTLC / MultiPTLC\u201d in the state\nof the channel going forward.\nObviously, that fund cannot be reused for a different\nHTLC, PTLC, or MultiPTLC, so if there are enough of this\nkind of dirtiness \u201cbuilt up\u201d, we need to somehow reset\nthe Spilman channel state.\n\nThus, a \u201cCleanup\u201d is needed, as was discussed earlier, to\nget rid of this kind, as well as other kinds, of dirtiness.\n\n### LSP to Ursula Payment Hop\n\nDue to the HTLC (et al) having to remain in the Spilman\nstate if it would fail, it means that payment faillure\n*cannot* be propagated back until a Cleanup.\n\nWe can ameliorate this issue by doing a \u201cpre-check\u201d.\nWhen the LSP receives an HTLC (et al) from the public network\nto Ursula, instead of immediately fast-forwarding it, it\nfirst does a 1.0-roundtrip query with the hash (or point for\nPTLCs) to Ursula.\n\nThen, only if Ursula says it can claim that fund, will\nthe LSP actually provide the new state that forwards the\nHTLC (et al) to Ursula.\nIf instead, Ursula says \u201cI have never seen this hash in my\nlife\u201d it provides an payment failure return onion, and the\nLSP can fail its own incoming HTLC (et al) safely, as there\nis no outgoing HTLC (et al) to Ursula yet.\n\nOf course, if Ursula says \u201cyeah I know it, send it on\u201d and\nthen the LSP sends the new state, Ursula could just fail it\nanyway, and the LSP has to hold the corresponding incoming\nHTLC (et al) until a Cleanup can be done to remove the HTLC\ndirt.\nHowever, this jamming is covered in our trust assumptions:\n\n> * The LSPs Alice, Bob, and Carol ***do trust*** Ursula will not jam\n>   their public channels.\n\n### Ursula to LSP Payment Hop\n\nSince Ursula is not a forwarder, we can leave a failed HTLC,\nPTLC, or MultiPTLC on its Spilman channel indefinitely.\nIt adds dirt, but all that dirt can be cleared by a later\nCleanup operation.\n\n(***IMPORTANT*** It is *stil* unsafe to just return the HTLC\n(et al) to Ursula if the LSPs claim it is failed.\nEverything is a forwarder: if I am buying something from a\nstore, I am getting an item in exchange for funds, and thus I\nam a forwarder that accepts real-world items to forward Bitcoin\nover Lightning.\nMore concretely: suppose Ursula goes to a store, and then\nattempts to pay with Lightning, which creates an HTLC (et al)\non the MultiChannel.\nHowever, the LSP claims the payment failed, so, disappointed,\nUrsula leaves the store itemless, and goes on a flight to El\nSalvador, which has better Bitcoin support.\nOn landing, the Ursula wallet gets Internet and sees that the\nLSP dropped old state onchain, and claimed the HTLC and\nrevealed the preimage.\nWhat would the wallet do, say \u201cactually, remember that payment\nI said was definitely 100% failed?\nummmm actually it went through, happy now?\u201d\nUnfortunately, Ursula is already in El Salvador, very far\naway from the store.\nThus, it is ***still*** unsafe in general to return the\nHTLC (et al) on failure; it ***has to*** remain in the Spilman\nchannel state indefinitely, as dirt that is removed on the\nCleanup.)\n\nJust use a MultiPTLC if you are paying a PTLC-based invoice.\n\nThe big advantage of the MultiPTLC is that Ursula can offer\njust a ***single*** MultiPTLC, and the LSPs can then operate\nthe \u201cstuckless because that is the name we are stuck with\u201d\npayment protocol, in parallel, backed by that single MultiPTLC.\nAs long as at least one of the attempts succeed, then the\nMultiPTLC *will* succeed and we are still properly\nunidirectional.\n\nWith only PTLCs, Ursula has to either decide to offer just\none PTLC to one of the LSPs, which has low availability (if\nall paths through that LSP fail, then that offerred PTLC has\nto fail and remains as dirt on the MultiPTLC), or offer\nmultiple PTLCs, with the knowledge that at most one of those\nPTLCs will succeed and the other PTLCs will be dirt on the\nSpilman channel.\nThus, MultiPTLC is superior.\n\nOf course, we still need to work with HTLCs for a while.\nFor this case, Ursula can do the inverse of the \u201cpre-check\u201d\nused in the LSP-to-Ursula case: it asks the LSPs to probe\nthe network to reach the receiver.\nThe LSPs can even do this probing in parallel.\n\nOf course, that means that LSPs have to send out HTLCs on\nbehalf of Ursula while Ursula has no HTLCs to the LSP,\nwhich is risky on the LSP.\nWe can thus use a \u201cprovable probe attempt\u201d scheme by ajtowns\nlong ago (do not remember the link, sorry).\n\nIn a provable probe, you generate a fake hash for your HTLC\nas below:\n\n* Take a random 256-bit number, `proof_of_probe`.\n* Get `real_hash = sha256(proof_of_probe)`.\n* Use the hash `fake_hash = real_hash ^ 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF`.\n\nWhat we do is, Ursula creates multiple possible onion\npaths, with `fake_hash`es generated above.\nUrsula then asks the LSPs to probe using HTLCs with those\n`fake_hash`es along those onion paths, and provides the\n`proof_of_probe`s for each one.\nThe LSPs thus know that the HTLC they are being asked to\nsend out is unclaimable unless SHA256 has been broken.\n\nThe HTLCs sent out are definitely going to fail, and the\nLSPs return the payment failures back to Ursula, who can\ndecrypt them and see which ones reached the receiver.\nThese probe attempts can even be safely sent out in\nparallel.\nThen Ursula can select one of the successful payment paths,\nor if all of them fail before the receiver, can give up\nwithout putting HTLC dirt on the MultiChannel state.\n\n(A nice benefit of this is that even if a remote node goes\ndown while holding an HTLC lock, if it happens during this\nprobing stage, Ursula is unaffected as she has no HTLCs\nlocked in the HTLC-lock-chain.\nWe should probably consider implementing this on the\nexisting Lightning Network right now, even with just\nlow-availability Channels.)\n\nWith MultiPTLC, pre-probing can still be done (the proof\nof probe is simpler in that the `sha256(proof_of_probe)` is\njust the X coordinate of the point), but Ursula can provide\n*all* successful paths in the MultiPTLC instead of just\nselecting one as with HTLC, and is protected agaisnt remote\nnodes going down while holding a PTLC (with HTLCs, there\nis still a tiny chance of failure (because the earlier\nfailure used in the probe also unlocked the HTLC lock-chain,\nthis is a double-checked-locking antipattern), and a tinier\nchance that a node on the selected path (which was OK just\nseveral hundred milliseconds ago?) will go down).\n\n***IMPORTANT***: Regardless of whether we are using\nMultiPTLC or HTLC, the wallet MUST NOT show the payment as\nfailed until a Cleanup has occurred to actually remove the\nunderlying MultiPTLC or HTLC; it should still show it as\n\u201cpending\u201d, because technically it can still be claimed\nuntil timeout.\n\n## The Ursula Spilman Channel\n\nAs mentioned above, the Ursula Spilman channel is unusual\nin that one of the 2-of-2 is actually a k-of-n amongst\nthe LSPs.\n\nLargely, this changes the trust model for the LSPs only;\nin effect, any funds that an LSP has claimed from that channel\nfrom successfully forwarded HTLCs or MultiPTLCs, are delegated\nto a quorum of the LSPs.\nAs noted, this is part of the MultiChannel degraded security\nand is a deliberate tradeoff.\n\nOtherwise, there is no effect on Ursula.\nThat it is on an n-of-n signing layer means it has the same\ntrust assumptions as normal Spilman.\n\nI would like to emphasize that all existing LN implementations\n(should) sign unilateral closes only when they actually want\nto unilaterally close.\nOtherwise, they just store the signature coming from the other\nside.\n\nSimilarly, when Ursula updates the state of the Ursula\nSpilman channel (to offer an HTLC or MultiPTLC, or to finalize a\nclaimed HTLC or MultiPTLC), it sends a signature for its share\nof the 2-of-2, but the quorum of LSPs ***MUST NOT*** create a\nsignature for the other part of the 2-of-2.\nInstead, they should defer signing their side until either a\nnew state is received (and they then never ever sign the old\nstate) or when a quorum agrees to unilaterally close the\nconstruction.\n\n## Cleanup and Onchain Cleanup\n\nWhat I call a Cleanup is simply an update in the nested\ndecrementing-`nSequence`.\nSee the original Decker-Wattenhofer for details.\n\nFunds in the Ursula Spilman channel that are now owned by\none of the LSPs (which come from successful claims of HTLCs\nor MultiPTLCs) ***cannot*** be used as liquidity from LSP to\nUrsula.\nAgain, the Spilman channel is unidirectional, so there is\nno way to safely return funds to Ursula.\nThis is another example of \u201cdirt\u201d that builds up on the\nMultiChannel that needs to be cleaned up.\n\nSimilarly, funds in any of the LSP Spilman channels that\nhave been claimed by Ursula cannot be sent out by Ursula\nuntil a Cleanup.\n\nHowever, we can still have some time where Cleanup is\nabsolutely necessary.\nFor as long as there is still plain liquidity from the source\nof each Spilman channel, the participants can continue making\nUpdates (adding new HTLCs, PTLCs, or MultiPTLCs) with a\ndirty MultiChannel and defer Cleanup.\nThus, we expect Cleanup to be reasonably rare, though\ncontinuous multidirectional send/receive/send/receive\nsequences increase the dirt and the need to Cleanup.\n\nWhen a Cleanup is done, the consensus adds up all the funds\nthat are definitely owned by each participant, and assigns\nthose as the initial state of each of the Spilman channels.\nAny pending HTLC, PTLC, and MultiPTLC that is neither claimed\nnor failed is retained in the Spilman channel they were in\nbefore Cleanup (ideally, Cleanup would not occur unless all\nHTLCs, PTLCs, and MultiPTLCs have been claimed or failed,\nbut the Cleanup code should definitely handle the case where\nCleanup occurs while locks are still held).\nThey then agree on what the next state on the\ndecrementing-`nSequence` nested mechanism looks like, and\nsign the necessary transactions to move to the new state\nand to start the recreated Spilman channels.\n\nNow, the decrementing-`nSequence` mechanism is effectively a\ncounter, and at some point, that counter drops to zero, and\nno more state changes can be done on the\ndecrementing-`nSequence` layer.\nWhen that happens, the participants absolutely need to do an\nOnchain Cleanup, which not only resets the Spilman complex\nlayer, but also resets the decrementing-`nSequence` layer\ncounter.\n\nPresumably, the LSPs will consider channel forwarding fees\nwith the knowledge that Onchain Cleanup will occur at\nsome point, and adjust the forwarding fee rates accordingly.\nThus, these Onchain Cleanups should be paid for by the LSPs\n(with the understanding that they will extract this from\nUrsula via channel forwarding fees, and if Ursula is truly\ninactive, just unilaterally close the construction).\n\nSplicing will require an onchain reseat of the backing UTXO\nanyway, so we may as well also reset the counter on the\ndecrementing-`nSequence` layer when that happens, thus\n\u201ccoalescing\u201d an Onchain Cleanup with a splice.\nThe cost of the splice can be billed to whoever initiates\nthe splice.\n\nSplicing in and out, as well as Onchain Cleanup and even\njust plain Cleanup, requires all participants to be online.\nThis allows the trust-reduction that this MultiChannel\nimplementation allows.\n\nA Cleanup is desirable for the LSPs if Ursula has\nsuccessfully sent funds.\nIn that condition, the Ursula Spilman channel has funds\nof one or more of the LSPs, which is at degraded\nsecurity for the LSPs due to being protected by a k-of-n\ninstead of a strict requirement for the owning LSP.\nA completed Cleanup will move those funds into the\nper-LSP Spilman channels, with the standard online\nLightning security model.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Title: A Decker-Wattenhofer MultiChannel For Reduced Inter-LSP Trust \n<a name=\"p-5910-introduction-1\" class=\"anchor\" href=\"#p-5910-introduction-1\"></a>Introduction\nThe <a href=\"https://delvingbitcoin.org/t/multichannel-and-multiptlc-towards-a-global-high-availability-consistent-partition-tolerant-database-for-bitcoin-payments/1983\">MultiChannel and MultiPTLC</a> constructions are novel cryptocurrency\nsystems that provide high-Availability, Consistent, and Partition-Tolerant\naccess to the Lightning Network for end-users. \nSadly, in order to achie&hellip;",
  "truncated": true,
  "post_url": "/t/a-decker-wattenhofer-multichannel-for-reduced-inter-lsp-trust/1994/1",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null,
  "can_vote": false
}