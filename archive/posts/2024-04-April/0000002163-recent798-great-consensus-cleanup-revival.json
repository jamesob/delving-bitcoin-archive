{
  "id": 2163,
  "name": "",
  "username": "recent798",
  "avatar_template": "/letter_avatar_proxy/v4/letter/r/ecd19e/{size}.png",
  "created_at": "2024-04-05T10:23:22.198Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"AntoineP\" data-post=\"4\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/antoinep/48/483_2.png\" class=\"avatar\"> AntoineP:</div>\n<blockquote>\n<p>For the curious, <a href=\"https://gist.github.com/darosior/3a5ac0a8d935fa9d3e90310590ca6699\" rel=\"noopener nofollow ugc\">here </a> is the full list of all the potential future violations.</p>\n</blockquote>\n</aside>\n<p>How many of those coinbase outputs are spent along with another coinbase output that stems from a coinbase transaction that can not be duplicated? If all are spent in this fashion, then a future soft fork may not be needed? The expensive check could be skipped, if on a known-good headers chain, and otherwise enabled.</p>\n<p>For reference: <a href=\"https://github.com/bitcoin/bitcoin/pull/12204/files\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Fix overly eager BIP30 bypass by morcos \u00b7 Pull Request #12204 \u00b7 bitcoin/bitcoin \u00b7 GitHub</a></p>\n<p>The code comment in the reference also mentions that a soft-fork may be preferred, which \u201c<em>retroactively</em> prevents block [\u2026] from creating a duplicate coinbase\u201d. So requiring a witness commitment does not seem appropriate, because it can not be enforced on past blocks. My understanding is that a soft-fork that can not be applied from genesis won\u2019t help to skip the expensive check in case of a massive (theoretical) reorg, so fallback code will be needed for this case. If fallback code is needed anyway, then it seems better to do it without a consensus deployment.</p>",
  "post_number": 11,
  "post_type": 1,
  "updated_at": "2024-04-05T10:23:22.198Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 1.0,
  "yours": false,
  "topic_id": 710,
  "topic_slug": "great-consensus-cleanup-revival",
  "topic_title": "Great Consensus Cleanup Revival",
  "topic_html_title": "Great Consensus Cleanup Revival",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"AntoineP, post:4, topic:710\"]\nFor the curious, [here ](https://gist.github.com/darosior/3a5ac0a8d935fa9d3e90310590ca6699) is the full list of all the potential future violations.\n[/quote]\n\nHow many of those coinbase outputs are spent along with another coinbase output that stems from a coinbase transaction that can not be duplicated? If all are spent in this fashion, then a future soft fork may not be needed? The expensive check could be skipped, if on a known-good headers chain, and otherwise enabled.\n\nFor reference: https://github.com/bitcoin/bitcoin/pull/12204/files\n\nThe code comment in the reference also mentions that a soft-fork may be preferred, which \"*retroactively* prevents block [...] from creating a duplicate coinbase\". So requiring a witness commitment does not seem appropriate, because it can not be enforced on past blocks. My understanding is that a soft-fork that can not be applied from genesis won't help to skip the expensive check in case of a massive (theoretical) reorg, so fallback code will be needed for this case. If fallback code is needed anyway, then it seems better to do it without a consensus deployment.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 130,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}