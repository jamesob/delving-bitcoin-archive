{
  "id": 2328,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png",
  "created_at": "2024-04-25T21:33:30.305Z",
  "cooked": "<p>A few updates:</p>\n<ul>\n<li><strong>The bad news.</strong> <a class=\"mention\" href=\"/u/sdaftuar\">@sdaftuar</a> convinced me that the Double-LIMO workflow does not actually address the issue in the introduction: if you start with an arbitrary linearization, and then Double-LIMO it (with <span class=\"math\">S_1 =</span> best remaining ancestor set, <span class=\"math\">S_2 =</span> bounded search), the result may still be incomparable or even strictly worse than a pure ancestor set based linearization. If the <em>input</em> is at least as good as a pure ancestor set based linearization, the output will be too. This could also be accomplished by merging a fresh ancestor set sort with the input, but LIMO lets us linearize and merge at the same time.</li>\n<li><strong>The somewhat redeeming insight.</strong> We probably do not actually care about guaranteeing that all our linearization are strictly as good as the <strong>diagram</strong> of pure ancestor sort, because that is not what is required for CPFP, nor is it what the network currently implements. The current (as of 27.0) Bitcoin Core block builder implementation guarantees a quality of ancestor-based sort <em>without</em> chunking, and LIMO achieves that too (but, so does bounded search with ancestor set-based presplitting).</li>\n<li><strong>The good news.</strong> I believe I have a proof that the new simplified Double (and Triple) LIMO \u201cworks\u201d (where \u201cworks\u201d doesn\u2019t imply \u201cas good as directly linearizing using each individual subset finding algorithm\u201d, but means \u201cat least as good as the input, and transactions included in each step are not incompatible with reaching the fee/size point of the <span class=\"math\">S_1</span> and <span class=\"math\">S_2</span> found within that same step\u201d). Bigger post coming up for that.</li>\n</ul>",
  "post_number": 7,
  "post_type": 1,
  "updated_at": "2024-04-25T22:37:19.185Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 3,
  "readers_count": 2,
  "score": 5.6,
  "yours": false,
  "topic_id": 825,
  "topic_slug": "limo-combining-the-best-parts-of-linearization-search-and-merging",
  "topic_title": "LIMO: combining the best parts of linearization search and merging",
  "topic_html_title": "LIMO: combining the best parts of linearization search and merging",
  "category_id": 8,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "A few updates:\n\n* **The bad news.** @sdaftuar convinced me that the Double-LIMO workflow does not actually address the issue in the introduction: if you start with an arbitrary linearization, and then Double-LIMO it (with $S_1 =$ best remaining ancestor set, $S_2 =$ bounded search), the result may still be incomparable or even strictly worse than a pure ancestor set based linearization. If the *input* is at least as good as a pure ancestor set based linearization, the output will be too. This could also be accomplished by merging a fresh ancestor set sort with the input, but LIMO lets us linearize and merge at the same time.\n* **The somewhat redeeming insight.** We probably do not actually care about guaranteeing that all our linearization are strictly as good as the **diagram** of pure ancestor sort, because that is not what is required for CPFP, nor is it what the network currently implements. The current (as of 27.0) Bitcoin Core block builder implementation guarantees a quality of ancestor-based sort *without* chunking, and LIMO achieves that too (but, so does bounded search with ancestor set-based presplitting).\n* **The good news.** I believe I have a proof that the new simplified Double (and Triple) LIMO \"works\" (where \"works\" doesn't imply \"as good as directly linearizing using each individual subset finding algorithm\", but means \"at least as good as the input, and transactions included in each step are not incompatible with reaching the fee/size point of the $S_1$ and $S_2$ found within that same step\"). Bigger post coming up for that.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}