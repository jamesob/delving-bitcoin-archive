{
  "id": 2129,
  "name": "Lukas",
  "username": "Luckylee",
  "avatar_template": "/letter_avatar_proxy/v4/letter/l/ccd318/{size}.png",
  "created_at": "2024-04-02T08:42:43.055Z",
  "cooked": "<p>We currently use Rust macros at <a href=\"https://github.com/BitVM/rust-bitcoin-script/tree/script_macro\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - BitVM/rust-bitcoin-script at script_macro</a> to work with Rust Bitcoin\u2019s Script.\nNew scripts and opcodes can be composed and there is some syntactic sugar like loops. Looks like this:</p>\n<pre><code class=\"lang-auto\">fn script_from_func() -&gt; ScriptBuf {\n    return script! { OP_ADD };\n}\n\nlet script = script! {\n    for i in 0..3 {\n        for k in 0..(3 as u32) {\n        OP_ADD\n        if k == i {\n            OP_SUB\n        } else {\n            script_from_func\n        }\n        { i * 42 }\n        { k + 42}\n        }\n    }\n    OP_ADD\n};\n</code></pre>",
  "post_number": 8,
  "post_type": 1,
  "updated_at": "2024-04-02T08:42:43.055Z",
  "reply_count": 0,
  "reply_to_post_number": 5,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 12,
  "readers_count": 11,
  "score": 17.4,
  "yours": false,
  "topic_id": 748,
  "topic_slug": "dsl-for-experimenting-with-contracts",
  "topic_title": "DSL for experimenting with contracts",
  "topic_html_title": "DSL for experimenting with contracts",
  "category_id": 8,
  "display_username": "Lukas",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "jungly",
    "name": "jungly",
    "avatar_template": "/user_avatar/delvingbitcoin.org/jungly/{size}/289_2.png"
  },
  "bookmarked": false,
  "raw": "We currently use Rust macros at https://github.com/BitVM/rust-bitcoin-script/tree/script_macro to work with Rust Bitcoin's Script.\nNew scripts and opcodes can be composed and there is some syntactic sugar like loops. Looks like this:\n```\nfn script_from_func() -> ScriptBuf {\n    return script! { OP_ADD };\n}\n\nlet script = script! {\n    for i in 0..3 {\n        for k in 0..(3 as u32) {\n        OP_ADD\n        if k == i {\n            OP_SUB\n        } else {\n            script_from_func\n        }\n        { i * 42 }\n        { k + 42}\n        }\n    }\n    OP_ADD\n};\n```",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 317,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}