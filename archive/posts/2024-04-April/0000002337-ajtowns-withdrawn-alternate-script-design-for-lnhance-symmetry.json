{
  "id": 2337,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-04-27T06:54:29.223Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"reardencode\" data-post=\"1\" data-topic=\"839\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/reardencode/48/27_2.png\" class=\"avatar\"> reardencode:</div>\n<blockquote>\n<p>LNHANCE: <code>tr(settlement-hash, {CTV musig2(a, b) CSFS, INTERNALKEY CTV})</code></p>\n<p>APO: <code>tr(musig(a, b), {1 CHECKSIG, &lt;settlement-sig&gt; &lt;G&gt; CHECKSIG})</code></p>\n</blockquote>\n</aside>\n<p>Two things:</p>\n<ul>\n<li>This is missing the <code>&lt;n&gt; CLTV</code> step that makes eltoo work</li>\n<li><code>&lt;settlement-sig&gt; &lt;G&gt; CHECKSIG</code> is just a more expensive way of doing <code>&lt;h&gt; CTV</code>; it\u2019s not surprising that changing this to CTV makes it cheaper. I believe you can make it cheaper still by using <a href=\"https://github.com/instagibbs/bolts/issues/5\">scriptless scripts to reveal a signature</a> instead of doing the CTV-ish approach.</li>\n</ul>\n<aside class=\"quote no-group\" data-username=\"reardencode\" data-post=\"1\" data-topic=\"839\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/reardencode/48/27_2.png\" class=\"avatar\"> reardencode:</div>\n<blockquote>\n<p>In LNHANCE-Symmetry, the settlement transaction\u2019s CTV hash can be ground to a valid X on the curve and then used as the internal key for the taproot output. This makes the tapscripts identical from update to update ensuring that either party can store O(1) data and be able to spend any prior update.</p>\n</blockquote>\n</aside>\n<p>I don\u2019t think this works at all? If you grind the IPK, the scripts you end up with are something like:</p>\n<ul>\n<li>&lt;n+1&gt; CLTV DROP musig(A,B) CHECKSIG</li>\n<li>INTERNALKEY CTV</li>\n</ul>\n<p>The scriptPubKey is then calculated as <code>IPK + Hash(IPK, Hash(Hash(S1), Hash(S2)))</code>.</p>\n<p>But to spend using the first path, you need the witness stack to contain <code>IPK, Hash(S2), S1, signature</code>. But to know what <code>IPK</code> is, you need to know what the settlement tx corresponding to this update tx is, and to redo the grinding. The ln-symmetry approach to solving that is just to stick it into the annex of the update tx that you\u2019re looking to spend.</p>\n<p>I think lnhance would be more efficient with an IF than two leafs, namely:</p>\n<ul>\n<li><code>IFDUP IF &lt;n&gt; CLTV DROP CTV [musig2(a,b)] CSFS ELSE INTERNALKEY CTV ENDIF</code></li>\n</ul>\n<p>which is always 48 bytes, versus 32+42 bytes (74 bytes) or 32+2 bytes (34 bytes).</p>\n<p>I think that makes the comparison:</p>\n<ul>\n<li>\n<p>update tx spending funding tx:</p>\n<ul>\n<li>ln-symmetry: 33B annex, 33B control block, 2B script, 65B signature (133B)</li>\n<li>lnhance: 33B annex, 33B control block, 3B script, 64B signature, 32B ctv hash (165B)</li>\n</ul>\n</li>\n<li>\n<p>update tx spending prior update tx:</p>\n<ul>\n<li>ln-symmetry: 33B annex, 65B control block, 8B script, 65B signature (171B)</li>\n<li>lnhance: 33B annex, 33B control block, 48B script, 64B signature, 32B ctv hash (210B)</li>\n</ul>\n</li>\n<li>\n<p>settlement tx spending update tx:</p>\n<ul>\n<li>ln-symmetry: 65B control block, 100B script (165B)</li>\n<li>lnhance: 33B control block, 48B script (81B)</li>\n</ul>\n</li>\n</ul>\n<p>In normal use that\u2019s 298B versus 246B, so a 52B advantage to lnhance. lnhance would be improved by another 32B if TXHASH was available rather than CTV for the \u201cCTV CSFS\u201d construct, equally, just using APO there would also save that much. ln-symmetry would be improved by 64B just by switching to CTV. Switching ln-symmetry to the scriptless script approach would save ~128B I think.</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-04-27T06:54:29.223Z",
  "reply_count": 2,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 26,
  "readers_count": 25,
  "score": 15.0,
  "yours": false,
  "topic_id": 839,
  "topic_slug": "withdrawn-alternate-script-design-for-lnhance-symmetry",
  "topic_title": "[WITHDRAWN] Alternate script design for LNHANCE-Symmetry",
  "topic_html_title": "[WITHDRAWN] Alternate script design for LNHANCE-Symmetry",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"reardencode, post:1, topic:839\"]\nLNHANCE: `tr(settlement-hash, {CTV musig2(a, b) CSFS, INTERNALKEY CTV})`\n\nAPO: `tr(musig(a, b), {1 CHECKSIG, <settlement-sig> <G> CHECKSIG})`\n[/quote]\n\nTwo things:\n * This is missing the `<n> CLTV` step that makes eltoo work\n * `<settlement-sig> <G> CHECKSIG` is just a more expensive way of doing `<h> CTV`; it's not surprising that changing this to CTV makes it cheaper. I believe you can make it cheaper still by using [scriptless scripts to reveal a signature](https://github.com/instagibbs/bolts/issues/5) instead of doing the CTV-ish approach.\n\n[quote=\"reardencode, post:1, topic:839\"]\nIn LNHANCE-Symmetry, the settlement transaction\u2019s CTV hash can be ground to a valid X on the curve and then used as the internal key for the taproot output. This makes the tapscripts identical from update to update ensuring that either party can store O(1) data and be able to spend any prior update.\n[/quote]\n\nI don't think this works at all? If you grind the IPK, the scripts you end up with are something like:\n\n * <n+1> CLTV DROP musig(A,B) CHECKSIG\n * INTERNALKEY CTV\n\nThe scriptPubKey is then calculated as `IPK + Hash(IPK, Hash(Hash(S1), Hash(S2)))`. \n\nBut to spend using the first path, you need the witness stack to contain `IPK, Hash(S2), S1, signature`. But to know what `IPK` is, you need to know what the settlement tx corresponding to this update tx is, and to redo the grinding. The ln-symmetry approach to solving that is just to stick it into the annex of the update tx that you're looking to spend.\n\nI think lnhance would be more efficient with an IF than two leafs, namely:\n\n * `IFDUP IF <n> CLTV DROP CTV [musig2(a,b)] CSFS ELSE INTERNALKEY CTV ENDIF`\n\nwhich is always 48 bytes, versus 32+42 bytes (74 bytes) or 32+2 bytes (34 bytes).\n\nI think that makes the comparison:\n\n * update tx spending funding tx:\n    * ln-symmetry: 33B annex, 33B control block, 2B script, 65B signature (133B)\n    * lnhance: 33B annex, 33B control block, 3B script, 64B signature, 32B ctv hash (165B)\n\n * update tx spending prior update tx:\n    * ln-symmetry: 33B annex, 65B control block, 8B script, 65B signature (171B)\n    * lnhance: 33B annex, 33B control block, 48B script, 64B signature, 32B ctv hash (210B)\n\n * settlement tx spending update tx:\n    * ln-symmetry: 65B control block, 100B script (165B)\n    * lnhance: 33B control block, 48B script (81B)\n\nIn normal use that's 298B versus 246B, so a 52B advantage to lnhance. lnhance would be improved by another 32B if TXHASH was available rather than CTV for the \"CTV CSFS\" construct, equally, just using APO there would also save that much. ln-symmetry would be improved by 64B just by switching to CTV. Switching ln-symmetry to the scriptless script approach would save ~128B I think.",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}