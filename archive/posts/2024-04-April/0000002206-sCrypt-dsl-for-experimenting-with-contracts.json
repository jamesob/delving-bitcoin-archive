{
  "id": 2206,
  "name": "",
  "username": "sCrypt",
  "avatar_template": "/user_avatar/delvingbitcoin.org/scrypt/{size}/504_2.png",
  "created_at": "2024-04-11T22:14:30.668Z",
  "cooked": "<p>We developed <a href=\"https://medium.com/@scryptplatform/introduce-scrypt-a-layer-1-smart-contract-framework-for-btc-b8b39c125c1a\" rel=\"noopener nofollow ugc\">a TypeScript eDSL</a> called sCrypt that compiles down to Bitcoin Script. This examples shows NAND gate commitment in BitVM.</p>\n<pre><code class=\"lang-auto\">import {\n    assert, ByteString, hash160, method, prop, Ripemd160, SmartContract,\n} from 'scrypt-ts-btc'\n\ntype HashPair = {\n    hash0: Ripemd160\n    hash1: Ripemd160\n}\n\nexport class BitVM extends SmartContract {\n    @prop()\n    hashPairA: HashPair\n    @prop()\n    hashPairB: HashPair\n    @prop()\n    hashPairE: HashPair\n    \n    constructor(hashPairA: HashPair, hashPairB: HashPair, hashPairE: HashPair) {\n        super(...arguments)\n        this.hashPairA = hashPairA\n        this.hashPairB = hashPairB\n        this.hashPairE = hashPairE\n    }\n    \n    @method()\n    public openGateCommit(\n        preimageA: ByteString,\n        preimageB: ByteString,\n        preimageE: ByteString\n    ) {\n        const bitA = DemoBitVM.bitCommit(this.hashPairA, preimageA)\n        const bitB = DemoBitVM.bitCommit(this.hashPairB, preimageB)\n        const bitE = DemoBitVM.bitCommit(this.hashPairE, preimageE)\n        assert(DemoBitVM.nand(bitA, bitB) == bitE)\n    }\n    \n    @method()\n    static bitCommit(hashPair: HashPair, preimage: ByteString): boolean {\n        const h = hash160(preimage)\n        assert(h == hashPair.hash0 || h == hashPair.hash1)\n        return h == hashPair.hash1\n    }\n    \n    @method()\n    static nand(A: boolean, B: boolean): boolean {\n        return !(A &amp;&amp; B)\n    }\n}\n</code></pre>",
  "post_number": 14,
  "post_type": 1,
  "updated_at": "2024-04-11T22:14:30.668Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 3,
  "reads": 5,
  "readers_count": 4,
  "score": 16.0,
  "yours": false,
  "topic_id": 748,
  "topic_slug": "dsl-for-experimenting-with-contracts",
  "topic_title": "DSL for experimenting with contracts",
  "topic_html_title": "DSL for experimenting with contracts",
  "category_id": 8,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "We developed [a TypeScript eDSL](https://medium.com/@scryptplatform/introduce-scrypt-a-layer-1-smart-contract-framework-for-btc-b8b39c125c1a) called sCrypt that compiles down to Bitcoin Script. This examples shows NAND gate commitment in BitVM.\n\n\n```\nimport {\n    assert, ByteString, hash160, method, prop, Ripemd160, SmartContract,\n} from 'scrypt-ts-btc'\n\ntype HashPair = {\n    hash0: Ripemd160\n    hash1: Ripemd160\n}\n\nexport class BitVM extends SmartContract {\n    @prop()\n    hashPairA: HashPair\n    @prop()\n    hashPairB: HashPair\n    @prop()\n    hashPairE: HashPair\n    \n    constructor(hashPairA: HashPair, hashPairB: HashPair, hashPairE: HashPair) {\n        super(...arguments)\n        this.hashPairA = hashPairA\n        this.hashPairB = hashPairB\n        this.hashPairE = hashPairE\n    }\n    \n    @method()\n    public openGateCommit(\n        preimageA: ByteString,\n        preimageB: ByteString,\n        preimageE: ByteString\n    ) {\n        const bitA = DemoBitVM.bitCommit(this.hashPairA, preimageA)\n        const bitB = DemoBitVM.bitCommit(this.hashPairB, preimageB)\n        const bitE = DemoBitVM.bitCommit(this.hashPairE, preimageE)\n        assert(DemoBitVM.nand(bitA, bitB) == bitE)\n    }\n    \n    @method()\n    static bitCommit(hashPair: HashPair, preimage: ByteString): boolean {\n        const h = hash160(preimage)\n        assert(h == hashPair.hash0 || h == hashPair.hash1)\n        return h == hashPair.hash1\n    }\n    \n    @method()\n    static nand(A: boolean, B: boolean): boolean {\n        return !(A && B)\n    }\n}\n```",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 399,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}