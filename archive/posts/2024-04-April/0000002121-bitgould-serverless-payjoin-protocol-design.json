{
  "id": 2121,
  "name": "Dan Gould",
  "username": "bitgould",
  "avatar_template": "/letter_avatar_proxy/v4/letter/b/ac91a4/{size}.png",
  "created_at": "2024-04-01T19:12:07.778Z",
  "cooked": "<h2><a name=\"choosing-a-proper-uri-encoding-for-payjoin-params-pj-pubkey-and-subdirectory-and-ohttp-key-configuration-1\" class=\"anchor\" href=\"#choosing-a-proper-uri-encoding-for-payjoin-params-pj-pubkey-and-subdirectory-and-ohttp-key-configuration-1\"></a>Choosing a proper URI encoding for payjoin params <code>pj</code> pubkey and subdirectory and <code>ohttp</code> Key Configuration</h2>\n<p>Both the session public key and ohttp Key Configuration are included in the payjoin version 2 bitcoin URI. An early version of this protocol used base64url encoding since that\u2019s a dense binary to text encoding that\u2019s already available used in another payjoin dependency to encode PSBTs.</p>\n<p>A payjoin-enabled bitcoin URI looks like this. I seek to find the decide on the most suitable way to encode <code>$SUBDIRECTORY_PUBKEY</code> and <code>$OHTTP_KEY_CONFIG</code>.</p>\n<pre><code class=\"lang-auto\">bitcoin:tb1pnsvdr8842r9cnf0yyqvexz4nee8244wyr9pq6nrxw9de0uk8rckq3s9g4a?amount=21&amp;pj=https://payjo.in/$SUBDIRECTORY_PUBKEY&amp;ohttp=$OHTTP_KEY_CONFIG\n</code></pre>\n<p>Bitcoin URIs are often QR encoded, and base64Url breaks <a href=\"https://github.com/BlockchainCommons/Research/blob/01094ff9c34464edd54df3eacc0aedee89e528b5/papers/bcr-2020-003-uri-binary-compatibility.md#qr-code-alphanumeric-encoding\" rel=\"noopener nofollow ugc\">QR Alphanumeric Encoding</a> and leads to QR codes with a much higher density that are more difficult to scan. Some other options have been proposed.</p>\n<h2><a name=\"ur-encoding-2\" class=\"anchor\" href=\"#ur-encoding-2\"></a>UR Encoding</h2>\n<p><a href=\"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021882.html\" rel=\"noopener nofollow ugc\">UR Encoding was suggested on the bitcoin-dev mailing list</a> since it encodes tagged fields and includes a checksum without breaking QR alphanumeric encoding. However, the payjoin subdirectory has no tagged fields since it\u2019s just a single key, and the <a href=\"https://www.ietf.org/rfc/rfc9458.html#name-key-configuration-encoding\" rel=\"noopener nofollow ugc\">OHTTP RFC Key Configuration media type encoding</a> already has a specified binary representation, making tags unnecessary.</p>\n<h2><a name=\"bytewords-3\" class=\"anchor\" href=\"#bytewords-3\"></a>bytewords</h2>\n<p><a href=\"https://github.com/BlockchainCommons/Research/blob/01094ff9c34464edd54df3eacc0aedee89e528b5/papers/bcr-2020-003-uri-binary-compatibility.md#bytewords\" rel=\"noopener nofollow ugc\">Bytewords</a> is basically UR minus the tagged fields. However it\u2019s less dense than some of the following suggestions. Setting aside the checksum, it is as dense as base16 or hexadecimal encoding. It adds a new dependency too.</p>\n<h2><a name=\"bech32m-4\" class=\"anchor\" href=\"#bech32m-4\"></a>Bech32m</h2>\n<p><a href=\"https://github.com/bitcoin/bips/blob/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed/bip-0173.mediawiki#bech32\" rel=\"noopener nofollow ugc\">Bech32</a> includes a human readable prefix and a checksum over a base32 encoding scheme. It\u2019s relatively dense and the checksum and prefix help it not be mistaken for other data. This encoding is used for segwit address types. <a href=\"https://github.com/bitcoin/bips/blob/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed/bip-0350.mediawiki#user-content-Bech32m\" rel=\"noopener nofollow ugc\">Bech32m</a> is a later version used for segwit v1+ addresses that fixed an issue with checksum malleability.</p>\n<h2><a name=\"base45-5\" class=\"anchor\" href=\"#base45-5\"></a>base45</h2>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc9285\" rel=\"noopener nofollow ugc\">Base45 RFC 9285</a> is the character set used for QR Alphanumeric Encoding, so that\u2019s about as dense as can be for this application but does not include a checksum. The checksum is critical for the address where funds end up but less critical for public key exchange to facilitate secure transport. This might be the way to go, but it adds a dependency.</p>\n<hr>\n<h2><a name=\"my-favorites-6\" class=\"anchor\" href=\"#my-favorites-6\"></a>My favorites</h2>\n<p>I tend to favor bech32m with <code>pk</code> for public key and <code>oh</code> for ohttp Key Configuration prefixes. It\u2019s already included in every piece of bitcoin software that supports segwit addresses. The prefix and checksum are nice to have without being too costly. base45 seems nice too, but it\u2019s adds an extra dependency only to save a few bytes.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2024-04-01T19:17:18.548Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 8,
  "readers_count": 7,
  "score": 6.6,
  "yours": false,
  "topic_id": 96,
  "topic_slug": "serverless-payjoin-protocol-design",
  "topic_title": "Serverless Payjoin Protocol Design",
  "topic_html_title": "Serverless Payjoin Protocol Design",
  "category_id": 7,
  "display_username": "Dan Gould",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "## Choosing a proper URI encoding for payjoin params `pj` pubkey and subdirectory and `ohttp` Key Configuration\n\nBoth the session public key and ohttp Key Configuration are included in the payjoin version 2 bitcoin URI. An early version of this protocol used base64url encoding since that's a dense binary to text encoding that's already available used in another payjoin dependency to encode PSBTs.\n\nA payjoin-enabled bitcoin URI looks like this. I seek to find the decide on the most suitable way to encode `$SUBDIRECTORY_PUBKEY` and `$OHTTP_KEY_CONFIG`.\n```\nbitcoin:tb1pnsvdr8842r9cnf0yyqvexz4nee8244wyr9pq6nrxw9de0uk8rckq3s9g4a?amount=21&pj=https://payjo.in/$SUBDIRECTORY_PUBKEY&ohttp=$OHTTP_KEY_CONFIG\n```\n\nBitcoin URIs are often QR encoded, and base64Url breaks [QR Alphanumeric Encoding](https://github.com/BlockchainCommons/Research/blob/01094ff9c34464edd54df3eacc0aedee89e528b5/papers/bcr-2020-003-uri-binary-compatibility.md#qr-code-alphanumeric-encoding) and leads to QR codes with a much higher density that are more difficult to scan. Some other options have been proposed.\n\n## UR Encoding\n\n[UR Encoding was suggested on the bitcoin-dev mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021882.html) since it encodes tagged fields and includes a checksum without breaking QR alphanumeric encoding. However, the payjoin subdirectory has no tagged fields since it's just a single key, and the [OHTTP RFC Key Configuration media type encoding](https://www.ietf.org/rfc/rfc9458.html#name-key-configuration-encoding) already has a specified binary representation, making tags unnecessary.\n\n## bytewords\n\n[Bytewords](https://github.com/BlockchainCommons/Research/blob/01094ff9c34464edd54df3eacc0aedee89e528b5/papers/bcr-2020-003-uri-binary-compatibility.md#bytewords) is basically UR minus the tagged fields. However it's less dense than some of the following suggestions. Setting aside the checksum, it is as dense as base16 or hexadecimal encoding. It adds a new dependency too.\n\n## Bech32m\n\n[Bech32](https://github.com/bitcoin/bips/blob/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed/bip-0173.mediawiki#bech32) includes a human readable prefix and a checksum over a base32 encoding scheme. It's relatively dense and the checksum and prefix help it not be mistaken for other data. This encoding is used for segwit address types. [Bech32m](https://github.com/bitcoin/bips/blob/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed/bip-0350.mediawiki#user-content-Bech32m) is a later version used for segwit v1+ addresses that fixed an issue with checksum malleability.\n\n## base45\n\n[Base45 RFC 9285](https://datatracker.ietf.org/doc/html/rfc9285) is the character set used for QR Alphanumeric Encoding, so that's about as dense as can be for this application but does not include a checksum. The checksum is critical for the address where funds end up but less critical for public key exchange to facilitate secure transport. This might be the way to go, but it adds a dependency.\n\n---\n\n## My favorites\n\nI tend to favor bech32m with `pk` for public key and `oh` for ohttp Key Configuration prefixes. It's already included in every piece of bitcoin software that supports segwit addresses. The prefix and checksum are nice to have without being too costly. base45 seems nice too, but it's adds an extra dependency only to save a few bytes.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 17,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}