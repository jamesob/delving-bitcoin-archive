{
  "id": 2228,
  "name": "Garlo Nicon",
  "username": "garlonicon",
  "avatar_template": "/letter_avatar_proxy/v4/letter/g/278dde/{size}.png",
  "created_at": "2024-04-15T05:14:32.096Z",
  "cooked": "<aside class=\"quote no-group\">\n<blockquote>\n<p><em>This approach is somewhat naive, but maybe there is some potential.</em></p>\n</blockquote>\n</aside>\n<p>It may seem naive, but when I thought about sidechains, my conclusions were similar. Definitely, if you want to make a test network, then it is sufficient to just prepare all transactions off-chain, without moving any coins at all. Because then, a simple test network can be deployed: it starts with zero coins, and they appear on the network if you sign them, and disappear, when you move them on-chain in any way.</p>\n<p>And obviously, that model is not \u201cthe final state of things\u201d, because if Alice knows all conditions behind a given UTXO, then she can always move them on-chain, no matter what was signed previously, and broadcasted to any parties. However, if you note that you can hide N-of-N multisig, behind a single public key, then you can see some potential in this idea.</p>\n<p>So: my conclusion was simple: if you want to build any network in this way, it should have general rules like that: \u201csign on-chain coins to make a peg-in, and move on-chain coins to create a peg-out\u201d. And that rule should not be restricted any further, when it comes to checking, if the history is valid. However, to prevent misuse, you can then restrict it further by introducing standardness rules. Which means, that peg-ins and peg-outs of the whole network, should work even with OP_TRUE. But: the client you interact with, can for example say: \u201cyou have to show me some on-chain UTXO, where there is P2TR, with 2-of-2 multisig, and one of those keys are owned by me\u201d.</p>\n<aside class=\"quote no-group\">\n<blockquote>\n<p>Alice will need to disclose information that a given UTXO is partially pledged to a particular bitcoin address. This information can be shared with nodes that would have the assigned counter addresses in addition to a list of valid UTXOs. Or, for example, Alice can share this information via nostr on generally know relay (or more of them).</p>\n</blockquote>\n</aside>\n<p>Guess what: this is the perfect task for the sidechain network. Imagine that some of the current Bitcoin nodes would have additional features, like \u201cstoring penalty transactions\u201d. And then, those nodes could act as a global watchtower. But: to complete the whole picture, you need to note, that if all transactions are public, then someone may just broadcast all of that unconditionally, even if there is no dispute. So, to mitigate that, you should also encrypt penalty transactions, so they will be decrypted and broadcasted, only when nodes encounter the previous transaction.</p>\n<aside class=\"quote no-group\">\n<blockquote>\n<p>How to prevent the long-term collaboration with miners?</p>\n</blockquote>\n</aside>\n<p>If they will run their full nodes with those new features, then it would be sufficient. Of course, there is always a risk, that some miners may alter the default settings, but well: any second layer can be always attacked, if miners are malicious. So, it is all about ensuring, that the majority is honest, and share your software with that majority.</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-04-15T05:14:32.096Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 6,
  "readers_count": 5,
  "score": 6.0,
  "yours": false,
  "topic_id": 797,
  "topic_slug": "can-game-theory-secure-scaling",
  "topic_title": "Can Game Theory Secure Scaling?",
  "topic_html_title": "Can Game Theory Secure Scaling?",
  "category_id": 7,
  "display_username": "Garlo Nicon",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote]*This approach is somewhat naive, but maybe there is some potential.*[/quote]\nIt may seem naive, but when I thought about sidechains, my conclusions were similar. Definitely, if you want to make a test network, then it is sufficient to just prepare all transactions off-chain, without moving any coins at all. Because then, a simple test network can be deployed: it starts with zero coins, and they appear on the network if you sign them, and disappear, when you move them on-chain in any way.\n\nAnd obviously, that model is not \"the final state of things\", because if Alice knows all conditions behind a given UTXO, then she can always move them on-chain, no matter what was signed previously, and broadcasted to any parties. However, if you note that you can hide N-of-N multisig, behind a single public key, then you can see some potential in this idea.\n\nSo: my conclusion was simple: if you want to build any network in this way, it should have general rules like that: \"sign on-chain coins to make a peg-in, and move on-chain coins to create a peg-out\". And that rule should not be restricted any further, when it comes to checking, if the history is valid. However, to prevent misuse, you can then restrict it further by introducing standardness rules. Which means, that peg-ins and peg-outs of the whole network, should work even with OP_TRUE. But: the client you interact with, can for example say: \"you have to show me some on-chain UTXO, where there is P2TR, with 2-of-2 multisig, and one of those keys are owned by me\".\n\n[quote]Alice will need to disclose information that a given UTXO is partially pledged to a particular bitcoin address. This information can be shared with nodes that would have the assigned counter addresses in addition to a list of valid UTXOs. Or, for example, Alice can share this information via nostr on generally know relay (or more of them).[/quote]\nGuess what: this is the perfect task for the sidechain network. Imagine that some of the current Bitcoin nodes would have additional features, like \"storing penalty transactions\". And then, those nodes could act as a global watchtower. But: to complete the whole picture, you need to note, that if all transactions are public, then someone may just broadcast all of that unconditionally, even if there is no dispute. So, to mitigate that, you should also encrypt penalty transactions, so they will be decrypted and broadcasted, only when nodes encounter the previous transaction.\n\n[quote]How to prevent the long-term collaboration with miners?[/quote]\nIf they will run their full nodes with those new features, then it would be sufficient. Of course, there is always a risk, that some miners may alter the default settings, but well: any second layer can be always attacked, if miners are malicious. So, it is all about ensuring, that the majority is honest, and share your software with that majority.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 372,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}