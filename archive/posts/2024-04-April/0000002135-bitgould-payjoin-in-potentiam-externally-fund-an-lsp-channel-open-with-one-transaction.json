{
  "id": 2135,
  "name": "Dan Gould",
  "username": "bitgould",
  "avatar_template": "/user_avatar/delvingbitcoin.org/bitgould/{size}/482_2.png",
  "created_at": "2024-04-02T14:52:25.784Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"ZmnSCPxj\" data-post=\"5\" data-topic=\"749\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/z/ee7513/48.png\" class=\"avatar\"> ZmnSCPxj:</div>\n<blockquote>\n<p>The reason Bob can accept 0-conf offchain operation is precisely that <em><strong>all inputs are from swap-in-potentiam</strong></em>. If the Source Of Funds is not spending swap-in-potentiam funds with the same Bob, then Bob cannot accept 0-conf channel funding, but must wait for confirmation.</p>\n</blockquote>\n</aside>\n<p>I understand that this protocol doesn\u2019t speed up the need for confirmation. If Alice has already waited for confirmation to the swap address, Bob can trust 0-conf. If Bob opens a channel from payjoin-in-potentiam external funds, Bob wants to wait for confirmation.</p>\n<p>Either way a single confirmation, either to the swap or in a payjoin, is still required from the source of funds.</p>\n<p>SIP is clearly a simpler protocol that should be deployed correctly before being optimized for batched fee saving.</p>\n<aside class=\"quote no-group\" data-username=\"ZmnSCPxj\" data-post=\"5\" data-topic=\"749\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/z/ee7513/48.png\" class=\"avatar\"> ZmnSCPxj:</div>\n<blockquote>\n<p>In particular, the advantage of swap-in-potentiam is precisely that Alice can go offline. In this model, Alice is very rarely online (e.g. mobile wallet). An edge case that can only trigger when Alice is also online is useful, but not very valuable compared to ensuring correct behavior in the common case.</p>\n</blockquote>\n</aside>\n<p>Correctness is absolutely more important than an optimization. However I don\u2019t think that\u2019s the trade-off PIP makes.</p>\n<p>I see why SIP is awesome and want to build more on the idea. PIP is just an optimization to save fees with an SIP failsafe. It also provides the LSP with an opportunity for those outside funds to pay for an LSP consolidation or transaction cut-through and preserve privacy via a transaction topology including indistinguishable sender and receiver input.</p>\n<p>I know when I\u2019m expecting incoming funds I often keep refreshing the page waiting for it to land in my wallet. In that case, both Alice and Bob can save blockspace fees and create less congestion in mempool. A comparison of payjoin-in-potentiam to the correct swap-in-potentiam common case does not make much sense to me  because PIP subsumes the common case SIP entirely. Do you foresee some way that it would break that common case assuming a correct implementation? I see that ensuring correct implementation is also an important and valid concern on your mind.</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2024-04-02T14:52:25.784Z",
  "reply_count": 0,
  "reply_to_post_number": 5,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 12,
  "readers_count": 11,
  "score": 1.6,
  "yours": false,
  "topic_id": 749,
  "topic_slug": "payjoin-in-potentiam-externally-fund-an-lsp-channel-open-with-one-transaction",
  "topic_title": "Payjoin-in-Potentiam: Externally fund an LSP channel open with one transaction",
  "topic_html_title": "Payjoin-in-Potentiam: Externally fund an LSP channel open with one transaction",
  "category_id": 7,
  "display_username": "Dan Gould",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"ZmnSCPxj, post:5, topic:749\"]\nThe reason Bob can accept 0-conf offchain operation is precisely that ***all inputs are from swap-in-potentiam***. If the Source Of Funds is not spending swap-in-potentiam funds with the same Bob, then Bob cannot accept 0-conf channel funding, but must wait for confirmation.\n[/quote]\n\nI understand that this protocol doesn't speed up the need for confirmation. If Alice has already waited for confirmation to the swap address, Bob can trust 0-conf. If Bob opens a channel from payjoin-in-potentiam external funds, Bob wants to wait for confirmation.\n\nEither way a single confirmation, either to the swap or in a payjoin, is still required from the source of funds.\n\nSIP is clearly a simpler protocol that should be deployed correctly before being optimized for batched fee saving.\n\n[quote=\"ZmnSCPxj, post:5, topic:749\"]\nIn particular, the advantage of swap-in-potentiam is precisely that Alice can go offline. In this model, Alice is very rarely online (e.g. mobile wallet). An edge case that can only trigger when Alice is also online is useful, but not very valuable compared to ensuring correct behavior in the common case.\n[/quote]\n\nCorrectness is absolutely more important than an optimization. However I don't think that's the trade-off PIP makes.\n\nI see why SIP is awesome and want to build more on the idea. PIP is just an optimization to save fees with an SIP failsafe. It also provides the LSP with an opportunity for those outside funds to pay for an LSP consolidation or transaction cut-through and preserve privacy via a transaction topology including indistinguishable sender and receiver input.\n\nI know when I'm expecting incoming funds I often keep refreshing the page waiting for it to land in my wallet. In that case, both Alice and Bob can save blockspace fees and create less congestion in mempool. A comparison of payjoin-in-potentiam to the correct swap-in-potentiam common case does not make much sense to me  because PIP subsumes the common case SIP entirely. Do you foresee some way that it would break that common case assuming a correct implementation? I see that ensuring correct implementation is also an important and valid concern on your mind.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 17,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}