{
  "id": 2189,
  "name": "",
  "username": "shesek",
  "avatar_template": "/letter_avatar_proxy/v4/letter/s/d6d6ee/{size}.png",
  "created_at": "2024-04-09T22:33:53.088Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"jungly\" data-post=\"9\" data-topic=\"748\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/jungly/48/289_2.png\" class=\"avatar\"> jungly:</div>\n<blockquote>\n<p>I wonder if we can make such template using a declarative syntax</p>\n</blockquote>\n</aside>\n<p>Minsc has some functional constructs for looping that might be interesting to check out.</p>\n<p>You can use <code>repeat($n, $script)</code> for cases where you need to repeat a script fragment exactly N times. For example to create a <code>rollFromAltStack</code> function (for statically known N):</p>\n<pre><code class=\"lang-auto\">fn rollFromAltStack($n) = `\n  repeat($n, OP_FROMALTSTACK)\n  repeat($n - 1, `OP_SWAP OP_TOALTSTACK`)\n`;\nscript = `100 rollFromAltStack(5) OP_ADD`;\n</code></pre>\n<p>(<a href=\"https://min.sc/next/#c=fn%20rollFromAltStack%28%24n%29%20%3D%20%60%0A%20%20repeat%28%24n%2C%20OP_FROMALTSTACK%29%0A%20%20repeat%28%24n%20-%201%2C%20%60OP_SWAP%20OP_TOALTSTACK%60%29%0A%60%3B%0A%0Ascript%20%3D%20%60100%20rollFromAltStack%285%29%20OP_ADD%60%3B%0A%0Ascript\" rel=\"noopener nofollow ugc\">playground</a>)</p>\n<p>The fragment can also be constructed with a function if the index is needed, for example <code>`0 repeat(3, |$i| repeat(5, |$k| `$i OP_ADD {$k+10} OP_SUB`))`</code></p>\n<p>There\u2019s also <code>unrollLoop($max, $condition, $body)</code> that runs a script fragment as long as a condition is met, up to <code>$max</code> times. For example, a simple countdown from a number on the stack (up to 50) down to 0:</p>\n<pre><code class=\"lang-auto\">unrollLoop(50, `OP_DUP 0 OP_GREATERTHANOREQUAL`, OP_1SUB)\n</code></pre>\n<p>(<a href=\"https://min.sc/next/#c=unrollLoop%2850%2C%20%60OP_DUP%200%20OP_GREATERTHANOREQUAL%60%2C%20OP_1SUB%29\" rel=\"noopener nofollow ugc\">playground</a>, <a href=\"https://min.sc/next/#gist=758c25489869d77d4ef624ea43f18c49\" rel=\"noopener nofollow ugc\">more advanced example with liquid</a>. <code>unrollLoop</code> is itself <a href=\"https://github.com/shesek/minsc/blob/a28412f2da02c9952881c36f01b1b5027c7520bd/src/stdlib/stdlib.minsc#L55\" rel=\"noopener nofollow ugc\">implemented</a> in Minsc as part of its stdlib.)</p>\n<p>\u2013</p>\n<p>Minsc focuses entirely on defining the (Mini)Script-level spending conditions and doesn\u2019t deal with higher-level abstracts like Bitcoin DSL does, so perhaps they could somehow work together.</p>\n<p>Note that the main <a href=\"https://min.sc\" rel=\"noopener nofollow ugc\">https://min.sc</a> website is outdated, the docs are lacking the (non-Miniscript) Script features and the playground runs an old version. A playground that matches the code on <a href=\"https://github.com/shesek/minsc\" rel=\"noopener nofollow ugc\">github</a> is available at <a href=\"https://min.sc/next/\" rel=\"noopener nofollow ugc\">https://min.sc/next/</a>. I don\u2019t have updated docs but I did publish some <a href=\"https://twitter.com/shesek/status/1508586871819059202\" rel=\"noopener nofollow ugc\">more advanced examples</a> using CTV and Liquid\u2019s introspection opcodes.</p>\n<p>I should really get this cleaned up and released properly <img src=\"https://delvingbitcoin.org/images/emoji/twitter/sweat_smile.png?v=12\" title=\":sweat_smile:\" class=\"emoji\" alt=\":sweat_smile:\" loading=\"lazy\" width=\"20\" height=\"20\">  I haven\u2019t been working on this for some time but picking this back up has been on my mind.</p>",
  "post_number": 13,
  "post_type": 1,
  "updated_at": "2024-04-09T22:47:42.178Z",
  "reply_count": 0,
  "reply_to_post_number": 9,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 13,
  "readers_count": 12,
  "score": 32.6,
  "yours": false,
  "topic_id": 748,
  "topic_slug": "dsl-for-experimenting-with-contracts",
  "topic_title": "DSL for experimenting with contracts",
  "topic_html_title": "DSL for experimenting with contracts",
  "category_id": 8,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"jungly, post:9, topic:748\"]\nI wonder if we can make such template using a declarative syntax\n[/quote]\n\nMinsc has some functional constructs for looping that might be interesting to check out.\n\nYou can use `repeat($n, $script)` for cases where you need to repeat a script fragment exactly N times. For example to create a `rollFromAltStack` function (for statically known N):\n\n```\nfn rollFromAltStack($n) = `\n  repeat($n, OP_FROMALTSTACK)\n  repeat($n - 1, `OP_SWAP OP_TOALTSTACK`)\n`;\nscript = `100 rollFromAltStack(5) OP_ADD`;\n``` \n([playground](https://min.sc/next/#c=fn%20rollFromAltStack%28%24n%29%20%3D%20%60%0A%20%20repeat%28%24n%2C%20OP_FROMALTSTACK%29%0A%20%20repeat%28%24n%20-%201%2C%20%60OP_SWAP%20OP_TOALTSTACK%60%29%0A%60%3B%0A%0Ascript%20%3D%20%60100%20rollFromAltStack%285%29%20OP_ADD%60%3B%0A%0Ascript))\n\nThe fragment can also be constructed with a function if the index is needed, for example ``` `0 repeat(3, |$i| repeat(5, |$k| `$i OP_ADD {$k+10} OP_SUB`))` ```\n\nThere's also `unrollLoop($max, $condition, $body)` that runs a script fragment as long as a condition is met, up to `$max` times. For example, a simple countdown from a number on the stack (up to 50) down to 0:\n```\nunrollLoop(50, `OP_DUP 0 OP_GREATERTHANOREQUAL`, OP_1SUB)\n```\n([playground](https://min.sc/next/#c=unrollLoop%2850%2C%20%60OP_DUP%200%20OP_GREATERTHANOREQUAL%60%2C%20OP_1SUB%29), [more advanced example with liquid](https://min.sc/next/#gist=758c25489869d77d4ef624ea43f18c49). `unrollLoop` is itself [implemented](https://github.com/shesek/minsc/blob/a28412f2da02c9952881c36f01b1b5027c7520bd/src/stdlib/stdlib.minsc#L55) in Minsc as part of its stdlib.)\n\n--\n\nMinsc focuses entirely on defining the (Mini)Script-level spending conditions and doesn't deal with higher-level abstracts like Bitcoin DSL does, so perhaps they could somehow work together.\n\nNote that the main https://min.sc website is outdated, the docs are lacking the (non-Miniscript) Script features and the playground runs an old version. A playground that matches the code on [github](https://github.com/shesek/minsc) is available at [https://min.sc/next/](https://min.sc/next/). I don't have updated docs but I did publish some [more advanced examples](https://twitter.com/shesek/status/1508586871819059202) using CTV and Liquid's introspection opcodes.\n\nI should really get this cleaned up and released properly \ud83d\ude05  I haven't been working on this for some time but picking this back up has been on my mind.",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 393,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    },
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}