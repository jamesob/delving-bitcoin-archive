{
  "id": 2924,
  "name": "Gijs van Dam",
  "username": "gijswijs",
  "avatar_template": "/user_avatar/delvingbitcoin.org/gijswijs/{size}/749_2.png",
  "created_at": "2024-08-07T06:47:09.212Z",
  "cooked": "<p>Hey people,</p>\n<p>This years Financial Cryptography and Data Security 2024 (FC\u201924) conference had an interesting paper that explores the DoS threat that is introduced with Onion Messaging. It explores some mitigations that I would like to share here.</p>\n<p>The full paper is called \u201cShort Paper: Onion Messages on Leash\u201d by Amin Bashiri and Majid Khabbazian, both from the University of Alberta. It can be obtained here: <a href=\"https://fc24.ifca.ai/preproceedings/104.pdf\" rel=\"noopener nofollow ugc\">https://fc24.ifca.ai/preproceedings/104.pdf</a></p>\n<h2><a name=\"calculating-the-maximum-number-of-hops-an-om-can-traverse-1\" class=\"anchor\" href=\"#calculating-the-maximum-number-of-hops-an-om-can-traverse-1\"></a>Calculating the maximum number of hops an OM can traverse</h2>\n<p>Because of the bigger payload the paper claims that an OM can travel 504 hops. Although the paper makes a mistake here in assuming a 65 byte per hop data in the payload. The paper concludes that when assuming the max OM payload length (32834) it leaves space for 504 hops. But 65 bytes is the size of the legacy <code>hop_data</code> payload format, which we don\u2019t use anymore.</p>\n<h3><a name=\"calculating-per-hop-payload-size-2\" class=\"anchor\" href=\"#calculating-per-hop-payload-size-2\"></a>Calculating per hop payload size</h3>\n<p>A forwarding node in a blinded path will receive a cipher text payload containing the following data:</p>\n<pre><code class=\"lang-auto\">onionmsg_payloads\n    \tlength (1 byte)\n    \tonionmsg_tlv\n            \tnext_node_id:\n            \ttype: 4 (1 byte)\n            \tlength: 33 (1 byte)\n            \tvalue: 33 bytes\n    \thmac (32 bytes)\n</code></pre>\n<p>If my calculations are correct the per hop payload size is 68 bytes. Assuming the maximum payload size minus 100 bytes for the header and trailing bytes, it leaves 32734, divided by 68 equals 481, a very large number.</p>\n<h2><a name=\"hard-leash-3\" class=\"anchor\" href=\"#hard-leash-3\"></a>Hard Leash</h2>\n<p>The first mitigation is limiting the number of hops an OM can traverse. By allocating a portion of the complete payload as being allowed to contain routing information, we can limit the maximum number of hops a message can travel. An interesting data point to share here is what Tor has implemented. While in Tor three is the default circuit length of hops (entry (or guard) node, a middle node, and an exit node), eight is the maximum. Eight is derived from the number of <code>RELAY_EARLY</code> cells you are allowed to send in Tor. <a href=\"https://spec.torproject.org/proposals/110-avoid-infinite-circuits.html\" rel=\"noopener nofollow ugc\">https://spec.torproject.org/proposals/110-avoid-infinite-circuits.html</a></p>\n<h2><a name=\"soft-leash-4\" class=\"anchor\" href=\"#soft-leash-4\"></a>Soft Leash</h2>\n<p>The second mitigation is a PoW requirement for adding hops.</p>\n<p>The PoW-based algorithm suggested in the paper scales exponentially with the number of hops. This is achieve by linking each hop\u2019s PoW to the preceding hop\u2019s, effectively creating a chain of PoWs. With this approach, each additional hop appended to this chain exponentially increases the computational challenge of calculating the PoW for the entire path. The PoW is linked to the latest Bitcoin block\u2019s hash as a (albeit not true) source of randomness.</p>\n<p>Again this is a mitigation that is also implemented in Tor: <a href=\"https://blog.torproject.org/introducing-proof-of-work-defense-for-onion-services/\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">Introducing Proof-of-Work Defense for Onion Services | The Tor Project</a></p>\n<h2><a name=\"rate-limiting-5\" class=\"anchor\" href=\"#rate-limiting-5\"></a>Rate Limiting</h2>\n<p>The third suggestion made in the paper is on the topic of rate limiting. The suggestion made is to limit the rate of OMs being send on any <em>outgoing</em> link. The rate limit should be set proportional to the total channel capacity of the receiving node: <span class=\"math\">\\alpha_{A} \\cdot C_{B}</span>, where <span class=\"math\">\\alpha_{A}</span> is an adjustable parameter.</p>\n<h2><a name=\"routing-6\" class=\"anchor\" href=\"#routing-6\"></a>Routing</h2>\n<p>The final suggestion is to have routing for OM consider the channel capacities of the nodes when choosing a random path. By choosing random paths weighted based on the sum of capacities of each node\u2019s channels, the route tends towards the more capitalized nodes. Because of the rate limiting suggested above, this has the benefit of being the route with a higher rate limit, so a higher chance of success. But additionally, for an attacker to be on the route would become prohibitively more expensive.</p>\n<p>It is good to see LN security being taken seriously in academic literature and I would like to solicit the thoughts and opinions on this subject in the broader LN community.</p>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 2,
  "updated_at": "2024-08-07T06:47:09.212Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 148,
  "reads": 38,
  "readers_count": 37,
  "score": 772.6,
  "yours": false,
  "topic_id": 1058,
  "topic_slug": "onion-messaging-dos-threat-mitigations",
  "topic_title": "Onion Messaging DoS Threat Mitigations",
  "topic_html_title": "Onion Messaging DoS Threat Mitigations",
  "category_id": 7,
  "display_username": "Gijs van Dam",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Hey people,\n\n\nThis years Financial Cryptography and Data Security 2024 (FC'24) conference had an interesting paper that explores the DoS threat that is introduced with Onion Messaging. It explores some mitigations that I would like to share here.\n\nThe full paper is called \"Short Paper: Onion Messages on Leash\" by Amin Bashiri and Majid Khabbazian, both from the University of Alberta. It can be obtained here: https://fc24.ifca.ai/preproceedings/104.pdf\n\n## Calculating the maximum number of hops an OM can traverse\n\nBecause of the bigger payload the paper claims that an OM can travel 504 hops. Although the paper makes a mistake here in assuming a 65 byte per hop data in the payload. The paper concludes that when assuming the max OM payload length (32834) it leaves space for 504 hops. But 65 bytes is the size of the legacy `hop_data` payload format, which we don't use anymore.\n\n### Calculating per hop payload size\n\nA forwarding node in a blinded path will receive a cipher text payload containing the following data:\n\n```\nonionmsg_payloads\n    \tlength (1 byte)\n    \tonionmsg_tlv\n            \tnext_node_id:\n            \ttype: 4 (1 byte)\n            \tlength: 33 (1 byte)\n            \tvalue: 33 bytes\n    \thmac (32 bytes)\n```\n\nIf my calculations are correct the per hop payload size is 68 bytes. Assuming the maximum payload size minus 100 bytes for the header and trailing bytes, it leaves 32734, divided by 68 equals 481, a very large number.\n\n## Hard Leash\n\nThe first mitigation is limiting the number of hops an OM can traverse. By allocating a portion of the complete payload as being allowed to contain routing information, we can limit the maximum number of hops a message can travel. An interesting data point to share here is what Tor has implemented. While in Tor three is the default circuit length of hops (entry (or guard) node, a middle node, and an exit node), eight is the maximum. Eight is derived from the number of `RELAY_EARLY` cells you are allowed to send in Tor. https://spec.torproject.org/proposals/110-avoid-infinite-circuits.html\n\n## Soft Leash\n\nThe second mitigation is a PoW requirement for adding hops.\n\nThe PoW-based algorithm suggested in the paper scales exponentially with the number of hops. This is achieve by linking each hop\u2019s PoW to the preceding hop\u2019s, effectively creating a chain of PoWs. With this approach, each additional hop appended to this chain exponentially increases the computational challenge of calculating the PoW for the entire path. The PoW is linked to the latest Bitcoin block\u2019s hash as a (albeit not true) source of randomness.\n\nAgain this is a mitigation that is also implemented in Tor: https://blog.torproject.org/introducing-proof-of-work-defense-for-onion-services/\n\n## Rate Limiting\n\nThe third suggestion made in the paper is on the topic of rate limiting. The suggestion made is to limit the rate of OMs being send on any _outgoing_ link. The rate limit should be set proportional to the total channel capacity of the receiving node: $\\alpha_{A} \\cdot C_{B}$, where $\\alpha_{A}$ is an adjustable parameter.\n\n## Routing\n\nThe final suggestion is to have routing for OM consider the channel capacities of the nodes when choosing a random path. By choosing random paths weighted based on the sum of capacities of each node\u2019s channels, the route tends towards the more capitalized nodes. Because of the rate limiting suggested above, this has the benefit of being the route with a higher rate limit, so a higher chance of success. But additionally, for an attacker to be on the route would become prohibitively more expensive.\n\nIt is good to see LN security being taken seriously in academic literature and I would like to solicit the thoughts and opinions on this subject in the broader LN community.",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 501,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Hey people, \nThis years Financial Cryptography and Data Security 2024 (FC\u201924) conference had an interesting paper that explores the DoS threat that is introduced with Onion Messaging. It explores some mitigations that I would like to share here. \nThe full paper is called \u201cShort Paper: Onion Messages&hellip;",
  "truncated": true,
  "post_url": "/t/onion-messaging-dos-threat-mitigations/1058/1",
  "reactions": [
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    },
    {
      "id": "thinking",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null,
  "can_vote": false
}