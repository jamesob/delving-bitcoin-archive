{
  "id": 3007,
  "name": "moonsettler",
  "username": "moonsettler",
  "avatar_template": "/user_avatar/delvingbitcoin.org/moonsettler/{size}/38_2.png",
  "created_at": "2024-08-20T17:12:38.964Z",
  "cooked": "<p>i replaced <code>vc</code> with <code>hash</code> which should be understood as a cryptographically secure hash commitment to a list of parameters.</p>\n<pre><code class=\"lang-plaintext\">[Scheme 2: deterministic nonce, S2C tweak]\n* SW generates random t, and requests a signature by sending (Q,m,t) to HW.\n* HW computes k0=H(d,m,t), R0=k0G, k=k0+H(R0,t), R=kG,\n  s=k+H(R,Q,m)d, and sends (R0,R,s) to SW.\n* SW verifies sG=R+H(R,Q,m)Q, R=R0+H(R0,t)G, and publishes sig (R,s) if all\n  is good.\n</code></pre>\n<p>this is indeed essentially the same! in this case my main question is answered. the scheme is good enough. i think we can proceed with formal specification, and maybe incorporation of support into secp256k1 lib, because people are in fact looking forward to use it.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2024-08-20T18:53:47.953Z",
  "reply_count": 0,
  "reply_to_post_number": 3,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 9,
  "readers_count": 8,
  "score": 16.8,
  "yours": false,
  "topic_id": 1081,
  "topic_slug": "non-interactive-anti-exfil-airgap-compatible",
  "topic_title": "Non interactive anti-exfil (airgap compatible)",
  "topic_html_title": "Non interactive anti-exfil (airgap compatible)",
  "category_id": 7,
  "display_username": "moonsettler",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "sipa",
    "name": "Pieter Wuille",
    "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png"
  },
  "bookmarked": false,
  "raw": "i replaced `vc` with `hash` which should be understood as a cryptographically secure hash commitment to a list of parameters.\n\n```text\n[Scheme 2: deterministic nonce, S2C tweak]\n* SW generates random t, and requests a signature by sending (Q,m,t) to HW.\n* HW computes k0=H(d,m,t), R0=k0G, k=k0+H(R0,t), R=kG,\n  s=k+H(R,Q,m)d, and sends (R0,R,s) to SW.\n* SW verifies sG=R+H(R,Q,m)Q, R=R0+H(R0,t)G, and publishes sig (R,s) if all\n  is good.\n```\n\nthis is indeed essentially the same! in this case my main question is answered. the scheme is good enough. i think we can proceed with formal specification, and maybe incorporation of support into secp256k1 lib, because people are in fact looking forward to use it.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 48,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}