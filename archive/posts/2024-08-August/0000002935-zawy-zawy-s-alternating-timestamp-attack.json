{
  "id": 2935,
  "name": "Zawy",
  "username": "zawy",
  "avatar_template": "/user_avatar/delvingbitcoin.org/zawy/{size}/750_2.png",
  "created_at": "2024-08-10T13:34:30.353Z",
  "cooked": "<p>Thanks for investigating this so well and discovering how to greatly amplify it. I just realized my version allows only 2.8x instead of 5x more blocks because in a 50% hashrate private mine the attacker\u2019s difficulty would drop to match his hashrate after the 1st period (which would take 4 weeks) so he can get 2016 + 6 * 2016 = 14,112 blocks in 16 weeks instead of 8,064.</p>\n<p>I prefer the distributed consensus requirement of monotonic timestamps as a simpler way to prevent attacks with less code. It would allow removing MTP and the 4x to 1/4 limits on nActualtimespan.</p>\n<p>If monotonic timestamps aren\u2019t possible, the 2nd best option in my mind is doing a past-time limit on every block, not just the 2016 transition. This would be slightly simpler code and \u201cmore attractive\u201d logic. If it\u2019s good and safe for the 2016 transition then its better to do it on all blocks. It would prevent the need to restrict nActualtimespan and removes the main reason MTP exists. It\u2019s a weak form of enforcing monotonicity. MTP and these new fixes are just patches to the <a href=\"https://amturing.acm.org/p558-lamport.pdf\" rel=\"noopener nofollow ugc\">proven</a> distributed consensus mistake of allowing non-monotonic timestamps.</p>\n<p>Making the past time limit equal to the future time limit as a justification for its value may not be good because they\u2019re very different limits. The 7200 future time only applies to active miners while a 7200 past time is forever for all nodes. A block with a timestamp beyond the future time limit can potentially be accepted in the future. But I can\u2019t deduce a specific problem. In fact, there\u2019s a benefit if the past time limit is applied to every block: the future time limit can be removed. It\u2019s automatically enforced if honest miners follow the consensus rule \u201cDon\u2019t mine on top of a block if an honest timestamp based on your clock will be more than 7200 seconds before its timestamp.\u201d With this rule in place, I would make the 2hr past time limit 10 minutes. If the old distributed consensus rules were followed perfectly, the rule would be \u201cignore a new block for 600 seconds if its timestamp is +/- 10 seconds from my local time when I first saw the block\u201d. This stops 1 and 2-block selfish mining attacks because they have to assign a timestamp before they know when they\u2019ll need to release it and it reverts to PoW if there\u2019s a real network partition. The monotonic timestamp rule would still apply, so a miner would use 1+ the parent block\u2019s timestamp instead of his local time if the parent timestamp is in the future.</p>\n<p>But I haven\u2019t found a vulnerability with 2 hr past time limit and restricting nActualtimespan to being positive as you\u2019ve described.</p>\n<p>The chain may have many blocks in the past that would violate a 2 hr rule if it was applied to all blocks but maybe none at the 2016 transition, so doing it only at the transition may not require \u201cif height &gt; 850,000 \u2026\u201d to have some sort of backwards compatibility.</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-08-10T15:33:34.119Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 4,
  "readers_count": 3,
  "score": 0.8,
  "yours": false,
  "topic_id": 1062,
  "topic_slug": "zawy-s-alternating-timestamp-attack",
  "topic_title": "Zawy\u2019s Alternating Timestamp Attack",
  "topic_html_title": "Zawy\u2019s Alternating Timestamp Attack",
  "category_id": 7,
  "display_username": "Zawy",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thanks for investigating this so well and discovering how to greatly amplify it. I just realized my version allows only 2.8x instead of 5x more blocks because in a 50% hashrate private mine the attacker's difficulty would drop to match his hashrate after the 1st period (which would take 4 weeks) so he can get 2016 + 6 * 2016 = 14,112 blocks in 16 weeks instead of 8,064.\n\nI prefer the distributed consensus requirement of monotonic timestamps as a simpler way to prevent attacks with less code. It would allow removing MTP and the 4x to 1/4 limits on nActualtimespan.\n\nIf monotonic timestamps aren't possible, the 2nd best option in my mind is doing a past-time limit on every block, not just the 2016 transition. This would be slightly simpler code and \"more attractive\" logic. If it's good and safe for the 2016 transition then its better to do it on all blocks. It would prevent the need to restrict nActualtimespan and removes the main reason MTP exists. It's a weak form of enforcing monotonicity. MTP and these new fixes are just patches to the [proven](https://amturing.acm.org/p558-lamport.pdf) distributed consensus mistake of allowing non-monotonic timestamps.\n\nMaking the past time limit equal to the future time limit as a justification for its value may not be good because they're very different limits. The 7200 future time only applies to active miners while a 7200 past time is forever for all nodes. A block with a timestamp beyond the future time limit can potentially be accepted in the future. But I can't deduce a specific problem. In fact, there's a benefit if the past time limit is applied to every block: the future time limit can be removed. It's automatically enforced if honest miners follow the consensus rule \"Don't mine on top of a block if an honest timestamp based on your clock will be more than 7200 seconds before its timestamp.\" With this rule in place, I would make the 2hr past time limit 10 minutes. If the old distributed consensus rules were followed perfectly, the rule would be \"ignore a new block for 600 seconds if its timestamp is +/- 10 seconds from my local time when I first saw the block\". This stops 1 and 2-block selfish mining attacks because they have to assign a timestamp before they know when they'll need to release it and it reverts to PoW if there's a real network partition. The monotonic timestamp rule would still apply, so a miner would use 1+ the parent block's timestamp instead of his local time if the parent timestamp is in the future. \n\nBut I haven't found a vulnerability with 2 hr past time limit and restricting nActualtimespan to being positive as you've described.\n\nThe chain may have many blocks in the past that would violate a 2 hr rule if it was applied to all blocks but maybe none at the 2016 transition, so doing it only at the transition may not require \"if height > 850,000 ...\" to have some sort of backwards compatibility.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 502,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}