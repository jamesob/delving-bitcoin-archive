{
  "id": 3056,
  "name": "David A. Harding",
  "username": "harding",
  "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/6_2.png",
  "created_at": "2024-08-26T15:00:54.911Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"evoskuil\" data-post=\"30\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/evoskuil/48/391_2.png\" class=\"avatar\"> evoskuil:</div>\n<blockquote>\n<p>This minor wallet optimization was not even mentioned in the above rationale for the new rule. If the sole objective of the proposed rule was to save a small amount of bandwidth for SPV proofs, we would not be having this discussion.</p>\n</blockquote>\n</aside>\n<p>The rationale for the new rule starts by describing the vulnerability that affects almost all deployed SPV software.  I myself had forgotten the mention in Daftuar\u2019s paper that checking the depth of the coinbase transaction could provide a trustless way for SPV clients to avoid the attack.  I\u2019m not sure how many authors of SPV software are aware of that.</p>\n<p>My point was that, as a solution, it still leaves something to be desired.  It increases the amount of code that needs to be written to verify an SPV proof (the client now needs a way to request a coinbase transaction even if it doesn\u2019t know its txid, and it needs verify the coinbase tx appears in the correct location in the merkle tree and that its initial bytes have the correct structure for a coinbase transaction).  I previously mentioned that it inflates proof sizes by about 70%, but I now think it\u2019s greater than that (I think verification of the initial bytes of the coinbase transaction are required, which means the entire coinbase transaction needs to be downloaded to calculate its txid, which can inflate proof size by up to almost 1 MB).</p>\n<p>Fixing a vulnerability that affects widely used software, that simplifies the design of future software, and that reduces network (and potentially consensus) bandwidth seems useful to me.</p>",
  "post_number": 31,
  "post_type": 1,
  "updated_at": "2024-08-26T15:00:54.911Z",
  "reply_count": 2,
  "reply_to_post_number": 30,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 14,
  "readers_count": 13,
  "score": 12.8,
  "yours": false,
  "topic_id": 710,
  "topic_slug": "great-consensus-cleanup-revival",
  "topic_title": "Great Consensus Cleanup Revival",
  "topic_html_title": "Great Consensus Cleanup Revival",
  "category_id": 7,
  "display_username": "David A. Harding",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"evoskuil, post:30, topic:710\"]\nThis minor wallet optimization was not even mentioned in the above rationale for the new rule. If the sole objective of the proposed rule was to save a small amount of bandwidth for SPV proofs, we would not be having this discussion.\n[/quote]\n\nThe rationale for the new rule starts by describing the vulnerability that affects almost all deployed SPV software.  I myself had forgotten the mention in Daftuar's paper that checking the depth of the coinbase transaction could provide a trustless way for SPV clients to avoid the attack.  I'm not sure how many authors of SPV software are aware of that.\n\nMy point was that, as a solution, it still leaves something to be desired.  It increases the amount of code that needs to be written to verify an SPV proof (the client now needs a way to request a coinbase transaction even if it doesn't know its txid, and it needs verify the coinbase tx appears in the correct location in the merkle tree and that its initial bytes have the correct structure for a coinbase transaction).  I previously mentioned that it inflates proof sizes by about 70%, but I now think it's greater than that (I think verification of the initial bytes of the coinbase transaction are required, which means the entire coinbase transaction needs to be downloaded to calculate its txid, which can inflate proof size by up to almost 1 MB).\n\nFixing a vulnerability that affects widely used software, that simplifies the design of future software, and that reduces network (and potentially consensus) bandwidth seems useful to me.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 6,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}