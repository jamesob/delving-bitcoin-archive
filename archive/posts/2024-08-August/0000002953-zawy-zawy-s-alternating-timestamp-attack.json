{
  "id": 2953,
  "name": "Zawy",
  "username": "zawy",
  "avatar_template": "/user_avatar/delvingbitcoin.org/zawy/{size}/750_2.png",
  "created_at": "2024-08-13T23:18:08.542Z",
  "cooked": "<p>No. Here goes the wordy version, but I think you can figure out from my previous post.</p>\n<p>I imagine this is how things are currently done, even if rule 1 is the only one that\u2019s required of an honest miner:</p>\n<ol>\n<li>A miner doesn\u2019t mine on a block if its timestamp is &gt;7200 in the future of his local time.  He mines on that block\u2019s parent until the miner\u2019s clock advances far enough to be less than 7200 behind the the block\u2019s timestamp, then he can mine on it.</li>\n<li>Miners use their local time for their timestamps.</li>\n<li>As a result of 1 &amp; 2, an honest miner never assigns a timestamp that\u2019s less than 7200 before his parent block, so an honest miner who merely obeys 1 &amp; 2 is already enforcing a 2hr PTL on himself.</li>\n</ol>\n<p>The current rules don\u2019t enforce 2 and 3. Rule 2 could be checked by enforcing timestamp accuracy with PoW override as I previously described, but let\u2019s assume we can\u2019t check 2.  We could still check 3. By \u201cwe\u201d I mean all nodes for all future time.  By \u201ccheck\u201d (validate) I mean we can see if he potentially obeyed rules 1 and 2.</p>\n<p>Rule 3 is just a PTL on every block, but the reasoning isn\u2019t that we\u2019re enforcing a PTL, but that we\u2019re restricting valid blocks to be those who didn\u2019t clearly violate 1 and 2. I\u2019m trying to show a 2 hr PTL on every block isn\u2019t an additional rule (that I\u2019ve made up out of nowhere for no good reason) if we require honest miners to use their local time as the timestamp in their templates, and if reject blocks that we know were not honest according to 1 and 2.</p>\n<p>If the details of implementation aren\u2019t clear: all miners know a block with a timestamp more than 7200 seconds before its parent block didn\u2019t follow the rules 1 and 2, so they consider it an invalid block. They find the oldest invalid block (as long as it is newer than when the check on rule 3 went into effect) and start mining on that block\u2019s parent. The chain after that parent is invalid because his child block didn\u2019t follow the rules and every honest miner would not have mined on the child or any descendants. If there is more than 1 tip, the valid parent with the most work is the one to work on.</p>\n<p>Taking it a a step further, a \u201cproperly enforced FTL\u201d means no past timestamp is more than the FTL, not just the parent timestamp.  This means every honest node would keep a \u201cmax valid timestamp seen\u201d variable for each block in his DB like chain work and invalidates any block who\u2019s timestamp is more than 2 hrs before its parent\u2019s \u201cmax timestamp seen\u201d. I think this would remove the need for an MTP.  This isn\u2019t a recommended code change, but trying to reduce Nakamoto consensus to the simplest implementation to understand it better.</p>",
  "post_number": 15,
  "post_type": 1,
  "updated_at": "2024-08-14T04:05:51.283Z",
  "reply_count": 0,
  "reply_to_post_number": 14,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 4,
  "readers_count": 3,
  "score": 0.8,
  "yours": false,
  "topic_id": 1062,
  "topic_slug": "zawy-s-alternating-timestamp-attack",
  "topic_title": "Zawy\u2019s Alternating Timestamp Attack",
  "topic_html_title": "Zawy\u2019s Alternating Timestamp Attack",
  "category_id": 7,
  "display_username": "Zawy",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "murch",
    "name": "Murch",
    "avatar_template": "/user_avatar/delvingbitcoin.org/murch/{size}/139_2.png"
  },
  "bookmarked": false,
  "raw": "No. Here goes the wordy version, but I think you can figure out from my previous post. \n\nI imagine this is how things are currently done, even if rule 1 is the only one that's required of an honest miner:\n\n1. A miner doesn't mine on a block if its timestamp is >7200 in the future of his local time.  He mines on that block's parent until the miner's clock advances far enough to be less than 7200 behind the the block's timestamp, then he can mine on it.\n2. Miners use their local time for their timestamps. \n3. As a result of 1 & 2, an honest miner never assigns a timestamp that's less than 7200 before his parent block, so an honest miner who merely obeys 1 & 2 is already enforcing a 2hr PTL on himself.  \n\nThe current rules don't enforce 2 and 3. Rule 2 could be checked by enforcing timestamp accuracy with PoW override as I previously described, but let's assume we can't check 2.  We could still check 3. By \"we\" I mean all nodes for all future time.  By \"check\" (validate) I mean we can see if he potentially obeyed rules 1 and 2.\n\nRule 3 is just a PTL on every block, but the reasoning isn't that we're enforcing a PTL, but that we're restricting valid blocks to be those who didn't clearly violate 1 and 2. I'm trying to show a 2 hr PTL on every block isn't an additional rule (that I've made up out of nowhere for no good reason) if we require honest miners to use their local time as the timestamp in their templates, and if reject blocks that we know were not honest according to 1 and 2.\n\nIf the details of implementation aren't clear: all miners know a block with a timestamp more than 7200 seconds before its parent block didn't follow the rules 1 and 2, so they consider it an invalid block. They find the oldest invalid block (as long as it is newer than when the check on rule 3 went into effect) and start mining on that block's parent. The chain after that parent is invalid because his child block didn't follow the rules and every honest miner would not have mined on the child or any descendants. If there is more than 1 tip, the valid parent with the most work is the one to work on.\n\nTaking it a a step further, a \"properly enforced FTL\" means no past timestamp is more than the FTL, not just the parent timestamp.  This means every honest node would keep a \"max valid timestamp seen\" variable for each block in his DB like chain work and invalidates any block who's timestamp is more than 2 hrs before its parent's \"max timestamp seen\". I think this would remove the need for an MTP.  This isn't a recommended code change, but trying to reduce Nakamoto consensus to the simplest implementation to understand it better.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 502,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}