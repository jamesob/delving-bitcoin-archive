{
  "id": 3070,
  "name": "Eric Voskuil",
  "username": "evoskuil",
  "avatar_template": "/user_avatar/delvingbitcoin.org/evoskuil/{size}/391_2.png",
  "created_at": "2024-08-27T23:17:30.102Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"evoskuil\" data-post=\"37\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/evoskuil/48/391_2.png\" class=\"avatar\"> evoskuil:</div>\n<blockquote>\n<p>This implies an average segwit-era download cost of <code>11*32 + 260 = 612</code> bytes to validate the Merkle proofs for <em>all txs</em> of a given block (.34 seconds on a 14,400 baud modem).</p>\n</blockquote>\n</aside>\n<p>This can be reduced by 36 bytes, since a valid coinbase must always contain the null point: <code>0xffffffff0000000000000000000000000000000000000000000000000000000000000000</code>. As this can be assumed, the segwit-era average download cost to validate all Merkle proofs for a given block would actually be 576 bytes.</p>\n<p>It\u2019s also worth pointing out that the associated storage cost is nominally one byte (actually 4 bits) per block, since the only required information is the proven Merkle tree depth.</p>\n<blockquote>\n<p>Another soft-forking solution is to require that a new field \u201cdepth\u201d requiring 4 bits is embedded in the block version field. This new fields should specify the Merkle tree depth minus one. By using 4 bits, a a tree of depth 16, containing up to 65K transactions can be specified. Full nodes much check that the actual tree depth matches the value of \u201cdepth\u201d given. SPV nodes can check that the \u201cdepth\u201d field matches the Merkle branch length received. - Ibid.</p>\n</blockquote>",
  "post_number": 40,
  "post_type": 1,
  "updated_at": "2024-08-27T23:22:45.751Z",
  "reply_count": 0,
  "reply_to_post_number": 37,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 4,
  "readers_count": 3,
  "score": 0.8,
  "yours": false,
  "topic_id": 710,
  "topic_slug": "great-consensus-cleanup-revival",
  "topic_title": "Great Consensus Cleanup Revival",
  "topic_html_title": "Great Consensus Cleanup Revival",
  "category_id": 7,
  "display_username": "Eric Voskuil",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"evoskuil, post:37, topic:710\"]\nThis implies an average segwit-era download cost of `11*32 + 260 = 612` bytes to validate the Merkle proofs for *all txs* of a given block (.34 seconds on a 14,400 baud modem).\n[/quote]\n\nThis can be reduced by 36 bytes, since a valid coinbase must always contain the null point: `0xffffffff0000000000000000000000000000000000000000000000000000000000000000`. As this can be assumed, the segwit-era average download cost to validate all Merkle proofs for a given block would actually be 576 bytes.\n\nIt's also worth pointing out that the associated storage cost is nominally one byte (actually 4 bits) per block, since the only required information is the proven Merkle tree depth.\n\n> Another soft-forking solution is to require that a new field \u201cdepth\u201d requiring 4 bits is embedded in the block version field. This new fields should specify the Merkle tree depth minus one. By using 4 bits, a a tree of depth 16, containing up to 65K transactions can be specified. Full nodes much check that the actual tree depth matches the value of \u201cdepth\u201d given. SPV nodes can check that the \u201cdepth\u201d field matches the Merkle branch length received. - Ibid.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 324,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}