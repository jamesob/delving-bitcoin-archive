{
  "id": 3664,
  "name": "Eric Voskuil",
  "username": "evoskuil",
  "avatar_template": "/user_avatar/delvingbitcoin.org/evoskuil/{size}/391_2.png",
  "created_at": "2024-12-01T15:05:36.079Z",
  "cooked": "<p>Performance at the chain \u201ctip\u201d (we refer to \u201ctop\u201d, since the linearizarion of the block tree is a stack) is a reasonable consideration. However this is really about compact blocks. Interestingly previous comments about block serialization work in reverse here.</p>\n<p>Core stores whole confirmed blocks, so it must gather up all transactions from its memory pool, validate, and then serialize the block, and update the utxo store. This is an <em>extra</em> cost imposed by its data model, in a time-critical phase.</p>\n<p>Libbitcoin does not have to construct or serialize a block, and does not have a utxo store to update. That alone gives it a large advantage.</p>\n<p>But also, unconfirmed txs are validated and stored in the same table as block txs. So under compact blocks there is no need to validate or store any known txs. The block is constructed from unconfirmed tx metadata only, retained in memory. Validation of the block from this tx metadata is trivial. So this is likely to be significantly faster than Core, not despite the storage model, but because of it.</p>\n<p>Finally, this data model effectively eliminates the \u201cmempool\u201d overflow issues with which Core continues to struggle.</p>",
  "post_number": 23,
  "post_type": 1,
  "updated_at": "2024-12-01T15:05:36.079Z",
  "reply_count": 0,
  "reply_to_post_number": 5,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 17,
  "readers_count": 16,
  "score": 18.2,
  "yours": false,
  "topic_id": 1222,
  "topic_slug": "libbitcoin-for-core-people",
  "topic_title": "Libbitcoin for Core people",
  "topic_html_title": "Libbitcoin for Core people",
  "category_id": 8,
  "display_username": "Eric Voskuil",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "josibake",
    "name": "josie",
    "avatar_template": "/user_avatar/delvingbitcoin.org/josibake/{size}/83_2.png"
  },
  "bookmarked": false,
  "raw": "Performance at the chain \u201ctip\u201d (we refer to \u201ctop\u201d, since the linearizarion of the block tree is a stack) is a reasonable consideration. However this is really about compact blocks. Interestingly previous comments about block serialization work in reverse here.\n\nCore stores whole confirmed blocks, so it must gather up all transactions from its memory pool, validate, and then serialize the block, and update the utxo store. This is an *extra* cost imposed by its data model, in a time-critical phase.\n\nLibbitcoin does not have to construct or serialize a block, and does not have a utxo store to update. That alone gives it a large advantage.\n\nBut also, unconfirmed txs are validated and stored in the same table as block txs. So under compact blocks there is no need to validate or store any known txs. The block is constructed from unconfirmed tx metadata only, retained in memory. Validation of the block from this tx metadata is trivial. So this is likely to be significantly faster than Core, not despite the storage model, but because of it.\n\nFinally, this data model effectively eliminates the \u201cmempool\u201d overflow issues with which Core continues to struggle.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 324,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}