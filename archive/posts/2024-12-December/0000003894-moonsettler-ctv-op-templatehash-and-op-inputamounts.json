{
  "id": 3894,
  "name": "moonsettler",
  "username": "moonsettler",
  "avatar_template": "/user_avatar/delvingbitcoin.org/moonsettler/{size}/38_2.png",
  "created_at": "2024-12-30T12:21:16.266Z",
  "cooked": "<p>There have been complaints voiced about being too paiful to work with <code>CTV</code>. Especially when it comes to Vaults. <code>OP_TX</code> and <code>OP_TXHASH/VERIFY</code> are examples how developers sought to overcome certain pain points. However they expand the scope considerably and also rely on 64 bit integer arithmetic to handle\namounts. Here we aim to show an alternative approach that covers a lot of\nuseful ground in the in-between without state-carrying covenants or general\ndetailed introspection.</p>\n<p>Naturally some of this functionality could be coupled into <code>CTV</code> by adding new template types <code>TXHASH</code> style, there are advantages and disadvantages to that.</p>\n<p>For now, let\u2019s put that aside and take a look at what a highly specialized hash function can do for amount flexibility!</p>\n<p>Yes, this is yet an other \u201csince we don\u2019t have <code>OP_CAT</code>\u2026\u201d thing.</p>\n<aside class=\"onebox githubgist\" data-onebox-src=\"https://gist.github.com/moonsettler/d2369e043473c42ff7fa52878dd064a5\">\n  <header class=\"source\">\n\n      <a href=\"https://gist.github.com/moonsettler/d2369e043473c42ff7fa52878dd064a5\" target=\"_blank\" rel=\"noopener nofollow ugc\">gist.github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://gist.github.com/moonsettler/d2369e043473c42ff7fa52878dd064a5\" target=\"_blank\" rel=\"noopener nofollow ugc\">https://gist.github.com/moonsettler/d2369e043473c42ff7fa52878dd064a5</a></h4>\n\n  <h5>CTV++.md</h5>\n  <pre><code class=\"Markdown\">## CTV++\n\nTwo additional opcodes to consider as an addition to `OP_CHECKTEMPLATEVERIFY`:\n\n* OP_TEMPLATEHASH\n* OP_INPUTAMOUNTS\n\nTogether they relax the strict limitations that `OP_CHECKTEMPLATEVERIFY`\nimposes, because it explicitly commits to the output amounts and therefore\nimplicitly commits to the spendable input amounts in a lot of cases.</code></pre>\n   This file has been truncated. <a href=\"https://gist.github.com/moonsettler/d2369e043473c42ff7fa52878dd064a5\" target=\"_blank\" rel=\"noopener nofollow ugc\">show original</a>\n\n<p>\n</p>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<h2><a name=\"p-3894-ctv-1\" class=\"anchor\" href=\"#p-3894-ctv-1\"></a>CTV++</h2>\n<p>Two additional opcodes to consider as an addition to <code>OP_CHECKTEMPLATEVERIFY</code>:</p>\n<ul>\n<li>OP_TEMPLATEHASH</li>\n<li>OP_INPUTAMOUNTS</li>\n</ul>\n<p>Together they relax the strict limitations that <code>OP_CHECKTEMPLATEVERIFY</code>\nimposes, because it explicitly commits to the output amounts and therefore\nimplicitly commits to the spendable input amounts in a lot of cases.</p>\n<h3><a name=\"p-3894-op_templatehash-2\" class=\"anchor\" href=\"#p-3894-op_templatehash-2\"></a>OP_TEMPLATEHASH</h3>\n<p>Builds the <code>CTV</code> template hash from the stack.</p>\n<pre data-code-wrap=\"sh\"><code class=\"lang-sh\">&lt;inputIndex&gt;\n# FOR i = inputCount-1; i &gt;= 0; i--; LOOP\n  &lt;sequence[i]&gt;\n# END LOOP\n&lt;inputCount&gt;\n&lt;nLockTime&gt;\n# FOR j = outputCount-1; j &gt;= 0; j--; LOOP\n  &lt;out[j].amount&gt;\n  &lt;out[j].script&gt;\n# END LOOP\n&lt;outputCount&gt;\n&lt;nVersion&gt;\nOP_TEMPLATEHASH\nOP_CHECKTEMPLATEVERIFY\n</code></pre>\n<h3><a name=\"p-3894-op_inputamounts-3\" class=\"anchor\" href=\"#p-3894-op_inputamounts-3\"></a>OP_INPUTAMOUNTS</h3>\n<p>Taproot only. Consumes a 32 bit signed integer <code>n</code> as parameter</p>\n<ul>\n<li><code>n = 0</code> return the SUM of all input amounts with same script</li>\n<li><code>n &lt; 0</code> return the SUM of last abs(n) input amounts including current input</li>\n<li><code>n &gt; 0</code> return the SUM of first n input amounts of the transaction</li>\n</ul>\n<p>fails if</p>\n<ul>\n<li><code>n &lt; 0</code> and <code>abs(n) &gt; inputIndex + 1</code></li>\n<li><code>n &gt; inputCount</code></li>\n</ul>\n<pre data-code-wrap=\"sh\"><code class=\"lang-sh\">&lt;n&gt;\nOP_INPUTAMOUNTS\n</code></pre>\n<h4><a name=\"p-3894-example-use-4\" class=\"anchor\" href=\"#p-3894-example-use-4\"></a>Example use:</h4>\n<p>This contract below allows the combining of UTXOs locked by the same script for\nsomething like a withdrawal from a Vault contract to a staging address where\nthe relative time lock can begin. It works with any amount UTXOs unlike basic\nCTV Vaults. Also allows for paying fees endogenously and registering a change\naddress. The fee paying input would sign with SIGHASH_ALL.</p>\n<pre data-code-wrap=\"sh\"><code class=\"lang-sh\">### Witness stack BEGIN ###\n\n&lt;inputIndex&gt;\n# FOR i = inputCount-1; i &gt;= 0; i--; LOOP\n  &lt;sequence[i]&gt;\n# END LOOP\n&lt;inputCount&gt;\n&lt;nLockTime&gt;\n&lt;changeAmount&gt;        # out[1].amount\n&lt;changeScriptPub&gt;     # out[1].script\n\n### Witness stack END ###\n\n&lt;0&gt;                   # sum of all inputs with same script\nOP_INPUTAMOUNTS       # out[0].amount\n&lt;stagingScriptPub&gt;    # out[0].script 33 bytes for P2TR\n&lt;2&gt;                   # outputCount\n&lt;2&gt;                   # nVersion\nOP_TEMPLATEHASH\nOP_CHECKTEMPLATEVERIFY\n</code></pre>\n<h3><a name=\"p-3894-credits-5\" class=\"anchor\" href=\"#p-3894-credits-5\"></a>Credits:</h3>\n<ul>\n<li>Jeremy Rubin who have already came up with everything many years ago</li>\n<li>James O\u2019Beirne for his awesome work on OP_VAULT</li>\n<li>Salvatore Ingala for his work on CCV/MATT and to generalize state carrying\ncovenants</li>\n<li>Many others who have explored the covenant design space and CTV in particular</li>\n</ul>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 11,
  "updated_at": "2024-12-30T12:34:21.017Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 151,
  "reads": 43,
  "readers_count": 42,
  "score": 773.6,
  "yours": false,
  "topic_id": 1344,
  "topic_slug": "ctv-op-templatehash-and-op-inputamounts",
  "topic_title": "CTV++ OP_TEMPLATEHASH and OP_INPUTAMOUNTS",
  "topic_html_title": "CTV++ OP_TEMPLATEHASH and OP_INPUTAMOUNTS",
  "category_id": 7,
  "display_username": "moonsettler",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "There have been complaints voiced about being too paiful to work with `CTV`. Especially when it comes to Vaults. `OP_TX` and `OP_TXHASH/VERIFY` are examples how developers sought to overcome certain pain points. However they expand the scope considerably and also rely on 64 bit integer arithmetic to handle\namounts. Here we aim to show an alternative approach that covers a lot of\nuseful ground in the in-between without state-carrying covenants or general\ndetailed introspection.\n\nNaturally some of this functionality could be coupled into `CTV` by adding new template types `TXHASH` style, there are advantages and disadvantages to that.\n\nFor now, let's put that aside and take a look at what a highly specialized hash function can do for amount flexibility!\n\nYes, this is yet an other \"since we don't have `OP_CAT`...\" thing.\n\nhttps://gist.github.com/moonsettler/d2369e043473c42ff7fa52878dd064a5\n\n## CTV++\n\nTwo additional opcodes to consider as an addition to `OP_CHECKTEMPLATEVERIFY`:\n\n* OP_TEMPLATEHASH\n* OP_INPUTAMOUNTS\n\nTogether they relax the strict limitations that `OP_CHECKTEMPLATEVERIFY`\nimposes, because it explicitly commits to the output amounts and therefore\nimplicitly commits to the spendable input amounts in a lot of cases.\n\n### OP_TEMPLATEHASH\n\nBuilds the `CTV` template hash from the stack.\n\n```sh\n<inputIndex>\n# FOR i = inputCount-1; i >= 0; i--; LOOP\n  <sequence[i]>\n# END LOOP\n<inputCount>\n<nLockTime>\n# FOR j = outputCount-1; j >= 0; j--; LOOP\n  <out[j].amount>\n  <out[j].script>\n# END LOOP\n<outputCount>\n<nVersion>\nOP_TEMPLATEHASH\nOP_CHECKTEMPLATEVERIFY\n```\n\n### OP_INPUTAMOUNTS\nTaproot only. Consumes a 32 bit signed integer `n` as parameter\n* `n = 0` return the SUM of all input amounts with same script\n* `n < 0` return the SUM of last abs(n) input amounts including current input\n* `n > 0` return the SUM of first n input amounts of the transaction\n\nfails if\n* `n < 0` and `abs(n) > inputIndex + 1`\n* `n > inputCount`\n\n```sh\n<n>\nOP_INPUTAMOUNTS\n```\n\n#### Example use:\n\nThis contract below allows the combining of UTXOs locked by the same script for\nsomething like a withdrawal from a Vault contract to a staging address where\nthe relative time lock can begin. It works with any amount UTXOs unlike basic\nCTV Vaults. Also allows for paying fees endogenously and registering a change\naddress. The fee paying input would sign with SIGHASH_ALL.\n\n```sh\n### Witness stack BEGIN ###\n\n<inputIndex>\n# FOR i = inputCount-1; i >= 0; i--; LOOP\n  <sequence[i]>\n# END LOOP\n<inputCount>\n<nLockTime>\n<changeAmount>        # out[1].amount\n<changeScriptPub>     # out[1].script\n\n### Witness stack END ###\n\n<0>                   # sum of all inputs with same script\nOP_INPUTAMOUNTS       # out[0].amount\n<stagingScriptPub>    # out[0].script 33 bytes for P2TR\n<2>                   # outputCount\n<2>                   # nVersion\nOP_TEMPLATEHASH\nOP_CHECKTEMPLATEVERIFY\n```\n\n### Credits:\n* Jeremy Rubin who have already came up with everything many years ago\n* James O'Beirne for his awesome work on OP_VAULT\n* Salvatore Ingala for his work on CCV/MATT and to generalize state carrying\ncovenants\n* Many others who have explored the covenant design space and CTV in particular",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 48,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "There have been complaints voiced about being too paiful to work with CTV. Especially when it comes to Vaults. OP_TX and OP_TXHASH/VERIFY are examples how developers sought to overcome certain pain points. However they expand the scope considerably and also rely on 64 bit integer arithmetic to handl&hellip;",
  "truncated": true,
  "post_url": "/t/ctv-op-templatehash-and-op-inputamounts/1344/1",
  "reactions": [
    {
      "id": "rocket",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null,
  "can_vote": false
}