{
  "id": 3695,
  "name": "Eric Voskuil",
  "username": "evoskuil",
  "avatar_template": "/user_avatar/delvingbitcoin.org/evoskuil/{size}/391_2.png",
  "created_at": "2024-12-02T21:07:27.182Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"sipa\" data-post=\"36\" data-topic=\"1222\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sipa/48/102_2.png\" class=\"avatar\"> sipa:</div>\n<blockquote>\n<p>When script validation is enabled, this isn\u2019t possible because the state required to run script validation is pretty much the entire spending transaction, not just a small piece of UTXO data.</p>\n</blockquote>\n</aside>\n<p>I\u2019m not sure I follow this explanation, but the conclusion is correct. The approach wouldn\u2019t work under a candidate header branch above the milestone (assume valid block) because blocks <em>above</em> the block being validated are updating prevout existence and spentness. So existence in the utxo store no longer represents order. Under milestone, validity of the branch is assumed so this doesn\u2019t matter, the objective is just to populate the utxo store up to the milestone.</p>\n<p>A material cost of this approach (under milestone) is that the utxo store must not only be thread safe, but locks must persist across each output being searched, compared and written. Given that there are billions of outputs this is a non-trivial consideration.</p>\n<p>Ultimately this can be resolved by just downloading the full utxo set under assumption as well, which is already implemented.</p>",
  "post_number": 39,
  "post_type": 1,
  "updated_at": "2024-12-02T23:27:20.488Z",
  "reply_count": 0,
  "reply_to_post_number": 36,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 14,
  "readers_count": 13,
  "score": 2.6,
  "yours": false,
  "topic_id": 1222,
  "topic_slug": "libbitcoin-for-core-people",
  "topic_title": "Libbitcoin for Core people",
  "topic_html_title": "Libbitcoin for Core people",
  "category_id": 8,
  "display_username": "Eric Voskuil",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"sipa, post:36, topic:1222\"]\nWhen script validation is enabled, this isn\u2019t possible because the state required to run script validation is pretty much the entire spending transaction, not just a small piece of UTXO data.\n[/quote]\n\nI'm not sure I follow this explanation, but the conclusion is correct. The approach wouldn't work under a candidate header branch above the milestone (assume valid block) because blocks *above* the block being validated are updating prevout existence and spentness. So existence in the utxo store no longer represents order. Under milestone, validity of the branch is assumed so this doesn't matter, the objective is just to populate the utxo store up to the milestone.\n\nA material cost of this approach (under milestone) is that the utxo store must not only be thread safe, but locks must persist across each output being searched, compared and written. Given that there are billions of outputs this is a non-trivial consideration.\n\nUltimately this can be resolved by just downloading the full utxo set under assumption as well, which is already implemented.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 324,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}