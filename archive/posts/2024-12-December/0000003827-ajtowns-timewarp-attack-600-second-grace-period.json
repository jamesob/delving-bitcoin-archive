{
  "id": 3827,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2024-12-18T17:01:40.336Z",
  "cooked": "<p>Provided we don\u2019t roll <code>nTime</code> by more than whatever the value is that we can push <code>nTime</code> backwards (600 seconds in both cases here) towards real time, this doesn\u2019t seem like much of a concern? If our block\u2019s timestamp is invalid, then the malicious block\u2019s timestamp will also have been to be too far in the future, so any node that would have rejected our block due to the timestamp would also reject it due to its parent, so no matter what timestamp we gave it our block would be rejected\u2026</p>\n<p>Redoing the math: nNonce rolling gives 4GH; nNonce+BIP320 gives 280TH; if you bump nTime once per second (as expected) that\u2019s 4GH/s or 280TH/s. If you want to get into the PH/s range (seems like the best antminer currently advertised is in the 0.5PH/s range), then assuming you only provide new work every 30 seconds, then you probably want 7 bits of nTime to roll (128 seconds), which gets you 1.2PH/s. If you need the final bits of nTime to be zeroed to roll them, then the total offset is roughly doubled (+0 to +254 seconds, about 4 minutes). If you\u2019ve got a range of 600s, then you can roll 8 bits of nTime for 2.4PH/s; if you also provide new work every 10s, then you\u2019ve got 7.2PH/s; if you provide 4 units of work every 10s, that\u2019s ~30PH/s. So afaics 600s should be pretty fine, though I don\u2019t have any objection to increasing it.</p>\n<p>We\u2019re considering here a rule that the first block of a new period\u2019s timestamp has to be bounded below by both mediantime and <code>prev-&gt;nTime-K</code>. A different way to achieve the same goal would be require that the last block of a period\u2019s timestamp has to be bounded below by mediantime, but also bounded above by <code>mediantime+K</code>. K here should perhaps be something on the order of 3 hours (one hour because mediantime already lags wall-clock time, and then another 2 hours on top of that to ensure there\u2019s some room for rolling, slow blocks, etc).</p>\n<p>The downside of such an approach is that existing mining software that simply continually bumps nTime (once per second, eg) will eventually exceed the upper bound, and produce invalid blocks.</p>\n<p>Sorry if that was a bit stream of consciousness.</p>",
  "post_number": 9,
  "post_type": 1,
  "posts_count": 43,
  "updated_at": "2024-12-18T17:01:40.336Z",
  "reply_count": 2,
  "reply_to_post_number": 7,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 38,
  "readers_count": 37,
  "score": 42.6,
  "yours": false,
  "topic_id": 1326,
  "topic_slug": "timewarp-attack-600-second-grace-period",
  "topic_title": "Timewarp attack 600 second grace period",
  "topic_html_title": "Timewarp attack 600 second grace period",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 12,
    "username": "AntoineP",
    "name": "Antoine Poinsot",
    "avatar_template": "/user_avatar/delvingbitcoin.org/antoinep/{size}/483_2.png"
  },
  "bookmarked": false,
  "raw": "Provided we don't roll `nTime` by more than whatever the value is that we can push `nTime` backwards (600 seconds in both cases here) towards real time, this doesn't seem like much of a concern? If our block's timestamp is invalid, then the malicious block's timestamp will also have been to be too far in the future, so any node that would have rejected our block due to the timestamp would also reject it due to its parent, so no matter what timestamp we gave it our block would be rejected...\n\nRedoing the math: nNonce rolling gives 4GH; nNonce+BIP320 gives 280TH; if you bump nTime once per second (as expected) that's 4GH/s or 280TH/s. If you want to get into the PH/s range (seems like the best antminer currently advertised is in the 0.5PH/s range), then assuming you only provide new work every 30 seconds, then you probably want 7 bits of nTime to roll (128 seconds), which gets you 1.2PH/s. If you need the final bits of nTime to be zeroed to roll them, then the total offset is roughly doubled (+0 to +254 seconds, about 4 minutes). If you've got a range of 600s, then you can roll 8 bits of nTime for 2.4PH/s; if you also provide new work every 10s, then you've got 7.2PH/s; if you provide 4 units of work every 10s, that's ~30PH/s. So afaics 600s should be pretty fine, though I don't have any objection to increasing it.\n\nWe're considering here a rule that the first block of a new period's timestamp has to be bounded below by both mediantime and `prev->nTime-K`. A different way to achieve the same goal would be require that the last block of a period's timestamp has to be bounded below by mediantime, but also bounded above by `mediantime+K`. K here should perhaps be something on the order of 3 hours (one hour because mediantime already lags wall-clock time, and then another 2 hours on top of that to ensure there's some room for rolling, slow blocks, etc).\n\nThe downside of such an approach is that existing mining software that simply continually bumps nTime (once per second, eg) will eventually exceed the upper bound, and produce invalid blocks.\n\nSorry if that was a bit stream of consciousness.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Provided we don\u2019t roll nTime by more than whatever the value is that we can push nTime backwards (600 seconds in both cases here) towards real time, this doesn\u2019t seem like much of a concern? If our block\u2019s timestamp is invalid, then the malicious block\u2019s timestamp will also have been to be too far i&hellip;",
  "truncated": true,
  "post_url": "/t/timewarp-attack-600-second-grace-period/1326/9",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}