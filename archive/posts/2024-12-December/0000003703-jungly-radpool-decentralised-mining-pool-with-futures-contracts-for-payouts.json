{
  "id": 3703,
  "name": "jungly",
  "username": "jungly",
  "avatar_template": "/user_avatar/delvingbitcoin.org/jungly/{size}/289_2.png",
  "created_at": "2024-12-03T07:19:56.893Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"mcelrath\" data-post=\"9\" data-topic=\"1262\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/mcelrath/48/521_2.png\" class=\"avatar\"> mcelrath:</div>\n<blockquote>\n<p>I look forward to similar proposals involving BFT broadcast, but I\u2019ve yet to see one. So I think estimates of complexity are very premature.</p>\n</blockquote>\n</aside>\n<p>The subtlety is that BFT broadcast is necessary and sufficient to derive consistency in a <em>known</em> group membership. With BFT broadcast, all parties have a consistent view, and by running a deterministic algorithm they all arrive at the same result - thus they have an agreement.</p>\n<p>This is the part Radpool is using - by explicitly requiring a membership of the syndicate we can stop at broadcast and don\u2019t need a consensus protocol to be built first.</p>\n<p><em>Radpool builds on the simplest protocol possible and stops there. We don\u2019t build something that is not required.</em></p>\n<p>In Braidpool, we start from consensus (a more complex protocol). And because we are solving nakamoto consensus here, i.e. we don\u2019t know the group membership - i.e. anyone can join and can actually be the block generator, we need to handle more complexities.</p>\n<p>In Radpool\u2019s syndicate - this is not the case. Any new party can join the network, start receiving and sending shares. But they don\u2019t become part of the syndicate until they have contributed PoW for 2016 blocks and have met other membership conditions defined in terms of hashrate contributed to the network. We need this membership agreement for FROST DKG (which braidpool needs too).</p>\n<p>Since we have agreement on the group in Radpool - we can get away with a simpler protocol. Braidpool builds another explicit consensus apart from this.</p>\n<p>Let me put it another way.</p>\n<ol>\n<li>FROST DKG requires echo broadcast on a point to point network model - I have <a href=\"https://github.com/pool2win/frost-federation/tree/e44431e4c8cd2f5f42f61a5715c644c183c12b3a/src/node/echo_broadcast\" rel=\"noopener nofollow ugc\">already built this</a>. This broadcast is enough to make the Radpool syndicate with its membership agreement work.</li>\n<li>Braidpool will need to build a separate p2p broadcast protocol and a p2p nakamoto consensus while also using FROST DKG which includes a point to point broadcast.</li>\n</ol>\n<p>For me option 2 is more complex to build.</p>",
  "post_number": 11,
  "post_type": 1,
  "updated_at": "2024-12-03T07:19:56.893Z",
  "reply_count": 1,
  "reply_to_post_number": 9,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 6.8,
  "yours": false,
  "topic_id": 1262,
  "topic_slug": "radpool-decentralised-mining-pool-with-futures-contracts-for-payouts",
  "topic_title": "Radpool: Decentralised Mining Pool With Futures Contracts For Payouts",
  "topic_html_title": "Radpool: Decentralised Mining Pool With Futures Contracts For Payouts",
  "category_id": 7,
  "display_username": "jungly",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"mcelrath, post:9, topic:1262\"]\nI look forward to similar proposals involving BFT broadcast, but I\u2019ve yet to see one. So I think estimates of complexity are very premature.\n[/quote]\n\nThe subtlety is that BFT broadcast is necessary and sufficient to derive consistency in a _known_ group membership. With BFT broadcast, all parties have a consistent view, and by running a deterministic algorithm they all arrive at the same result - thus they have an agreement.\n\nThis is the part Radpool is using - by explicitly requiring a membership of the syndicate we can stop at broadcast and don't need a consensus protocol to be built first.\n\n_Radpool builds on the simplest protocol possible and stops there. We don't build something that is not required._\n\nIn Braidpool, we start from consensus (a more complex protocol). And because we are solving nakamoto consensus here, i.e. we don't know the group membership - i.e. anyone can join and can actually be the block generator, we need to handle more complexities.\n\nIn Radpool's syndicate - this is not the case. Any new party can join the network, start receiving and sending shares. But they don't become part of the syndicate until they have contributed PoW for 2016 blocks and have met other membership conditions defined in terms of hashrate contributed to the network. We need this membership agreement for FROST DKG (which braidpool needs too). \n\nSince we have agreement on the group in Radpool - we can get away with a simpler protocol. Braidpool builds another explicit consensus apart from this. \n\nLet me put it another way.\n\n1. FROST DKG requires echo broadcast on a point to point network model - I have [already built this](https://github.com/pool2win/frost-federation/tree/e44431e4c8cd2f5f42f61a5715c644c183c12b3a/src/node/echo_broadcast). This broadcast is enough to make the Radpool syndicate with its membership agreement work.\n2. Braidpool will need to build a separate p2p broadcast protocol and a p2p nakamoto consensus while also using FROST DKG which includes a point to point broadcast.\n\nFor me option 2 is more complex to build.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 102,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}