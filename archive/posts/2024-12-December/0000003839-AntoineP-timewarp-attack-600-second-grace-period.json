{
  "id": 3839,
  "name": "Antoine Poinsot",
  "username": "AntoineP",
  "avatar_template": "/user_avatar/delvingbitcoin.org/antoinep/{size}/483_2.png",
  "created_at": "2024-12-20T12:54:41.985Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"sjors\" data-post=\"10\" data-topic=\"1326\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sjors/48/59_2.png\" class=\"avatar\"> sjors:</div>\n<blockquote>\n<p>If the sv2 spec explicitly disallows accelerated nTime rolling then indeed the attacker would take the same risk as their victim.</p>\n</blockquote>\n</aside>\n<p>So what is the attack scenario here? Minority miner A tries to get miner B to waste its hashrate by producing an invalid block. Miner A somehow figures out miner B is using <code>nTime</code> rolling past 600 seconds and its local clock is ahead of everyone else\u2019s. Miner A mines a block such as it is invalid to everyone else but miner B, in the hope that miner B would start mining with <code>nTime_A - 600</code>, roll the timestamp past <code>nTime_A</code>, and find a block with <code>nTime_B = nTime_A + s</code> in less than <code>s</code> seconds such as A\u2019s block is valid to the rest of the network but B\u2019s block is not. And all that before the rest of the network found a different pair of block.</p>\n<p>At this point this is not an attack, it\u2019s a footgun. I don\u2019t see how A could ever expect to gain anything from trying this.</p>\n<aside class=\"quote no-group\" data-username=\"sjors\" data-post=\"10\" data-topic=\"1326\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sjors/48/59_2.png\" class=\"avatar\"> sjors:</div>\n<blockquote>\n<p>I\u2019m not convinced (yet) that we need to make these numbers so tight. It seems that having a few hours of padding, instead of 10 minutes, avoids some actual bugs (pool software ignoring nTime) and theoretical future bugs. While the only downside is a minuscule increase in worst case inflation.</p>\n</blockquote>\n</aside>\n<p>I don\u2019t think it\u2019s a fair characterization of the downside. Faster subsidy emission is only one of the harms of an artificially increased block rate. And if the leeway is large enough, the block rate increase isn\u2019t minuscule anymore.</p>\n<p><s>Here is some numbers:</s> EDIT: the numbers are incorrect as they assume gains accumulate across periods, which isn\u2019t the case once the timestamp of the first block needs to move forward.</p>\n<pre><code class=\"lang-auto\">Leeway: 10 minutes. Max diff decrease per period: 1.0004960317460319. Number of periods to take the diff to 1 is 65169.20533651417, to halve the diff is 1397.7312609540088 and to reduce it by 10% is 212.45947546985983.\nLeeway: 60 minutes. Max diff decrease per period: 1.0029761904761905. Number of periods to take the diff to 1 is 10874.99226688242, to halve the diff is 233.24385460225878 and to reduce it by 10% is 35.453787426590814.\nLeeway: 120 minutes. Max diff decrease per period: 1.005952380952381. Number of periods to take the diff to 1 is 5445.563646962276, to halve the diff is 116.79495712078635 and to reduce it by 10% is 17.753194781141502.\nLeeway: 240 minutes. Max diff decrease per period: 1.0119047619047619. Number of periods to take the diff to 1 is 2730.8374380149667, to halve the diff is 58.57025317383194 and to reduce it by 10% is 8.902859666282216.\n</code></pre>\n<details>\n<summary>Code</summary>\n<pre data-code-wrap=\"python\"><code class=\"lang-python\">import math\n\nCURRENT_DIFFICULTY = 108522647629298\n\nfor leeway in [10, 60, 2*60, 4*60]:\n    max_rate_decrease = 1 + leeway/20160\n    diff_1 = math.log(CURRENT_DIFFICULTY, max_rate_decrease)\n    diff_half = math.log(2, max_rate_decrease)\n    diff_ninety = math.log(1/0.9, max_rate_decrease)\n    print(f\"Leeway: {leeway} minutes. Max diff decrease per period: {max_rate_decrease}. Number of periods to take the diff to 1 is {diff_1}, to halve the diff is {diff_half} and to reduce it by 10% is {diff_ninety}.\")\n</code></pre>\n</details>",
  "post_number": 11,
  "post_type": 1,
  "posts_count": 43,
  "updated_at": "2025-01-29T15:37:36.233Z",
  "reply_count": 1,
  "reply_to_post_number": 9,
  "quote_count": 1,
  "incoming_link_count": 17,
  "reads": 35,
  "readers_count": 34,
  "score": 97.0,
  "yours": false,
  "topic_id": 1326,
  "topic_slug": "timewarp-attack-600-second-grace-period",
  "topic_title": "Timewarp attack 600 second grace period",
  "topic_html_title": "Timewarp attack 600 second grace period",
  "category_id": 7,
  "display_username": "Antoine Poinsot",
  "primary_group_name": null,
  "flair_name": "wg-consensus-cleanup",
  "flair_url": "/uploads/default/original/1X/856d779f9ec58484f3a96285a21a813538b689f6.png",
  "flair_bg_color": "",
  "flair_color": "",
  "flair_group_id": 43,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "Regular",
  "title_is_group": false,
  "reply_to_user": {
    "id": 3,
    "username": "ajtowns",
    "name": "Anthony Towns",
    "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png"
  },
  "bookmarked": false,
  "raw": "[quote=\"sjors, post:10, topic:1326\"]\nIf the sv2 spec explicitly disallows accelerated nTime rolling then indeed the attacker would take the same risk as their victim.\n[/quote]\nSo what is the attack scenario here? Minority miner A tries to get miner B to waste its hashrate by producing an invalid block. Miner A somehow figures out miner B is using `nTime` rolling past 600 seconds and its local clock is ahead of everyone else's. Miner A mines a block such as it is invalid to everyone else but miner B, in the hope that miner B would start mining with `nTime_A - 600`, roll the timestamp past `nTime_A`, and find a block with `nTime_B = nTime_A + s` in less than `s` seconds such as A's block is valid to the rest of the network but B's block is not. And all that before the rest of the network found a different pair of block.\n\nAt this point this is not an attack, it's a footgun. I don't see how A could ever expect to gain anything from trying this.\n\n[quote=\"sjors, post:10, topic:1326\"]\nI\u2019m not convinced (yet) that we need to make these numbers so tight. It seems that having a few hours of padding, instead of 10 minutes, avoids some actual bugs (pool software ignoring nTime) and theoretical future bugs. While the only downside is a minuscule increase in worst case inflation.\n[/quote]\nI don't think it's a fair characterization of the downside. Faster subsidy emission is only one of the harms of an artificially increased block rate. And if the leeway is large enough, the block rate increase isn't minuscule anymore.\n\n~~Here is some numbers:~~ EDIT: the numbers are incorrect as they assume gains accumulate across periods, which isn't the case once the timestamp of the first block needs to move forward.\n```\nLeeway: 10 minutes. Max diff decrease per period: 1.0004960317460319. Number of periods to take the diff to 1 is 65169.20533651417, to halve the diff is 1397.7312609540088 and to reduce it by 10% is 212.45947546985983.\nLeeway: 60 minutes. Max diff decrease per period: 1.0029761904761905. Number of periods to take the diff to 1 is 10874.99226688242, to halve the diff is 233.24385460225878 and to reduce it by 10% is 35.453787426590814.\nLeeway: 120 minutes. Max diff decrease per period: 1.005952380952381. Number of periods to take the diff to 1 is 5445.563646962276, to halve the diff is 116.79495712078635 and to reduce it by 10% is 17.753194781141502.\nLeeway: 240 minutes. Max diff decrease per period: 1.0119047619047619. Number of periods to take the diff to 1 is 2730.8374380149667, to halve the diff is 58.57025317383194 and to reduce it by 10% is 8.902859666282216.\n```\n\n<details>\n\n<summary>Code</summary>\n\n```python\nimport math\n\nCURRENT_DIFFICULTY = 108522647629298\n\nfor leeway in [10, 60, 2*60, 4*60]:\n    max_rate_decrease = 1 + leeway/20160\n    diff_1 = math.log(CURRENT_DIFFICULTY, max_rate_decrease)\n    diff_half = math.log(2, max_rate_decrease)\n    diff_ninety = math.log(1/0.9, max_rate_decrease)\n    print(f\"Leeway: {leeway} minutes. Max diff decrease per period: {max_rate_decrease}. Number of periods to take the diff to 1 is {diff_1}, to halve the diff is {diff_half} and to reduce it by 10% is {diff_ninety}.\")\n```\n\n</details>",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 12,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "So what is the attack scenario here? Minority miner A tries to get miner B to waste its hashrate by producing an invalid block. Miner A somehow figures out miner B is using nTime rolling past 600 seconds and its local clock is ahead of everyone else\u2019s. Miner A mines a block such as it is invalid to&hellip;",
  "truncated": true,
  "post_url": "/t/timewarp-attack-600-second-grace-period/1326/11",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}