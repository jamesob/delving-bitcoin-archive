{
  "id": 3707,
  "name": "salvatoshi",
  "username": "salvatoshi",
  "avatar_template": "/user_avatar/delvingbitcoin.org/salvatoshi/{size}/72_2.png",
  "created_at": "2024-12-04T10:24:27.020Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"andrewtoth\" data-post=\"28\" data-topic=\"304\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/andrewtoth/48/576_2.png\" class=\"avatar\"> andrewtoth:</div>\n<blockquote>\n<p>If we would like an unspendable internal xpub to be standardized between descriptors and wallet policies, then we must remove duplicates. I think sorting and removing duplicates of all xpubs, then concatenating and SHA256 hashing the result would be the simplest to implement.</p>\n</blockquote>\n</aside>\n<p>That sounds good to me; in the context of wallet policies, it just means \u201csorting the vector of keys\u201d (and dropping key origins), then concatenating the compressed pubkeys, then hashing.</p>\n<p>In descriptors, it would need to be decided what to do (or if <code>_</code> is supported at all) when there are key expressions that are not xpubs.</p>\n<aside class=\"quote no-group\" data-username=\"andrewtoth\" data-post=\"28\" data-topic=\"304\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/andrewtoth/48/576_2.png\" class=\"avatar\"> andrewtoth:</div>\n<blockquote>\n<p>We would also have to restrict all xpubs to <code>xpub/&lt;0;1&gt;/*</code> with no allowance for <a href=\"https://github.com/bitcoin/bips/blob/532c4c10f2e04b3dca7d39ce1b1a4bdbf0c88e52/bip-0388.mediawiki#optional-derivation-paths\" rel=\"noopener nofollow ugc\">optional derivation paths </a>. I think that\u2019s ok because that allowance is for legacy wallets, who would not have taproot support anyways.</p>\n</blockquote>\n</aside>\n<p>This restriction doesn\u2019t quite make sense in the context of wallet policies: it is desired (and expected) that people would use the same xpub in the descriptor with different \u2018endings\u2019 for different spending paths (e.g. <code>xpub/&lt;0;1&gt;/*</code> for one spending path, <code>xpub/&lt;2;3&gt;/*</code> for another, etc.). Note that those would indeed be a single xpub in the wallet policy. This is in fact the reason wallet policies keep the <code>/&lt;m;n&gt;/*</code> in the <em>descriptor template</em> rather than the key information vector.</p>\n<p>Vendors/wallets, of course, can decide to support a subset of valid descriptors/policies if they want additional properties that the general class of descriptors doesn\u2019t or can\u2019t satisfy.</p>",
  "post_number": 29,
  "post_type": 1,
  "updated_at": "2024-12-04T12:17:48.385Z",
  "reply_count": 1,
  "reply_to_post_number": 28,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 6.4,
  "yours": false,
  "topic_id": 304,
  "topic_slug": "unspendable-keys-in-descriptors",
  "topic_title": "Unspendable keys in descriptors",
  "topic_html_title": "Unspendable keys in descriptors",
  "category_id": 8,
  "display_username": "salvatoshi",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"andrewtoth, post:28, topic:304\"]\nIf we would like an unspendable internal xpub to be standardized between descriptors and wallet policies, then we must remove duplicates. I think sorting and removing duplicates of all xpubs, then concatenating and SHA256 hashing the result would be the simplest to implement.\n[/quote]\n\nThat sounds good to me; in the context of wallet policies, it just means \"sorting the vector of keys\" (and dropping key origins), then concatenating the compressed pubkeys, then hashing.\n\nIn descriptors, it would need to be decided what to do (or if `_` is supported at all) when there are key expressions that are not xpubs.\n\n[quote=\"andrewtoth, post:28, topic:304\"]\nWe would also have to restrict all xpubs to `xpub/<0;1>/*` with no allowance for [optional derivation paths ](https://github.com/bitcoin/bips/blob/532c4c10f2e04b3dca7d39ce1b1a4bdbf0c88e52/bip-0388.mediawiki#optional-derivation-paths). I think that\u2019s ok because that allowance is for legacy wallets, who would not have taproot support anyways.\n[/quote]\n\nThis restriction doesn't quite make sense in the context of wallet policies: it is desired (and expected) that people would use the same xpub in the descriptor with different 'endings' for different spending paths (e.g. `xpub/<0;1>/*` for one spending path, `xpub/<2;3>/*` for another, etc.). Note that those would indeed be a single xpub in the wallet policy. This is in fact the reason wallet policies keep the `/<m;n>/*` in the *descriptor template* rather than the key information vector.\n\nVendors/wallets, of course, can decide to support a subset of valid descriptors/policies if they want additional properties that the general class of descriptors doesn't or can't satisfy.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 81,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}