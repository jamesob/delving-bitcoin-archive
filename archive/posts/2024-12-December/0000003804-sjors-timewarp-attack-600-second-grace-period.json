{
  "id": 3804,
  "name": "Sjors Provoost",
  "username": "sjors",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sjors/{size}/59_2.png",
  "created_at": "2024-12-17T06:31:46.752Z",
  "cooked": "<p><strong>Background</strong></p>\n<p>The <a href=\"https://github.com/TheBlueMatt/bips/blob/7f9670b643b7c943a0cc6d2197d3eabe661050c2/bip-XXXX.mediawiki\">original Great Consensus Cleanup soft fork proposal</a> by <a class=\"mention\" href=\"/u/mattcorallo\">@MattCorallo</a> says the following:</p>\n<blockquote>\n<ul>\n<li>Sadly, some deployed mining hardware relies on the ability to roll nTime forward by up to 600 seconds[3]. Thus, only requiring that the nTime field move forward during difficulty adjustment would allow a malicious miner to prevent some competitors from mining the next block by setting their timestamp to two hours in the future. Thus, we allow nTime to go backwards by 600 seconds, ensuring that even a block with a timestamp two hours in the future allows for 600 seconds of nTime rolling on the next block.</li>\n</ul>\n</blockquote>\n<p>The footnote explains why 600 is probably the upper bound:</p>\n<blockquote>\n<p>[3] While no official stratum specification exists, the <a href=\"http://btc.com\">btc.com</a> pool server (one of the most popular pool servers today) rejects shares with timestamps more than 600 seconds in the future at <a href=\"https://github.com/btccom/btcpool/blob/e7c536834fd6785af7d7d68ff29111ed81209cdf/src/bitcoin/StratumServerBitcoin.cc#L384\" class=\"inline-onebox\">btcpool-ABANDONED/src/bitcoin/StratumServerBitcoin.cc at e7c536834fd6785af7d7d68ff29111ed81209cdf \u00b7 btccom/btcpool-ABANDONED \u00b7 GitHub</a>. While there are few resources describing hardware operation today, timestamp rolling can be observed on the chain (in some rare cases) as block timestamps go backwards when a miner rolled one block nTime forward and the next does not, but only incredibly rarely more than 600 seconds.</p>\n</blockquote>\n<p><code>nTime</code> rolling is also not likely to go away. It\u2019s potentially useful for ASIC devices that can go beyond 280 TH/s. As explained in <a href=\"https://github.com/stratum-mining/sv2-spec/blob/52e1fa22f68c343a3d25a2b1a04f93f8e701eced/05-Mining-Protocol.md#511-standard-job\" class=\"inline-onebox\">sv2-spec/05-Mining-Protocol.md at 52e1fa22f68c343a3d25a2b1a04f93f8e701eced \u00b7 stratum-mining/sv2-spec \u00b7 GitHub</a> :</p>\n<blockquote>\n<p>The size of the search space for one Standard Job, given a fixed <code>nTime</code> field, is <code>2^(NONCE_BITS + BIP320_VERSION_ROLLING_BITS) = ~280Th</code> , where <code>NONCE_BITS = 32</code> and <code>BIP320_VERSION_ROLLING_BITS = 16</code> . This is a guaranteed space before <code>nTime</code> rolling (or changing the Merkle Root by sending a new Job).</p>\n</blockquote>\n<p>This <code>nTime</code> rolling could be limited to similar numbers. E.g. a hypothetical 3 peta hash beast would need to roll the timestamp by 10 seconds every second. If it gets a new template every 30 seconds, it would roll by 300 seconds. Beyond that a pool proxy could (and should) just roll the extranonce and feed the miner a new template more frequently.</p>\n<p><strong>Current proposal and implementation</strong></p>\n<p>The <a href=\"https://github.com/bitcoin/bips/blob/f88f1e4392c871f206fe7ee70674c0a049d32ca7/bip-0094.mediawiki#user-content-Time_Warp_Fix\">timewarp fix currently deployed on testnet4</a> also allows <code>nTime</code> to go backwards by 600 seconds.</p>\n<p>Currently when Bitcoin Core proposes a new block template it will determine the timestamp as follows:</p>\n<ol>\n<li>Current time</li>\n<li>If the MTP rule requires it, bump time</li>\n<li>On testnet4, for the first block of a retarget period, if the previous block is from the future, bump time again, but minus 10 minutes.</li>\n</ol>\n<p>See <a href=\"https://github.com/bitcoin/bitcoin/blob/733fa0b0a140fc1e40c644a29953db090baa2890/src/node/miner.cpp#L33-L40\" class=\"inline-onebox\">bitcoin/src/node/miner.cpp at 733fa0b0a140fc1e40c644a29953db090baa2890 \u00b7 bitcoin/bitcoin \u00b7 GitHub</a></p>\n<p><strong>The problem</strong></p>\n<p>The 600 second grace period is cutting it too close imo, and we should consider increasing it to 2 hours for any future proposal (see <a href=\"https://delvingbitcoin.org/t/zawy-s-alternating-timestamp-attack/1062\" class=\"inline-onebox\">Zawy\u2019s Alternating Timestamp Attack</a> and <a href=\"https://delvingbitcoin.org/t/great-consensus-cleanup-revival/\">https://delvingbitcoin.org/t/great-consensus-cleanup-revival/</a>).</p>\n<p>For the discussion here I\u2019ll assume that the pool software[0] and miner firmware doesn\u2019t ignore the template timestamp.</p>\n<p>Now if a malicious miners set their timestamp 2 hours in the future, relative to our node clock, <em>and</em> if our template is used by an ASIC that wants to roll nTime forward by up to 600 seconds, this is only safe if we assume all our peers have a matching clock. But that defeats the purpose of the 2 hour future rule: <em>we shouldn\u2019t assume nodes have accurate clocks</em>.</p>\n<p>We should also strongly discourage <code>nTime</code> rolling beyond a few minutes, so as to not eat too much into the network wide two hour tolerance for inaccurate clocks.</p>\n<p>[0] public-pool (<a href=\"https://github.com/benjamin-wilson/public-pool/commit/4282233d2f11ceecbd0d142e8292ccc9c37ea999\" class=\"inline-onebox\">Ensure mintime is considered for jobs \u00b7 benjamin-wilson/public-pool@4282233 \u00b7 GitHub</a>) and SRI (<a href=\"https://github.com/stratum-mining/stratum/compare/main...GitGab19:stratum:fix-timestamp-bug\">fix</a> coming) ignored the template timestamp, which only became obvious on testnet4 because its timestamps are far in the future. But these are not production environments.</p>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 43,
  "updated_at": "2024-12-17T07:53:01.188Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 144,
  "reads": 62,
  "readers_count": 61,
  "score": 747.4,
  "yours": false,
  "topic_id": 1326,
  "topic_slug": "timewarp-attack-600-second-grace-period",
  "topic_title": "Timewarp attack 600 second grace period",
  "topic_html_title": "Timewarp attack 600 second grace period",
  "category_id": 7,
  "display_username": "Sjors Provoost",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "**Background**\n\nThe [original Great Consensus Cleanup soft fork proposal](https://github.com/TheBlueMatt/bips/blob/7f9670b643b7c943a0cc6d2197d3eabe661050c2/bip-XXXX.mediawiki) by @MattCorallo says the following:\n\n> * Sadly, some deployed mining hardware relies on the ability to roll nTime forward by up to 600 seconds[3]. Thus, only requiring that the nTime field move forward during difficulty adjustment would allow a malicious miner to prevent some competitors from mining the next block by setting their timestamp to two hours in the future. Thus, we allow nTime to go backwards by 600 seconds, ensuring that even a block with a timestamp two hours in the future allows for 600 seconds of nTime rolling on the next block.\n\nThe footnote explains why 600 is probably the upper bound:\n\n> [3] While no official stratum specification exists, the btc.com pool server (one of the most popular pool servers today) rejects shares with timestamps more than 600 seconds in the future at https://github.com/btccom/btcpool/blob/e7c536834fd6785af7d7d68ff29111ed81209cdf/src/bitcoin/StratumServerBitcoin.cc#L384. While there are few resources describing hardware operation today, timestamp rolling can be observed on the chain (in some rare cases) as block timestamps go backwards when a miner rolled one block nTime forward and the next does not, but only incredibly rarely more than 600 seconds.\n\n`nTime` rolling is also not likely to go away. It's potentially useful for ASIC devices that can go beyond 280 TH/s. As explained in https://github.com/stratum-mining/sv2-spec/blob/52e1fa22f68c343a3d25a2b1a04f93f8e701eced/05-Mining-Protocol.md#511-standard-job : \n\n> The size of the search space for one Standard Job, given a fixed `nTime` field, is `2^(NONCE_BITS + BIP320_VERSION_ROLLING_BITS) = ~280Th` , where `NONCE_BITS = 32` and `BIP320_VERSION_ROLLING_BITS = 16` . This is a guaranteed space before `nTime` rolling (or changing the Merkle Root by sending a new Job).\n\nThis `nTime` rolling could be limited to similar numbers. E.g. a hypothetical 3 peta hash beast would need to roll the timestamp by 10 seconds every second. If it gets a new template every 30 seconds, it would roll by 300 seconds. Beyond that a pool proxy could (and should) just roll the extranonce and feed the miner a new template more frequently.\n\n**Current proposal and implementation**\n\nThe [timewarp fix currently deployed on testnet4](https://github.com/bitcoin/bips/blob/f88f1e4392c871f206fe7ee70674c0a049d32ca7/bip-0094.mediawiki#user-content-Time_Warp_Fix) also allows `nTime` to go backwards by 600 seconds.\n\nCurrently when Bitcoin Core proposes a new block template it will determine the timestamp as follows:\n\n1. Current time\n2. If the MTP rule requires it, bump time\n3. On testnet4, for the first block of a retarget period, if the previous block is from the future, bump time again, but minus 10 minutes. \n\nSee https://github.com/bitcoin/bitcoin/blob/733fa0b0a140fc1e40c644a29953db090baa2890/src/node/miner.cpp#L33-L40\n\n**The problem**\n\nThe 600 second grace period is cutting it too close imo, and we should consider increasing it to 2 hours for any future proposal (see https://delvingbitcoin.org/t/zawy-s-alternating-timestamp-attack/1062 and https://delvingbitcoin.org/t/great-consensus-cleanup-revival/).\n\nFor the discussion here I'll assume that the pool software[0] and miner firmware doesn't ignore the template timestamp.\n\nNow if a malicious miners set their timestamp 2 hours in the future, relative to our node clock, _and_ if our template is used by an ASIC that wants to roll nTime forward by up to 600 seconds, this is only safe if we assume all our peers have a matching clock. But that defeats the purpose of the 2 hour future rule: *we shouldn't assume nodes have accurate clocks*.\n\nWe should also strongly discourage `nTime` rolling beyond a few minutes, so as to not eat too much into the network wide two hour tolerance for inaccurate clocks.\n\n[0] public-pool (https://github.com/benjamin-wilson/public-pool/commit/4282233d2f11ceecbd0d142e8292ccc9c37ea999) and SRI ([fix](https://github.com/stratum-mining/stratum/compare/main...GitGab19:stratum:fix-timestamp-bug) coming) ignored the template timestamp, which only became obvious on testnet4 because its timestamps are far in the future. But these are not production environments.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 71,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Background \nThe <a href=\"https://github.com/TheBlueMatt/bips/blob/7f9670b643b7c943a0cc6d2197d3eabe661050c2/bip-XXXX.mediawiki\">original Great Consensus Cleanup soft fork proposal</a> by <a class=\"mention\" href=\"/u/mattcorallo\">@MattCorallo</a> says the following: \n\n\nSadly, some deployed mining hardware relies on the ability to roll nTime forward by up to 600 seconds[3]. Thus, only requiring that the nTime field move forward during difficulty adjustment wou&hellip;",
  "truncated": true,
  "post_url": "/t/timewarp-attack-600-second-grace-period/1326/1",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null,
  "can_vote": false
}