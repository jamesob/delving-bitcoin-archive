{
  "id": 3763,
  "name": "Antoine Riard",
  "username": "ariard",
  "avatar_template": "/letter_avatar_proxy/v4/letter/a/c67d28/{size}.png",
  "created_at": "2024-12-12T06:42:46.666Z",
  "cooked": "<p>Thanks for the catch. For precision on LDK, respectively up to v0.0.116 (for <code>option_zero_fee_htlc_tx</code> channels) and up to v0.0.119 (for legacy channels) there was an upper limit on the accepted feerate from a channel counterparty, initially introduced by this <a href=\"https://github.com/lightningdevkit/rust-lightning/commit/d3af49e9f07fc28d104f1f1dbcf8e216b65e9f89\">commit</a>.</p>\n<p>In my understanding, keeping this limit check would have prevented this type of \u201cirrevocable fees\u201d vulnerabilities affecting LDK. The limit check was introduced at the time of \u201cexcessive trimmed HTLCs / dust HTLC exposure\u201d mitigations implementations in 2021 to make the msat denominated worst-case of dust HTLCs exposure easier to calculate (numerous scenarios were considered).</p>\n<p>The report does not say a word about the Validating Lightning Signer. As of commit <code>c2c5d994</code> and since the pre-production release, VLS always had a <code>validate_fee()</code> check validating the counterparty\u2019s proposed feerate against a <code>max_feerate_per_kw</code> and this style of attacks have been discussed in the VLS context under the name of \u201cminer-fee-siphoning attacks\u201d since early 2023. The value of <code>max_feerate_per_kw</code> has been usually around 100 sat / vb, though it is normally configurable by the operator.</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-12-12T06:42:46.666Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 24,
  "readers_count": 23,
  "score": 9.6,
  "yours": false,
  "topic_id": 1314,
  "topic_slug": "disclosure-irrevocable-fees-stealing-from-ln-using-revoked-commitment-transactions",
  "topic_title": "Disclosure: irrevocable fees---stealing from LN using revoked commitment transactions",
  "topic_html_title": "Disclosure: irrevocable fees&mdash;stealing from LN using revoked commitment transactions",
  "category_id": 8,
  "display_username": "Antoine Riard",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thanks for the catch. For precision on LDK, respectively up to v0.0.116 (for `option_zero_fee_htlc_tx` channels) and up to v0.0.119 (for legacy channels) there was an upper limit on the accepted feerate from a channel counterparty, initially introduced by this [commit](https://github.com/lightningdevkit/rust-lightning/commit/d3af49e9f07fc28d104f1f1dbcf8e216b65e9f89).\n\nIn my understanding, keeping this limit check would have prevented this type of \u201cirrevocable fees\u201d vulnerabilities affecting LDK. The limit check was introduced at the time of \u201cexcessive trimmed HTLCs / dust HTLC exposure\u201d mitigations implementations in 2021 to make the msat denominated worst-case of dust HTLCs exposure easier to calculate (numerous scenarios were considered).\n\nThe report does not say a word about the Validating Lightning Signer. As of commit `c2c5d994` and since the pre-production release, VLS always had a `validate_fee()` check validating the counterparty\u2019s proposed feerate against a `max_feerate_per_kw` and this style of attacks have been discussed in the VLS context under the name of \u201cminer-fee-siphoning attacks\u201d since early 2023. The value of `max_feerate_per_kw` has been usually around 100 sat / vb, though it is normally configurable by the operator.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 5,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}