{
  "id": 3745,
  "name": "Sjors Provoost",
  "username": "sjors",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sjors/{size}/59_2.png",
  "created_at": "2024-12-09T05:25:00.859Z",
  "cooked": "<p>I\u2019m a bit worried about miners proposing fake block templates with absurdly high fees, thereby enjoying a relatively large payout.</p>\n<p>This seems worse than block withholding, because such a miner could run a way with ~100% of the block reward with ~0% of the PoW.</p>\n<p>The obvious counter measure is for the pool (or separate Job Declarator server entity, JDS) to verify every template. But this a non-trivial task, since the JDS node mempool could be very different. It may need to replace transactions its mempool with that of the template to check that it doesn\u2019t contain a big fee transaction that\u2019s actually unspendable.</p>\n<p>Absurdly high fees would always trigger a new slice, so you can at least prioritize its verification.</p>\n<p>For coinbase-only templates the JDS doesn\u2019t know the transactions and can\u2019t verify anything.</p>\n<p>It\u2019s also unclear how, in the random sample verification protocol, you would distinguish a malicious miner from a malicious pool making such templates for themselves (and \u2018accidentally\u2019 approving them).</p>\n<p><em>Perhaps a simpler solution</em> is to cap the fees for all slices to whatever fees were in the found block. The fake templates, if not caught, would then have their fees reduced to a level that at least in principle they could have found. Then it\u2019s not much worse than regular block witholding.</p>\n<p>This also creates a disincentive to produce high value templates with \u2018secret\u2019 transactions. Template providers will want everyone else to have the good stuff in their mempool too.</p>",
  "post_number": 41,
  "post_type": 1,
  "updated_at": "2024-12-09T05:25:00.859Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 6,
  "readers_count": 5,
  "score": 1.0,
  "yours": false,
  "topic_id": 1099,
  "topic_slug": "pplns-with-job-declaration",
  "topic_title": "PPLNS with job declaration",
  "topic_html_title": "PPLNS with job declaration",
  "category_id": 7,
  "display_username": "Sjors Provoost",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I'm a bit worried about miners proposing fake block templates with absurdly high fees, thereby enjoying a relatively large payout.\n\nThis seems worse than block withholding, because such a miner could run a way with ~100% of the block reward with ~0% of the PoW.\n\nThe obvious counter measure is for the pool (or separate Job Declarator server entity, JDS) to verify every template. But this a non-trivial task, since the JDS node mempool could be very different. It may need to replace transactions its mempool with that of the template to check that it doesn't contain a big fee transaction that's actually unspendable.\n\nAbsurdly high fees would always trigger a new slice, so you can at least prioritize its verification.\n\nFor coinbase-only templates the JDS doesn't know the transactions and can't verify anything.\n\nIt's also unclear how, in the random sample verification protocol, you would distinguish a malicious miner from a malicious pool making such templates for themselves (and 'accidentally' approving them).\n\n*Perhaps a simpler solution* is to cap the fees for all slices to whatever fees were in the found block. The fake templates, if not caught, would then have their fees reduced to a level that at least in principle they could have found. Then it's not much worse than regular block witholding.\n\nThis also creates a disincentive to produce high value templates with 'secret' transactions. Template providers will want everyone else to have the good stuff in their mempool too.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 71,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}