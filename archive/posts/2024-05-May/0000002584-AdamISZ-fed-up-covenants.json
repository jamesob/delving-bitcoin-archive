{
  "id": 2584,
  "name": "Adam Gibson",
  "username": "AdamISZ",
  "avatar_template": "/user_avatar/delvingbitcoin.org/adamisz/{size}/418_2.png",
  "created_at": "2024-05-31T16:18:59.640Z",
  "cooked": "<p>Also, a clarifying question for the end of that section:</p>\n<p>You write:</p>\n<p>\" <span class=\"math\">\\sigma \\leftarrow C_F(C_p, Encrypt(M, TX))</span></p>\n<p><span class=\"math\">\\sigma</span> can be used as a signature of <span class=\"math\">u</span> over TX\".</p>\n<p>Would this be correct?</p>\n<p><span class=\"math\">\\sigma = Decrypt(C_F, C_p, Encrypt(M, TX))</span></p>\n<p>\u2026 where I\u2019m taking the definition of <span class=\"math\">Decrypt</span> from the start of the paper and extending to the two-argument case, i.e. defining for an encryption public key of <span class=\"math\">M</span>, <span class=\"math\">Decrypt(q, c_1, c_2) = X</span> where the function has been previously defined <span class=\"math\">F(a, b) = X</span> and <span class=\"math\">c_1, c_2</span> are ciphertexts of <span class=\"math\">a, b</span> and <span class=\"math\">q</span> is the output of <span class=\"math\">EncryptFunc(M, F)</span>.</p>\n<p>So anyway, if I got that right, let me try to translate into English what this machine does:</p>\n<p>The basic building block is the ability to create a decryption key that decrypts a given ciphertext to the <em>output</em> of <span class=\"math\">F</span> when its plaintext is used as input.</p>\n<p>The way you\u2019re using it here (seems pretty clever!) is that you define a function which is \" <span class=\"math\">F</span>(private key, transaction) = the ECDSA signature of a transaction by a private key <em>tweaked by the hash of the transaction</em>\". This means that given the ciphertext of that tweaked private key, and \u201cgiven\u201d the ciphertext for the transaction (anyone can generate ciphertexts; this is public key cryptography), you can pass those two arguments into the output of the \u201cbasic building block above\u201d; you\u2019ll get a signature on that transaction. But, because of the tweak, if you try to do the same with any other transaction, it\u2019ll fail.</p>\n<p>(Deleted earlier misunderstanding)</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-05-31T18:50:11.352Z",
  "reply_count": 2,
  "reply_to_post_number": 2,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 12,
  "readers_count": 11,
  "score": 12.4,
  "yours": false,
  "topic_id": 929,
  "topic_slug": "fed-up-covenants",
  "topic_title": "FE'd Up Covenants",
  "topic_html_title": "FE&rsquo;d Up Covenants",
  "category_id": 7,
  "display_username": "Adam Gibson",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "AdamISZ",
    "name": "Adam Gibson",
    "avatar_template": "/user_avatar/delvingbitcoin.org/adamisz/{size}/418_2.png"
  },
  "bookmarked": false,
  "raw": "Also, a clarifying question for the end of that section:\n\nYou write:\n\n\" $\\sigma \\leftarrow C_F(C_p, Encrypt(M, TX))$\n\n$\\sigma$ can be used as a signature of $u$ over TX\".\n\nWould this be correct?\n\n$\\sigma = Decrypt(C_F, C_p, Encrypt(M, TX))$\n\n... where I'm taking the definition of $Decrypt$ from the start of the paper and extending to the two-argument case, i.e. defining for an encryption public key of $M$, $Decrypt(q, c_1, c_2) = X$ where the function has been previously defined $F(a, b) = X$ and $c_1, c_2$ are ciphertexts of $a, b$ and $q$ is the output of $EncryptFunc(M, F)$.\n\nSo anyway, if I got that right, let me try to translate into English what this machine does:\n\nThe basic building block is the ability to create a decryption key that decrypts a given ciphertext to the *output* of $F$ when its plaintext is used as input.\n\nThe way you're using it here (seems pretty clever!) is that you define a function which is \" $F$(private key, transaction) = the ECDSA signature of a transaction by a private key *tweaked by the hash of the transaction*\". This means that given the ciphertext of that tweaked private key, and \"given\" the ciphertext for the transaction (anyone can generate ciphertexts; this is public key cryptography), you can pass those two arguments into the output of the \"basic building block above\"; you'll get a signature on that transaction. But, because of the tweak, if you try to do the same with any other transaction, it'll fail.\n\n(Deleted earlier misunderstanding)",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 343,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}