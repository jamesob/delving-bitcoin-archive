{
  "id": 2436,
  "name": "Antoine Poinsot",
  "username": "AntoineP",
  "avatar_template": "/user_avatar/delvingbitcoin.org/antoinep/{size}/483_2.png",
  "created_at": "2024-05-17T09:38:42.194Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"AntoineP\" data-post=\"1\" data-topic=\"710\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/antoinep/48/483_2.png\" class=\"avatar\"> AntoineP:</div>\n<blockquote>\n<p>Within less than 40 days the attacker would bring the difficulty down to 1</p>\n</blockquote>\n</aside>\n<p>To back up this claim i\u2019ve run a bit more rigorous simulation than my previous estimate. If the attack were to start at <a href=\"https://blockstream.info/block/000000000000000000026b90d09b5e4fba615eadfc4ce2a19f6a68c9c18d4a2e\">block <code>842688</code></a> (timestamp <code>1715252414</code>, difficulty <code>83148355189239</code>) it\u2019d take about 39 days to bring down the difficulty down to 1 by exploiting the timewarp vulnerability.</p>\n<p>Here is the Python script i\u2019ve used. The resulting table of every block and its timestamp in this window is available in <a href=\"https://gist.github.com/darosior/5a755ebdaefa7ae73be5507d2920914c\">this gist</a>.</p>\n<pre data-code-wrap=\"python\"><code class=\"lang-python\">from datetime import datetime\n\n# A real block on mainnet.\nSTART_HEIGHT = 842688\nSTART_TIMESTAMP = 1715252414\nSTART_DIFF = 83148355189239\n\n# The list of (height, timestamp) of each block. Will contain all the blocks during\n# the attack, plus the blocks for the period preceding the attack.\nblocks = []\n\n# Push the honest period of blocks before the starting height.\nfor i in range(START_HEIGHT - 2016, START_HEIGHT):\n    blocks.append((i, START_TIMESTAMP - (START_HEIGHT - i) * 10 * 60))\n\n# Now the attack starts.\ndifficulty = START_DIFF\nheight = START_HEIGHT\nperiods = 0\nwhile difficulty &gt; 1:\n    # Always set the timestamp of each block to the minimum allowed by the MTP rule.\n    # We'll override it below for the last block in a period.\n    median = sorted(ts for (h, ts) in blocks[-11:])[5]\n    blocks.append((height, median + 1))\n\n    # New period. First override the last block of the previous period (ie not the block\n    # at the tail of the list which is the first of the new period, but the one before).\n    # Then update the difficulty.\n    if height &gt; START_HEIGHT and height % 2016 == 0:\n        # Estimate how long it took to mine the past 2016 blocks given the current diff.\n        diff_reduction = START_DIFF / difficulty\n        time_spent = 2016 * 10 * 60 / diff_reduction\n        # For the first period we set the 2h in the future. For the next ones, we\n        # just offset from the previous period's last block's timestamp.\n        prev_last_ts = blocks[-2 - 2016][1]\n        max_timestamp = prev_last_ts + time_spent\n        if periods == 0:\n            max_timestamp += 3_600 * 2\n        blocks[-2] = (height, max_timestamp)\n\n        # Adjust the difficulty\n        red = (blocks[-2][1] - blocks[-2 - 2015][1]) / (2016 * 10 * 60)\n        assert red &lt;= 4\n        difficulty /= red\n        periods += 1\n        print(f\"End of period {periods}, reducing the diff by {red}.\")\n\n    height += 1\n\nattack_duration = datetime.fromtimestamp(blocks[-2][1] - 3_600 * 2) - datetime.fromtimestamp(START_TIMESTAMP)\nprint(f\"Took the difficulty down to 1 in {attack_duration} after {periods} periods.\")\n\nprint(f\"| height | timestamp |\")\nprint(f\"| ------ | --------- |\")\nfor (h, ts) in blocks:\n    print(f\"| {h} | {datetime.fromtimestamp(ts)} |\")\n</code></pre>",
  "post_number": 17,
  "post_type": 1,
  "updated_at": "2024-05-17T09:38:42.194Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 45.4,
  "yours": false,
  "topic_id": 710,
  "topic_slug": "great-consensus-cleanup-revival",
  "topic_title": "Great Consensus Cleanup Revival",
  "topic_html_title": "Great Consensus Cleanup Revival",
  "category_id": 7,
  "display_username": "Antoine Poinsot",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"AntoineP, post:1, topic:710\"]\nWithin less than 40 days the attacker would bring the difficulty down to 1\n[/quote]\n\nTo back up this claim i've run a bit more rigorous simulation than my previous estimate. If the attack were to start at [block `842688`](https://blockstream.info/block/000000000000000000026b90d09b5e4fba615eadfc4ce2a19f6a68c9c18d4a2e) (timestamp `1715252414`, difficulty `83148355189239`) it'd take about 39 days to bring down the difficulty down to 1 by exploiting the timewarp vulnerability.\n\nHere is the Python script i've used. The resulting table of every block and its timestamp in this window is available in [this gist](https://gist.github.com/darosior/5a755ebdaefa7ae73be5507d2920914c).\n\n```python\nfrom datetime import datetime\n\n# A real block on mainnet.\nSTART_HEIGHT = 842688\nSTART_TIMESTAMP = 1715252414\nSTART_DIFF = 83148355189239\n\n# The list of (height, timestamp) of each block. Will contain all the blocks during\n# the attack, plus the blocks for the period preceding the attack.\nblocks = []\n\n# Push the honest period of blocks before the starting height.\nfor i in range(START_HEIGHT - 2016, START_HEIGHT):\n    blocks.append((i, START_TIMESTAMP - (START_HEIGHT - i) * 10 * 60))\n\n# Now the attack starts.\ndifficulty = START_DIFF\nheight = START_HEIGHT\nperiods = 0\nwhile difficulty > 1:\n    # Always set the timestamp of each block to the minimum allowed by the MTP rule.\n    # We'll override it below for the last block in a period.\n    median = sorted(ts for (h, ts) in blocks[-11:])[5]\n    blocks.append((height, median + 1))\n\n    # New period. First override the last block of the previous period (ie not the block\n    # at the tail of the list which is the first of the new period, but the one before).\n    # Then update the difficulty.\n    if height > START_HEIGHT and height % 2016 == 0:\n        # Estimate how long it took to mine the past 2016 blocks given the current diff.\n        diff_reduction = START_DIFF / difficulty\n        time_spent = 2016 * 10 * 60 / diff_reduction\n        # For the first period we set the 2h in the future. For the next ones, we\n        # just offset from the previous period's last block's timestamp.\n        prev_last_ts = blocks[-2 - 2016][1]\n        max_timestamp = prev_last_ts + time_spent\n        if periods == 0:\n            max_timestamp += 3_600 * 2\n        blocks[-2] = (height, max_timestamp)\n\n        # Adjust the difficulty\n        red = (blocks[-2][1] - blocks[-2 - 2015][1]) / (2016 * 10 * 60)\n        assert red <= 4\n        difficulty /= red\n        periods += 1\n        print(f\"End of period {periods}, reducing the diff by {red}.\")\n\n    height += 1\n\nattack_duration = datetime.fromtimestamp(blocks[-2][1] - 3_600 * 2) - datetime.fromtimestamp(START_TIMESTAMP)\nprint(f\"Took the difficulty down to 1 in {attack_duration} after {periods} periods.\")\n\nprint(f\"| height | timestamp |\")\nprint(f\"| ------ | --------- |\")\nfor (h, ts) in blocks:\n    print(f\"| {h} | {datetime.fromtimestamp(ts)} |\")\n```",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 12,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}