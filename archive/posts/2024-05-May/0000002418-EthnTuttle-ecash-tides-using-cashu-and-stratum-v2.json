{
  "id": 2418,
  "name": "Ethan Tuttle",
  "username": "EthnTuttle",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ethntuttle/{size}/26_2.png",
  "created_at": "2024-05-15T16:53:09.610Z",
  "cooked": "<p>Recommended reading/References:</p>\n<ul>\n<li><a href=\"https://github.com/cashubtc/nuts\" rel=\"noopener nofollow ugc\">Cashu ecash protocol</a></li>\n<li><a href=\"https://gist.github.com/callebtc/ed5228d1d8cbaade0104db5d1cf63939\" rel=\"noopener nofollow ugc\">ecash Proof of Liabilities</a></li>\n<li><a href=\"https://ocean.xyz/docs/tides\" rel=\"noopener nofollow ugc\">Ocean TIDES</a></li>\n<li><a href=\"https://stratumprotocol.org/specification/\" rel=\"noopener nofollow ugc\">Stratum v2 Spec</a> (Sv2)</li>\n</ul>\n<p>Goals:</p>\n<ul>\n<li>Auditability</li>\n<li>Small payouts</li>\n<li>Privacy</li>\n</ul>\n<p>Using the <a href=\"https://github.com/cashubtc/nuts/blob/6024402ff8bcbe511e3e689f6d85f5464ecc3982/00.md\" rel=\"noopener nofollow ugc\">Blind Diffie-Hellmann key exchange (BDHKE)</a> from Cashu as a Sv2 <a href=\"https://stratumprotocol.org/specification/03-Protocol-Overview/#34-protocol-extensions\" rel=\"noopener nofollow ugc\">Protocol Extension</a>, a pool can provide auditable, small scale, private pool rewards in the form of <code>eHash</code>.</p>\n<p>A hash provider (HP) connects to a pool and begins job negotiation. This aspect remains largely unchanged from current paradigms. However, the HP will also request the active <code>block_keyset</code>. This is a list of pubkeys as defined in <a href=\"https://github.com/cashubtc/nuts/blob/6024402ff8bcbe511e3e689f6d85f5464ecc3982/02.md\" rel=\"noopener nofollow ugc\">NUT02</a>, but the value amounts for the individual keys correspond to difficulty targets for various miners which is used as a share weight in the TIDES rewards. The <code>unit</code> for these keysets is left up to specific implementations. A <code>block_keyset</code> is rotated once the pool finds a block or when the network difficulty adjustment occurs.</p>\n<p>When the HP finds a valid share, in addition to standard share data, the HP will generate a secret and send a blinded message (<code>B_</code>) to the pool. The inputs for this blinded message could be done at an individual ASIC level or as part of a farm proxy implementation, with the latter seemingly ideal for larger farms. This blinded message (<code>eShare</code>) would be included in Sv2 channel messaging as a protocol extension. This signals to the pool that there is a valid share and requests a signature using the appropriate key from the active <code>block_keyset</code>. The same blinded message could be reused multiple times as long as special consideration is given on the pool/mint side for tallying these submissions. Reuse of blinded messages may be necessary during implementation if computing these blinded messages is too costly for a given HP, otherwise a new blinded message should suffice and lower complexity.</p>\n<p>When the pool receives an <code>eShare</code>, it first validates the share itself, as usual. Once validated, the pool signs the blinded message, completing the DHKE and providing the blinded signature (<code>C_</code>) back to the HP. This share + blinded signature are then added to the time ordered TIDES defined <code>share_log</code>. The HP retains the blinded message data inputs (<code>x</code>) and the unblinded signature (<code>C</code>) as defined in the Cashu protocol <a href=\"https://github.com/cashubtc/nuts/blob/6024402ff8bcbe511e3e689f6d85f5464ecc3982/00.md\" rel=\"noopener nofollow ugc\">NUT00</a>.</p>\n<p>This share process continues until a new difficulty adjustment occurs, after which a new keyset is issued with appropriate difficulty targets, OR a block is found by the pool. A keyset rotation after a difficulty adjustment accounts for new share target difficulties. A keyset may be reusable across difficulty adjustments as a % delta from network difficulty.</p>\n<p>When a block is found by the pool, a full list of shares and associated blinded signatures is published by the pool. This signals to the HP that the <code>eHash</code> shares are available for redemption. Now the pool references the <code>share_log</code> using the <code>share_log_window</code> (defined in TIDES) for what <code>eHash</code> is eligible for redemption. As HP\u2019s redeem their <code>eHash</code>, the <code>eHash</code> is recorded alongside the public record of shares and blinded signatures as defined in the <a href=\"https://gist.github.com/callebtc/ed5228d1d8cbaade0104db5d1cf63939\" rel=\"noopener nofollow ugc\">ecash Proof of Liabilities</a>.</p>\n<p>Redemption of <code>eHash</code> can be any of the available Cashu or ecash mechanisms appropriate for the HP.</p>\n<p>Other thoughts:</p>\n<ul>\n<li>Cashu supports spending conditions, such as P2PK (<a href=\"https://github.com/cashubtc/nuts/blob/6024402ff8bcbe511e3e689f6d85f5464ecc3982/10.md\" rel=\"noopener nofollow ugc\">NUT10</a> and <a href=\"https://github.com/cashubtc/nuts/blob/6024402ff8bcbe511e3e689f6d85f5464ecc3982/11.md\" rel=\"noopener nofollow ugc\">NUT11</a>)</li>\n<li>the blinded message secret uses <code>hash_to_curve(x)</code> computation which could be offloaded to an ASIC, maybe.</li>\n<li>Since this is an ecash usage, <a href=\"https://fedimint.org/\" rel=\"noopener nofollow ugc\">Fedimint</a> is also a viable option but has not been considered in depth.</li>\n</ul>\n<p>P.S.\nI look forward to feedback and considerations I may have missed. This post was an effort to solidify my idea into something more concrete and shareable. A vocal (and probably less comprehensive/coherent) monologue of this idea can be found <a href=\"https://fountain.fm/episode/zfEPkjPmQd8rD2cxq5tR\" rel=\"noopener nofollow ugc\">here</a>. I hope to create a diagram to help illustrate this proposal.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-05-15T16:58:18.975Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 41,
  "reads": 11,
  "readers_count": 10,
  "score": 132.2,
  "yours": false,
  "topic_id": 870,
  "topic_slug": "ecash-tides-using-cashu-and-stratum-v2",
  "topic_title": "Ecash TIDES using Cashu and Stratum v2",
  "topic_html_title": "Ecash TIDES using Cashu and Stratum v2",
  "category_id": 8,
  "display_username": "Ethan Tuttle",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Recommended reading/References: \n- [Cashu ecash protocol](https://github.com/cashubtc/nuts)  \n- [ecash Proof of Liabilities](https://gist.github.com/callebtc/ed5228d1d8cbaade0104db5d1cf63939)\n- [Ocean TIDES](https://ocean.xyz/docs/tides)\n- [Stratum v2 Spec](https://stratumprotocol.org/specification/) (Sv2)\n\nGoals:\n- Auditability\n- Small payouts\n- Privacy\n\nUsing the [Blind Diffie-Hellmann key exchange (BDHKE)](https://github.com/cashubtc/nuts/blob/6024402ff8bcbe511e3e689f6d85f5464ecc3982/00.md) from Cashu as a Sv2 [Protocol Extension](https://stratumprotocol.org/specification/03-Protocol-Overview/#34-protocol-extensions), a pool can provide auditable, small scale, private pool rewards in the form of `eHash`.\n\nA hash provider (HP) connects to a pool and begins job negotiation. This aspect remains largely unchanged from current paradigms. However, the HP will also request the active `block_keyset`. This is a list of pubkeys as defined in [NUT02](https://github.com/cashubtc/nuts/blob/6024402ff8bcbe511e3e689f6d85f5464ecc3982/02.md), but the value amounts for the individual keys correspond to difficulty targets for various miners which is used as a share weight in the TIDES rewards. The `unit` for these keysets is left up to specific implementations. A `block_keyset` is rotated once the pool finds a block or when the network difficulty adjustment occurs. \n\nWhen the HP finds a valid share, in addition to standard share data, the HP will generate a secret and send a blinded message (`B_`) to the pool. The inputs for this blinded message could be done at an individual ASIC level or as part of a farm proxy implementation, with the latter seemingly ideal for larger farms. This blinded message (`eShare`) would be included in Sv2 channel messaging as a protocol extension. This signals to the pool that there is a valid share and requests a signature using the appropriate key from the active `block_keyset`. The same blinded message could be reused multiple times as long as special consideration is given on the pool/mint side for tallying these submissions. Reuse of blinded messages may be necessary during implementation if computing these blinded messages is too costly for a given HP, otherwise a new blinded message should suffice and lower complexity.\n\nWhen the pool receives an `eShare`, it first validates the share itself, as usual. Once validated, the pool signs the blinded message, completing the DHKE and providing the blinded signature (`C_`) back to the HP. This share + blinded signature are then added to the time ordered TIDES defined `share_log`. The HP retains the blinded message data inputs (`x`) and the unblinded signature (`C`) as defined in the Cashu protocol [NUT00](https://github.com/cashubtc/nuts/blob/6024402ff8bcbe511e3e689f6d85f5464ecc3982/00.md). \n\nThis share process continues until a new difficulty adjustment occurs, after which a new keyset is issued with appropriate difficulty targets, OR a block is found by the pool. A keyset rotation after a difficulty adjustment accounts for new share target difficulties. A keyset may be reusable across difficulty adjustments as a % delta from network difficulty.\n\nWhen a block is found by the pool, a full list of shares and associated blinded signatures is published by the pool. This signals to the HP that the `eHash` shares are available for redemption. Now the pool references the `share_log` using the `share_log_window` (defined in TIDES) for what `eHash` is eligible for redemption. As HP's redeem their `eHash`, the `eHash` is recorded alongside the public record of shares and blinded signatures as defined in the [ecash Proof of Liabilities](https://gist.github.com/callebtc/ed5228d1d8cbaade0104db5d1cf63939). \n\nRedemption of `eHash` can be any of the available Cashu or ecash mechanisms appropriate for the HP.\n\nOther thoughts:\n- Cashu supports spending conditions, such as P2PK ([NUT10](https://github.com/cashubtc/nuts/blob/6024402ff8bcbe511e3e689f6d85f5464ecc3982/10.md) and [NUT11](https://github.com/cashubtc/nuts/blob/6024402ff8bcbe511e3e689f6d85f5464ecc3982/11.md))\n- the blinded message secret uses `hash_to_curve(x)` computation which could be offloaded to an ASIC, maybe.\n- Since this is an ecash usage, [Fedimint](https://fedimint.org/) is also a viable option but has not been considered in depth.\n\nP.S.\nI look forward to feedback and considerations I may have missed. This post was an effort to solidify my idea into something more concrete and shareable. A vocal (and probably less comprehensive/coherent) monologue of this idea can be found [here](https://fountain.fm/episode/zfEPkjPmQd8rD2cxq5tR). I hope to create a diagram to help illustrate this proposal.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 29,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}