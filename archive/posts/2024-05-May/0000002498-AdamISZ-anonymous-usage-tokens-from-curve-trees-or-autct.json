{
  "id": 2498,
  "name": "Adam Gibson",
  "username": "AdamISZ",
  "avatar_template": "/user_avatar/delvingbitcoin.org/adamisz/{size}/418_2.png",
  "created_at": "2024-05-22T12:09:33.583Z",
  "cooked": "<p><a class=\"mention\" href=\"/u/kayabanerve\">@kayabaNerve</a> thanks for the feedback! I was only made aware of your work around the same time I wrote this post, but of course it\u2019s extremely useful to know that others are working on this same type of thing.</p>\n<aside class=\"quote no-group\" data-username=\"kayabaNerve\" data-post=\"6\" data-topic=\"862\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/kayabanerve/48/577_2.png\" class=\"avatar\"> kayabaNerve:</div>\n<blockquote>\n<p>You can do quite a bit better. My work has been applying Curve Trees to Monero and we\u2019re at 35ms for verifying one proof (using two curves without tailored field implementations yet crypto-bigint\u2019s Residue type) of 219b. With batch verification (n=10), it quickly gets down to 11ms.</p>\n</blockquote>\n</aside>\n<p>Indeed, your numbers match up more closely with the benchmarking results quoted in the paper. I was trying to give indicative numbers that I actually achieved with my (crappy) code; the difference isn\u2019t too big anyway. And for batch verify, yes, I did note that in the OP, but thanks, it\u2019s useful to see what people have actually achieved.</p>\n<p>Are your proving times also similar to what\u2019s claimed in the paper?</p>\n<aside class=\"quote no-group\">\n<blockquote>\n<p>one proof (using two curves without tailored field implementations yet crypto-bigint\u2019s Residue type) of 219b.</p>\n</blockquote>\n</aside>\n<p>But on this part specifically, it\u2019s very interesting and very distinct from the CurveTrees paper - are you saying your proof size is 219 bytes? I believe\nyou\u2019re using Liam Eagan\u2019s work, and I also know you\u2019re working with different base structures because you don\u2019t have a 2-cycle with monero\u2019s curve (hence \u201ctowering\u201d etc.), but in brief, would you say that a proof that much smaller than what is quoted in the orig. paper (like 2-3kB) is feasible here? That would be super useful in some use cases I think.</p>\n<aside class=\"quote no-group\">\n<blockquote>\n<p>The benefit of using Generalized Bulletproofs is the \u2018native\u2019 operations re: Pedersen Vector Commitments. Using Spartan would require manually building them on the towering curve (historically hundreds of multiplication constraints per word).</p>\n</blockquote>\n</aside>\n<p>Probably I just misunderstood something, but I don\u2019t get what you\u2019re saying here; SPARTAN doesn\u2019t use a cycle of curves does it? Why are you referring to towering curve here? (my ignorance is duplicate here: I neither understand more about \u201ctowering curves\u201d as you refer to in fcmp++ than \u201cit\u2019s something you need because ed25519 doesn\u2019t have a 2-cycle\u201d, nor do I understand much at all about SPARTAN except that it uses sum-check protocols).</p>\n<aside class=\"quote no-group\" data-username=\"kayabaNerve\" data-post=\"6\" data-topic=\"862\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/kayabanerve/48/577_2.png\" class=\"avatar\"> kayabaNerve:</div>\n<blockquote>\n<p>This isn\u2019t necessary if you define the linking tags as x coordinates. Then proving for a negative leaf may produce a negative linking tag, except the sign data is lost when you drop the tag\u2019s y coordinate.</p>\n</blockquote>\n</aside>\n<p>Oh, this is a tricky point but I think I <em>might</em> understand \u2026 so, the algorithm for the ZKP needs each curve point to be represented as x-only for efficiency, but the process to go from point to x-coord needs a tiebreaker mechanism that can be calculated efficiently <em>in</em> the arithmetic circuit, and their \u201cpermissible points from a universal hash\u201d does this. But is your point here that, for the <em>leaves</em> of the tree specifically, you could just not do that, as long as the linking tag is defined as x-coord only (i.e. ignoring sign)? I believe the algos. in their benchmarking code always required permissible points as inputs but that may just be a trivial detail that can be changed (hmm indeed come to think of it, I see no reason why the leaf points need this; it\u2019s only needed for the transition from one curve to the next\u2026).</p>\n<p>If so, that is a nice practical win to ditch that preprocessing.</p>",
  "post_number": 8,
  "post_type": 1,
  "posts_count": 11,
  "updated_at": "2024-05-22T12:09:33.583Z",
  "reply_count": 1,
  "reply_to_post_number": 6,
  "quote_count": 1,
  "incoming_link_count": 3,
  "reads": 33,
  "readers_count": 32,
  "score": 26.6,
  "yours": false,
  "topic_id": 862,
  "topic_slug": "anonymous-usage-tokens-from-curve-trees-or-autct",
  "topic_title": "Anonymous usage tokens from curve trees or autct",
  "topic_html_title": "Anonymous usage tokens from curve trees or autct",
  "category_id": 7,
  "display_username": "Adam Gibson",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "@kayabaNerve thanks for the feedback! I was only made aware of your work around the same time I wrote this post, but of course it's extremely useful to know that others are working on this same type of thing.\n\n[quote=\"kayabaNerve, post:6, topic:862\"]\nYou can do quite a bit better. My work has been applying Curve Trees to Monero and we\u2019re at 35ms for verifying one proof (using two curves without tailored field implementations yet crypto-bigint\u2019s Residue type) of 219b. With batch verification (n=10), it quickly gets down to 11ms.\n[/quote]\n\nIndeed, your numbers match up more closely with the benchmarking results quoted in the paper. I was trying to give indicative numbers that I actually achieved with my (crappy) code; the difference isn't too big anyway. And for batch verify, yes, I did note that in the OP, but thanks, it's useful to see what people have actually achieved.\n\nAre your proving times also similar to what's claimed in the paper?\n\n[quote]\none proof (using two curves without tailored field implementations yet crypto-bigint\u2019s Residue type) of 219b. \n[/quote]\n\nBut on this part specifically, it's very interesting and very distinct from the CurveTrees paper - are you saying your proof size is 219 bytes? I believe\nyou're using Liam Eagan's work, and I also know you're working with different base structures because you don't have a 2-cycle with monero's curve (hence \"towering\" etc.), but in brief, would you say that a proof that much smaller than what is quoted in the orig. paper (like 2-3kB) is feasible here? That would be super useful in some use cases I think.\n\n[quote]\nThe benefit of using Generalized Bulletproofs is the \u2018native\u2019 operations re: Pedersen Vector Commitments. Using Spartan would require manually building them on the towering curve (historically hundreds of multiplication constraints per word).\n[/quote]\n\nProbably I just misunderstood something, but I don't get what you're saying here; SPARTAN doesn't use a cycle of curves does it? Why are you referring to towering curve here? (my ignorance is duplicate here: I neither understand more about \"towering curves\" as you refer to in fcmp++ than \"it's something you need because ed25519 doesn't have a 2-cycle\", nor do I understand much at all about SPARTAN except that it uses sum-check protocols).\n\n[quote=\"kayabaNerve, post:6, topic:862\"]\nThis isn\u2019t necessary if you define the linking tags as x coordinates. Then proving for a negative leaf may produce a negative linking tag, except the sign data is lost when you drop the tag\u2019s y coordinate.\n[/quote]\n\nOh, this is a tricky point but I think I *might* understand .. so, the algorithm for the ZKP needs each curve point to be represented as x-only for efficiency, but the process to go from point to x-coord needs a tiebreaker mechanism that can be calculated efficiently *in* the arithmetic circuit, and their \"permissible points from a universal hash\" does this. But is your point here that, for the *leaves* of the tree specifically, you could just not do that, as long as the linking tag is defined as x-coord only (i.e. ignoring sign)? I believe the algos. in their benchmarking code always required permissible points as inputs but that may just be a trivial detail that can be changed (hmm indeed come to think of it, I see no reason why the leaf points need this; it's only needed for the transition from one curve to the next...).\n\nIf so, that is a nice practical win to ditch that preprocessing.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 343,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "<a class=\"mention\" href=\"/u/kayabanerve\">@kayabaNerve</a> thanks for the feedback! I was only made aware of your work around the same time I wrote this post, but of course it\u2019s extremely useful to know that others are working on this same type of thing. \n\nIndeed, your numbers match up more closely with the benchmarking results quoted in the pa&hellip;",
  "truncated": true,
  "post_url": "/t/anonymous-usage-tokens-from-curve-trees-or-autct/862/8",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}