{
  "id": 2458,
  "name": "",
  "username": "Sosthene",
  "avatar_template": "/letter_avatar_proxy/v4/letter/s/ed655f/{size}.png",
  "created_at": "2024-05-19T17:32:48.113Z",
  "cooked": "<p>FWIW we already wrote with cygnet some basic psbt workflow for donation wallet (I\u2019m also using it in my wasm experiments). That\u2019s hacky and has limitations, but it already works so it can serve as a basis for further improvements.</p>\n<p>For spending from sp outputs, I\u2019m not quite sure what you mean with</p>\n<aside class=\"quote no-group\" data-username=\"josibake\" data-post=\"1\" data-topic=\"877\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/josibake/48/83_2.png\" class=\"avatar\"> josibake:</div>\n<blockquote>\n<p>The spend public key is used to get the spend private key and the spend private key is tweaked with the <code>shared_secret_tweak</code> when signing.</p>\n</blockquote>\n</aside>\n<p>but basically we use the proprietary field of inputs that are spending a sp prevout to keep the tweak to the spend private key, and I think that\u2019s what you mean.</p>\n<p>When signing we pass along the spend private key and simply add the tweak to get the signing key, see <a href=\"https://github.com/cygnet3/sp-client/blob/0a81059e2959b87798432fc10c9447ba276dc1a1/src/spclient.rs#L684\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">sp-client/src/spclient.rs at 0a81059e2959b87798432fc10c9447ba276dc1a1 \u00b7 cygnet3/sp-client \u00b7 GitHub</a></p>\n<p>As for spending to sp address, it\u2019s indeed a bit more complicated but as long as you only bother about simple use cases I didn\u2019t think it was that bad. We use the output proprietary field to keep the recipient sp address and put a placeholder scriptpubkey (basically the pubkey computed from a NUMS) in the actual unsigned transaction, to allow for accurate fee calculation. The psbt can be modified, inputs added or whatever, up to the point you want to cement things down and compute the actual output keys for whatever is the current state of the transaction <a href=\"https://github.com/cygnet3/sp-client/blob/0a81059e2959b87798432fc10c9447ba276dc1a1/src/spclient.rs#L267\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">sp-client/src/spclient.rs at 0a81059e2959b87798432fc10c9447ba276dc1a1 \u00b7 cygnet3/sp-client \u00b7 GitHub</a></p>\n<p>This part could certainly be improved and made more efficient, but it worked quite well so far, we had a lot of issues but not with that.</p>\n<p>It\u2019s simpler in our use case though because we\u2019re making pure silent payments wallets, so we just assume that prevouts are silent payment taproot scripts and don\u2019t bother about ineligible inputs. We also assume that we own all prevouts for now.</p>\n<p>I think that since psbt already saves basically all relevant information about the prevout, discriminating between eligible or non eligible prevout will be easy. The 2nd problem is harder, as we could do something like the ECDH share you mentioned but I have no idea if that would be safe either. Probably something we should talk about with the secp256k1 guys, because I would be very disappointed not to be able to build a coinjoin wallet around silent payment.</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-05-19T17:32:48.113Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 16,
  "readers_count": 15,
  "score": 3.2,
  "yours": false,
  "topic_id": 877,
  "topic_slug": "bip352-psbt-support",
  "topic_title": "BIP352: PSBT support",
  "topic_html_title": "BIP352: PSBT support",
  "category_id": 12,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "FWIW we already wrote with cygnet some basic psbt workflow for donation wallet (I'm also using it in my wasm experiments). That's hacky and has limitations, but it already works so it can serve as a basis for further improvements.\n\nFor spending from sp outputs, I'm not quite sure what you mean with \n[quote=\"josibake, post:1, topic:877\"]\nThe spend public key is used to get the spend private key and the spend private key is tweaked with the `shared_secret_tweak` when signing.\n[/quote]\n\nbut basically we use the proprietary field of inputs that are spending a sp prevout to keep the tweak to the spend private key, and I think that's what you mean. \n\nWhen signing we pass along the spend private key and simply add the tweak to get the signing key, see https://github.com/cygnet3/sp-client/blob/0a81059e2959b87798432fc10c9447ba276dc1a1/src/spclient.rs#L684\n\nAs for spending to sp address, it's indeed a bit more complicated but as long as you only bother about simple use cases I didn't think it was that bad. We use the output proprietary field to keep the recipient sp address and put a placeholder scriptpubkey (basically the pubkey computed from a NUMS) in the actual unsigned transaction, to allow for accurate fee calculation. The psbt can be modified, inputs added or whatever, up to the point you want to cement things down and compute the actual output keys for whatever is the current state of the transaction https://github.com/cygnet3/sp-client/blob/0a81059e2959b87798432fc10c9447ba276dc1a1/src/spclient.rs#L267\n\nThis part could certainly be improved and made more efficient, but it worked quite well so far, we had a lot of issues but not with that.\n\nIt's simpler in our use case though because we're making pure silent payments wallets, so we just assume that prevouts are silent payment taproot scripts and don't bother about ineligible inputs. We also assume that we own all prevouts for now. \n\nI think that since psbt already saves basically all relevant information about the prevout, discriminating between eligible or non eligible prevout will be easy. The 2nd problem is harder, as we could do something like the ECDH share you mentioned but I have no idea if that would be safe either. Probably something we should talk about with the secp256k1 guys, because I would be very disappointed not to be able to build a coinjoin wallet around silent payment.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 375,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}