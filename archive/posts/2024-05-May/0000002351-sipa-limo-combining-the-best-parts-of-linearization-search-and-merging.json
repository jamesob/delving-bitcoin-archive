{
  "id": 2351,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png",
  "created_at": "2024-05-02T03:22:34.325Z",
  "cooked": "<p>In this follows a proof for Double LIMO. More concretely, it shows that in each iteration of the algorithm progress is made towards a linearization which is as good as the input, and as good as the <span class=\"math\">S_1</span> and <span class=\"math\">S_2</span> found in that same iteration.</p>\n<h2><a name=\"new-concepts-1\" class=\"anchor\" href=\"#new-concepts-1\"></a>New concepts</h2>\n<p>First two new concepts (set-linearizations, slope comparison), with associated definitions and theorems, are introduced that will help with analyzing Double LIMO. Then a variant of the gathering theorem is introduced and proven</p>\n<h3><a name=\"set-linearizations-2\" class=\"anchor\" href=\"#set-linearizations-2\"></a>Set linearizations</h3>\n<p><em><strong>Definition.</strong></em> A <strong>set-linearization</strong> is a list of non-overlapping sets of transactions whose prefixes are topological. The <strong>prefixes</strong> of a set-linearization <span class=\"math\">C = (c_1, c_2, \\ldots, c_n)</span> are the sets <span class=\"math\">(\\cup_{i=1}^k c_i)_{k=0}^n</span>. A chunking is a special case of a set-linearization. Set-linearizations do not require monotonically decreasing feerate. A normal linearization with every list element replaced by a singleton containing it always yields a valid set-linearization.</p>\n<p><em><strong>Definition.</strong></em> Every set-linearization <span class=\"math\">C</span> has a <strong>set-feerate diagram</strong> <span class=\"math\">\\operatorname{setdiag}(C)</span>, which is the real function through the cumulative <span class=\"math\">(\\operatorname{size}, \\operatorname{fee})</span> points of its prefixes. Note that unlike for normal linearizations, we do not implicitly \u201cchunkify\u201d for the diagram. So a set-feerate diagram is not necessarily a concave function.</p>\n<p><em><strong>Definition.</strong></em> Let <span class=\"math\">\\operatorname{chunksets}(C)</span> be a function from set-linearizations to set-linearizations, which repeatedly merges pairs of consecutive sets where the latter has a strictly higher feerate than the former, until no such pairs remain.</p>\n<p><em><strong>Definition.</strong></em> The <span class=\"math\">\\sim</span>, <span class=\"math\">\\gtrsim</span>, and <span class=\"math\">\\lesssim</span> operators are defined for set-linearizations as comparing their (unchunked) diagrams.</p>\n<p><em><strong>Theorem.</strong></em> For any set-linearization <span class=\"math\">C</span>, <span class=\"math\">\\operatorname{chunksets}(C) \\gtrsim C</span>.</p>\n<p><em><strong>Theorem.</strong></em> The diagram for <span class=\"math\">\\operatorname{chunksets}(C)</span> is the minimal concave function through the <span class=\"math\">(\\operatorname{size}, \\operatorname{fee})</span> points of every prefix of <span class=\"math\">C</span>.</p>\n<p><em><strong>Definition.</strong></em> Given a linearization <span class=\"math\">L</span>, a set-linearization <span class=\"math\">C</span> is <strong>compatible</strong> with <span class=\"math\">L</span> if every prefix of <span class=\"math\">C</span> is also a prefix of <span class=\"math\">L</span>.</p>\n<p><em><strong>Theorem.</strong></em> Given a linearization <span class=\"math\">L</span> and a compatible set-linearization <span class=\"math\">C</span>, then <span class=\"math\">\\operatorname{chunksets}(C)</span> is also compatible with <span class=\"math\">L</span>.</p>\n<p><em><strong>Theorem.</strong></em> Given a linearization <span class=\"math\">L</span> and a compatible set-linearization <span class=\"math\">C</span>, then the diagram of <span class=\"math\">C</span> is nowhere better than the (post-chunking) diagram of <span class=\"math\">L</span>.</p>\n<h3><a name=\"slope-algebra-3\" class=\"anchor\" href=\"#slope-algebra-3\"></a>Slope algebra</h3>\n<p>To simplify reasoning about points in the diagram and the feerates they correspond to:</p>\n<ul>\n<li>Define the function <span class=\"math\">\\operatorname{sfpair}(S)</span> for set <span class=\"math\">S</span> as the real vector <span class=\"math\">(\\operatorname{size}(S), \\operatorname{fee}(S))</span>.</li>\n<li>Define <span class=\"math\">\\operatorname{possize}(P)</span> where <span class=\"math\">P = (s, f)</span> as <span class=\"math\">s &gt; 0</span>.</li>\n<li>Define <span class=\"math\">(s_1, f_1) \\succeq (s_2, f_2)</span> as <span class=\"math\">f_1 s_2 \\geq f_2 s_1</span>, the \u201cslope comparison\u201d.</li>\n</ul>\n<p>If <span class=\"math\">\\operatorname{possize}(P_1)</span> and <span class=\"math\">\\operatorname{possize}(P_2)</span>, for <span class=\"math\">P_1 = (s_1, f_1)</span> and <span class=\"math\">P_2 = (s_2, f_2)</span>, then <span class=\"math\">P_1 \\succeq P_2 \\iff f_1 / s_1 \\geq f_2 / s_2</span>. Thus, <span class=\"math\">\\operatorname{sfpair}(S_1) \\succeq \\operatorname{sfpair}(S_2) \\iff \\operatorname{feerate}(S_1) \\geq \\operatorname{feerate}(S_2)</span>, and <span class=\"math\">\\succeq</span> can be thought of as a generalization of the feerate comparisons on <span class=\"math\">(\\operatorname{size}, \\operatorname{fee})</span> pairs, to situations where these coefficients do not necessarily correspond to a specific set of transactions, and sizes may even be negative or zero.</p>\n<p>The following rules apply:</p>\n<ul>\n<li><strong>Negation rule</strong>: <span class=\"math\">P_1 \\succeq P_2 \\iff P_2 \\succeq -P_1</span>.</li>\n<li><strong>Offset rule</strong>: <span class=\"math\">P_1 \\succeq P_2 \\iff P_1 + \\alpha P_2 \\succeq P_2 \\iff P_1 \\succeq P_2 + \\beta P_1</span> for real <span class=\"math\">\\alpha, \\beta</span>.</li>\n<li><strong>Transitivity</strong>: <span class=\"math\">P_1 \\succeq P_2 \\, \\land \\, P_2 \\succeq P_3 \\implies P_1 \\succeq P_3</span>, if <span class=\"math\">\\operatorname{possize}(P_i)</span> for <span class=\"math\">i = 1 \\ldots 3</span>.</li>\n<li><strong>Line rule</strong>: Geometrically, the point <span class=\"math\">P</span> lies to the left of the (infinite extension of) the line from <span class=\"math\">P_1</span> to <span class=\"math\">P_2</span> iff <span class=\"math\">P - P_1 \\succeq P_2 - P_1</span>. If <span class=\"math\">\\operatorname{possize}(P - P_1)</span> and <span class=\"math\">\\operatorname{possize}(P_2 - P_1)</span>, then <span class=\"math\">P - P_1 \\succeq P_2 - P_1</span> iff <span class=\"math\">P</span> lies above the line from <span class=\"math\">P_1</span> to <span class=\"math\">P_2</span>.</li>\n</ul>\n<h3><a name=\"the-set-gathering-theorem-4\" class=\"anchor\" href=\"#the-set-gathering-theorem-4\"></a>The set gathering theorem</h3>\n<p>This is a variation on <a href=\"https://delvingbitcoin.org/t/cluster-mempool-definitions-theory/202#transformations-on-linearizations-4\">the gathering theorem</a>, with the difference that it operates on set-linearizations rather than linearizations.</p>\n<p>Informally: moving a subset <span class=\"math\">S</span> of transactions to the front of a set-linearization <span class=\"math\">C</span>, and then chunking the result, will not worsen the diagram if the feerate of <span class=\"math\">S</span> is as good as every prefix of <span class=\"math\">C</span>, and as good as every prefix of <span class=\"math\">C</span> intersected with <span class=\"math\">S</span>.</p>\n<p><em><strong>Theorem.</strong></em> Given:</p>\n<ul>\n<li>A set-linearization <span class=\"math\">C = (c_1, c_2, \\ldots, c_n)</span></li>\n<li>A topologically-valid subset <span class=\"math\">S</span> of its transactions (<span class=\"math\">S \\subset (\\cup_{j=1}^n c_j)</span>) for which, ignoring conditions that involve the feerate of an empty set, it holds that:\n<ul>\n<li>(1) <span class=\"math\">\\operatorname{feerate}(S) \\geq \\operatorname{feerate}(\\cup_{i=1}^k c_i)</span> for all <span class=\"math\">k = 1 \\ldots n</span></li>\n<li>(2) <span class=\"math\">\\operatorname{feerate}(S) \\geq \\operatorname{feerate}(S \\cap (\\cup_{i=1}^k c_i))</span> for all <span class=\"math\">k = 1 \\ldots n</span>.</li>\n</ul>\n</li>\n</ul>\n<p>Then <span class=\"math\">\\operatorname{chunksets}(C') \\gtrsim C</span> where <span class=\"math\">C' = (S, c_1 \\setminus S, c_2 \\setminus S, \\ldots, c_n \\setminus S)</span>.</p>\n<p><em><strong>Proof.</strong></em></p>\n<p>Define:</p>\n<ul>\n<li><span class=\"math\">P_k</span> as <span class=\"math\">\\operatorname{sfpair}(\\cup_{i=1}^k c_i)</span>, the points making up the diagram of <span class=\"math\">C</span>.</li>\n<li><span class=\"math\">Q_k</span> as <span class=\"math\">\\operatorname{sfpair}(S \\cup (\\cup_{i=1}^k c_i))</span>, the points making up the diagram of <span class=\"math\">C'</span>, excluding <span class=\"math\">(0,0)</span>.</li>\n</ul>\n<p>Our input conditions can now be stated using vectors and slope comparisons as</p>\n<ul>\n<li>(1) <span class=\"math\">Q_0 \\succeq P_k</span> for <span class=\"math\">k=1 \\ldots n</span></li>\n<li>(2) <span class=\"math\">Q_0 \\succeq Q_0 + P_k - Q_k</span> for <span class=\"math\">k=1 \\ldots n</span>.</li>\n</ul>\n<p>To prove that the diagram of <span class=\"math\">\\operatorname{chunksets}(C')</span> is nowhere below the diagram of <span class=\"math\">C</span>, we will for every point of <span class=\"math\">C</span> show that a line between two points on <span class=\"math\">C'</span> exists that it lies on or below, as these lines form a lower bound for the concave function that is <span class=\"math\">\\operatorname{setdiag}(\\operatorname{chunksets}(C'))</span>.</p>\n<ul>\n<li>For <span class=\"math\">k = 1 \\ldots n</span>:\n<ul>\n<li>If <span class=\"math\">\\operatorname{possize}(P_k - Q_0)</span>:\n<ul>\n<li>(3) <span class=\"math\">Q_0 \\succeq P_k - Q_k</span> [offset rule with <span class=\"math\">\\beta=-1</span> on (2)]</li>\n<li>(4) <span class=\"math\">Q_k - P_k \\succeq Q_0</span> [negation rule on (3)]</li>\n<li>(5) <span class=\"math\">Q_0 \\succeq P_k - Q_0</span> [offset rule with <span class=\"math\">\\beta=-1</span> on (1)]</li>\n<li>(6) <span class=\"math\">Q_k - P_k \\succeq P_k - Q_0</span> [transitivity on (4) and (5)]</li>\n<li>(7) <span class=\"math\">Q_k - Q_0 \\succeq P_k - Q_0</span> [offset rule with <span class=\"math\">\\alpha=1</span> on (6)]</li>\n<li>(8) <span class=\"math\">P_k</span> lies on or below the line from <span class=\"math\">Q_0</span> to <span class=\"math\">Q_k</span> [line rule on (7)]</li>\n</ul>\n</li>\n<li>Otherwise (not <span class=\"math\">\\operatorname{possize}(P_k - Q_0)</span>):\n<ul>\n<li>(9) <span class=\"math\">Q_0 - P_0 \\succeq P_k - P_0</span> [subtracting <span class=\"math\">P_0 = (0, 0)</span> from both sides of (1)]</li>\n<li>(10) <span class=\"math\">P_k</span> lies on or below the line from <span class=\"math\">P_0</span> to <span class=\"math\">Q_0</span> [line rule on (9)]</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Thus, every point <span class=\"math\">P_k</span> of the diagram of <span class=\"math\">C</span> lies on or below either the line from <span class=\"math\">P_0</span> to <span class=\"math\">Q_0</span> (10) or the line from <span class=\"math\">Q_0</span> to <span class=\"math\">Q_k</span> (8). Since <span class=\"math\">P_0</span>, <span class=\"math\">Q_0</span>, and <span class=\"math\">Q_k</span> are all on <span class=\"math\">\\operatorname{setdiag}(C')</span>, this implies that <span class=\"math\">\\operatorname{chunksets}(C') \\gtrsim C</span>.</p>\n<p><em><strong>Corollary.</strong></em> The normal gathering theorem, under the condition that <span class=\"math\">L[S]</span> chunks to a single set, follows from the set gathering theorem, by applying it to <span class=\"math\">C = \\operatorname{chunking}(L)</span>, since the conditions follow from:</p>\n<ul>\n<li>(1) <span class=\"math\">S</span> having a higher feerate than <span class=\"math\">L</span>'s first chunk, which has a higher feerate than any other prefix of chunks</li>\n<li>(2) <span class=\"math\">L[S]</span> being a single chunk implies it has no higher-feerate prefix itself.</li>\n</ul>\n<p><em><strong>Corollary.</strong></em> The chunk reordering theorem follows from the set gathering theorem, by applying it to <span class=\"math\">C = \\operatorname{chunking}(L)</span>, since the conditions follow from:</p>\n<ul>\n<li>(1) Like above</li>\n<li>(2) <span class=\"math\">S \\subset c_1</span> implying all intersections between <span class=\"math\">S</span> and prefixes of <span class=\"math\">C</span> are identical.</li>\n</ul>\n<h2><a name=\"double-limo-5\" class=\"anchor\" href=\"#double-limo-5\"></a>Double LIMO</h2>\n<p>Define <span class=\"math\">\\operatorname{DoubleLIMO}_{f_1,f_2}(G, L)</span> for a graph <span class=\"math\">G</span> with existing linearization <span class=\"math\">L</span>, and two functions <span class=\"math\">f_1</span> and <span class=\"math\">f_2</span> that find high-feerate topologically-valid subsets of a given set of transactions as:</p>\n<ul>\n<li>If <span class=\"math\">L = ()</span>, return <span class=\"math\">()</span>.</li>\n<li>Otherwise:\n<ul>\n<li>Let <span class=\"math\">C = (c_1, c_2, \\ldots, c_n) = \\operatorname{chunking}(L)</span>.</li>\n<li>Let <span class=\"math\">S_1 = f_1(G)</span>.</li>\n<li>Let <span class=\"math\">S_2 = f_2(G)</span>.</li>\n<li>Let <span class=\"math\">S</span> be the highest-feerate among:\n<ul>\n<li><span class=\"math\">(\\cup_{i=1}^k c_i)_{k=1}^n</span>, the prefixes of <span class=\"math\">C</span></li>\n<li><span class=\"math\">(S_1 \\cap (\\cup_{i=1}^k c_i))_{k=1}^n</span>, the prefixes of <span class=\"math\">C</span> intersected with <span class=\"math\">S_1</span></li>\n<li><span class=\"math\">(S_2 \\cap (\\cup_{i=1}^k c_i))_{k=1}^n</span>, the prefixes of <span class=\"math\">C</span> intersected with <span class=\"math\">S_2</span></li>\n<li><span class=\"math\">(S_1 \\cap S_2 \\cap (\\cup_{i=1}^k c_i))_{k=1}^n</span>, the prefixes of <span class=\"math\">C</span> intersected with <span class=\"math\">S_1 \\cap S_2</span></li>\n</ul>\n</li>\n<li>Return <span class=\"math\">L[S] + \\operatorname{DoubleLIMO}_{f_1,f_2}(G \\setminus S, L[G \\setminus S])</span>.</li>\n</ul>\n</li>\n</ul>\n<p>This is equivalent to the description <a href=\"https://delvingbitcoin.org/t/limo-combining-the-best-parts-of-linearization-search-and-merging/825/6\">earlier in this thread</a>, except it only considers intersections with linearization prefixes that are aligned to the chunk boundaries of <span class=\"math\">L</span>. In every step, <span class=\"math\">\\operatorname{DoubleLIMO}</span> moves transactions to the front of the linearization, and then continues with what remains.</p>\n<p><em><strong>Theorem.</strong></em> The set of transactions <span class=\"math\">S</span> moved to the front by every step of <span class=\"math\">\\operatorname{DoubleLIMO}</span> is such that <em>some</em> linearization <span class=\"math\">L^\\ast</span> exists such that:</p>\n<ul>\n<li>(a) <span class=\"math\">L^\\ast</span> starts with <span class=\"math\">L[S]</span></li>\n<li>(b) <span class=\"math\">L^\\ast \\gtrsim L</span></li>\n<li>(c) <span class=\"math\">\\operatorname{diag}(L^\\ast)(\\operatorname{size}(f_1(G))) \\geq \\operatorname{fee}(f_1(G))</span></li>\n<li>(d) <span class=\"math\">\\operatorname{diag}(L^\\ast)(\\operatorname{size}(f_2(G))) \\geq \\operatorname{fee}(f_2(G))</span></li>\n</ul>\n<p>Note that there is no guarantee that <span class=\"math\">\\operatorname{DoubleLIMO}</span> overall actually finds this <span class=\"math\">L^\\ast</span>, because it depends on which <span class=\"math\">S_1</span> and <span class=\"math\">S_2</span> are returned by <span class=\"math\">f_1</span> and <span class=\"math\">f_2</span> in future iterations. However, in every iteration progress is made towards some <span class=\"math\">L^\\ast</span> satisfying these properties that exists during that individual iteration. In further iterations <span class=\"math\">L^\\ast</span> may be different, and progress will be made towards that one instead then (for better or worse).</p>\n<p><em><strong>Proof.</strong></em> To prove this, we will construct this <span class=\"math\">L^\\ast</span> for this one iteration explicitlly:</p>\n<ul>\n<li>Let <span class=\"math\">L_1 = L \\triangleleft S_1</span>.</li>\n<li>Let <span class=\"math\">L_2 = L \\triangleleft S_2</span>.</li>\n<li>Let <span class=\"math\">L^\\ast = \\operatorname{merge}(G, \\operatorname{merge}(G, L_1 \\triangleleft S, L_2 \\triangleleft S), L \\triangleleft S)</span></li>\n</ul>\n<p>This <span class=\"math\">L^\\ast</span> satisfies condition (a), starting with <span class=\"math\">L[S]</span>, as it is the merging of 3 linearizations which all start with <span class=\"math\">L[S]</span>.</p>\n<p><span class=\"math\">L^\\ast</span> also satisfies condition (b), <span class=\"math\">L^\\ast \\gtrsim L</span>, because:</p>\n<ul>\n<li>Let <span class=\"math\">L' = L \\triangleleft S</span></li>\n<li>Let <span class=\"math\">C' = (S, c_1 \\setminus S, c_2 \\setminus S, \\ldots, c_n \\setminus S)</span>.</li>\n<li>The set gathering theorem holds for set-linearization <span class=\"math\">C</span> and subset <span class=\"math\">S</span>, showing <span class=\"math\">\\operatorname{chunksets}(C') \\gtrsim C</span>, because:\n<ul>\n<li>Condition (1) follows from <span class=\"math\">\\operatorname{feerate}(S) \\geq \\operatorname{feerate}(c_1)</span>, and <span class=\"math\">c_1</span> has the highest feerate of any prefix of chunks.</li>\n<li>Condition (2) follows from the fact that for every candidate for <span class=\"math\">S</span> tried, its restriction <span class=\"math\">S \\cap (\\cup_{i=1}^k c_i)</span> for every <span class=\"math\">k</span> is tried as well. Thus, no <span class=\"math\">S \\cap (\\cup_{i=1}^k c_i)</span> can exist with feerate higher than <span class=\"math\">S</span>, as it would have been picked instead of <span class=\"math\">S</span>.</li>\n</ul>\n</li>\n<li><span class=\"math\">C</span> is the chunking for <span class=\"math\">L</span>, and <span class=\"math\">\\operatorname{chunksets}(C')</span> is compatible with <span class=\"math\">L'</span>, thus from <span class=\"math\">\\operatorname{chunksets}(C') \\gtrsim C</span> it follows that <span class=\"math\">L' \\gtrsim L</span>.</li>\n<li><span class=\"math\">L^\\ast</span> is a merging with <span class=\"math\">L'</span>, and thus <span class=\"math\">L^\\ast \\gtrsim L' \\gtrsim L</span>.</li>\n</ul>\n<p>To show it satisfies condition (c), <span class=\"math\">\\operatorname{diag}(L^\\ast)(\\operatorname{size}(S_1)) \\geq \\operatorname{fee}(S_1)</span> (and analogously, condition (d)):</p>\n<ul>\n<li>Let <span class=\"math\">C_1 = (S_1, L[G \\setminus S_1])</span>, a set-linearization whose diagram satisfies the relation in (c).</li>\n<li>Let <span class=\"math\">L'_1 = L_1 \\triangleleft S</span>.</li>\n<li>Let <span class=\"math\">C'_1 = (S, S_1 \\setminus S, G \\setminus (S \\cup S_1))</span>.</li>\n<li>The set gathering theorem holds for set-linearization <span class=\"math\">C_1</span> and subset <span class=\"math\">S</span>, showing <span class=\"math\">\\operatorname{chunksets}(C'_1) \\gtrsim C_1</span>, because:\n<ul>\n<li>Condition (1) follows from the fact that both prefixes of <span class=\"math\">C_1</span>, namely <span class=\"math\">S_1</span> and <span class=\"math\">G</span> in its entirety, are both candidates for <span class=\"math\">S</span>, thus the feerate of <span class=\"math\">S</span> must be at least as high as the better of those.</li>\n<li>Condition (2) follows from the fact that for every candidate for <span class=\"math\">S</span> tried, its intersection with all prefixes of <span class=\"math\">C_1</span> were tried too (effectively, its intersection with <span class=\"math\">S_1</span> as intersecting with <span class=\"math\">G</span> is the identity). Thus it cannot be that <span class=\"math\">(S_1 \\cap S)</span> has a higher feerate than <span class=\"math\">S</span>, as it would have been chosen instead of <span class=\"math\">S</span>.</li>\n</ul>\n</li>\n<li><span class=\"math\">\\operatorname{chunksets}(C'_1)</span> is compatible with <span class=\"math\">L'_1</span>, and thus from <span class=\"math\">\\operatorname{chunksets}(C'_1) \\gtrsim C_1</span> it follows that the diagram of <span class=\"math\">L'_1</span> also satisfies the relation in (c).</li>\n<li><span class=\"math\">L^\\ast</span> is a merging with <span class=\"math\">L'_1</span>, and thus <span class=\"math\">L^\\ast</span> also satisfies this property.</li>\n</ul>\n<p>It does not hurt to use the earlier form of Double LIMO, which considers all prefixes of <span class=\"math\">L[S_1]</span>, <span class=\"math\">L[S_2]</span> and <span class=\"math\">L[S_1 \\cap S_2]</span> rather than just the ones that align with chunks of <span class=\"math\">L</span>, as all the necessary properties are still held. More combinations can be tried too, as long as these include:</p>\n<ul>\n<li>The entire graph <span class=\"math\">G</span>.</li>\n<li>For every combination tried, also its intersection with the prefixes of the chunking of <span class=\"math\">L</span>.</li>\n<li>For every combination tried, also its intersection with <span class=\"math\">S_1</span>.</li>\n<li>For every combination tried, also its intersection with <span class=\"math\">S_2</span>.</li>\n</ul>",
  "post_number": 8,
  "post_type": 1,
  "updated_at": "2024-05-02T12:45:36.098Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 16.4,
  "yours": false,
  "topic_id": 825,
  "topic_slug": "limo-combining-the-best-parts-of-linearization-search-and-merging",
  "topic_title": "LIMO: combining the best parts of linearization search and merging",
  "topic_html_title": "LIMO: combining the best parts of linearization search and merging",
  "category_id": 8,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 5,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "In this follows a proof for Double LIMO. More concretely, it shows that in each iteration of the algorithm progress is made towards a linearization which is as good as the input, and as good as the $S_1$ and $S_2$ found in that same iteration.\n\n## New concepts\n\nFirst two new concepts (set-linearizations, slope comparison), with associated definitions and theorems, are introduced that will help with analyzing Double LIMO. Then a variant of the gathering theorem is introduced and proven\n\n### Set linearizations\n\n***Definition.*** A **set-linearization** is a list of non-overlapping sets of transactions whose prefixes are topological. The **prefixes** of a set-linearization $C = (c_1, c_2, \\ldots, c_n)$ are the sets $(\\cup_{i=1}^k c_i)_{k=0}^n$. A chunking is a special case of a set-linearization. Set-linearizations do not require monotonically decreasing feerate. A normal linearization with every list element replaced by a singleton containing it always yields a valid set-linearization.\n\n***Definition.*** Every set-linearization $C$ has a **set-feerate diagram** $\\operatorname{setdiag}(C)$, which is the real function through the cumulative $(\\operatorname{size}, \\operatorname{fee})$ points of its prefixes. Note that unlike for normal linearizations, we do not implicitly \"chunkify\" for the diagram. So a set-feerate diagram is not necessarily a concave function.\n\n***Definition.*** Let $\\operatorname{chunksets}(C)$ be a function from set-linearizations to set-linearizations, which repeatedly merges pairs of consecutive sets where the latter has a strictly higher feerate than the former, until no such pairs remain.\n\n***Definition.*** The $\\sim$, $\\gtrsim$, and $\\lesssim$ operators are defined for set-linearizations as comparing their (unchunked) diagrams.\n\n***Theorem.*** For any set-linearization $C$, $\\operatorname{chunksets}(C) \\gtrsim C$.\n\n***Theorem.*** The diagram for $\\operatorname{chunksets}(C)$ is the minimal concave function through the $(\\operatorname{size}, \\operatorname{fee})$ points of every prefix of $C$.\n\n***Definition.*** Given a linearization $L$, a set-linearization $C$ is **compatible** with $L$ if every prefix of $C$ is also a prefix of $L$.\n\n***Theorem.*** Given a linearization $L$ and a compatible set-linearization $C$, then $\\operatorname{chunksets}(C)$ is also compatible with $L$.\n\n***Theorem.*** Given a linearization $L$ and a compatible set-linearization $C$, then the diagram of $C$ is nowhere better than the (post-chunking) diagram of $L$.\n\n### Slope algebra\n\nTo simplify reasoning about points in the diagram and the feerates they correspond to:\n* Define the function $\\operatorname{sfpair}(S)$ for set $S$ as the real vector $(\\operatorname{size}(S), \\operatorname{fee}(S))$.\n* Define $\\operatorname{possize}(P)$ where $P = (s, f)$ as $s > 0$.\n* Define $(s_1, f_1) \\succeq (s_2, f_2)$ as $f_1 s_2 \\geq f_2 s_1$, the \"slope comparison\".\n\nIf $\\operatorname{possize}(P_1)$ and $\\operatorname{possize}(P_2)$, for $P_1 = (s_1, f_1)$ and $P_2 = (s_2, f_2)$, then $P_1 \\succeq P_2 \\iff f_1 / s_1 \\geq f_2 / s_2$. Thus, $\\operatorname{sfpair}(S_1) \\succeq \\operatorname{sfpair}(S_2) \\iff \\operatorname{feerate}(S_1) \\geq \\operatorname{feerate}(S_2)$, and $\\succeq$ can be thought of as a generalization of the feerate comparisons on $(\\operatorname{size}, \\operatorname{fee})$ pairs, to situations where these coefficients do not necessarily correspond to a specific set of transactions, and sizes may even be negative or zero.\n\nThe following rules apply:\n* **Negation rule**: $P_1 \\succeq P_2 \\iff P_2 \\succeq -P_1$.\n* **Offset rule**: $P_1 \\succeq P_2 \\iff P_1 + \\alpha P_2 \\succeq P_2 \\iff P_1 \\succeq P_2 + \\beta P_1$ for real $\\alpha, \\beta$.\n* **Transitivity**: $P_1 \\succeq P_2 \\, \\land \\, P_2 \\succeq P_3 \\implies P_1 \\succeq P_3$, if $\\operatorname{possize}(P_i)$ for $i = 1 \\ldots 3$.\n* **Line rule**: Geometrically, the point $P$ lies to the left of the (infinite extension of) the line from $P_1$ to $P_2$ iff $P - P_1 \\succeq P_2 - P_1$. If $\\operatorname{possize}(P - P_1)$ and $\\operatorname{possize}(P_2 - P_1)$, then $P - P_1 \\succeq P_2 - P_1$ iff $P$ lies above the line from $P_1$ to $P_2$.\n\n### The set gathering theorem\n\nThis is a variation on [the gathering theorem](https://delvingbitcoin.org/t/cluster-mempool-definitions-theory/202#transformations-on-linearizations-4), with the difference that it operates on set-linearizations rather than linearizations.\n \nInformally: moving a subset $S$ of transactions to the front of a set-linearization $C$, and then chunking the result, will not worsen the diagram if the feerate of $S$ is as good as every prefix of $C$, and as good as every prefix of $C$ intersected with $S$.\n\n***Theorem.*** Given:\n* A set-linearization $C = (c_1, c_2, \\ldots, c_n)$\n* A topologically-valid subset $S$ of its transactions ($S \\subset (\\cup_{j=1}^n c_j)$) for which, ignoring conditions that involve the feerate of an empty set, it holds that:\n  * (1) $\\operatorname{feerate}(S) \\geq \\operatorname{feerate}(\\cup_{i=1}^k c_i)$ for all $k = 1 \\ldots n$\n  * (2) $\\operatorname{feerate}(S) \\geq \\operatorname{feerate}(S \\cap (\\cup_{i=1}^k c_i))$ for all $k = 1 \\ldots n$.\n\nThen $\\operatorname{chunksets}(C') \\gtrsim C$ where $C' = (S, c_1 \\setminus S, c_2 \\setminus S, \\ldots, c_n \\setminus S)$.\n\n***Proof.***\n\nDefine:\n* $P_k$ as $\\operatorname{sfpair}(\\cup_{i=1}^k c_i)$, the points making up the diagram of $C$.\n* $Q_k$ as $\\operatorname{sfpair}(S \\cup (\\cup_{i=1}^k c_i))$, the points making up the diagram of $C'$, excluding $(0,0)$.\n\nOur input conditions can now be stated using vectors and slope comparisons as\n* (1) $Q_0 \\succeq P_k$ for $k=1 \\ldots n$\n* (2) $Q_0 \\succeq Q_0 + P_k - Q_k$ for $k=1 \\ldots n$.\n\nTo prove that the diagram of $\\operatorname{chunksets}(C')$ is nowhere below the diagram of $C$, we will for every point of $C$ show that a line between two points on $C'$ exists that it lies on or below, as these lines form a lower bound for the concave function that is $\\operatorname{setdiag}(\\operatorname{chunksets}(C'))$.\n\n* For $k = 1 \\ldots n$:\n  * If $\\operatorname{possize}(P_k - Q_0)$:\n    * (3) $Q_0 \\succeq P_k - Q_k$ [offset rule with $\\beta=-1$ on (2)]\n    * (4) $Q_k - P_k \\succeq Q_0$ [negation rule on (3)]\n    * (5) $Q_0 \\succeq P_k - Q_0$ [offset rule with $\\beta=-1$ on (1)]\n    * (6) $Q_k - P_k \\succeq P_k - Q_0$ [transitivity on (4) and (5)]\n    * (7) $Q_k - Q_0 \\succeq P_k - Q_0$ [offset rule with $\\alpha=1$ on (6)]\n    * (8) $P_k$ lies on or below the line from $Q_0$ to $Q_k$ [line rule on (7)]\n  * Otherwise (not $\\operatorname{possize}(P_k - Q_0)$):\n    * (9) $Q_0 - P_0 \\succeq P_k - P_0$ [subtracting $P_0 = (0, 0)$ from both sides of (1)]\n    * (10) $P_k$ lies on or below the line from $P_0$ to $Q_0$ [line rule on (9)]\n\nThus, every point $P_k$ of the diagram of $C$ lies on or below either the line from $P_0$ to $Q_0$ (10) or the line from $Q_0$ to $Q_k$ (8). Since $P_0$, $Q_0$, and $Q_k$ are all on $\\operatorname{setdiag}(C')$, this implies that $\\operatorname{chunksets}(C') \\gtrsim C$.\n\n***Corollary.*** The normal gathering theorem, under the condition that $L[S]$ chunks to a single set, follows from the set gathering theorem, by applying it to $C = \\operatorname{chunking}(L)$, since the conditions follow from:\n* (1) $S$ having a higher feerate than $L$'s first chunk, which has a higher feerate than any other prefix of chunks\n* (2) $L[S]$ being a single chunk implies it has no higher-feerate prefix itself.\n\n***Corollary.*** The chunk reordering theorem follows from the set gathering theorem, by applying it to $C = \\operatorname{chunking}(L)$, since the conditions follow from:\n* (1) Like above\n* (2) $S \\subset c_1$ implying all intersections between $S$ and prefixes of $C$ are identical.\n\n## Double LIMO\n\nDefine $\\operatorname{DoubleLIMO}_{f_1,f_2}(G, L)$ for a graph $G$ with existing linearization $L$, and two functions $f_1$ and $f_2$ that find high-feerate topologically-valid subsets of a given set of transactions as:\n* If $L = ()$, return $()$.\n* Otherwise:\n  * Let $C = (c_1, c_2, \\ldots, c_n) = \\operatorname{chunking}(L)$.\n  * Let $S_1 = f_1(G)$.\n  * Let $S_2 = f_2(G)$.\n  * Let $S$ be the highest-feerate among:\n    * $(\\cup_{i=1}^k c_i)_{k=1}^n$, the prefixes of $C$\n    * $(S_1 \\cap (\\cup_{i=1}^k c_i))_{k=1}^n$, the prefixes of $C$ intersected with $S_1$\n    * $(S_2 \\cap (\\cup_{i=1}^k c_i))_{k=1}^n$, the prefixes of $C$ intersected with $S_2$\n    * $(S_1 \\cap S_2 \\cap (\\cup_{i=1}^k c_i))_{k=1}^n$, the prefixes of $C$ intersected with $S_1 \\cap S_2$\n  * Return $L[S] + \\operatorname{DoubleLIMO}_{f_1,f_2}(G \\setminus S, L[G \\setminus S])$.\n\nThis is equivalent to the description [earlier in this thread](https://delvingbitcoin.org/t/limo-combining-the-best-parts-of-linearization-search-and-merging/825/6), except it only considers intersections with linearization prefixes that are aligned to the chunk boundaries of $L$. In every step, $\\operatorname{DoubleLIMO}$ moves transactions to the front of the linearization, and then continues with what remains.\n\n***Theorem.*** The set of transactions $S$ moved to the front by every step of $\\operatorname{DoubleLIMO}$ is such that *some* linearization $L^\\ast$ exists such that:\n* (a) $L^\\ast$ starts with $L[S]$\n* (b) $L^\\ast \\gtrsim L$\n* (c) $\\operatorname{diag}(L^\\ast)(\\operatorname{size}(f_1(G))) \\geq \\operatorname{fee}(f_1(G))$\n* (d) $\\operatorname{diag}(L^\\ast)(\\operatorname{size}(f_2(G))) \\geq \\operatorname{fee}(f_2(G))$\n\nNote that there is no guarantee that $\\operatorname{DoubleLIMO}$ overall actually finds this $L^\\ast$, because it depends on which $S_1$ and $S_2$ are returned by $f_1$ and $f_2$ in future iterations. However, in every iteration progress is made towards some $L^\\ast$ satisfying these properties that exists during that individual iteration. In further iterations $L^\\ast$ may be different, and progress will be made towards that one instead then (for better or worse).\n\n***Proof.*** To prove this, we will construct this $L^\\ast$ for this one iteration explicitlly:\n* Let $L_1 = L \\triangleleft S_1$.\n* Let $L_2 = L \\triangleleft S_2$.\n* Let $L^\\ast = \\operatorname{merge}(G, \\operatorname{merge}(G, L_1 \\triangleleft S, L_2 \\triangleleft S), L \\triangleleft S)$\n\nThis $L^\\ast$ satisfies condition (a), starting with $L[S]$, as it is the merging of 3 linearizations which all start with $L[S]$.\n\n$L^\\ast$ also satisfies condition (b), $L^\\ast \\gtrsim L$, because:\n* Let $L' = L \\triangleleft S$\n* Let $C' = (S, c_1 \\setminus S, c_2 \\setminus S, \\ldots, c_n \\setminus S)$.\n* The set gathering theorem holds for set-linearization $C$ and subset $S$, showing $\\operatorname{chunksets}(C') \\gtrsim C$, because:\n  * Condition (1) follows from $\\operatorname{feerate}(S) \\geq \\operatorname{feerate}(c_1)$, and $c_1$ has the highest feerate of any prefix of chunks.\n  * Condition (2) follows from the fact that for every candidate for $S$ tried, its restriction $S \\cap (\\cup_{i=1}^k c_i)$ for every $k$ is tried as well. Thus, no $S \\cap (\\cup_{i=1}^k c_i)$ can exist with feerate higher than $S$, as it would have been picked instead of $S$.\n* $C$ is the chunking for $L$, and $\\operatorname{chunksets}(C')$ is compatible with $L'$, thus from $\\operatorname{chunksets}(C') \\gtrsim C$ it follows that $L' \\gtrsim L$.\n* $L^\\ast$ is a merging with $L'$, and thus $L^\\ast \\gtrsim L' \\gtrsim L$.\n\nTo show it satisfies condition (c), $\\operatorname{diag}(L^\\ast)(\\operatorname{size}(S_1)) \\geq \\operatorname{fee}(S_1)$ (and analogously, condition (d)):\n* Let $C_1 = (S_1, L[G \\setminus S_1])$, a set-linearization whose diagram satisfies the relation in (c).\n* Let $L'_1 = L_1 \\triangleleft S$.\n* Let $C'_1 = (S, S_1 \\setminus S, G \\setminus (S \\cup S_1))$.\n* The set gathering theorem holds for set-linearization $C_1$ and subset $S$, showing $\\operatorname{chunksets}(C'_1) \\gtrsim C_1$, because:\n  * Condition (1) follows from the fact that both prefixes of $C_1$, namely $S_1$ and $G$ in its entirety, are both candidates for $S$, thus the feerate of $S$ must be at least as high as the better of those.\n  * Condition (2) follows from the fact that for every candidate for $S$ tried, its intersection with all prefixes of $C_1$ were tried too (effectively, its intersection with $S_1$ as intersecting with $G$ is the identity). Thus it cannot be that $(S_1 \\cap S)$ has a higher feerate than $S$, as it would have been chosen instead of $S$.\n* $\\operatorname{chunksets}(C'_1)$ is compatible with $L'_1$, and thus from $\\operatorname{chunksets}(C'_1) \\gtrsim C_1$ it follows that the diagram of $L'_1$ also satisfies the relation in (c).\n* $L^\\ast$ is a merging with $L'_1$, and thus $L^\\ast$ also satisfies this property.\n\nIt does not hurt to use the earlier form of Double LIMO, which considers all prefixes of $L[S_1]$, $L[S_2]$ and $L[S_1 \\cap S_2]$ rather than just the ones that align with chunks of $L$, as all the necessary properties are still held. More combinations can be tried too, as long as these include:\n* The entire graph $G$.\n* For every combination tried, also its intersection with the prefixes of the chunking of $L$.\n* For every combination tried, also its intersection with $S_1$.\n* For every combination tried, also its intersection with $S_2$.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "rocket",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}