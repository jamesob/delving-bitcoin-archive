{
  "id": 2360,
  "name": "Stacie Waleyko",
  "username": "satsie",
  "avatar_template": "/user_avatar/delvingbitcoin.org/satsie/{size}/546_2.png",
  "created_at": "2024-05-04T02:52:20.292Z",
  "cooked": "<p>Right now the most common way to sign general messages is still with a private key that corresponds to a legacy P2PKH address. Many hardware and software projects have implemented this including Ledger, Trezor, Coldcard, and Sparrow, as well as a few multisig companies. One reason why they are so useful is they help users test that the hardware controlling their keys has not succumbed to bit rot.</p>\n<p>This technique for message signing comes from Bitcoin Core code that Satoshi wrote (see <code>src/util/message.cpp</code> [<a href=\"https://github.com/bitcoin/bitcoin/blob/v27.0/src/util/message.cpp\" rel=\"noopener nofollow ugc\">link</a>]). This was created before the BIP process, so the best technical documentation I have found, aside from the actual implementation, is <a href=\"https://en.bitcoin.it/wiki/Message_signing\" rel=\"noopener nofollow ugc\">this page</a> on the Bitcoin Wiki.</p>\n<p>While comprehensive, the Bitcoin Wiki page doesn\u2019t make some very important technical details as obvious as they should be. Examples include:</p>\n<ul>\n<li>The \u201cBitcoin Signed Message:\\n\u201d magic bytes. I think this is alluded to in the <a href=\"https://en.bitcoin.it/wiki/Message_signing#Displaying_signed_messages\" rel=\"noopener nofollow ugc\">Displaying signed messages</a> section. But the actual magic bytes are never stated on the page.</li>\n<li>The double hashing that is performed on each message. See <a href=\"https://github.com/bitcoin/bitcoin/blob/v27.0/src/hash.h#L111\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">bitcoin/src/hash.h at v27.0 \u00b7 bitcoin/bitcoin \u00b7 GitHub</a></li>\n</ul>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/1X/5dcfe15122bc1648cf117b7143619f178a835a8a.png\" data-download-href=\"https://delvingbitcoin.org/uploads/default/5dcfe15122bc1648cf117b7143619f178a835a8a\" title=\"\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/1X/5dcfe15122bc1648cf117b7143619f178a835a8a_2_624x148.png\" alt=\"\" data-base62-sha1=\"dnTMJ1B6hT9wQ0m41eU8ToHCyEi\" width=\"624\" height=\"148\" role=\"presentation\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/1X/5dcfe15122bc1648cf117b7143619f178a835a8a_2_624x148.png, https://delvingbitcoin.org/uploads/default/original/1X/5dcfe15122bc1648cf117b7143619f178a835a8a.png 1.5x, https://delvingbitcoin.org/uploads/default/original/1X/5dcfe15122bc1648cf117b7143619f178a835a8a.png 2x\" data-dominant-color=\"232423\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\"></span><span class=\"informations\">827\u00d7196 22.3 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>This wiki page also covers the rules for the signature header byte (see <code>src/key.cpp::SignCompact()</code>) but I found <a href=\"https://bitcoin.stackexchange.com/questions/83035/how-to-determine-first-byte-recovery-id-for-signatures-message-signing\" rel=\"noopener nofollow ugc\">this post</a> on Bitcoin Stack Exchange did a much better job explaining this tricky part.</p>\n<h2><a name=\"related-work-message-signing-in-the-wild-1\" class=\"anchor\" href=\"#related-work-message-signing-in-the-wild-1\"></a>Related work &amp; message signing in the wild</h2>\n<p>There has been lots of good work to address message signing for other address types, including BIP-137, <a href=\"https://notatether.com/notabips/bip-notatether-messageverify/\" rel=\"noopener nofollow ugc\">BIP-notatether-messageverify</a>, and BIP-322, but I have yet to find a single reliable source of documentation on the \u201cSatoshi format\u201d of message signing described above.</p>\n<p>This baffles me because there are plenty of projects that have implemented this. Apart from the examples listed earlier, we also have things like:</p>\n<ul>\n<li><a href=\"https://github.com/shadowy-pycoder/bitcoin_message_tool\" rel=\"noopener nofollow ugc\">Bitcoin Message Tool</a> [January 2023, likely built on <a href=\"https://github.com/stequald/bitcoin-sign-message/blob/b5e8b478713fdbb8d65e6cd1aeff8b2d5545ff91/signmessage.py#L271\" rel=\"noopener nofollow ugc\">this project</a> and <a href=\"https://github.com/nanotube/supybot-bitcoin-marketmonitor/blob/master/GPG/local/bitcoinsig.py\" rel=\"noopener nofollow ugc\">this one</a>]</li>\n<li><a href=\"https://checkmsg.org/\" rel=\"noopener nofollow ugc\">https://checkmsg.org/</a> [another verification tool, this time from CoinKite]</li>\n</ul>\n<p>It seems like plenty of people know how to do this, so either I\u2019m bad at reading the material we have today, or those that have come before me have spent a substantial amount of time and effort figuring it out. Can someone help me tease apart the information I have been able to gather here? Is the \u201cSatoshi format\u201d of message signing fully documented anywhere other than the code?</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-05-04T02:57:32.995Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 4,
  "reads": 9,
  "readers_count": 8,
  "score": 66.8,
  "yours": false,
  "topic_id": 850,
  "topic_slug": "satoshi-style-message-signing",
  "topic_title": "Satoshi Style Message Signing",
  "topic_html_title": "Satoshi Style Message Signing",
  "category_id": 8,
  "display_username": "Stacie Waleyko",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Right now the most common way to sign general messages is still with a private key that corresponds to a legacy P2PKH address. Many hardware and software projects have implemented this including Ledger, Trezor, Coldcard, and Sparrow, as well as a few multisig companies. One reason why they are so useful is they help users test that the hardware controlling their keys has not succumbed to bit rot.\n\nThis technique for message signing comes from Bitcoin Core code that Satoshi wrote (see `src/util/message.cpp` [[link](https://github.com/bitcoin/bitcoin/blob/v27.0/src/util/message.cpp)]). This was created before the BIP process, so the best technical documentation I have found, aside from the actual implementation, is [this page](https://en.bitcoin.it/wiki/Message_signing) on the Bitcoin Wiki.\n\nWhile comprehensive, the Bitcoin Wiki page doesn\u2019t make some very important technical details as obvious as they should be. Examples include:\n\n* The \u201cBitcoin Signed Message:\\n\u201d magic bytes. I think this is alluded to in the [Displaying signed messages](https://en.bitcoin.it/wiki/Message_signing#Displaying_signed_messages) section. But the actual magic bytes are never stated on the page.\n* The double hashing that is performed on each message. See https://github.com/bitcoin/bitcoin/blob/v27.0/src/hash.h#L111 \n\n![|624x148](upload://dnTMJ1B6hT9wQ0m41eU8ToHCyEi.png)\n\nThis wiki page also covers the rules for the signature header byte (see `src/key.cpp::SignCompact()`) but I found [this post](https://bitcoin.stackexchange.com/questions/83035/how-to-determine-first-byte-recovery-id-for-signatures-message-signing) on Bitcoin Stack Exchange did a much better job explaining this tricky part.\n\n## Related work & message signing in the wild\n\nThere has been lots of good work to address message signing for other address types, including BIP-137, [BIP-notatether-messageverify](https://notatether.com/notabips/bip-notatether-messageverify/), and BIP-322, but I have yet to find a single reliable source of documentation on the \u201cSatoshi format\u201d of message signing described above.\n\nThis baffles me because there are plenty of projects that have implemented this. Apart from the examples listed earlier, we also have things like:\n\n* [Bitcoin Message Tool](https://github.com/shadowy-pycoder/bitcoin_message_tool) [January 2023, likely built on [this project](https://github.com/stequald/bitcoin-sign-message/blob/b5e8b478713fdbb8d65e6cd1aeff8b2d5545ff91/signmessage.py#L271) and [this one](https://github.com/nanotube/supybot-bitcoin-marketmonitor/blob/master/GPG/local/bitcoinsig.py)]\n* https://checkmsg.org/ [another verification tool, this time from CoinKite]\n\nIt seems like plenty of people know how to do this, so either I\u2019m bad at reading the material we have today, or those that have come before me have spent a substantial amount of time and effort figuring it out. Can someone help me tease apart the information I have been able to gather here? Is the \"Satoshi format\" of message signing fully documented anywhere other than the code?",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 423,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "downloaded local copies of images",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}