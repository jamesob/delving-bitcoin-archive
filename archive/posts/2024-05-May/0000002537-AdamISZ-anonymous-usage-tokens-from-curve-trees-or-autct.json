{
  "id": 2537,
  "name": "Adam Gibson",
  "username": "AdamISZ",
  "avatar_template": "/user_avatar/delvingbitcoin.org/adamisz/{size}/418_2.png",
  "created_at": "2024-05-26T16:10:44.577Z",
  "cooked": "<p>Sorry for long delay been on the road, but then also took a while to grok all this <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<blockquote>\n<p>Speaking of the key image generator, the above falls victim tor related-key attacks assuming the generator J is constant. This means people who create two outputs under a stealth address protocol (presumably such as Silent Payments) can then detect if those outputs are used in a protocol which requires publishing a linking tag. That\u2019s why Monero uses a per-output key image generator (which the linked work handles).</p>\n</blockquote>\n<p>Oh, that is interesting indeed. I didn\u2019t consider possible collaborative creation of keys in my protocol definition, and it doesn\u2019t surprise me that it could leak something, but let me write out what I think you mean, let me know if there\u2019s something else. Here I\u2019m going to crib from Silent Payments BIP though I know this is used elsewhere!</p>\n<p><span class=\"math\">O_1 = b_e G + H(m_1, b_a A)G</span></p>\n<p><span class=\"math\">O_2 = b_e G + H(m_2, b_a A)G</span></p>\n<p>where of course <span class=\"math\">b_a A = a B_a</span> and I mean \u201cscanning key\u201d for <span class=\"math\">b_a</span> and <span class=\"math\">A</span> for Alice (spender) input key (or equivalent) and I mean \u201cwhatever else you agree to dump in there\u201d for <span class=\"math\">m_1, m_2 \\ldots</span> . So the difference between linking tags in the first and the second case is: <span class=\"math\">\\left(H(m_1, a B_a) - H(m_2, a B_a)\\right) J</span> which of course the <em>sender</em> can find just as easily as the receiver, though not others.</p>\n<p>(btw after writing this I realised it was explained in the original Cryptonote paper, doh!)</p>\n<p>Per-output key image generator: I didn\u2019t originally get it, but after reading your paper, in particular Section 3.2, I believe I understand roughly how it works. Let me write it out and tell me if I get something wrong:</p>\n<p>So to start with, in your situation (Monero), you can start with <span class=\"math\">(O, I, C)</span> where <span class=\"math\">O</span> is output key, <span class=\"math\">I</span> is \u2018per output key image generator\u2019 and <span class=\"math\">C</span> is amount commitment, except <span class=\"math\">I</span> can be implicit since you use <span class=\"math\">I = \\textrm{HashToPoint}(O)</span>, i.e. that\u2019d be public from the blockchain.</p>\n<p>The membership proof part takes these tuples <span class=\"math\">(O,I,C)</span> as the leaves (rather than just a single key), so that:</p>\n<p>\u2026 for the spend authorization proof (I do like this \u201cmembership vs spend auth proof\u201d separation concept a lot), you can work with blinded versions of a particular tuple (so <span class=\"math\">\\tilde{O},\\tilde{I},\\tilde{C}</span>), and, just focusing on the key image, you can prove using a simple Sigma protocol approach that \u201cI give you <span class=\"math\">L, \\tilde{I}</span> and prove that <span class=\"math\">L=xI</span> and <span class=\"math\">\\tilde{I}</span> is a reblinding of <span class=\"math\">I</span>\u201d.</p>\n<p>So I guess you\u2019d say, just remove the amount commitment part; one could use <span class=\"math\">(P, I)</span> tuples instead? (to be clear, <em>this</em> is specifically to remove related-key attacks on anonymity that apply in a collaborative key construction scenario \u2026 but there\u2019s a lot more to your work and how it differs from bare bones Curve Trees, than that!).</p>",
  "post_number": 10,
  "post_type": 1,
  "updated_at": "2024-05-26T16:10:44.577Z",
  "reply_count": 0,
  "reply_to_post_number": 7,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 1.8,
  "yours": false,
  "topic_id": 862,
  "topic_slug": "anonymous-usage-tokens-from-curve-trees-or-autct",
  "topic_title": "Anonymous usage tokens from curve trees or autct",
  "topic_html_title": "Anonymous usage tokens from curve trees or autct",
  "category_id": 7,
  "display_username": "Adam Gibson",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "kayabaNerve",
    "name": "Luke Parker",
    "avatar_template": "/user_avatar/delvingbitcoin.org/kayabanerve/{size}/577_2.png"
  },
  "bookmarked": false,
  "raw": "Sorry for long delay been on the road, but then also took a while to grok all this :slight_smile: \n\n> Speaking of the key image generator, the above falls victim tor related-key attacks assuming the generator J is constant. This means people who create two outputs under a stealth address protocol (presumably such as Silent Payments) can then detect if those outputs are used in a protocol which requires publishing a linking tag. That\u2019s why Monero uses a per-output key image generator (which the linked work handles).\n\nOh, that is interesting indeed. I didn't consider possible collaborative creation of keys in my protocol definition, and it doesn't surprise me that it could leak something, but let me write out what I think you mean, let me know if there's something else. Here I'm going to crib from Silent Payments BIP though I know this is used elsewhere!\n\n$O_1 = b_e G + H(m_1, b_a A)G$ \n\n$O_2 = b_e G + H(m_2, b_a A)G$\n\nwhere of course $b_a A = a B_a$ and I mean \"scanning key\" for $b_a$ and $A$ for Alice (spender) input key (or equivalent) and I mean \"whatever else you agree to dump in there\" for $m_1, m_2 \\ldots$ . So the difference between linking tags in the first and the second case is: $\\left(H(m_1, a B_a) - H(m_2, a B_a)\\right) J$ which of course the *sender* can find just as easily as the receiver, though not others.\n\n(btw after writing this I realised it was explained in the original Cryptonote paper, doh!)\n\nPer-output key image generator: I didn't originally get it, but after reading your paper, in particular Section 3.2, I believe I understand roughly how it works. Let me write it out and tell me if I get something wrong:\n\nSo to start with, in your situation (Monero), you can start with $(O, I, C)$ where $O$ is output key, $I$ is 'per output key image generator' and $C$ is amount commitment, except $I$ can be implicit since you use $I = \\textrm{HashToPoint}(O)$, i.e. that'd be public from the blockchain.\n\nThe membership proof part takes these tuples $(O,I,C)$ as the leaves (rather than just a single key), so that:\n\n... for the spend authorization proof (I do like this \"membership vs spend auth proof\" separation concept a lot), you can work with blinded versions of a particular tuple (so $\\tilde{O},\\tilde{I},\\tilde{C}$), and, just focusing on the key image, you can prove using a simple Sigma protocol approach that \"I give you $L, \\tilde{I}$ and prove that $L=xI$ and $\\tilde{I}$ is a reblinding of $I$\".\n\nSo I guess you'd say, just remove the amount commitment part; one could use $(P, I)$ tuples instead? (to be clear, *this* is specifically to remove related-key attacks on anonymity that apply in a collaborative key construction scenario ... but there's a lot more to your work and how it differs from bare bones Curve Trees, than that!).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 343,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}