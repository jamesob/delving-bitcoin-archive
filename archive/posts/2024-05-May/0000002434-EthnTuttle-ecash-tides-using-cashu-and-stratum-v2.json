{
  "id": 2434,
  "name": "Ethan Tuttle",
  "username": "EthnTuttle",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ethntuttle/{size}/26_2.png",
  "created_at": "2024-05-17T02:14:39.285Z",
  "cooked": "<blockquote>\n<p>Is it correct to assume that you\u2019re measuring the value of a blind signature by the target of the submitted PoW share and get that signed by the mint?</p>\n</blockquote>\n<p>Yes. A valid target difficulty for a share to be accepted is generally a threshold below the network difficulty. With various machines of different hash rates, a pool uses a variety of target PoW difficulties to prevent DoSing itself. Giving the same target to a S9 and a S21 would either result in the S9 never finding that target in the given timeframe or the S21 inundating the pool with shares. Given the possibility of small payouts, it seemed appropriate to include hash providers with less robust machines.</p>\n<blockquote>\n<p>Am I right to assume that when the user wants to convert the <code>eShares</code> to satoshis, the mint would look take the target values of the eShares and convert them to satoshis?</p>\n</blockquote>\n<p>Yes. I believe the TIDES documentation cover the weighting of shares as it relates to the <code>share_log_window</code> but accounting specifics would be left to the implementation.\nSince a blinded signature corresponds to a target difficulty, and TIDES uses the target difficulty as a weighting for valuation within a share_log_window, a <code>eShare</code> would not be a 1:1 for satoshis.</p>",
  "post_number": 11,
  "post_type": 1,
  "updated_at": "2024-05-17T02:14:39.285Z",
  "reply_count": 1,
  "reply_to_post_number": 8,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 13,
  "readers_count": 12,
  "score": 7.6,
  "yours": false,
  "topic_id": 870,
  "topic_slug": "ecash-tides-using-cashu-and-stratum-v2",
  "topic_title": "Ecash TIDES using Cashu and Stratum v2",
  "topic_html_title": "Ecash TIDES using Cashu and Stratum v2",
  "category_id": 8,
  "display_username": "Ethan Tuttle",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "calle",
    "name": "",
    "avatar_template": "/user_avatar/delvingbitcoin.org/calle/{size}/84_2.png"
  },
  "bookmarked": false,
  "raw": "> Is it correct to assume that you\u2019re measuring the value of a blind signature by the target of the submitted PoW share and get that signed by the mint?\n\nYes. A valid target difficulty for a share to be accepted is generally a threshold below the network difficulty. With various machines of different hash rates, a pool uses a variety of target PoW difficulties to prevent DoSing itself. Giving the same target to a S9 and a S21 would either result in the S9 never finding that target in the given timeframe or the S21 inundating the pool with shares. Given the possibility of small payouts, it seemed appropriate to include hash providers with less robust machines.\n\n> Am I right to assume that when the user wants to convert the `eShares` to satoshis, the mint would look take the target values of the eShares and convert them to satoshis?\n\nYes. I believe the TIDES documentation cover the weighting of shares as it relates to the `share_log_window` but accounting specifics would be left to the implementation.\nSince a blinded signature corresponds to a target difficulty, and TIDES uses the target difficulty as a weighting for valuation within a share_log_window, a `eShare` would not be a 1:1 for satoshis.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 29,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}