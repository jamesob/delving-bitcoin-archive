{
  "id": 2378,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png",
  "created_at": "2024-05-06T18:52:40.602Z",
  "cooked": "<p>Given some of the insights from the <a href=\"https://delvingbitcoin.org/t/limo-combining-the-best-parts-of-linearization-search-and-merging/825/9\">LIMO</a> thread, I think there is a simpler way to formalize things. Here is an attempt with just sketches. If people are interested I can expand on it.</p>\n<p>The biggest changes are:</p>\n<ul>\n<li>Linearizations are generalized to include set-linearizations (now known as partial linearizations).</li>\n<li>Linearizations are represented differently, namely as a set of topological subsets, each one being a subset of the next one.</li>\n<li>The gathering theorem is replaced with a much simpler variant, and then used to prove a new \u201ccomposition\u201d theorem, which describes how given a set of topologically valid subsets one can produce a linearization that is as good as all of them. Merging and LIMO can be seen as variants of composition.</li>\n</ul>\n<h3><a name=\"graphs-unchanged-1\" class=\"anchor\" href=\"#graphs-unchanged-1\"></a>Graphs (unchanged):</h3>\n<ul>\n<li>Transactions graphs are defined as before: nodes that have a integer <span class=\"math\">\\operatorname{fee}</span> and a strictly positive <span class=\"math\">\\operatorname{size}</span>, and directed edges representing dependencies pointing from child to parent.</li>\n<li>The functions <span class=\"math\">\\operatorname{fee}</span>, <span class=\"math\">\\operatorname{size}</span>, and <span class=\"math\">\\operatorname{feerate}</span> are defined for sets of nodes as respectively the sum of the fees, the sum of the sizes, and the sum of the fees divided by the sum of the sizes.</li>\n<li>The ancestors and descendants of a set are defined as before: <span class=\"math\">\\operatorname{anc}_G(S)</span> is the transitive closure of <span class=\"math\">S</span> under the parent relation. Similarly, <span class=\"math\">\\operatorname{desc}_G(S)</span> is the transitive closure of <span class=\"math\">S</span> under the child relation.</li>\n<li>A subset <span class=\"math\">S</span> of the nodes of a graph <span class=\"math\">G</span> is said to be <strong>topological</strong> if <span class=\"math\">\\operatorname{anc}_G(S) = S</span>.</li>\n</ul>\n<h3><a name=\"linearizations-2\" class=\"anchor\" href=\"#linearizations-2\"></a>Linearizations</h3>\n<ul>\n<li>A <strong>linearization</strong> of a graph <span class=\"math\">G</span> is defined differently: it is a set of topological subsets of <span class=\"math\">G</span>, where each is either a subset or superset of every other, and which includes <span class=\"math\">\\varnothing</span> and <span class=\"math\">G</span> itself as elements.</li>\n<li>A linearization is said to be <strong>full</strong> (formerly: a linearization) if it contains a subset for each size from <span class=\"math\">0</span> to the size of the graph, inclusive. If not, a linearization is said to be <strong>partial</strong> (formerly: a set-linearization).</li>\n<li>A linearization <span class=\"math\">a</span> is said to be a <strong>generalization</strong> of linearization <span class=\"math\">b</span> if <span class=\"math\">a \\subseteq b</span>, and said to be a <strong>specialization</strong> of <span class=\"math\">b</span> if <span class=\"math\">a \\supseteq b</span>.</li>\n<li><strong>Full specialization theorem</strong>: every linearization has a full specialization. For any two <span class=\"math\">c_1 \\subset c_2 \\in L</span>, topologically sort <span class=\"math\">c_2 \\setminus c_1</span> and for each inlude a new subset, in order.</li>\n</ul>\n<h3><a name=\"preordering-of-linearizations-3\" class=\"anchor\" href=\"#preordering-of-linearizations-3\"></a>Preordering of linearizations</h3>\n<ul>\n<li>The diagram <span class=\"math\">\\operatorname{diag}_L</span> of a linearization <span class=\"math\">L</span> of graph <span class=\"math\">G</span> is the real function defined for all inputs <span class=\"math\">x \\in [0,\\operatorname{size}(G)]</span>: <span class=\"math\">\\operatorname{diag}_L(x)</span> is the maximum value of <span class=\"math\">\\operatorname{fee}(a) + (x - \\operatorname{size}(a))\\operatorname{feerate}(b \\setminus a)</span> over all <span class=\"math\">a</span> and <span class=\"math\">b</span> in <span class=\"math\">L</span> such that <span class=\"math\">\\operatorname{size}(a) \\leq x</span> and <span class=\"math\">\\operatorname{size}(b) \\geq x</span>. It is the minimal concave function through all the <span class=\"math\">(\\operatorname{size}(p), \\operatorname{fee}(p))_{p \\in L}</span> points.</li>\n<li>The <strong>chunking</strong> <span class=\"math\">\\operatorname{chunk}(L)</span> of a linearization <span class=\"math\">L</span> is the smallest generalization (subset) of <span class=\"math\">L</span> with the same diagram. It consists of those graph subsets whose size/fee pairs make up the vertices of the convex hull shape that the diagram has.</li>\n<li>A preorder <span class=\"math\">\\gtrsim</span> is defined between linearizations of the same graph <span class=\"math\">G</span> as: <span class=\"math\">L_1 \\gtrsim L_2</span> iff for all <span class=\"math\">x \\in [0,\\operatorname{size}(G)]</span> it holds that <span class=\"math\">\\operatorname{diag}_{L_1}(x) \\geq \\operatorname{diag}_{L_2}(x)</span>. As chunking does not change diagrams, <span class=\"math\">L_1 \\gtrsim L_2 \\iff \\operatorname{chunk}(L_1) \\gtrsim L_2 \\iff L_1 \\gtrsim \\operatorname{chunk}(L_2)</span>.</li>\n<li><strong>Specialization improvement theorem</strong>: if <span class=\"math\">L_1</span> is a specialization of <span class=\"math\">L_2</span>, then <span class=\"math\">L_1 \\gtrsim L_2</span>.</li>\n</ul>\n<h3><a name=\"improving-linearizations-4\" class=\"anchor\" href=\"#improving-linearizations-4\"></a>Improving linearizations</h3>\n<ul>\n<li><strong>Stripping theorem</strong>: given two linearizations <span class=\"math\">L_1</span> and <span class=\"math\">L_2</span> for a graph <span class=\"math\">G</span>, both of which have the same smallest non-empty element <span class=\"math\">s</span>. Let <span class=\"math\">L_1'</span> and <span class=\"math\">L_2'</span> be linearizations of <span class=\"math\">G \\setminus s</span> obtained by removing <span class=\"math\">s</span> from all elements of <span class=\"math\">L_1</span> resp. <span class=\"math\">L_2</span>. Then <span class=\"math\">L_1' \\gtrsim L_2' \\implies L_1 \\gtrsim L_2</span>.\n<ul>\n<li>Proof: Going from the diagrams of <span class=\"math\">L_1'</span> and <span class=\"math\">L_2'</span> to those of <span class=\"math\">L_1</span> and <span class=\"math\">L_2</span> is just shifting the convex hulls by <span class=\"math\">s</span>, and then adding a point <span class=\"math\">(0,0)</span> to both hulls.</li>\n</ul>\n</li>\n<li><strong>Simple gathering theorem</strong>: given topological subsets <span class=\"math\">s \\subseteq G</span> and <span class=\"math\">c \\subseteq G</span> such that <span class=\"math\">\\operatorname{feerate}(s) \\geq \\operatorname{feerate}(c)</span> (or <span class=\"math\">s = \\varnothing</span> or <span class=\"math\">c = \\varnothing</span>) and <span class=\"math\">\\operatorname{feerate}(s) \\geq \\operatorname{feerate}(s \\cap c)</span> (or <span class=\"math\">s \\cap c = \\varnothing)</span>, it holds that <span class=\"math\">\\{\\varnothing, s, c \\cup s, G\\} \\gtrsim \\{\\varnothing, c, G\\}</span>.\n<ul>\n<li>Proof: this is a simplification to 2 sets of the earlier <a href=\"https://delvingbitcoin.org/t/limo-combining-the-best-parts-of-linearization-search-and-merging/825/8#h-13-the-set-gathering-theorem-4\">set gathering theorem</a>, plus covering the case where <span class=\"math\">\\operatorname{feerate}(c) &lt; \\operatorname{feerate}(G)</span> which is trivial.</li>\n</ul>\n</li>\n<li><strong>Supreme subset theorem</strong>: given a set <span class=\"math\">C = \\{c_1, c_2, \\ldots, c_n\\}</span> of <span class=\"math\">c_i</span> that are all topological subsets of a non-empty graph <span class=\"math\">G</span>, there always exists a non-empty topological subset <span class=\"math\">s</span> of <span class=\"math\">G</span> such that <span class=\"math\">\\{\\varnothing, s, c_i \\cup s, G\\} \\gtrsim \\{\\varnothing, c_i, G\\}</span> for all <span class=\"math\">i = 1 \\ldots n</span>.\n<ul>\n<li>Proof: pick <span class=\"math\">s</span> to be the highest feerate non-empty intersection between any combination of <span class=\"math\">c_i</span>'s, plus <span class=\"math\">G</span>, and apply the simple gathering theorem (no intersection between <span class=\"math\">s</span> and <span class=\"math\">c_i</span> can have higher feerate than <span class=\"math\">s</span>, because that intersection would have been picked as <span class=\"math\">s</span> instead).</li>\n<li>Note that this is not necessarily the only set which satisfies the <span class=\"math\">\\{\\varnothing, s, c_i \\cup s, G\\} \\gtrsim \\{\\varnothing, c_i, G\\}</span> conditions, and others may be computationally cheaper to find.</li>\n</ul>\n</li>\n<li><strong>Composition algorithm</strong>: Define <span class=\"math\">\\operatorname{compose}(G, C)</span> for a graph <span class=\"math\">G</span> and a set of topologically valid subsets <span class=\"math\">C = \\{c_1, c_2, \\ldots, c_n\\}</span> for it as follows:\n<ul>\n<li>If <span class=\"math\">G = \\varnothing</span>, return <span class=\"math\">\\{\\varnothing\\}</span>, the only valid linearization for <span class=\"math\">G</span>.</li>\n<li>Otherwise, find a non-empty <span class=\"math\">s</span> such that <span class=\"math\">\\{\\varnothing, s, c_i \\cup s, G\\} \\gtrsim \\{\\varnothing, c_i, G\\}</span> for all <span class=\"math\">i</span>, which by the supreme subset theorem always exists. Let <span class=\"math\">C' = \\{c_1 \\setminus s, c_2 \\setminus s, \\ldots, c_n \\setminus s\\}</span>. Let <span class=\"math\">L' = \\operatorname{compose}(G \\setminus s, C')</span>. Return <span class=\"math\">L = \\{\\varnothing\\} \\cup \\{\\forall x \\in L' : x \\cup s\\}</span>.</li>\n</ul>\n</li>\n<li><strong>Composition theorem</strong>: Given <span class=\"math\">C = \\{c_1, c_2, \\ldots, c_n\\}</span> of topological subsets of a graph <span class=\"math\">G</span>, <span class=\"math\">\\operatorname{compose}(G, C) \\gtrsim \\{\\varnothing, c_i, G\\}</span> for all <span class=\"math\">i = 1 \\ldots n</span>. In other words, <span class=\"math\">\\operatorname{diag}_{\\operatorname{compose}(G, C)}(\\operatorname{size}(c_i)) \\geq \\operatorname{fee}(c_i)</span> for all <span class=\"math\">i</span>.\n<ul>\n<li>Proof: we know by induction that <span class=\"math\">L' \\gtrsim \\{\\varnothing, c_i \\setminus s, G \\setminus s\\}</span> for all <span class=\"math\">i</span>. From the stripping theorem it follows that <span class=\"math\">L \\gtrsim \\{\\varnothing, s, c_i \\cup s, G\\}</span>. Because of the properties of <span class=\"math\">s</span> we know that <span class=\"math\">\\{\\varnothing, s, c_i \\cup s, G\\} \\gtrsim \\{\\varnothing, c_i, G\\}</span>. Together it follows that <span class=\"math\">L \\gtrsim \\{\\varnothing, c_i, G\\}</span>.</li>\n<li>Merging of two linearizations <span class=\"math\">L_1</span> and <span class=\"math\">L_2</span> is now effectively applying composition to <span class=\"math\">C = L_1 \\cup L_2</span>, with a specialized <span class=\"math\">\\mathcal{O}(n)</span> complexity <span class=\"math\">s</span>-finding algorithm.</li>\n<li>LIMO can be seen as a variant of composition, with <span class=\"math\">C = L \\cup \\{S_1, S_2, \\ldots\\}</span>, but where the recursion doesn\u2019t operate on exactly <span class=\"math\">C'</span>, but the <span class=\"math\">S_i</span> get replaced with (hopefully better) subsets every iteration.</li>\n</ul>\n</li>\n</ul>",
  "post_number": 14,
  "post_type": 1,
  "updated_at": "2024-05-06T19:01:03.399Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 1.0,
  "yours": false,
  "topic_id": 202,
  "topic_slug": "cluster-mempool-definitions-theory",
  "topic_title": "Cluster mempool definitions & theory",
  "topic_html_title": "Cluster mempool definitions &amp; theory",
  "category_id": 8,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Given some of the insights from the [LIMO](https://delvingbitcoin.org/t/limo-combining-the-best-parts-of-linearization-search-and-merging/825/9) thread, I think there is a simpler way to formalize things. Here is an attempt with just sketches. If people are interested I can expand on it.\n\nThe biggest changes are:\n* Linearizations are generalized to include set-linearizations (now known as partial linearizations).\n* Linearizations are represented differently, namely as a set of topological subsets, each one being a subset of the next one.\n* The gathering theorem is replaced with a much simpler variant, and then used to prove a new \"composition\" theorem, which describes how given a set of topologically valid subsets one can produce a linearization that is as good as all of them. Merging and LIMO can be seen as variants of composition.\n\n### Graphs (unchanged):\n\n* Transactions graphs are defined as before: nodes that have a integer $\\operatorname{fee}$ and a strictly positive $\\operatorname{size}$, and directed edges representing dependencies pointing from child to parent.\n* The functions $\\operatorname{fee}$, $\\operatorname{size}$, and $\\operatorname{feerate}$ are defined for sets of nodes as respectively the sum of the fees, the sum of the sizes, and the sum of the fees divided by the sum of the sizes.\n* The ancestors and descendants of a set are defined as before: $\\operatorname{anc}_G(S)$ is the transitive closure of $S$ under the parent relation. Similarly, $\\operatorname{desc}_G(S)$ is the transitive closure of $S$ under the child relation.\n* A subset $S$ of the nodes of a graph $G$ is said to be **topological** if $\\operatorname{anc}_G(S) = S$.\n\n### Linearizations\n\n* A **linearization** of a graph $G$ is defined differently: it is a set of topological subsets of $G$, where each is either a subset or superset of every other, and which includes $\\varnothing$ and $G$ itself as elements.\n* A linearization is said to be **full** (formerly: a linearization) if it contains a subset for each size from $0$ to the size of the graph, inclusive. If not, a linearization is said to be **partial** (formerly: a set-linearization).\n* A linearization $a$ is said to be a **generalization** of linearization $b$ if $a \\subseteq b$, and said to be a **specialization** of $b$ if $a \\supseteq b$.\n* **Full specialization theorem**: every linearization has a full specialization. For any two $c_1 \\subset c_2 \\in L$, topologically sort $c_2 \\setminus c_1$ and for each inlude a new subset, in order.\n\n### Preordering of linearizations\n\n* The diagram $\\operatorname{diag}_L$ of a linearization $L$ of graph $G$ is the real function defined for all inputs $x \\in [0,\\operatorname{size}(G)]$: $\\operatorname{diag}_L(x)$ is the maximum value of $\\operatorname{fee}(a) + (x - \\operatorname{size}(a))\\operatorname{feerate}(b \\setminus a)$ over all $a$ and $b$ in $L$ such that $\\operatorname{size}(a) \\leq x$ and $\\operatorname{size}(b) \\geq x$. It is the minimal concave function through all the $(\\operatorname{size}(p), \\operatorname{fee}(p))_{p \\in L}$ points.\n* The **chunking** $\\operatorname{chunk}(L)$ of a linearization $L$ is the smallest generalization (subset) of $L$ with the same diagram. It consists of those graph subsets whose size/fee pairs make up the vertices of the convex hull shape that the diagram has.\n* A preorder $\\gtrsim$ is defined between linearizations of the same graph $G$ as: $L_1 \\gtrsim L_2$ iff for all $x \\in [0,\\operatorname{size}(G)]$ it holds that $\\operatorname{diag}_{L_1}(x) \\geq \\operatorname{diag}_{L_2}(x)$. As chunking does not change diagrams, $L_1 \\gtrsim L_2 \\iff \\operatorname{chunk}(L_1) \\gtrsim L_2 \\iff L_1 \\gtrsim \\operatorname{chunk}(L_2)$.\n* **Specialization improvement theorem**: if $L_1$ is a specialization of $L_2$, then $L_1 \\gtrsim L_2$.\n\n### Improving linearizations\n\n* **Stripping theorem**: given two linearizations $L_1$ and $L_2$ for a graph $G$, both of which have the same smallest non-empty element $s$. Let $L_1'$ and $L_2'$ be linearizations of $G \\setminus s$ obtained by removing $s$ from all elements of $L_1$ resp. $L_2$. Then $L_1' \\gtrsim L_2' \\implies L_1 \\gtrsim L_2$.\n  * Proof: Going from the diagrams of $L_1'$ and $L_2'$ to those of $L_1$ and $L_2$ is just shifting the convex hulls by $s$, and then adding a point $(0,0)$ to both hulls.\n* **Simple gathering theorem**: given topological subsets $s \\subseteq G$ and $c \\subseteq G$ such that $\\operatorname{feerate}(s) \\geq \\operatorname{feerate}(c)$ (or $s = \\varnothing$ or $c = \\varnothing$) and $\\operatorname{feerate}(s) \\geq \\operatorname{feerate}(s \\cap c)$ (or $s \\cap c = \\varnothing)$, it holds that $\\{\\varnothing, s, c \\cup s, G\\} \\gtrsim \\{\\varnothing, c, G\\}$.\n  * Proof: this is a simplification to 2 sets of the earlier [set gathering theorem](https://delvingbitcoin.org/t/limo-combining-the-best-parts-of-linearization-search-and-merging/825/8#h-13-the-set-gathering-theorem-4), plus covering the case where $\\operatorname{feerate}(c) < \\operatorname{feerate}(G)$ which is trivial.\n* **Supreme subset theorem**: given a set $C = \\{c_1, c_2, \\ldots, c_n\\}$ of $c_i$ that are all topological subsets of a non-empty graph $G$, there always exists a non-empty topological subset $s$ of $G$ such that $\\{\\varnothing, s, c_i \\cup s, G\\} \\gtrsim \\{\\varnothing, c_i, G\\}$ for all $i = 1 \\ldots n$.\n  * Proof: pick $s$ to be the highest feerate non-empty intersection between any combination of $c_i$'s, plus $G$, and apply the simple gathering theorem (no intersection between $s$ and $c_i$ can have higher feerate than $s$, because that intersection would have been picked as $s$ instead).\n  * Note that this is not necessarily the only set which satisfies the $\\{\\varnothing, s, c_i \\cup s, G\\} \\gtrsim \\{\\varnothing, c_i, G\\}$ conditions, and others may be computationally cheaper to find.\n* **Composition algorithm**: Define $\\operatorname{compose}(G, C)$ for a graph $G$ and a set of topologically valid subsets $C = \\{c_1, c_2, \\ldots, c_n\\}$ for it as follows:\n  * If $G = \\varnothing$, return $\\{\\varnothing\\}$, the only valid linearization for $G$.\n  * Otherwise, find a non-empty $s$ such that $\\{\\varnothing, s, c_i \\cup s, G\\} \\gtrsim \\{\\varnothing, c_i, G\\}$ for all $i$, which by the supreme subset theorem always exists. Let $C' = \\{c_1 \\setminus s, c_2 \\setminus s, \\ldots, c_n \\setminus s\\}$. Let $L' = \\operatorname{compose}(G \\setminus s, C')$. Return $L = \\{\\varnothing\\} \\cup \\{\\forall x \\in L' : x \\cup s\\}$.\n* **Composition theorem**: Given $C = \\{c_1, c_2, \\ldots, c_n\\}$ of topological subsets of a graph $G$, $\\operatorname{compose}(G, C) \\gtrsim \\{\\varnothing, c_i, G\\}$ for all $i = 1 \\ldots n$. In other words, $\\operatorname{diag}_{\\operatorname{compose}(G, C)}(\\operatorname{size}(c_i)) \\geq \\operatorname{fee}(c_i)$ for all $i$.\n  * Proof: we know by induction that $L' \\gtrsim \\{\\varnothing, c_i \\setminus s, G \\setminus s\\}$ for all $i$. From the stripping theorem it follows that $L \\gtrsim \\{\\varnothing, s, c_i \\cup s, G\\}$. Because of the properties of $s$ we know that $\\{\\varnothing, s, c_i \\cup s, G\\} \\gtrsim \\{\\varnothing, c_i, G\\}$. Together it follows that $L \\gtrsim \\{\\varnothing, c_i, G\\}$.\n  * Merging of two linearizations $L_1$ and $L_2$ is now effectively applying composition to $C = L_1 \\cup L_2$, with a specialized $\\mathcal{O}(n)$ complexity $s$-finding algorithm.\n  * LIMO can be seen as a variant of composition, with $C = L \\cup \\{S_1, S_2, \\ldots\\}$, but where the recursion doesn't operate on exactly $C'$, but the $S_i$ get replaced with (hopefully better) subsets every iteration.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}