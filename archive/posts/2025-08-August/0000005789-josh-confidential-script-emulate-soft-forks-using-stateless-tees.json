{
  "id": 5789,
  "name": "",
  "username": "josh",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josh/{size}/95_2.png",
  "created_at": "2025-08-30T20:26:41.735Z",
  "cooked": "<blockquote>\n<p>hey josh, big fan of this idea, i\u2019m working on a fork of bitcoinkernel which adds covenant support linked below.</p>\n</blockquote>\n<p>Hey <a class=\"mention\" href=\"/u/stutxo\">@stutxo</a> thanks for doing this! It\u2019s awesome that there\u2019s now a public crate that implements these opcodes. Ideally, it would point to a repo like Inquisition that has gone through a formal peer review process. I\u2019d definitely encourage you to make a PR there!</p>\n<p><a class=\"mention\" href=\"/u/ajtowns\">@ajtowns</a> Are you open to adding kernel support to Inquisition? I realize that may not be in the spirit of what Inquisition was designed for, but it seems like the natural home for peer-reviewed soft fork proposals, especially if they\u2019re going to be used with real money.</p>\n<blockquote>\n<p>the CTV emulator is here: <a href=\"https://learn.sapio-lang.org/ch05-01-ctv-emulator.html\" rel=\"noopener nofollow ugc\">BIP-119 Emulation - Designing Bitcoin Contracts with Sapio</a> I wrote up a generalized formalism for covenant-oracle with script as key tweak paradigm in <a href=\"https://rubin.io/public/pdfs/unfedcovenants.pdf\" rel=\"noopener nofollow ugc\">https://rubin.io/public/pdfs/unfedcovenants.pdf</a> \u2013 this seems to follow that formalism relatively closely, but the document goes a bit further to also give a section on how to implement integrity checks using BitVM.</p>\n</blockquote>\n<p>Thanks for sharing <a class=\"mention\" href=\"/u/jeremyrubin\">@JeremyRubin</a> ! I wasn\u2019t previously aware of your work, and I\u2019ll make sure to add citations to the repo. Adding integrity checks with BitVM is an interesting concept, though I worry that needlessly overcomplicates things.</p>\n<p>My goal with this project is to build something that\u2019s highly secure with simple publicly audited code, yet extremely user friendly. That way, developers can easily write programs deployable as written if the soft fork is adopted, and users can easily and permissionlessly run a shared emulator and unilaterally exit, including from UTXOs shared by multiple users (i.e. ShieldedCSV).</p>\n<p>To the extent that additional integrity checks are desirable, I think the best way to accomplish that is with MuSig2. I plan to add support once it\u2019s merged into <a href=\"https://github.com/rust-bitcoin/rust-bitcoin\" rel=\"noopener nofollow ugc\">rust/bitcoin</a>.</p>",
  "post_number": 6,
  "post_type": 1,
  "posts_count": 6,
  "updated_at": "2025-09-01T03:06:39.372Z",
  "reply_count": 0,
  "reply_to_post_number": 4,
  "quote_count": 0,
  "incoming_link_count": 3,
  "reads": 29,
  "readers_count": 28,
  "score": 20.8,
  "yours": false,
  "topic_id": 1918,
  "topic_slug": "confidential-script-emulate-soft-forks-using-stateless-tees",
  "topic_title": "Confidential Script: Emulate soft forks using stateless TEEs",
  "topic_html_title": "Confidential Script: Emulate soft forks using stateless TEEs",
  "category_id": 8,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 892,
    "username": "stutxo",
    "name": "stu",
    "avatar_template": "/user_avatar/delvingbitcoin.org/stutxo/{size}/1463_2.png"
  },
  "bookmarked": false,
  "raw": "> hey josh, big fan of this idea, i\u2019m working on a fork of bitcoinkernel which adds covenant support linked below.\n\nHey @stutxo thanks for doing this! It's awesome that there's now a public crate that implements these opcodes. Ideally, it would point to a repo like Inquisition that has gone through a formal peer review process. I'd definitely encourage you to make a PR there!\n\n@ajtowns Are you open to adding kernel support to Inquisition? I realize that may not be in the spirit of what Inquisition was designed for, but it seems like the natural home for peer-reviewed soft fork proposals, especially if they're going to be used with real money.\n\n> the CTV emulator is here: [BIP-119 Emulation - Designing Bitcoin Contracts with Sapio](https://learn.sapio-lang.org/ch05-01-ctv-emulator.html) I wrote up a generalized formalism for covenant-oracle with script as key tweak paradigm in https://rubin.io/public/pdfs/unfedcovenants.pdf \u2013 this seems to follow that formalism relatively closely, but the document goes a bit further to also give a section on how to implement integrity checks using BitVM.\n\nThanks for sharing @JeremyRubin ! I wasn't previously aware of your work, and I'll make sure to add citations to the repo. Adding integrity checks with BitVM is an interesting concept, though I worry that needlessly overcomplicates things.\n\nMy goal with this project is to build something that's highly secure with simple publicly audited code, yet extremely user friendly. That way, developers can easily write programs deployable as written if the soft fork is adopted, and users can easily and permissionlessly run a shared emulator and unilaterally exit, including from UTXOs shared by multiple users (i.e. ShieldedCSV).\n\nTo the extent that additional integrity checks are desirable, I think the best way to accomplish that is with MuSig2. I plan to add support once it's merged into [rust/bitcoin](https://github.com/rust-bitcoin/rust-bitcoin).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 98,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "hey josh, big fan of this idea, i\u2019m working on a fork of bitcoinkernel which adds covenant support linked below. \n\nHey <a class=\"mention\" href=\"/u/stutxo\">@stutxo</a> thanks for doing this! It\u2019s awesome that there\u2019s now a public crate that implements these opcodes. Ideally, it would point to a repo like Inquisition that has gone through &hellip;",
  "truncated": true,
  "post_url": "/t/confidential-script-emulate-soft-forks-using-stateless-tees/1918/6",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}