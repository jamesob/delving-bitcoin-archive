{
  "id": 5762,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2025-08-22T04:46:39.787Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"gmaxwell\" data-post=\"14\" data-topic=\"1906\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/g/fbc32d/48.png\" class=\"avatar\"> gmaxwell:</div>\n<blockquote>\n<p>the send could at essentially no cost send a tiny minisketch (like 8 element) over the last 64-bits of each txid and the receiver of a template could reliably detect a failure and recover from small number of collisions.</p>\n</blockquote>\n</aside>\n<p>I can imagine three benefits/reasons to do this:</p>\n<ul>\n<li>detecting unknown collisions, where the sender has wtxid A and the receiver has wtxid B and they both map to the same seeded shortid; assuming there are fewer than 4 such errors, when you calculate the minisketch, each A/B value will be reported, and because you can identify the B txs in your receovered template, you can request the A values</li>\n<li>resolving known collisions, if the receiver has wtxids A and B that both map to the same shortid, you can know which one of them to include without a round-trip</li>\n<li>optimising reconstruction, where you just calculate the shortids for the txs you think are highly likely to be in the block/template, then use the minisketch to tell you the 64-bit suffixes of the handful of wtxids you missed, then look those up in the mempool, check their shortids, and finish the reconstruction</li>\n</ul>\n<p>Doing 8 elements (64 byte sketch) seems fine for the first two (detecting 4 unknown collisions, or resolving 8 known collisions), but you\u2019d presumably want a bit more than that if you were trying to optimise reconstruction by ignoring most of your mempool on the first pass \u2013 maybe 64 or 128 elements (512 or 1024 byte sketch)?</p>\n<p>If you did the latter, then a template delta could include a list of the changes by shortid (perhaps a few hundred new transactions in the last couple of minutes for maybe 4kB) plus a sketch (1kB) and be recovered by only examining a small fraction of the mempool and doing a minisketch calculation, I think?</p>\n<p>Maybe you could save bandwidth a little further by doing up to three round trips: get the shortids+sketch, if there\u2019s more problems than the sketch can resolve, get the 64-byte wtxid suffixes directly, and only then request the txs you\u2019re missing.</p>",
  "post_number": 15,
  "post_type": 1,
  "posts_count": 17,
  "updated_at": "2025-08-22T04:46:39.787Z",
  "reply_count": 1,
  "reply_to_post_number": 14,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 6.4,
  "yours": false,
  "topic_id": 1906,
  "topic_slug": "sharing-block-templates",
  "topic_title": "Sharing block templates",
  "topic_html_title": "Sharing block templates",
  "category_id": 8,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"gmaxwell, post:14, topic:1906\"]\nthe send could at essentially no cost send a tiny minisketch (like 8 element) over the last 64-bits of each txid and the receiver of a template could reliably detect a failure and recover from small number of collisions.\n[/quote]\n\nI can imagine three benefits/reasons to do this:\n\n * detecting unknown collisions, where the sender has wtxid A and the receiver has wtxid B and they both map to the same seeded shortid; assuming there are fewer than 4 such errors, when you calculate the minisketch, each A/B value will be reported, and because you can identify the B txs in your receovered template, you can request the A values\n * resolving known collisions, if the receiver has wtxids A and B that both map to the same shortid, you can know which one of them to include without a round-trip\n * optimising reconstruction, where you just calculate the shortids for the txs you think are highly likely to be in the block/template, then use the minisketch to tell you the 64-bit suffixes of the handful of wtxids you missed, then look those up in the mempool, check their shortids, and finish the reconstruction\n\nDoing 8 elements (64 byte sketch) seems fine for the first two (detecting 4 unknown collisions, or resolving 8 known collisions), but you'd presumably want a bit more than that if you were trying to optimise reconstruction by ignoring most of your mempool on the first pass -- maybe 64 or 128 elements (512 or 1024 byte sketch)?\n\nIf you did the latter, then a template delta could include a list of the changes by shortid (perhaps a few hundred new transactions in the last couple of minutes for maybe 4kB) plus a sketch (1kB) and be recovered by only examining a small fraction of the mempool and doing a minisketch calculation, I think?\n\nMaybe you could save bandwidth a little further by doing up to three round trips: get the shortids+sketch, if there's more problems than the sketch can resolve, get the 64-byte wtxid suffixes directly, and only then request the txs you're missing.",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I can imagine three benefits/reasons to do this: \n\ndetecting unknown collisions, where the sender has wtxid A and the receiver has wtxid B and they both map to the same seeded shortid; assuming there are fewer than 4 such errors, when you calculate the minisketch, each A/B value will be reported, a&hellip;",
  "truncated": true,
  "post_url": "/t/sharing-block-templates/1906/15",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}