{
  "id": 5613,
  "name": "Daniela",
  "username": "danielabrozzoni",
  "avatar_template": "/user_avatar/delvingbitcoin.org/danielabrozzoni/{size}/1300_2.png",
  "created_at": "2025-08-01T10:41:24.862Z",
  "cooked": "<p>After giving it more thought, I realized the phrasing \u201cRemoving timestamps\u201d was too broad, and it can be broken down into three distinct approaches:</p>\n<ul>\n<li>Stop using <code>nTime</code> in addrman: this would mean using a differrent metric to determine if an address is terrible. This isn\u2019t directly linked to our fingerprinting issue, it\u2019s more of a follow-up task, something we might consider if the fingerprinting fix makes <code>nTime</code> less meaningful, and we want addrman to use a better metric.</li>\n<li>Restructure the <code>ADDR</code> message to exclude the <code>nTime</code> field: As <a class=\"mention\" href=\"/u/mzumsande\">@mzumsande</a> pointed out, this isn\u2019t feasible for gossip relay. For <code>GETADDR</code> responses, it would require designing new message formats, which to me is a lot of work for effectively zero benefit, as there are simpler ways to fix the fingerprinting.</li>\n<li>Use a <code>nTime</code> in <code>GETADDR</code> responses that is unrelated to our addrman, and sharing no information about the timestamps in our addrman.(This is what solutions 2, 3, and 4 below are trying to do.)</li>\n</ul>\n<p>Based on that breakdown, here\u2019s a summary of the solutions we\u2019re considering:</p>\n<ol>\n<li>Randomizing <code>nTime</code> by a few days: as Naiyoma pointed out above, we would need to figure out if the messages could still be fingerprintable. Given this uncertainty, I\u2019m leaning towards disregarding this solution completely, in favor of solutions that can\u2019t be fingerprinted</li>\n<li>Setting the <code>nTime</code> to 0: Receiving nodes would insert the address into their addrman with a timestamp of 5 days in the past (<a href=\"https://github.com/bitcoin/bitcoin/blob/4f27e8ca4d2a31b685b91e70b0542c0077a944b2/src/net_processing.cpp#L3919\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">bitcoin/src/net_processing.cpp at 4f27e8ca4d2a31b685b91e70b0542c0077a944b2 \u00b7 bitcoin/bitcoin \u00b7 GitHub</a>).</li>\n<li>As <a class=\"mention\" href=\"/u/mzumsande\">@mzumsande</a> suggested, setting the timestamp to a randomized but fixed value in the past</li>\n<li>Setting the <code>nTime</code> to <code>now()</code> at the time of the request: I think this is nice, and the nTime would automatically represent \u201clast time I saw this address (either on the P2P network, or I connected to it)\u201d. However\u2026 This might make no sense, but I wonder if there\u2019s an edge case where a node clock is so out of sync, that its responses are still fingerprintable.</li>\n</ol>\n<aside class=\"quote no-group\" data-username=\"naiyoma\" data-post=\"12\" data-topic=\"1786\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/naiyoma/48/1285_2.png\" class=\"avatar\"> naiyoma:</div>\n<blockquote>\n<p>One possible issue is a synchronized pattern where batches of addresses are marked as \u2018Terrible\u2019 at the same time and are therefore at risk of being filtered out simultaneously.</p>\n</blockquote>\n</aside>\n<p>This would apply for solutions 2/3/4 above. I wonder if this would be the case, or since we refresh timestamps, it would never happen that a set of addresses that we got from the same ADDR message expire all at the same time.</p>",
  "post_number": 13,
  "post_type": 1,
  "posts_count": 12,
  "updated_at": "2025-08-01T10:41:24.862Z",
  "reply_count": 0,
  "reply_to_post_number": 12,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 6,
  "readers_count": 5,
  "score": 1.2,
  "yours": false,
  "topic_id": 1786,
  "topic_slug": "fingerprinting-nodes-via-addr-requests",
  "topic_title": "Fingerprinting nodes via addr requests",
  "topic_html_title": "Fingerprinting nodes via addr requests",
  "category_id": 7,
  "display_username": "Daniela",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "After giving it more thought, I realized the phrasing \"Removing timestamps\" was too broad, and it can be broken down into three distinct approaches:\n- Stop using `nTime` in addrman: this would mean using a differrent metric to determine if an address is terrible. This isn't directly linked to our fingerprinting issue, it's more of a follow-up task, something we might consider if the fingerprinting fix makes `nTime` less meaningful, and we want addrman to use a better metric.\n- Restructure the `ADDR` message to exclude the `nTime` field: As @mzumsande pointed out, this isn't feasible for gossip relay. For `GETADDR` responses, it would require designing new message formats, which to me is a lot of work for effectively zero benefit, as there are simpler ways to fix the fingerprinting.\n- Use a `nTime` in `GETADDR` responses that is unrelated to our addrman, and sharing no information about the timestamps in our addrman.(This is what solutions 2, 3, and 4 below are trying to do.)\n\nBased on that breakdown, here's a summary of the solutions we're considering:\n\n1. Randomizing `nTime` by a few days: as Naiyoma pointed out above, we would need to figure out if the messages could still be fingerprintable. Given this uncertainty, I'm leaning towards disregarding this solution completely, in favor of solutions that can't be fingerprinted\n2. Setting the `nTime` to 0: Receiving nodes would insert the address into their addrman with a timestamp of 5 days in the past (https://github.com/bitcoin/bitcoin/blob/4f27e8ca4d2a31b685b91e70b0542c0077a944b2/src/net_processing.cpp#L3919).\n3. As @mzumsande suggested, setting the timestamp to a randomized but fixed value in the past\n4. Setting the `nTime` to `now()` at the time of the request: I think this is nice, and the nTime would automatically represent \"last time I saw this address (either on the P2P network, or I connected to it)\". However... This might make no sense, but I wonder if there's an edge case where a node clock is so out of sync, that its responses are still fingerprintable.\n\n[quote=\"naiyoma, post:12, topic:1786\"]\nOne possible issue is a synchronized pattern where batches of addresses are marked as \u2018Terrible\u2019 at the same time and are therefore at risk of being filtered out simultaneously.\n[/quote]\n\nThis would apply for solutions 2/3/4 above. I wonder if this would be the case, or since we refresh timestamps, it would never happen that a set of addresses that we got from the same ADDR message expire all at the same time.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 186,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "After giving it more thought, I realized the phrasing \u201cRemoving timestamps\u201d was too broad, and it can be broken down into three distinct approaches: \n\nStop using nTime in addrman: this would mean using a differrent metric to determine if an address is terrible. This isn\u2019t directly linked to our fing&hellip;",
  "truncated": true,
  "post_url": "/t/fingerprinting-nodes-via-addr-requests/1786/13",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}