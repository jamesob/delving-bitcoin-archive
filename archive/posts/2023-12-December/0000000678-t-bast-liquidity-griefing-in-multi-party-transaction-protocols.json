{
  "id": 678,
  "name": "Bastien Teinturier",
  "username": "t-bast",
  "avatar_template": "/user_avatar/delvingbitcoin.org/t-bast/{size}/98_2.png",
  "created_at": "2023-12-07T11:21:18.285Z",
  "cooked": "<p>Thanks for putting this together!</p>\n<p>I have a few comments on some of the sections.</p>\n<h2><a name=\"withholding-signatures-1\" class=\"anchor\" href=\"#withholding-signatures-1\"></a>Withholding signatures</h2>\n<blockquote>\n<p>So Bob\u2019s UTXOs will remain locked until he pays transaction fees to double spend one of his inputs.</p>\n</blockquote>\n<p>There is one important subtlety that you don\u2019t mention here: the non-initiator will only contribute some funds if the initiator is paying them (via liquidity ads). In the liquidity ads protocol, there is a mechanism to ensure that it is the buyer who pays for the on-chain fees of the seller\u2019s inputs and outputs.</p>\n<p>Let\u2019s suppose that Mallory buys liquidity from Bob and then withholds signatures (or does something else to prevent confirmation). When Alice wants to buy liquidity from Bob, it will be Alice who pays for double-spending Bob\u2019s inputs from that previous transaction.</p>\n<p>The way I\u2019m currently implementing this for eclair is that node operators will use a dedicated bitcoin wallet for the funds they want to lease. This wallet will be used exclusively for liquidity ads, and only the funds in that wallet will be exposed to such griefing issues. Any double-spend on that wallet will be made by other liquidity ads transactions, which ensures the seller doesn\u2019t pay those on-chain fees.</p>\n<h2><a name=\"preventing-transaction-confirmation-2\" class=\"anchor\" href=\"#preventing-transaction-confirmation-2\"></a>Preventing transaction confirmation</h2>\n<blockquote>\n<p>they generally cannot afford to leave UTXOs unlocked until transaction confirmation because that would cause lots of accidental double spends. The participant will usually need to lock UTXOs soon after the joint transaction is successfully broadcast.</p>\n</blockquote>\n<p>I agree that this should be the default behavior, to avoid double-spending honest attempts that just take a bit of time to confirm. But that doesn\u2019t prevent the non-initiator from unlocking utxos after broadcast, if they detect something weird. If the transaction looks like it has the right feerate but is still not confirming after some blocks, something is fishy and the utxos should probably be unlocked.</p>\n<p>That\u2019s not a very satisfying solution, but it\u2019s something \u00af\\__(\u30c4)_/\u00af</p>\n<blockquote>\n<p>Replacing ancestors</p>\n</blockquote>\n<p>This one is really hard to detect (you can never be entirely sure that this is what is happening), but if you unlock utxos the double-spend will then be free, since the original transaction is gone anyway.</p>\n<h2><a name=\"require-confirmed-inputs-3\" class=\"anchor\" href=\"#require-confirmed-inputs-3\"></a>Require confirmed inputs</h2>\n<blockquote>\n<p>Downsides</p>\n</blockquote>\n<p>Another downside is that this is very inefficient from a liquidity perspective. Every unconfirmed change output is effectively \u201clocked liquidity\u201d until it confirms. Ideally we\u2019d really like to be able to use them.</p>\n<blockquote>\n<p>Hopefully we can come up with some more ideas to address this fundamental problem in multi-party transaction protocols.</p>\n</blockquote>\n<p>I think we\u2019ve explored mitigations a lot, and I don\u2019t think we\u2019ll find new solutions at the lightning layer that wouldn\u2019t have downsides.</p>\n<p>The only real way to fix this is at the mempool layer: fortunately package relay, v3 transactions, ephemeral anchors and cluster mempool are seeing a lot of active research! Sure, it will still take years before that is widely available, but I\u2019m confident that it will eventually be there.</p>\n<p>Until then, there is additional risk when selling your liquidity: it\u2019s hard to find the right balance between what should be put into the protocol to offer mitigations, and what should be in implementations\u2019 heuristics/policies, but IMHO the current state of the proposals strikes a good balance between those.</p>",
  "post_number": 2,
  "post_type": 1,
  "posts_count": 9,
  "updated_at": "2023-12-07T11:21:18.285Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 36,
  "readers_count": 35,
  "score": 32.2,
  "yours": false,
  "topic_id": 264,
  "topic_slug": "liquidity-griefing-in-multi-party-transaction-protocols",
  "topic_title": "Liquidity griefing in multi-party transaction protocols",
  "topic_html_title": "Liquidity griefing in multi-party transaction protocols",
  "category_id": 7,
  "display_username": "Bastien Teinturier",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thanks for putting this together!\n\nI have a few comments on some of the sections.\n\n## Withholding signatures\n\n> So Bob\u2019s UTXOs will remain locked until he pays transaction fees to double spend one of his inputs.\n\nThere is one important subtlety that you don't mention here: the non-initiator will only contribute some funds if the initiator is paying them (via liquidity ads). In the liquidity ads protocol, there is a mechanism to ensure that it is the buyer who pays for the on-chain fees of the seller's inputs and outputs.\n\nLet's suppose that Mallory buys liquidity from Bob and then withholds signatures (or does something else to prevent confirmation). When Alice wants to buy liquidity from Bob, it will be Alice who pays for double-spending Bob's inputs from that previous transaction.\n\nThe way I'm currently implementing this for eclair is that node operators will use a dedicated bitcoin wallet for the funds they want to lease. This wallet will be used exclusively for liquidity ads, and only the funds in that wallet will be exposed to such griefing issues. Any double-spend on that wallet will be made by other liquidity ads transactions, which ensures the seller doesn't pay those on-chain fees.\n\n## Preventing transaction confirmation\n\n> they generally cannot afford to leave UTXOs unlocked until transaction confirmation because that would cause lots of accidental double spends. The participant will usually need to lock UTXOs soon after the joint transaction is successfully broadcast.\n\nI agree that this should be the default behavior, to avoid double-spending honest attempts that just take a bit of time to confirm. But that doesn't prevent the non-initiator from unlocking utxos after broadcast, if they detect something weird. If the transaction looks like it has the right feerate but is still not confirming after some blocks, something is fishy and the utxos should probably be unlocked.\n\nThat's not a very satisfying solution, but it's something \u00af\\\\__(\u30c4)_/\u00af\n\n> Replacing ancestors\n\nThis one is really hard to detect (you can never be entirely sure that this is what is happening), but if you unlock utxos the double-spend will then be free, since the original transaction is gone anyway.\n\n## Require confirmed inputs\n\n> Downsides\n\nAnother downside is that this is very inefficient from a liquidity perspective. Every unconfirmed change output is effectively \"locked liquidity\" until it confirms. Ideally we'd really like to be able to use them.\n\n> Hopefully we can come up with some more ideas to address this fundamental problem in multi-party transaction protocols.\n\nI think we've explored mitigations a lot, and I don't think we'll find new solutions at the lightning layer that wouldn't have downsides.\n\nThe only real way to fix this is at the mempool layer: fortunately package relay, v3 transactions, ephemeral anchors and cluster mempool are seeing a lot of active research! Sure, it will still take years before that is widely available, but I'm confident that it will eventually be there.\n\nUntil then, there is additional risk when selling your liquidity: it's hard to find the right balance between what should be put into the protocol to offer mitigations, and what should be in implementations' heuristics/policies, but IMHO the current state of the proposals strikes a good balance between those.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 101,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Thanks for putting this together! \nI have a few comments on some of the sections. \n<a name=\"withholding-signatures-1\" class=\"anchor\" href=\"#withholding-signatures-1\"></a>Withholding signatures\n\nSo Bob\u2019s UTXOs will remain locked until he pays transaction fees to double spend one of his inputs. \n\nThere is one important subtlety that you don\u2019t mention here: the non-initiator will only co&hellip;",
  "truncated": true,
  "post_url": "/t/liquidity-griefing-in-multi-party-transaction-protocols/264/2",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}