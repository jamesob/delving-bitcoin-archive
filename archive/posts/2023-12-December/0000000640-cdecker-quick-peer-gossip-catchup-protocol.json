{
  "id": 640,
  "name": "Christian Decker",
  "username": "cdecker",
  "avatar_template": "/user_avatar/delvingbitcoin.org/cdecker/{size}/99_2.png",
  "created_at": "2023-12-06T13:23:54.650Z",
  "cooked": "<p>Fwiw this sounds very close to what <code>lnsync</code> does. It assigns an arbitatry ordering to the messages and allows clients to seek through that ordering. Since the ordering only has to make sense to the serving node, and any misordering can only result in a bit too much being sent across this seems like a trivial and backwards compatible solution to quickly sync up.</p>\n<p>While the idea of canonical ordering by the serving node works quite nicely, we can notice that we also have a partial order among messages, with the <code>channel_announcement</code> being the outlier, since it cannot be uniquely ordered among the other messages that may pertain to the channel or the endpoints.</p>\n<ul>\n<li><code>channel_update</code> sort by timestamp, and allow querying a range based on these timestamps</li>\n<li><code>node_announcement</code> sort by timestamp, and allow querying a range based on these timestamps</li>\n<li><code>channel_announcement</code> does not have a timestamp, and ought to be included if the querying node is asking for a timestamp range that include ANY update to the channel</li>\n</ul>\n<p>As you can see the only potential over-sharing is in the form of the <code>channel_announcement</code> but I don\u2019t think that is solvable, since there is no unique position in the ordering that\u2019d guarantee inclusion iff a matching <code>channel_update</code> is included.</p>\n<p>This allows us to avoid per-peer storage: on startup we load the timestamp when we were last online, we then subtract a buffer from that (1/2h?) and we tell our peers that timestamp when reconnecting. This means we don\u2019t store anything per-peer, rather we only store a timestamp up to which we believe we are up to date, and then ask for incremental diffs from that point onwards.</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2023-12-06T13:23:54.650Z",
  "reply_count": 0,
  "reply_to_post_number": 3,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 4,
  "readers_count": 3,
  "score": 0.8,
  "yours": false,
  "topic_id": 251,
  "topic_slug": "quick-peer-gossip-catchup-protocol",
  "topic_title": "Quick peer gossip catchup protocol",
  "topic_html_title": "Quick peer gossip catchup protocol",
  "category_id": 7,
  "display_username": "Christian Decker",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "rustyrussell",
    "name": "Rusty Russell",
    "avatar_template": "/user_avatar/delvingbitcoin.org/rustyrussell/{size}/154_2.png"
  },
  "bookmarked": false,
  "raw": "Fwiw this sounds very close to what `lnsync` does. It assigns an arbitatry ordering to the messages and allows clients to seek through that ordering. Since the ordering only has to make sense to the serving node, and any misordering can only result in a bit too much being sent across this seems like a trivial and backwards compatible solution to quickly sync up.\n\nWhile the idea of canonical ordering by the serving node works quite nicely, we can notice that we also have a partial order among messages, with the `channel_announcement` being the outlier, since it cannot be uniquely ordered among the other messages that may pertain to the channel or the endpoints.\n\n - `channel_update` sort by timestamp, and allow querying a range based on these timestamps\n - `node_announcement` sort by timestamp, and allow querying a range based on these timestamps\n - `channel_announcement` does not have a timestamp, and ought to be included if the querying node is asking for a timestamp range that include ANY update to the channel\n\nAs you can see the only potential over-sharing is in the form of the `channel_announcement` but I don't think that is solvable, since there is no unique position in the ordering that'd guarantee inclusion iff a matching `channel_update` is included. \n\nThis allows us to avoid per-peer storage: on startup we load the timestamp when we were last online, we then subtract a buffer from that (1/2h?) and we tell our peers that timestamp when reconnecting. This means we don't store anything per-peer, rather we only store a timestamp up to which we believe we are up to date, and then ask for incremental diffs from that point onwards.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 103,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}