{
  "id": 675,
  "name": "Matt Morehouse",
  "username": "morehouse",
  "avatar_template": "/letter_avatar_proxy/v4/letter/m/df705f/{size}.png",
  "created_at": "2023-12-06T23:07:59.004Z",
  "cooked": "<p>Multi-party transaction protocols (e.g., dual funding, splicing) are generally vulnerable to liquidity griefing attacks that lock up the victim\u2019s UTXOs for an extended period of time.  Some forms of these attacks are difficult to prevent and can require the victim to pay a high ransom (inflated transaction fee) to unlock their funds.</p>\n<p>What follows is my best summary and commentary on the various liquidity griefing vectors and potential defenses proposed by <code>@t-bast</code>, <code>@rustyrussell</code>, <code>@niftynei</code>, <a class=\"mention\" href=\"/u/roasbeef\">@roasbeef</a>, <a class=\"mention\" href=\"/u/mattcorallo\">@MattCorallo</a>, <code>@ariard</code>, myself, and others.  The goal is to spark some discussion about all the potential forms of these attacks (including ones I\u2019ve missed), potential defenses and tradeoffs.</p>\n<h1><a name=\"tldr-1\" class=\"anchor\" href=\"#tldr-1\"></a>Tl;dr</h1>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>Griefing Method</th>\n<th>Initiator signs first</th>\n<th>Delay UTXO locking until broadcast</th>\n<th>Require confirmed inputs</th>\n<th>Mempool monitoring</th>\n<th>Require p2wpkh inputs</th>\n<th>Anchor outputs</th>\n<th>v3 transactions</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Withholding signatures</td>\n<td>partial fix</td>\n<td>fix</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Nonexistant inputs</td>\n<td></td>\n<td>fix</td>\n<td>fix</td>\n<td>partial fix</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Low feerate ancestors</td>\n<td></td>\n<td></td>\n<td>fix</td>\n<td>partial fix</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Replacing ancestors</td>\n<td></td>\n<td></td>\n<td>fix</td>\n<td>partial fix</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Pinned conflicting tx</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Witness inflation</td>\n<td>partial fix</td>\n<td></td>\n<td></td>\n<td></td>\n<td>fix</td>\n<td>partial fix</td>\n<td>partial fix</td>\n</tr>\n</tbody>\n</table>\n</div><h1><a name=\"liquidity-griefing-vectors-2\" class=\"anchor\" href=\"#liquidity-griefing-vectors-2\"></a>Liquidity griefing vectors</h1>\n<p>There are two main vectors for liquidity griefing:</p>\n<ol>\n<li>preventing successful broadcast of the joint transaction</li>\n<li>preventing or delaying confirmation of the joint transaction</li>\n</ol>\n<h2><a name=\"preventing-transaction-broadcast-3\" class=\"anchor\" href=\"#preventing-transaction-broadcast-3\"></a>Preventing transaction broadcast</h2>\n<p>For single-party transactions, wallets typically lock UTXOs while constructing the transaction to ensure that concurrent sessions do not double spend UTXOs.  For multi-party transactions, such a policy is vulnerable to liquidity griefing from an attacker who can prevent the transaction from being successfully broadcast.</p>\n<h3><a name=\"withholding-signatures-4\" class=\"anchor\" href=\"#withholding-signatures-4\"></a>Withholding signatures</h3>\n<p>Once Bob shares signatures for his transaction inputs with Mallory, he can no longer safely back out of the protocol and forget about the joint transaction \u2013 he must be prepared for Mallory to broadcast the joint transaction at any point in the future.  If Mallory never broadcasts the transaction and never shares her input signatures with Bob, Bob\u2019s UTXOs will remain locked until he pays transaction fees to double spend one of his inputs.</p>\n<h3><a name=\"nonexistant-inputs-5\" class=\"anchor\" href=\"#nonexistant-inputs-5\"></a>Nonexistant inputs</h3>\n<p>Mallory can use inputs for the joint transaction that do not exist on-chain or in mempools, thus preventing the joint transaction from being successfully broadcast.  Bob doesn\u2019t know whether Mallory\u2019s inputs will eventually exist on-chain, so he cannot safely forget about the transaction.  So Bob\u2019s UTXOs will remain locked until he pays transaction fees to double spend one of his inputs.</p>\n<h2><a name=\"preventing-transaction-confirmation-6\" class=\"anchor\" href=\"#preventing-transaction-confirmation-6\"></a>Preventing transaction confirmation</h2>\n<p>Even if a participant in a multi-party protocol chooses not to lock UTXOs during transaction construction, they generally cannot afford to leave UTXOs unlocked until transaction confirmation because that would cause lots of accidental double spends. The participant will usually need to lock UTXOs soon after the joint transaction is successfully broadcast.  As a consequence, the participant is vulnerable to liquidity griefing from an attacker who can prevent or delay the joint transaction from confirming after broadcast.</p>\n<h3><a name=\"low-feerate-ancestors-7\" class=\"anchor\" href=\"#low-feerate-ancestors-7\"></a>Low feerate ancestors</h3>\n<p>If Mallory uses unconfirmed inputs in the joint transaction, she can delay confirmation of the joint transaction at least until her input transactions confirm.  By making the feerate on those input transactions very low, Mallory can lock Bob\u2019s liquidity for an extended period.</p>\n<h3><a name=\"replacing-ancestors-8\" class=\"anchor\" href=\"#replacing-ancestors-8\"></a>Replacing ancestors</h3>\n<p>After Bob has successfully broadcast the joint transaction, Mallory can double-spend one of her unconfirmed input transactions, permanently preventing the joint transaction from confirming.  If Bob fails to detect this, his UTXOs will remain locked indefinitely.</p>\n<h3><a name=\"pinned-conflicting-transaction-9\" class=\"anchor\" href=\"#pinned-conflicting-transaction-9\"></a>Pinned conflicting transaction</h3>\n<p>After sending her signatures to Bob, Mallory can pin a low-feerate transaction that conflicts with the joint transaction in mempools.  The pinning can be done by disabling RBF for the transaction or by attaching many low-feerate descendants.  If she broadcasts to the right nodes and has the good timing, Mallory can partition the network such that Bob\u2019s mempool contains the joint transaction while the conflicting transaction is pinned in most other mempools.  The joint transaction will not propagate to miners, and Bob\u2019s liquidity will be locked up until Mallory\u2019s conflicting transaction confirms.</p>\n<h3><a name=\"witness-inflation-10\" class=\"anchor\" href=\"#witness-inflation-10\"></a>Witness inflation</h3>\n<p>Mallory can inflate the size of her witnesses to lower the effective feerate on the joint transaction and delay confirmation.  Mallory may also attach many low-feerate descendants to the joint transaction in order to prevent Bob from fee bumping via CPFP or double-spending via RBF.</p>\n<h1><a name=\"potential-defenses-11\" class=\"anchor\" href=\"#potential-defenses-11\"></a>Potential Defenses</h1>\n<p>There are several proposed defenses against the above griefing vectors, though none are magic bullets and all have tradeoffs.</p>\n<h2><a name=\"initiator-signs-first-12\" class=\"anchor\" href=\"#initiator-signs-first-12\"></a>Initiator signs first</h2>\n<p><em>Partially fixes: withholding signatures, witness inflation</em></p>\n<p>In some multi-party protocols (e.g., dual funding), the non-initiating party is more exposed to repeated griefing than the initiating party.  For these protocols, a policy requiring the initiator to send their input signatures first can help prevent griefing against the non-initiator.</p>\n<p>If Mallory is the initiator, this policy trivially prevents her from griefing Bob by withholding signatures (if she does, Bob can safely back out of the protocol).</p>\n<p>Additionally, Bob is able to inspect Mallory\u2019s witnesses prior to broadcast and ensure they are not inflated.  Bob can also broadcast the joint transaction widely before sending Mallory his signatures, making it difficult for Mallory to construct and broadcast a competing inflated transaction successfully.</p>\n<h3><a name=\"downsides-13\" class=\"anchor\" href=\"#downsides-13\"></a>Downsides</h3>\n<p>Batching multiple channel opens and/or splices into the same transaction becomes impossible for the initiator.</p>\n<p>Does not prevent griefing against the initiator.</p>\n<h2><a name=\"delay-utxo-locking-until-broadcast-14\" class=\"anchor\" href=\"#delay-utxo-locking-until-broadcast-14\"></a>Delay UTXO locking until broadcast</h2>\n<p><em>Fixes: withholding signatures, nonexistant inputs</em></p>\n<p>If Bob keeps his UTXOs unlocked until he is able to successfully broadcast the joint transaction, it is impossible to lock up his liquidity by preventing transaction broadcast.  Bob will simply use the same UTXOs for another purpose once he has a productive opportunity to do so, negating the goal of the attack.</p>\n<h3><a name=\"downsides-15\" class=\"anchor\" href=\"#downsides-15\"></a>Downsides</h3>\n<p>Accidental double spending against honest counterparties can occur.  Concurrent multi-party sessions could end up spending the same UTXOs, causing one of the sessions to end in failure.</p>\n<p>When concurrent sessions are expected to be rare and conclude quickly, this approach can work well in practice.  This approach is currently used for dual funding and splicing.</p>\n<h2><a name=\"require-confirmed-inputs-16\" class=\"anchor\" href=\"#require-confirmed-inputs-16\"></a>Require confirmed inputs</h2>\n<p><em>Fixes: nonexistant inputs, low feerate ancestors, replacing ancestors</em></p>\n<p>By rejecting unconfirmed inputs, Bob can trivally prevent any attack vector that relies on unconfirmed inputs.</p>\n<h3><a name=\"downsides-17\" class=\"anchor\" href=\"#downsides-17\"></a>Downsides</h3>\n<p>Transactions in the mempool must now confirm before they can be used in the joint transaction. This causes a minimum delay of 1 block (~10 minutes) before the multi-party protocol can begin.</p>\n<h2><a name=\"mempool-monitoring-18\" class=\"anchor\" href=\"#mempool-monitoring-18\"></a>Mempool monitoring</h2>\n<p><em>Partially fixes: nonexistant inputs, low feerate ancestors, replacing ancestors</em></p>\n<p>If Bob wants to allow unconfirmed inputs, he can inspect all unconfirmed ancestors in his mempool prior to sending his input signatures.  If any ancestors are not present or have a low feerate, Bob can safely cancel the negotiation.</p>\n<p>Once he broadcasts the joint transaction, Bob can watch the blockchain for transactions that conflict with any unconfirmed ancestor.  If such a transaction is found, Bob can safely unlock all of his input UTXOs and use them for other purposes.</p>\n<h3><a name=\"downsides-19\" class=\"anchor\" href=\"#downsides-19\"></a>Downsides</h3>\n<p>Bob\u2019s mempool doesn\u2019t necessarily match other mempools on the network, so it is possible that Mallory has pinned a low-feerate conflicting ancestor in other mempools.  In that case mempool monitoring doesn\u2019t help Bob, and Mallory can still lock up his liquidity until the conflicting ancestor confirms.</p>\n<p>Mempool monitoring also requires access to a full node\u2019s mempool, which may not be possible for parties with resource constraints (e.g., mobile devices).</p>\n<h2><a name=\"require-p2wpkh-inputs-20\" class=\"anchor\" href=\"#require-p2wpkh-inputs-20\"></a>Require p2wpkh inputs</h2>\n<p><em>Fixes: witness inflation</em></p>\n<p>If Bob requires all inputs to be p2wpkh, there is no way for Mallory to inflate her witnesses for those inputs.</p>\n<h4><a name=\"what-about-p2tr-21\" class=\"anchor\" href=\"#what-about-p2tr-21\"></a>What about p2tr?</h4>\n<p>There was also some discussion at the last Lightning spec meeting about p2tr being a viable input type if a proof is provided that only key-path spends are possible.  Unfortunately, I think key-path spends can still have their witnesses inflated <a href=\"https://github.com/bitcoin/bips/blob/e918b50731397872ad2922a1b08a5a4cd1d6d546/bip-0341.mediawiki#script-validation-rules\" rel=\"noopener nofollow ugc\">via the annex</a>.</p>\n<h3><a name=\"downsides-22\" class=\"anchor\" href=\"#downsides-22\"></a>Downsides</h3>\n<p>Restricting inputs to p2wpkh significantly reduces usability of the multi-party protocol.  For example, this restriction would make it impossible to have a single transaction splice funds from one lightning channel to another.</p>\n<h2><a name=\"anchor-outputs-23\" class=\"anchor\" href=\"#anchor-outputs-23\"></a>Anchor outputs</h2>\n<p><em>Partially fixes: witness inflation</em></p>\n<p>If the protocol requires all but 1 output per party to be encumbered by a CSV of at least 1, <a href=\"https://bitcoinops.org/en/topics/cpfp-carve-out/\" rel=\"noopener nofollow ugc\">CPFP carve out</a> can be used to confirm the joint transaction when needed, regardless of pinning attempts.</p>\n<h3><a name=\"downsides-24\" class=\"anchor\" href=\"#downsides-24\"></a>Downsides</h3>\n<p>CPFP carve-out only works for 2-party protocols.  Therefore, batching multiple channel opens and/or splices into the same transaction becomes impossible in most cases.</p>\n<p>Bob also must pay extra fees to perform the CPFP.  If Mallory repeatedly engages in witness inflation attacks against Bob, she can force him to slowly burn his funds as transaction fees.</p>\n<p>In addition, encumbering outputs with CSV 1 reduces on-chain efficiency and requires extra complexity to verify the encumberance.</p>\n<h2><a name=\"v3-transactions-25\" class=\"anchor\" href=\"#v3-transactions-25\"></a>v3 transactions</h2>\n<p><em>Partially fixes: witness inflation</em></p>\n<p><a href=\"https://github.com/bitcoin/bitcoin/pull/25038\" rel=\"noopener nofollow ugc\">v3 transactions</a> severely limit the number and size of descendants they can have.  Thus if joint transactions are marked v3, pinning doesn\u2019t work, and either party can unlock their funds by double spending one of their inputs.</p>\n<h3><a name=\"downsides-26\" class=\"anchor\" href=\"#downsides-26\"></a>Downsides</h3>\n<p>Even with v3 transactions, double spending can incur a limited RBF penalty fee.  If Mallory engages in repeated witness inflation attacks against Bob, she can force him to consistently pay higher-than-normal fees to double-spend his griefed UTXOs.</p>\n<p>And, of course, v3 transactions don\u2019t exist yet.</p>\n<h1><a name=\"conclusion-27\" class=\"anchor\" href=\"#conclusion-27\"></a>Conclusion</h1>\n<p>We have potential defenses against some liquidity griefing vectors, but they all have tradeoffs.  It seems that all known defenses against witness inflation have substantial downsides, and we have no known defenses  against a pinned conflicting transaction that is missing from the victim\u2019s mempool.</p>\n<p>Hopefully we can come up with some more ideas to address this fundamental problem in multi-party transaction protocols.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2023-12-07T19:12:18.623Z",
  "reply_count": 2,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 13,
  "reads": 20,
  "readers_count": 19,
  "score": 94.0,
  "yours": false,
  "topic_id": 264,
  "topic_slug": "liquidity-griefing-in-multi-party-transaction-protocols",
  "topic_title": "Liquidity griefing in multi-party transaction protocols",
  "topic_html_title": "Liquidity griefing in multi-party transaction protocols",
  "category_id": 7,
  "display_username": "Matt Morehouse",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Multi-party transaction protocols (e.g., dual funding, splicing) are generally vulnerable to liquidity griefing attacks that lock up the victim's UTXOs for an extended period of time.  Some forms of these attacks are difficult to prevent and can require the victim to pay a high ransom (inflated transaction fee) to unlock their funds.\n\nWhat follows is my best summary and commentary on the various liquidity griefing vectors and potential defenses proposed by `@t-bast`, `@rustyrussell`, `@niftynei`, @roasbeef, @MattCorallo, `@ariard`, myself, and others.  The goal is to spark some discussion about all the potential forms of these attacks (including ones I've missed), potential defenses and tradeoffs.\n\n# Tl;dr\n\n| Griefing Method | Initiator signs first | Delay UTXO locking until broadcast | Require confirmed inputs |  Mempool monitoring | Require p2wpkh inputs | Anchor outputs | v3 transactions |\n|-----------------------|-------------------------|-------------------------------------------------|-----------------------------------|-----------------------------------|-----------------------------|----------------------|----------------------|\n| Withholding signatures | partial fix | fix | | | | | |\n| Nonexistant inputs | | fix | fix | partial fix | | | |\n| Low feerate ancestors | | | fix | partial fix | | | |\n| Replacing ancestors | | | fix | partial fix | | | |\n| Pinned conflicting tx | | | | | | | |\n| Witness inflation | partial fix | | | | fix | partial fix | partial fix |\n\n# Liquidity griefing vectors\n\nThere are two main vectors for liquidity griefing:\n1. preventing successful broadcast of the joint transaction\n2. preventing or delaying confirmation of the joint transaction\n\n## Preventing transaction broadcast\n\nFor single-party transactions, wallets typically lock UTXOs while constructing the transaction to ensure that concurrent sessions do not double spend UTXOs.  For multi-party transactions, such a policy is vulnerable to liquidity griefing from an attacker who can prevent the transaction from being successfully broadcast.\n\n### Withholding signatures\n\nOnce Bob shares signatures for his transaction inputs with Mallory, he can no longer safely back out of the protocol and forget about the joint transaction -- he must be prepared for Mallory to broadcast the joint transaction at any point in the future.  If Mallory never broadcasts the transaction and never shares her input signatures with Bob, Bob's UTXOs will remain locked until he pays transaction fees to double spend one of his inputs.\n\n### Nonexistant inputs\n\nMallory can use inputs for the joint transaction that do not exist on-chain or in mempools, thus preventing the joint transaction from being successfully broadcast.  Bob doesn't know whether Mallory's inputs will eventually exist on-chain, so he cannot safely forget about the transaction.  So Bob's UTXOs will remain locked until he pays transaction fees to double spend one of his inputs.\n\n## Preventing transaction confirmation\n\nEven if a participant in a multi-party protocol chooses not to lock UTXOs during transaction construction, they generally cannot afford to leave UTXOs unlocked until transaction confirmation because that would cause lots of accidental double spends. The participant will usually need to lock UTXOs soon after the joint transaction is successfully broadcast.  As a consequence, the participant is vulnerable to liquidity griefing from an attacker who can prevent or delay the joint transaction from confirming after broadcast.\n\n### Low feerate ancestors\n\nIf Mallory uses unconfirmed inputs in the joint transaction, she can delay confirmation of the joint transaction at least until her input transactions confirm.  By making the feerate on those input transactions very low, Mallory can lock Bob's liquidity for an extended period.\n\n### Replacing ancestors\n\nAfter Bob has successfully broadcast the joint transaction, Mallory can double-spend one of her unconfirmed input transactions, permanently preventing the joint transaction from confirming.  If Bob fails to detect this, his UTXOs will remain locked indefinitely.\n\n### Pinned conflicting transaction\n\nAfter sending her signatures to Bob, Mallory can pin a low-feerate transaction that conflicts with the joint transaction in mempools.  The pinning can be done by disabling RBF for the transaction or by attaching many low-feerate descendants.  If she broadcasts to the right nodes and has the good timing, Mallory can partition the network such that Bob's mempool contains the joint transaction while the conflicting transaction is pinned in most other mempools.  The joint transaction will not propagate to miners, and Bob's liquidity will be locked up until Mallory's conflicting transaction confirms.\n\n### Witness inflation\n\nMallory can inflate the size of her witnesses to lower the effective feerate on the joint transaction and delay confirmation.  Mallory may also attach many low-feerate descendants to the joint transaction in order to prevent Bob from fee bumping via CPFP or double-spending via RBF.\n\n\n# Potential Defenses\n\nThere are several proposed defenses against the above griefing vectors, though none are magic bullets and all have tradeoffs.\n\n## Initiator signs first\n\n*Partially fixes: withholding signatures, witness inflation*\n\nIn some multi-party protocols (e.g., dual funding), the non-initiating party is more exposed to repeated griefing than the initiating party.  For these protocols, a policy requiring the initiator to send their input signatures first can help prevent griefing against the non-initiator.\n\nIf Mallory is the initiator, this policy trivially prevents her from griefing Bob by withholding signatures (if she does, Bob can safely back out of the protocol).\n\nAdditionally, Bob is able to inspect Mallory's witnesses prior to broadcast and ensure they are not inflated.  Bob can also broadcast the joint transaction widely before sending Mallory his signatures, making it difficult for Mallory to construct and broadcast a competing inflated transaction successfully.\n\n### Downsides\n\nBatching multiple channel opens and/or splices into the same transaction becomes impossible for the initiator.\n\nDoes not prevent griefing against the initiator.\n\n## Delay UTXO locking until broadcast\n\n*Fixes: withholding signatures, nonexistant inputs*\n\nIf Bob keeps his UTXOs unlocked until he is able to successfully broadcast the joint transaction, it is impossible to lock up his liquidity by preventing transaction broadcast.  Bob will simply use the same UTXOs for another purpose once he has a productive opportunity to do so, negating the goal of the attack.\n\n### Downsides\n\nAccidental double spending against honest counterparties can occur.  Concurrent multi-party sessions could end up spending the same UTXOs, causing one of the sessions to end in failure.\n\nWhen concurrent sessions are expected to be rare and conclude quickly, this approach can work well in practice.  This approach is currently used for dual funding and splicing.\n\n## Require confirmed inputs\n\n*Fixes: nonexistant inputs, low feerate ancestors, replacing ancestors*\n\nBy rejecting unconfirmed inputs, Bob can trivally prevent any attack vector that relies on unconfirmed inputs.\n\n### Downsides\n\nTransactions in the mempool must now confirm before they can be used in the joint transaction. This causes a minimum delay of 1 block (~10 minutes) before the multi-party protocol can begin.\n\n## Mempool monitoring\n\n*Partially fixes: nonexistant inputs, low feerate ancestors, replacing ancestors*\n\nIf Bob wants to allow unconfirmed inputs, he can inspect all unconfirmed ancestors in his mempool prior to sending his input signatures.  If any ancestors are not present or have a low feerate, Bob can safely cancel the negotiation.\n\nOnce he broadcasts the joint transaction, Bob can watch the blockchain for transactions that conflict with any unconfirmed ancestor.  If such a transaction is found, Bob can safely unlock all of his input UTXOs and use them for other purposes.\n\n### Downsides\n\nBob's mempool doesn't necessarily match other mempools on the network, so it is possible that Mallory has pinned a low-feerate conflicting ancestor in other mempools.  In that case mempool monitoring doesn't help Bob, and Mallory can still lock up his liquidity until the conflicting ancestor confirms.\n\nMempool monitoring also requires access to a full node's mempool, which may not be possible for parties with resource constraints (e.g., mobile devices).\n\n## Require p2wpkh inputs\n\n*Fixes: witness inflation*\n\nIf Bob requires all inputs to be p2wpkh, there is no way for Mallory to inflate her witnesses for those inputs.\n\n#### What about p2tr?\nThere was also some discussion at the last Lightning spec meeting about p2tr being a viable input type if a proof is provided that only key-path spends are possible.  Unfortunately, I think key-path spends can still have their witnesses inflated [via the annex](https://github.com/bitcoin/bips/blob/e918b50731397872ad2922a1b08a5a4cd1d6d546/bip-0341.mediawiki#script-validation-rules).\n\n### Downsides\n\nRestricting inputs to p2wpkh significantly reduces usability of the multi-party protocol.  For example, this restriction would make it impossible to have a single transaction splice funds from one lightning channel to another.\n\n## Anchor outputs\n\n*Partially fixes: witness inflation*\n\nIf the protocol requires all but 1 output per party to be encumbered by a CSV of at least 1, [CPFP carve out](https://bitcoinops.org/en/topics/cpfp-carve-out/) can be used to confirm the joint transaction when needed, regardless of pinning attempts.\n\n### Downsides\n\nCPFP carve-out only works for 2-party protocols.  Therefore, batching multiple channel opens and/or splices into the same transaction becomes impossible in most cases.\n\nBob also must pay extra fees to perform the CPFP.  If Mallory repeatedly engages in witness inflation attacks against Bob, she can force him to slowly burn his funds as transaction fees.\n\nIn addition, encumbering outputs with CSV 1 reduces on-chain efficiency and requires extra complexity to verify the encumberance.\n\n## v3 transactions\n\n*Partially fixes: witness inflation*\n\n[v3 transactions](https://github.com/bitcoin/bitcoin/pull/25038) severely limit the number and size of descendants they can have.  Thus if joint transactions are marked v3, pinning doesn't work, and either party can unlock their funds by double spending one of their inputs.\n\n### Downsides\n\nEven with v3 transactions, double spending can incur a limited RBF penalty fee.  If Mallory engages in repeated witness inflation attacks against Bob, she can force him to consistently pay higher-than-normal fees to double-spend his griefed UTXOs.\n\nAnd, of course, v3 transactions don't exist yet.\n\n# Conclusion\n\nWe have potential defenses against some liquidity griefing vectors, but they all have tradeoffs.  It seems that all known defenses against witness inflation have substantial downsides, and we have no known defenses  against a pinned conflicting transaction that is missing from the victim's mempool.\n\nHopefully we can come up with some more ideas to address this fundamental problem in multi-party transaction protocols.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 47,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    },
    {
      "id": "clap",
      "type": "emoji",
      "count": 1
    },
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 3,
  "current_user_used_main_reaction": false
}