{
  "id": 2909,
  "name": "Johan T. Halseth",
  "username": "halseth",
  "avatar_template": "/user_avatar/delvingbitcoin.org/halseth/{size}/198_2.png",
  "created_at": "2024-07-31T12:49:50.555Z",
  "cooked": "<p>Earlier I posted about <a href=\"https://github.com/halseth/elftrace\" rel=\"noopener nofollow ugc\">Elftrace</a>, a tool for creating Bitcoin Scripts to verify RISC-V execution: <a href=\"https://delvingbitcoin.org/t/verification-of-risc-v-execution-using-op-ccv/313\" class=\"inline-onebox\">Verification of RISC-V execution using OP_CCV</a></p>\n<p>Since then it has had some updates, and I wanted to share that the toolchain has had some additions making it easier to compile Rust without having to write custom assembly for every new program. It now also support doing input/output to the program using standard IO.</p>\n<p>With this in place we are able to compile the <strong>Winterfell STARK library</strong> as a dependency, making it possible to <em>verify-the-verification</em> of  ZK proofs in Bitcoin Script (this still requires CAT and a covenant).</p>\n<p>A more detailed writeup is here, with example code: <a href=\"https://github.com/halseth/elftrace/blob/831f537bc1509bd45c350e103f7fc73aa818f7dd/docs/zk_verifier.md\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">elftrace/docs/zk_verifier.md at 831f537bc1509bd45c350e103f7fc73aa818f7dd \u00b7 halseth/elftrace \u00b7 GitHub</a></p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-07-31T12:54:53.365Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 4,
  "reads": 9,
  "readers_count": 8,
  "score": 36.8,
  "yours": false,
  "topic_id": 1050,
  "topic_slug": "optimistic-zk-verification-using-matt",
  "topic_title": "Optimistic ZK verification using MATT",
  "topic_html_title": "Optimistic ZK verification using MATT",
  "category_id": 7,
  "display_username": "Johan T. Halseth",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Earlier I posted about [Elftrace](https://github.com/halseth/elftrace), a tool for creating Bitcoin Scripts to verify RISC-V execution: https://delvingbitcoin.org/t/verification-of-risc-v-execution-using-op-ccv/313 \n\nSince then it has had some updates, and I wanted to share that the toolchain has had some additions making it easier to compile Rust without having to write custom assembly for every new program. It now also support doing input/output to the program using standard IO.\n\nWith this in place we are able to compile the **Winterfell STARK library** as a dependency, making it possible to _verify-the-verification_ of  ZK proofs in Bitcoin Script (this still requires CAT and a covenant).\n\nA more detailed writeup is here, with example code: https://github.com/halseth/elftrace/blob/831f537bc1509bd45c350e103f7fc73aa818f7dd/docs/zk_verifier.md",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 163,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}