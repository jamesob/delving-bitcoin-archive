{
  "id": 4888,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2025-04-29T05:54:54.794Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"JeremyRubin\" data-post=\"21\" data-topic=\"1591\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/jeremyrubin/48/264_2.png\" class=\"avatar\"> JeremyRubin:</div>\n<blockquote>\n<p>it\u2019s also not \u201ctrivial\u201d in that A can commit to B, but B cannot commit to A, even with these other opcodes.</p>\n</blockquote>\n</aside>\n<p>I think the TXHASH spec in bips <a href=\"https://github.com/bitcoin/bips/pull/1500\">PR#1500</a> can\u2019t directly do the same <a href=\"https://delvingbitcoin.org/t/how-ctv-csfs-improves-bitvm-bridges/1591/8\">bllsh trick mentioned above</a> because it only allows you to request the hash of a prevout, not the individual txid and out-index components that make that up. I think you could simulate it with CAT by requiring the user to provide the txid, the CAT\u2019ing that with the expected vout, hashing, and comparing that with the TXHASH result, then doing the same for the other input and vout though.</p>",
  "post_number": 22,
  "post_type": 1,
  "posts_count": 19,
  "updated_at": "2025-04-29T05:54:54.794Z",
  "reply_count": 0,
  "reply_to_post_number": 21,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 1.0,
  "yours": false,
  "topic_id": 1591,
  "topic_slug": "how-ctv-csfs-improves-bitvm-bridges",
  "topic_title": "How CTV+CSFS improves BitVM bridges",
  "topic_html_title": "How CTV+CSFS improves BitVM bridges",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"JeremyRubin, post:21, topic:1591\"]\nit\u2019s also not \u201ctrivial\u201d in that A can commit to B, but B cannot commit to A, even with these other opcodes.\n[/quote]\n\nI think the TXHASH spec in bips [PR#1500](https://github.com/bitcoin/bips/pull/1500) can't directly do the same [bllsh trick mentioned above](https://delvingbitcoin.org/t/how-ctv-csfs-improves-bitvm-bridges/1591/8) because it only allows you to request the hash of a prevout, not the individual txid and out-index components that make that up. I think you could simulate it with CAT by requiring the user to provide the txid, the CAT'ing that with the expected vout, hashing, and comparing that with the TXHASH result, then doing the same for the other input and vout though.",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I think the TXHASH spec in bips <a href=\"https://github.com/bitcoin/bips/pull/1500\">PR#1500</a> can\u2019t directly do the same <a href=\"https://delvingbitcoin.org/t/how-ctv-csfs-improves-bitvm-bridges/1591/8\">bllsh trick mentioned above</a> because it only allows you to request the hash of a prevout, not the individual txid and out-index components that make that up. I think you could simulate it with CAT by requiring the user to provide the&hellip;",
  "truncated": true,
  "post_url": "/t/how-ctv-csfs-improves-bitvm-bridges/1591/22",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}