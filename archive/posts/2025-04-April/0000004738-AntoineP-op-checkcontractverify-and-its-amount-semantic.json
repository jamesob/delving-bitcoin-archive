{
  "id": 4738,
  "name": "Antoine Poinsot",
  "username": "AntoineP",
  "avatar_template": "/user_avatar/delvingbitcoin.org/antoinep/{size}/483_2.png",
  "created_at": "2025-04-09T16:05:29.312Z",
  "cooked": "<p>Hi,</p>\n<p>Thanks for the concrete BIP draft and implementation. Something akin to <code>CCV</code> strikes me as elegant and potentially useful. However i think we should try to avoid the spillover effect across inputs you are introducing with the amount checks. I know there already exist some spillover effects through <code>CLTV</code>, but i think adding more such cases is the wrong direction to go.</p>\n<p>I think it\u2019s possible to avoid by using an indirection akin to that of <code>CSV</code> for instance. The constraint(s) set on output amounts could be enforced as a new field in each input. Say in the annex. The field would specify a list of (constraint type, output index, optional amount) per input. For your use here the constraint types would be either sweep or deduct (equivalent to your <em>default</em> and <em>deduct</em>). A validator would go through the inputs of the transaction before executing the script (again, similarly to how relative timelocks are implemented). For each constraint in the annex (which may be none, your <em>ignore</em> option) it would record how much value must be set in the referenced output. The optional amount field is for the deduct constraint type, the amount to be deducted. Then in your Script you could have an operation which enforces the annex of the spending input has a given set of constraints.</p>\n<p>I also think it makes sense to have separately from the <code>CCV</code> opcode as it seems like a useful primitive on its own to combine with other functionalities.</p>\n<p>I have demonstrated this approach in a branch <a href=\"https://github.com/darosior/bitcoin/tree/2504_hack_poc_annex_amounts\">here</a> on top of Bitcoin Core v29.0. This is just a quick and dirty PoC, nothing like an actual proposal. But i hope it helps convey the idea. I have implemented the various semantics you describe in your post (\u201c1-to-1\u201d, \u201cmany-to-1\u201d, \u201csend partial amount, and aggregate\u201d) as a unit test. You can run it like so (after cloning the repo and checking out the branch):</p>\n<pre><code class=\"lang-auto\">cmake -B defbuild\ncmake --build defbuild/ -j20\n./defbuild/bin/test_bitcoin -t txvalidation_tests\n</code></pre>",
  "post_number": 6,
  "post_type": 1,
  "posts_count": 6,
  "updated_at": "2025-04-09T16:06:58.169Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 12,
  "readers_count": 11,
  "score": 17.4,
  "yours": false,
  "topic_id": 1527,
  "topic_slug": "op-checkcontractverify-and-its-amount-semantic",
  "topic_title": "OP_CHECKCONTRACTVERIFY and its amount semantic",
  "topic_html_title": "OP_CHECKCONTRACTVERIFY and its amount semantic",
  "category_id": 7,
  "display_username": "Antoine Poinsot",
  "primary_group_name": null,
  "flair_name": "wg-consensus-cleanup",
  "flair_url": "/uploads/default/original/1X/856d779f9ec58484f3a96285a21a813538b689f6.png",
  "flair_bg_color": "",
  "flair_color": "",
  "flair_group_id": 43,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "Regular",
  "title_is_group": false,
  "bookmarked": false,
  "raw": "Hi,\n\nThanks for the concrete BIP draft and implementation. Something akin to `CCV` strikes me as elegant and potentially useful. However i think we should try to avoid the spillover effect across inputs you are introducing with the amount checks. I know there already exist some spillover effects through `CLTV`, but i think adding more such cases is the wrong direction to go.\n\nI think it's possible to avoid by using an indirection akin to that of `CSV` for instance. The constraint(s) set on output amounts could be enforced as a new field in each input. Say in the annex. The field would specify a list of (constraint type, output index, optional amount) per input. For your use here the constraint types would be either sweep or deduct (equivalent to your *default* and *deduct*). A validator would go through the inputs of the transaction before executing the script (again, similarly to how relative timelocks are implemented). For each constraint in the annex (which may be none, your *ignore* option) it would record how much value must be set in the referenced output. The optional amount field is for the deduct constraint type, the amount to be deducted. Then in your Script you could have an operation which enforces the annex of the spending input has a given set of constraints.\n\nI also think it makes sense to have separately from the `CCV` opcode as it seems like a useful primitive on its own to combine with other functionalities.\n\nI have demonstrated this approach in a branch [here](https://github.com/darosior/bitcoin/tree/2504_hack_poc_annex_amounts) on top of Bitcoin Core v29.0. This is just a quick and dirty PoC, nothing like an actual proposal. But i hope it helps convey the idea. I have implemented the various semantics you describe in your post (\"1-to-1\", \"many-to-1\", \"send partial amount, and aggregate\") as a unit test. You can run it like so (after cloning the repo and checking out the branch):\n```\ncmake -B defbuild\ncmake --build defbuild/ -j20\n./defbuild/bin/test_bitcoin -t txvalidation_tests\n```",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 12,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Hi, \nThanks for the concrete BIP draft and implementation. Something akin to CCV strikes me as elegant and potentially useful. However i think we should try to avoid the spillover effect across inputs you are introducing with the amount checks. I know there already exist some spillover effects throu&hellip;",
  "truncated": true,
  "post_url": "/t/op-checkcontractverify-and-its-amount-semantic/1527/6",
  "reactions": [
    {
      "id": "eyes",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}