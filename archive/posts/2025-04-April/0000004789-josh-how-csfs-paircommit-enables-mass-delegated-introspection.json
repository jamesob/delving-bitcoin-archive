{
  "id": 4789,
  "name": "",
  "username": "josh",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josh/{size}/95_2.png",
  "created_at": "2025-04-15T15:48:52.442Z",
  "cooked": "<blockquote>\n<p>One concern: committing to a merkle root with different sighashes in the scriptPubKey seems tricky, since you\u2019d need the inputs to compute the sighash\u2014but the inputs depend on the finalized scriptPubKey. The classic circular dependency issue.</p>\n</blockquote>\n<p><a class=\"mention\" href=\"/u/redundant\">@redundant</a> That\u2019s the trick! Using CSFS, the user only commits in the scriptPubKey to the <em>key</em> able to authorize a merkle root, <em>not the merkle root itself</em>.</p>\n<p>This avoids circular dependencies. It also means that the user can authorize alternative merkle roots on-the-fly, without creating a new transaction.</p>\n<blockquote>\n<p>Not sure if a 9 bytes saving is sufficient motivation for an opcode.</p>\n</blockquote>\n<p><a class=\"mention\" href=\"/u/stevenroose\">@stevenroose</a> Interesting to learn how merkle proofs might work with CAT.</p>\n<p>My understanding is that the chief motivation for PAIRCOMMIT is to narrowly enable merkle proofs, without enabling anything else. The byte savings is nice, but the real benefit of PAIRCOMMIT is that it doesn\u2019t enable the kind of recursive covenants that CAT does, so it might be easier for the community to support.</p>",
  "post_number": 4,
  "post_type": 1,
  "posts_count": 5,
  "updated_at": "2025-04-15T15:48:52.442Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 22.0,
  "yours": false,
  "topic_id": 1599,
  "topic_slug": "how-csfs-paircommit-enables-mass-delegated-introspection",
  "topic_title": "How CSFS+PAIRCOMMIT enables mass delegated introspection",
  "topic_html_title": "How CSFS+PAIRCOMMIT enables mass delegated introspection",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "> One concern: committing to a merkle root with different sighashes in the scriptPubKey seems tricky, since you\u2019d need the inputs to compute the sighash\u2014but the inputs depend on the finalized scriptPubKey. The classic circular dependency issue.\n\n@redundant That's the trick! Using CSFS, the user only commits in the scriptPubKey to the *key* able to authorize a merkle root, *not the merkle root itself*.\n\nThis avoids circular dependencies. It also means that the user can authorize alternative merkle roots on-the-fly, without creating a new transaction.\n\n> Not sure if a 9 bytes saving is sufficient motivation for an opcode.\n\n@stevenroose Interesting to learn how merkle proofs might work with CAT.\n\nMy understanding is that the chief motivation for PAIRCOMMIT is to narrowly enable merkle proofs, without enabling anything else. The byte savings is nice, but the real benefit of PAIRCOMMIT is that it doesn't enable the kind of recursive covenants that CAT does, so it might be easier for the community to support.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 98,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "One concern: committing to a merkle root with different sighashes in the scriptPubKey seems tricky, since you\u2019d need the inputs to compute the sighash\u2014but the inputs depend on the finalized scriptPubKey. The classic circular dependency issue. \n\n<a class=\"mention\" href=\"/u/redundant\">@redundant</a> That\u2019s the trick! Using CSFS, the user only&hellip;",
  "truncated": true,
  "post_url": "/t/how-csfs-paircommit-enables-mass-delegated-introspection/1599/4",
  "reactions": [
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}