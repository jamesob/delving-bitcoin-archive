{
  "id": 4869,
  "name": "salvatoshi",
  "username": "salvatoshi",
  "avatar_template": "/user_avatar/delvingbitcoin.org/salvatoshi/{size}/72_2.png",
  "created_at": "2025-04-24T08:31:45.420Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"kloaec\" data-post=\"7\" data-topic=\"1607\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/kloaec/48/1191_2.png\" class=\"avatar\"> kloaec:</div>\n<blockquote>\n<p>Assuming we want all keys to form the secret, one way to \u201cprevent\u201d someone to be able to access it would be to simply to not generate their <em>c</em><sub>i</sub>. Might be useful for some use-cases.</p>\n</blockquote>\n</aside>\n<p>Indeed this is what I meant when I wrote above that the scheme has <em>access control</em>, but I could elaborate a bit more.</p>\n<aside class=\"quote no-group\" data-username=\"kloaec\" data-post=\"7\" data-topic=\"1607\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/kloaec/48/1191_2.png\" class=\"avatar\"> kloaec:</div>\n<blockquote>\n<p>I\u2019m also pondering if the <em>c</em> i should not use a different entropy, maybe a different path (standard, this time), from the same device. The major drawback is that all devices need to provide their second key for the backup to be performed, instead of just any person in the setup being able to create the encrypted backup.</p>\n</blockquote>\n</aside>\n<p>I agree with the advantage of reducing/eliminating the number of search paths for recovery. However, my main concern is that in practice, this adds a big dependency: the backup scheme now needs access to the necessary tech stack to access the hardware signers (notoriously, a non-trivial one), and the physical device needs to be available when the backup is created - so for example, a watch-only wallet that only receives the descriptor can\u2019t create the encrypted backup.</p>\n<p>Instead, the more trivial scheme above is a pure function <code>f(descriptor) -&gt; backup</code>, which I think is a big practical advantage.</p>\n<aside class=\"quote no-group\" data-username=\"kloaec\" data-post=\"7\" data-topic=\"1607\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/kloaec/48/1191_2.png\" class=\"avatar\"> kloaec:</div>\n<blockquote>\n<p>Lastly, I feel like these files would benefit strongly from an <strong>error correction mechanism.</strong> I obviously don\u2019t like the idea of sending it to the chain, so I assume most users won\u2019t have large number of replications. In the case of Liana, assuming it\u2019s for disaster recovery or inheritance, it might be just one copy easily accessible. You want that one to be correct.</p>\n</blockquote>\n</aside>\n<p>Can you elaborate on this? I can\u2019t think of situations where error correction would save the day.</p>\n<p>I\u2019d rather suggest implementations to get creative in how to make sure that there are multiple replicas of the backup. Save to google drive? Send via e-mail or DM to someone else (that\u2019s two copies)? Post on nostr/twitter/facebook?..\nAll of these options could be just a few clicks away with a good implementation in software wallets.</p>\n<p>Many services doing any form of collaborative custody (or providing services for self-custody) could also consider storing the encrypted backup for their customer, so backup would be entirely transparent and add no UX cost at all.</p>",
  "post_number": 8,
  "post_type": 1,
  "posts_count": 9,
  "updated_at": "2025-04-24T08:31:45.420Z",
  "reply_count": 1,
  "reply_to_post_number": 7,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 12,
  "readers_count": 11,
  "score": 7.4,
  "yours": false,
  "topic_id": 1607,
  "topic_slug": "a-simple-backup-scheme-for-wallet-accounts",
  "topic_title": "A simple backup scheme for wallet accounts",
  "topic_html_title": "A simple backup scheme for wallet accounts",
  "category_id": 8,
  "display_username": "salvatoshi",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"kloaec, post:7, topic:1607, full:true\"]\nAssuming we want all keys to form the secret, one way to \"prevent\" someone to be able to access it would be to simply to not generate their *c*<sub>i</sub>. Might be useful for some use-cases.\n[/quote]\n\nIndeed this is what I meant when I wrote above that the scheme has *access control*, but I could elaborate a bit more.\n\n[quote=\"kloaec, post:7, topic:1607\"]\nI\u2019m also pondering if the *c* i should not use a different entropy, maybe a different path (standard, this time), from the same device. The major drawback is that all devices need to provide their second key for the backup to be performed, instead of just any person in the setup being able to create the encrypted backup.\n[/quote]\n\nI agree with the advantage of reducing/eliminating the number of search paths for recovery. However, my main concern is that in practice, this adds a big dependency: the backup scheme now needs access to the necessary tech stack to access the hardware signers (notoriously, a non-trivial one), and the physical device needs to be available when the backup is created - so for example, a watch-only wallet that only receives the descriptor can't create the encrypted backup.\n\nInstead, the more trivial scheme above is a pure function `f(descriptor) -> backup`, which I think is a big practical advantage.\n\n[quote=\"kloaec, post:7, topic:1607\"]\nLastly, I feel like these files would benefit strongly from an **error correction mechanism.** I obviously don\u2019t like the idea of sending it to the chain, so I assume most users won\u2019t have large number of replications. In the case of Liana, assuming it\u2019s for disaster recovery or inheritance, it might be just one copy easily accessible. You want that one to be correct.\n[/quote]\n\nCan you elaborate on this? I can't think of situations where error correction would save the day.\n\nI'd rather suggest implementations to get creative in how to make sure that there are multiple replicas of the backup. Save to google drive? Send via e-mail or DM to someone else (that's two copies)? Post on nostr/twitter/facebook?...\nAll of these options could be just a few clicks away with a good implementation in software wallets.\n\nMany services doing any form of collaborative custody (or providing services for self-custody) could also consider storing the encrypted backup for their customer, so backup would be entirely transparent and add no UX cost at all.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 81,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Indeed this is what I meant when I wrote above that the scheme has access control, but I could elaborate a bit more. \n\nI agree with the advantage of reducing/eliminating the number of search paths for recovery. However, my main concern is that in practice, this adds a big dependency: the backup sch&hellip;",
  "truncated": true,
  "post_url": "/t/a-simple-backup-scheme-for-wallet-accounts/1607/8",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}