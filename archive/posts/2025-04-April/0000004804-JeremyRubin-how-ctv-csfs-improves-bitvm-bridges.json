{
  "id": 4804,
  "name": "Jeremy Rubin",
  "username": "JeremyRubin",
  "avatar_template": "/user_avatar/delvingbitcoin.org/jeremyrubin/{size}/264_2.png",
  "created_at": "2025-04-16T13:49:57.554Z",
  "cooked": "<p>This is an interesting point; without some sort of \u201cstack sentinel\u201d that guarantees a specific script type, using CTV as a gadget for any P2SH type seems broken, as you can replace it with a legacy script that does something else. This is \u201cconfusing\u201d because you cannot replace it with a p2sh script that does something else. I can make an effort to better document this issue\u2026</p>\n<p>wrt the legacy requirement, what you <em>can</em> do is as follows:</p>\n<p>use a legacy input B which has</p>\n<pre><code>scriptSig: [other program stuff] &lt;sig || ALL|ACP &gt; Dup &lt;pk&gt; checksig\nscript: &lt;pk&gt; checksig\n</code></pre>\n<p>you are free to include more inputs like this for more data.</p>\n<p>What you can also do is employ a taproot-adapter to create B. That is a output X like:</p>\n<pre><code>tr(NUMS, {[general program] &lt;1-in-1-out w/ &lt;pk&gt; checksig&gt; CTV)\n</code></pre>\n<p>You can then bind B as usual from A, and A\u2019s commitment to B\u2019s Outpoint via B\u2019s signature guarantees that the output X has executed. So if you were relying on X for knowing some other validation property has passed, you can move most of that work into the witness data space.</p>",
  "post_number": 11,
  "post_type": 1,
  "posts_count": 10,
  "updated_at": "2025-04-16T13:49:57.554Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 7,
  "readers_count": 6,
  "score": 16.2,
  "yours": false,
  "topic_id": 1591,
  "topic_slug": "how-ctv-csfs-improves-bitvm-bridges",
  "topic_title": "How CTV+CSFS improves BitVM bridges",
  "topic_html_title": "How CTV+CSFS improves BitVM bridges",
  "category_id": 7,
  "display_username": "Jeremy Rubin",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "This is an interesting point; without some sort of \"stack sentinel\" that guarantees a specific script type, using CTV as a gadget for any P2SH type seems broken, as you can replace it with a legacy script that does something else. This is \"confusing\" because you cannot replace it with a p2sh script that does something else. I can make an effort to better document this issue...\n\nwrt the legacy requirement, what you *can* do is as follows:\n\nuse a legacy input B which has \n\n    scriptSig: [other program stuff] <sig || ALL|ACP > Dup <pk> checksig\n    script: <pk> checksig\n\nyou are free to include more inputs like this for more data.\n\nWhat you can also do is employ a taproot-adapter to create B. That is a output X like:\n\n    tr(NUMS, {[general program] <1-in-1-out w/ <pk> checksig> CTV)\n\nYou can then bind B as usual from A, and A's commitment to B's Outpoint via B's signature guarantees that the output X has executed. So if you were relying on X for knowing some other validation property has passed, you can move most of that work into the witness data space.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 224,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "This is an interesting point; without some sort of \u201cstack sentinel\u201d that guarantees a specific script type, using CTV as a gadget for any P2SH type seems broken, as you can replace it with a legacy script that does something else. This is \u201cconfusing\u201d because you cannot replace it with a p2sh script &hellip;",
  "truncated": true,
  "post_url": "/t/how-ctv-csfs-improves-bitvm-bridges/1591/11",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}