{
  "id": 4784,
  "name": "moonsettler",
  "username": "moonsettler",
  "avatar_template": "/user_avatar/delvingbitcoin.org/moonsettler/{size}/38_2.png",
  "created_at": "2025-04-15T08:55:58.168Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"victorkstarkware\" data-post=\"1\" data-topic=\"1106\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/victorkstarkware/48/772_2.png\" class=\"avatar\"> victorkstarkware:</div>\n<blockquote>\n<p>As mentioned above, OP_CAT is a simple, currently disabled, opcode that could allow Bitcoin script to concatenate elements on the stack. The importance of this simple operation cannot be overstated, as it simultaneously enables <strong>covenants</strong> and <strong>STARKs</strong> on Bitcoin. It does so in the following way:</p>\n<ul>\n<li><strong>STARKs</strong> \u2013 In fact, this is somewhat unsurprising. This is because STARKs practically consist of just <strong>concatenating</strong> data together and hashing it, which leads to great savings as hashing is a native Bitcoin script operation, unlike algebraic operations. The main hashing operations in STARKs are <strong>Merkle path verification</strong> (see Figure 8), and the <strong>Fiat-Shamir transform</strong>. (Furthermore, the field size of the Circle-STARK variant is only 31 bits, so it fits in the 4-byte restriction of Bitcoin script, making it a Bitcoin-friendly algorithm.)</li>\n<li><strong>Covenants</strong> \u2013 In 2021, Andrew Poelstra made the <a href=\"https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298\" rel=\"noopener nofollow ugc\">nontrivial observation</a> that OP_CAT can enable covenants on Bitcoin, through something called the <strong>Schnorr trick</strong>, where Schnorr\u2019s algorithm is the digital signature of <strong>Pay2Taproot</strong> output types (for other output types, a similar <strong>ECDSA trick</strong> can be used, <a href=\"https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85\" rel=\"noopener nofollow ugc\">as observed by Robin Linus</a>). To briefly describe the idea, to get covenants, we need to use OP_CHECKSIG, which is the only opcode that is capable of putting data related to the spender transaction onto the stack. It\u2019s not entirely straightforward, but through some manipulations, you can access all the necessary data.</li>\n</ul>\n</blockquote>\n</aside>\n<p>Curiously LNhance enables both covenants with <code>CTV</code> and <code>CSFS</code> and multi-commitments with <code>PAIRCOMMIT</code>. Yet it does not give us functional STARK proofs as far as I know. I am intrigued by the crucial piece missing. Is it the simple act of concatenation in the end?</p>",
  "post_number": 3,
  "post_type": 1,
  "posts_count": 3,
  "updated_at": "2025-04-15T08:55:58.168Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.4,
  "yours": false,
  "topic_id": 1106,
  "topic_slug": "the-path-to-general-computation-on-bitcoin-with-op-cat",
  "topic_title": "The path to general computation on Bitcoin (with OP_CAT)",
  "topic_html_title": "The path to general computation on Bitcoin (with OP_CAT)",
  "category_id": 8,
  "display_username": "moonsettler",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"victorkstarkware, post:1, topic:1106\"]\nAs mentioned above, OP_CAT is a simple, currently disabled, opcode that could allow Bitcoin script to concatenate elements on the stack. The importance of this simple operation cannot be overstated, as it simultaneously enables **covenants** and **STARKs** on Bitcoin. It does so in the following way:\n\n* **STARKs** \u2013 In fact, this is somewhat unsurprising. This is because STARKs practically consist of just **concatenating** data together and hashing it, which leads to great savings as hashing is a native Bitcoin script operation, unlike algebraic operations. The main hashing operations in STARKs are **Merkle path verification** (see Figure 8), and the **Fiat-Shamir transform**. (Furthermore, the field size of the Circle-STARK variant is only 31 bits, so it fits in the 4-byte restriction of Bitcoin script, making it a Bitcoin-friendly algorithm.)\n* **Covenants** \u2013 In 2021, Andrew Poelstra made the [nontrivial observation](https://medium.com/blockstream/cat-and-schnorr-tricks-i-faf1b59bd298) that OP_CAT can enable covenants on Bitcoin, through something called the **Schnorr trick**, where Schnorr\u2019s algorithm is the digital signature of **Pay2Taproot** output types (for other output types, a similar **ECDSA trick** can be used, [as observed by Robin Linus](https://gist.github.com/RobinLinus/9a69f5552be94d13170ec79bf34d5e85)). To briefly describe the idea, to get covenants, we need to use OP_CHECKSIG, which is the only opcode that is capable of putting data related to the spender transaction onto the stack. It\u2019s not entirely straightforward, but through some manipulations, you can access all the necessary data.\n[/quote]\n\nCuriously LNhance enables both covenants with `CTV` and `CSFS` and multi-commitments with `PAIRCOMMIT`. Yet it does not give us functional STARK proofs as far as I know. I am intrigued by the crucial piece missing. Is it the simple act of concatenation in the end?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 48,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Curiously LNhance enables both covenants with CTV and CSFS and multi-commitments with PAIRCOMMIT. Yet it does not give us functional STARK proofs as far as I know. I am intrigued by the crucial piece missing. Is it the simple act of concatenation in the end?",
  "truncated": true,
  "post_url": "/t/the-path-to-general-computation-on-bitcoin-with-op-cat/1106/3",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}