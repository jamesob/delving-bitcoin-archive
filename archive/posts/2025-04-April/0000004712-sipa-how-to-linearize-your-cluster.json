{
  "id": 4712,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/1100_2.png",
  "created_at": "2025-04-05T22:40:24.896Z",
  "cooked": "<p>Hmm, I think this works, but it has some caveats:</p>\n<ul>\n<li>Changes to <span class=\"math\">\\lambda</span> during GGT recursion mean that transactions may move from the sink side of the partition to the source side; I believe this violates the condition that only sink-to-node and node-to-source capacities may change. If so, this means the factor <span class=\"math\">n</span> speedup on the worst case disappears.</li>\n<li>It means that the edges need to be expanded to their transitive closure (if A depends on B, and B depends on C, we need an edge from A to C as well). With complexities like <span class=\"math\">\\mathcal{O}(n^2 \\sqrt{m})</span>, this may be a slight worsening in practice, if we account for the fact that realistic clusters tend to have <span class=\"math\">m = \\mathcal{O}(n)</span>, but the full transitive closure may well have <span class=\"math\">m = \\mathcal{O}(n^2)</span>.</li>\n</ul>\n<p>I do remember reading about specialized bipartite-graph min-cut algorithms, though\u2026</p>\n<hr>\n<aside class=\"quote no-group\" data-username=\"Lagrang3\" data-post=\"65\" data-topic=\"303\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/lagrang3/48/377_2.png\" class=\"avatar\"> Lagrang3:</div>\n<blockquote>\n<p>I will love to see through your code.</p>\n</blockquote>\n</aside>\n<p>I\u2019ll do a writeup soon on the implementation and optimizations I came up with, but I\u2019m still experimenting with a few ideas first (in particular, trying representing the edge data in <span class=\"math\">n\\times n</span> matrix form, so bitsets can be used to match things more easily).</p>",
  "post_number": 66,
  "post_type": 1,
  "posts_count": 65,
  "updated_at": "2025-04-05T23:30:05.339Z",
  "reply_count": 0,
  "reply_to_post_number": 65,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.2,
  "yours": false,
  "topic_id": 303,
  "topic_slug": "how-to-linearize-your-cluster",
  "topic_title": "How to linearize your cluster",
  "topic_html_title": "How to linearize your cluster",
  "category_id": 8,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Hmm, I think this works, but it has some caveats:\n* Changes to $\\lambda$ during GGT recursion mean that transactions may move from the sink side of the partition to the source side; I believe this violates the condition that only sink-to-node and node-to-source capacities may change. If so, this means the factor $n$ speedup on the worst case disappears.\n* It means that the edges need to be expanded to their transitive closure (if A depends on B, and B depends on C, we need an edge from A to C as well). With complexities like $\\mathcal{O}(n^2 \\sqrt{m})$, this may be a slight worsening in practice, if we account for the fact that realistic clusters tend to have $m = \\mathcal{O}(n)$, but the full transitive closure may well have $m = \\mathcal{O}(n^2)$.\n\nI do remember reading about specialized bipartite-graph min-cut algorithms, though...\n\n---\n\n[quote=\"Lagrang3, post:65, topic:303\"]\nI will love to see through your code.\n[/quote]\n\n\nI'll do a writeup soon on the implementation and optimizations I came up with, but I'm still experimenting with a few ideas first (in particular, trying representing the edge data in $n\\times n$ matrix form, so bitsets can be used to match things more easily).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Hmm, I think this works, but it has some caveats: \n\nChanges to \\lambda during GGT recursion mean that transactions may move from the sink side of the partition to the source side; I believe this violates the condition that only sink-to-node and node-to-source capacities may change. If so, this means&hellip;",
  "truncated": true,
  "post_url": "/t/how-to-linearize-your-cluster/303/66",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}