{
  "id": 4708,
  "name": null,
  "username": "JohnLaw",
  "avatar_template": "/letter_avatar_proxy/v4/letter/j/58956e/{size}.png",
  "created_at": "2025-04-05T19:42:07.993Z",
  "cooked": "<p>Hi Dave,</p>\n<p>Thanks for pointing out the benefits of time-dependent Hold Fees for not-immediately-settled payments.</p>\n<p>Regarding the increase in latency, I agree that the bug fix (which increases the burn funds before it adds the HTLC output) adds one round-trip time (RTT).\nHowever, I believe this is a 1.67x increase (rather than a 3x increase) as the downstream node has to wait for the revocation of the upstream node\u2019s commitment transaction that doesn\u2019t include the HTLC output (step 3 in your description of the current protocol and step 5 in your description of the protocol with the bug fix).\nThus, the latency goes from 1.5 RTTs to 2.5 RTTs.</p>\n<p>Fortunately, I think it\u2019s possible to eliminate this latency penalty while implementing time-dependent Hold Fees with the bug fix.</p>\n<p>The idea is to increase burn funds before adding the HTLC output (as in the high-latency bug fix), but to allow the downstream node to provide signatures for both of these updates consecutively (without a RTT in between).</p>\n<p>If the downstream node committed to the increase burn funds (by revoking their previous commitment transaction) <em>during</em> the grace period, the upstream node can commit to the addition of the HTLC output (by revoking all earlier commitment transactions).\nThen the upstream node gives the downstream node a signature for a commitment transaction with the HTLC output.\nAt this point, the downstream node is guaranteed to be able to get payment for the HTLC if they get the hash preimage in time, so the downstream node can offer the HTLC in the payment\u2019s next channel.\nNote that the overall latency is just 1.5 RTTs.</p>\n<p>On the other hand, if the downstream node committed to the increased burn funds <em>after</em> the grace period, the upstream node does not have to commit to the addition of the HTLC output.\nInstead, it sends an update_remove_htlc packet to the downstream node, followed by a revocation of only the commitment transaction that precedes the one with increased burn funds.\nAs a result, the upstream node still has an unrevoked commitment transaction without the HTLC output that it can put on-chain if needed.\nThe downstream node responds with a signature for a new commitment transaction without the increased burn funds or HTLC output and the upstream node revokes all commitment transactions that precede this latest one.\nThis flow uses 2.5 RTTs, but it only occurs when there\u2019s a failure to propagate the payment within the grace period.\nAs a result, the payment fails without having to wait beyond the grace period.</p>\n<p>This improved protocol requires the upstream node to have up to 3 current (signed and not revoked) transactions at a time.\nTherefore, the rules for providing pc_points and pc_secrets have to be modified.\nIn particular, the current revoke_and_ack packet includes pc_secret_x and pc_point_(x+2) (for an arbitrary value of x).\nTo make this new low-latency spam-prevention protocol work, we have to change the revoke_and_ack packet to include pc_secret_x and pc_point_(x+3).\nIn addition, the funding_locked packet is changed to include pc_point_1 and pc_point_2 (rather than just pc_point_1).</p>\n<p>The detailed protocol is presented below.\nIf no one finds any problems with it, I\u2019ll update the paper to include it.</p>\n<h1><a name=\"p-4708-current-protocol-1\" class=\"anchor\" href=\"#p-4708-current-protocol-1\"></a>Current Protocol</h1>\n<h2><a name=\"p-4708-terminology-notation-and-packet-definitions-2\" class=\"anchor\" href=\"#p-4708-terminology-notation-and-packet-definitions-2\"></a>Terminology, Notation and Packet Definitions</h2>\n<ul>\n<li>Alice is sender</li>\n<li>Bob is receiver</li>\n<li>A_i is Alice\u2019s commitment transaction using pc_point_i</li>\n<li>B_j is Bob\u2019s commitment transaction using pc_point_j</li>\n<li>open_channel packet includes pc_point_0</li>\n<li>accept_channel packet includes pc_point_0</li>\n<li>funding_locked packet includes pc_point_1</li>\n<li>revoke_and_ack_x packet includes pc_secret_x and pc_point_(x+2)</li>\n<li>commitment_signed_x is commitment_signed message providing a signature for the commitment transaction which uses pc_point_x</li>\n<li>commitment transaction x is:\n<ul>\n<li>\u201csigned\u201d if commitment_signed_x has been received, \u201cunsigned\u201d otherwise</li>\n<li>\u201crevoked\u201d if revoke_and_ack_x has been received</li>\n<li>\u201ccurrent\u201d if it is signed and not revoked</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-4708-flow-for-adding-an-htlc-3\" class=\"anchor\" href=\"#p-4708-flow-for-adding-an-htlc-3\"></a>Flow for adding an HTLC</h2>\n<ul>\n<li>pending on the receiver</li>\n<li>\u2026 in the receiver\u2019s latest commitment transaction</li>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked, and the update is pending on the sender</li>\n<li>\u2026 and in the sender\u2019s latest commitment transaction</li>\n<li>\u2026 and the sender\u2019s previous commitment transaction has been revoked</li>\n</ul>\n<h2><a name=\"p-4708-detailed-protocol-4\" class=\"anchor\" href=\"#p-4708-detailed-protocol-4\"></a>Detailed Protocol</h2>\n<ul>\n<li>a1  update_add_htlc to receiver\n<ul>\n<li>HTLC output pending on the receiver</li>\n<li>Bob has 1 current commitment transaction\n<ul>\n<li>HTLC output is not in Bob\u2019s current commitment transaction</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>a2  commitment_signed_j to receiver\n<ul>\n<li>\u2026 and the HTLC output is in the receiver\u2019s latest commitment transaction</li>\n<li>Bob has 2 current commitment transactions: B_(j-1) and B_j\n<ul>\n<li>HTLC output is not in B_(j-1)</li>\n<li>HTLC output is in B_j</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>a3  revoke_and_ack_(j-1) to sender\n<ul>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked, and the HTLC output is pending on the sender</li>\n<li>Bob has 1 current commitment transaction: B_j\n<ul>\n<li>HTLC output is in B_j</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>a4  commitment_signed_i to sender\n<ul>\n<li>\u2026 and the HTLC output is in the sender\u2019s latest commitment transaction</li>\n<li>Alice has 2 current commitment transactions: A_(i-1) and A_i\n<ul>\n<li>HTLC output is not in A_(i-1)</li>\n<li>HTLC output is in A_i</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>a5  revoke_and_ack_(i-1) to receiver\n<ul>\n<li>\u2026 and the sender\u2019s previous commitment transaction has been revoked</li>\n<li>Alice has 1 current commitment transaction: A_i\n<ul>\n<li>HTLC output is in A_i</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>and eventually:</p>\n<ul>\n<li>a6  update_fulfill_htlc or update_fail_htlc to sender\n<ul>\n<li>\u2026 and the HTLC resolution is pending on the sender</li>\n</ul>\n</li>\n<li>a7  commitment_signed_x to sender\n<ul>\n<li>\u2026 and the HTLC resolution is in the sender\u2019s latest commitment transaction</li>\n<li>Alice has 2 current commitment transactions: A_(x-1) and A_x\n<ul>\n<li>HTLC output is in A_(x-1)</li>\n<li>resolved HTLC (without HTLC output) is in A_x</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>a8  revoke_and_ack_(x-1) to receiver\n<ul>\n<li>\u2026 and the sender\u2019s previous commitment transaction has been revoked, and the HTLC resolution is pending on the receiver</li>\n<li>Alice has 1 current commitment transactions: A_x\n<ul>\n<li>resolved HTLC (without HTLC output) is in A_x\na9  commitment_signed_y to receiver</li>\n</ul>\n</li>\n<li>\u2026 and the HTLC resolution is in the receiver\u2019s latest commitment transaction</li>\n<li>Bob has 2 current commitment transactions: B_(y-1) and B_y\n<ul>\n<li>HTLC output is in B_(y-1)</li>\n<li>resolved HTLC (without HTLC output) is in B_y</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>a10 revoke_and_ack_(y-1) to sender\n<ul>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked</li>\n<li>Bob has 1 current commitment transactions: B_y\n<ul>\n<li>resolved HTLC (without HTLC output) is in B_y</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-4708-htlc-propagation-latency-5\" class=\"anchor\" href=\"#p-4708-htlc-propagation-latency-5\"></a>HTLC Propagation Latency</h2>\n<ul>\n<li>receiver can send update_add_htlc in next channel after receiving a5</li>\n<li>1.5 RTTs:\n<ul>\n<li>a1/a2</li>\n<li>a3/a4</li>\n<li>a5</li>\n</ul>\n</li>\n</ul>\n<h1><a name=\"p-4708-spam-prevention-protocol-without-increased-latency-6\" class=\"anchor\" href=\"#p-4708-spam-prevention-protocol-without-increased-latency-6\"></a>Spam Prevention Protocol Without Increased Latency</h1>\n<h2><a name=\"p-4708-terminology-notation-and-packet-definitions-7\" class=\"anchor\" href=\"#p-4708-terminology-notation-and-packet-definitions-7\"></a>Terminology, Notation and Packet Definitions</h2>\n<ul>\n<li>Alice is sender</li>\n<li>Bob is receiver</li>\n<li>A_i is Alice\u2019s commitment transaction using pc_point_i</li>\n<li>B_j is Bob\u2019s commitment transaction using pc_point_j</li>\n<li>open_channel packet includes pc_point_0</li>\n<li>accept_channel packet includes pc_point_0</li>\n<li>funding_locked packet includes pc_point_1 and pc_point_2</li>\n<li>revoke_and_ack_x packet includes pc_secret_x and pc_point_(x+3)</li>\n<li>commitment_signed_x is commitment_signed message providing a signature for the commitment transaction which uses pc_point_x</li>\n<li>commitment transaction x is:\n<ul>\n<li>\u201csigned\u201d if commitment_signed_x has been received, \u201cunsigned\u201d otherwise</li>\n<li>\u201crevoked\u201d if revoke_and_ack_x has been received</li>\n<li>\u201ccurrent\u201d if it is signed and not revoked</li>\n</ul>\n</li>\n</ul>\n<h1><a name=\"p-4708-case-1-receiver-commits-to-increased-burn-amount-during-grace-period-8\" class=\"anchor\" href=\"#p-4708-case-1-receiver-commits-to-increased-burn-amount-during-grace-period-8\"></a>Case 1: Receiver commits to increased burn amount <em>during</em> grace period</h1>\n<h2><a name=\"p-4708-flow-for-adding-an-htlc-9\" class=\"anchor\" href=\"#p-4708-flow-for-adding-an-htlc-9\"></a>Flow for adding an HTLC</h2>\n<ul>\n<li>increased burn amount is pending on the receiver</li>\n<li>\u2026 and the increased burn amount is in the receiver\u2019s latest commitment transaction</li>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked, and the increased burn amount is pending on the sender</li>\n<li>\u2026 and the increased burn amount is in the sender\u2019s latest commitment transaction, and the HTLC output is pending on the sender</li>\n<li>\u2026 and the increased burn amount and HTLC output are in the sender\u2019s latest commitment transaction</li>\n<li>\u2026 and the sender\u2019s earliest current commitment transaction has been revoked</li>\n<li>\u2026 and the sender\u2019s previous commitment transaction has been revoked, and the HTLC output is pending on the receiver</li>\n<li>\u2026 and the HTLC output is in the receiver\u2019s latest commitment transaction</li>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked</li>\n</ul>\n<h2><a name=\"p-4708-detailed-protocol-10\" class=\"anchor\" href=\"#p-4708-detailed-protocol-10\"></a>Detailed Protocol</h2>\n<ul>\n<li>d1  update_add_htlc to receiver\n<ul>\n<li>increased burn amount pending on the receiver</li>\n<li>Bob has 1 current commitment transaction\n<ul>\n<li>increased burn amount is not in Bob\u2019s current commitment transaction</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d2  commitment_signed_j to receiver\n<ul>\n<li>\u2026 and the increased burn amount is in the receiver\u2019s latest commitment transaction</li>\n<li>Bob has 2 current commitment transactions: B_(j-1) and B_j\n<ul>\n<li>increased burn amount is not in B_(j-1)</li>\n<li>increased burn amount is in B_j</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d3  revoke_and_ack_(j-1) to sender during grace period\n<ul>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked, and the increased burn amount is pending on the sender</li>\n<li>Bob has 1 current commitment transaction: B_j\n<ul>\n<li>increased burn amount is in B_j</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d4  commitment_signed_i to sender\n<ul>\n<li>\u2026 and the increased burn amount is in the sender\u2019s latest commitment transaction, and the HTLC output is pending on the sender</li>\n<li>Alice has 2 current commitment transactions: A_(i-1) and A_i\n<ul>\n<li>increased burn amount is not in A_(i-1)</li>\n<li>increased burn amount is in A_i</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d5  commitment_signed_(i+1) to sender\n<ul>\n<li>\u2026 and the increased burn amount and HTLC output are in the sender\u2019s latest commitment transaction</li>\n<li>Alice has 3 current commitment transactions: A_(i-1), A_i and A_(i+1)\n<ul>\n<li>increased burn amount is not in A_(i-1)</li>\n<li>increased burn amount is in A_i, HTLC output is not in A_i</li>\n<li>increased burn amount and HTLC output are in A_(i+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d6  revoke_and_ack_(i-1) to receiver\n<ul>\n<li>\u2026 and the sender\u2019s earliest current commitment transaction has been revoked</li>\n<li>Alice has 2 current commitment transaction: A_i and A_(i+1)\n<ul>\n<li>increased burn amount is in A_i, HTLC output is not in A_i</li>\n<li>increased burn amount and HTLC output are in A_(i+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d7  revoke_and_ack_i to receiver\n<ul>\n<li>\u2026 and the sender\u2019s previous commitment transaction has been revoked, and the HTLC output is pending on the receiver</li>\n<li>Alice has 1 current commitment transaction: A_(i+1)\n<ul>\n<li>increased burn amount and HTLC output are in A_(i+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d8  commitment_signed_(j+1) to receiver\n<ul>\n<li>\u2026 and the HTLC output is in the receiver\u2019s latest commitment transaction</li>\n<li>Bob has 2 current commitment transactions: B_j and B_(j+1)\n<ul>\n<li>increased burn amount is in B_j, HTLC output is not in B_j</li>\n<li>increased burn amount and HTLC output are in B_(j+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d9  revoke_and_ack_j to sender\n<ul>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked</li>\n<li>Bob has 1 current commitment transaction: B_(j+1)\n<ul>\n<li>increased burn amount and HTLC output are in B_(j+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>and eventually:</p>\n<ul>\n<li>d10 update_fulfill_htlc or update_fail_htlc to sender\n<ul>\n<li>\u2026 and the HTLC resolution is pending on the sender</li>\n</ul>\n</li>\n<li>d11 commitment_signed_x to sender\n<ul>\n<li>\u2026 and the HTLC resolution is in the sender\u2019s latest commitment transaction</li>\n<li>Alice has 2 current commitment transactions: A_(x-1) and A_x\n<ul>\n<li>increased burn amount and HTLC output are in A_(x-1)</li>\n<li>resolved HTLC (without increased burn amount or HTLC output) is in A_x</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d12 revoke_and_ack_(x-1) to receiver\n<ul>\n<li>\u2026 and the sender\u2019s previous commitment transaction has been revoked, and the HTLC resolution is pending on the receiver</li>\n<li>Alice has 1 current commitment transactions: A_x\n<ul>\n<li>resolved HTLC (without increased burn amount or HTLC output) is in A_x</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d13 commitment_signed_y to receiver\n<ul>\n<li>\u2026 and the HTLC resolution is in the receiver\u2019s latest commitment transaction</li>\n<li>Bob has 2 current commitment transactions: B_(y-1) and B_y\n<ul>\n<li>increased burn amount and HTLC output are in B_(y-1)</li>\n<li>resolved HTLC (without increased burn amount or HTLC output) is in B_y</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>d14 revoke_and_ack_(y-1) to sender\n<ul>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked</li>\n<li>Bob has 1 current commitment transactions: B_y\n<ul>\n<li>resolved HTLC (without increased burn amount or HTLC output) is in B_y</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2><a name=\"p-4708-htlc-propagation-latency-11\" class=\"anchor\" href=\"#p-4708-htlc-propagation-latency-11\"></a>HTLC Propagation Latency</h2>\n<ul>\n<li>receiver can send update_add_htlc in next channel after receiving d8</li>\n<li>1.5 RTTs:\n<ul>\n<li>d1/d2</li>\n<li>d3/d4/d5</li>\n<li>d6/d7/d8</li>\n</ul>\n</li>\n</ul>\n<h1><a name=\"p-4708-case-2-receiver-commits-to-increased-burn-amount-after-grace-period-12\" class=\"anchor\" href=\"#p-4708-case-2-receiver-commits-to-increased-burn-amount-after-grace-period-12\"></a>Case 2: Receiver commits to increased burn amount <em>after</em> grace period</h1>\n<h2><a name=\"p-4708-flow-for-adding-an-htlc-13\" class=\"anchor\" href=\"#p-4708-flow-for-adding-an-htlc-13\"></a>Flow for adding an HTLC</h2>\n<ul>\n<li>increased burn amount is pending on the receiver</li>\n<li>\u2026 and the increased burn amount is in the receiver\u2019s latest commitment transaction</li>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked, and the increased burn amount is pending on the sender</li>\n<li>\u2026 and the increased burn amount is in the sender\u2019s latest commitment transaction, and the HTLC output is pending on the sender</li>\n<li>\u2026 and the increased burn amount and HTLC output are in the sender\u2019s latest commitment transaction</li>\n<li>\u2026 and the failed HTLC (without increased burn amount or HTLC output) is pending on the receiver</li>\n<li>\u2026 and the sender\u2019s earliest current commitment transaction has been revoked</li>\n<li>\u2026 and the failed HTLC (without increased burn amount or HTLC output) is in the receiver\u2019s latest commitment transaction</li>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked, and the failed HTLC (without increased burn amount or HTLC output) is pending on the sender</li>\n<li>\u2026 and the failed HTLC (without increased burn amount or HTLC output) is in the sender\u2019s latest commitment transaction</li>\n<li>\u2026 and the sender\u2019s earliest current commitment transaction has been revoked</li>\n<li>\u2026 and the sender\u2019s previous commitment transaction has been revoked</li>\n</ul>\n<h2><a name=\"p-4708-detailed-protocol-14\" class=\"anchor\" href=\"#p-4708-detailed-protocol-14\"></a>Detailed Protocol</h2>\n<ul>\n<li>e1  update_add_htlc to receiver\n<ul>\n<li>increased burn amount pending on the receiver</li>\n<li>Bob has 1 current commitment transaction\n<ul>\n<li>increased burn amount is not in Bob\u2019s current commitment transactions</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>e2  commitment_signed_j to receiver\n<ul>\n<li>\u2026 and the increased burn amount is in the receiver\u2019s latest commitment transaction</li>\n<li>Bob has 2 current commitment transactions: B_(j-1) and B_j\n<ul>\n<li>increased burn amount is not in B_(j-1)</li>\n<li>increased burn amount is in B_j</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>e3  revoke_and_ack_(j-1) to sender after grace period\n<ul>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked, and the increased burn amount is pending on the sender</li>\n<li>Bob has 1 current commitment transaction: B_j\n<ul>\n<li>increased burn amount is in B_j</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>e4  commitment_signed_i to sender\n<ul>\n<li>\u2026 and the increased burn amount is in the sender\u2019s latest commitment transaction, and the HTLC output is pending on the sender</li>\n<li>Alice has 2 current commitment transactions: A_(i-1) and A_i\n<ul>\n<li>increased burn amount is not in A_(i-1)</li>\n<li>increased burn amount is in A_i</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>e5  commitment_signed_(i+1) to sender\n<ul>\n<li>\u2026 and the increased burn amount and HTLC output are in the sender\u2019s latest commitment transaction</li>\n<li>Alice has 3 current commitment transactions: A_(i-1), A_i and A_(i+1)\n<ul>\n<li>increased burn amount is not in A_(i-1)</li>\n<li>increased burn amount is in A_i, HTLC output is not in A_i</li>\n<li>increased burn amount and HTLC output are in A_(i+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>e6  update_remove_htlc to receiver\n<ul>\n<li>\u2026 and the failed HTLC (without increased burn amount or HTLC output) is pending on the receiver</li>\n</ul>\n</li>\n<li>e7  revoke_and_ack_(i-1) to receiver\n<ul>\n<li>\u2026 and the sender\u2019s earliest current commitment transaction has been revoked</li>\n<li>Alice has 2 current commitment transaction: A_i and A_(i+1)\n<ul>\n<li>increased burn amount is in A_i, HTLC output is not in A_i</li>\n<li>increased burn amount and HTLC output are in A_(i+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>e8  commitment_signed_(j+1) to receiver\n<ul>\n<li>\u2026 and the failed HTLC (without increased burn amount or HTLC output) is in the receiver\u2019s latest commitment transaction</li>\n<li>Bob has 2 current commitment transactions: B_j and B_(j+1)\n<ul>\n<li>increased burn amount is in B_j, HTLC output is not in B_j</li>\n<li>failed HTLC (without increased burn amount or HTLC output) is in B_(j+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>e9  revoke_and_ack_j to sender\n<ul>\n<li>\u2026 and the receiver\u2019s previous commitment transaction has been revoked, and the failed HTLC (without increased burn amount or HTLC output) is pending on the sender</li>\n<li>Bob has 1 current commitment transaction: B_(j+1)\n<ul>\n<li>failed HTLC (without increased burn amount or HTLC output) is in B_(j+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>e10 commitment_signed_(i+2) to sender\n<ul>\n<li>\u2026 and the failed HTLC (without increased burn amount or HTLC output) is in the sender\u2019s latest commitment transaction</li>\n<li>Alice has 3 current commitment transaction: A_i, A_(i+1) and A_(i+2)\n<ul>\n<li>increased burn amount is in A_i, HTLC output is not in A_i</li>\n<li>increased burn amount and HTLC output are in A_(i+1)</li>\n<li>failed HTLC (without increased burn amount or HTLC output) is in A_(i+2)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>e11 revoke_and_ack_i to receiver\n<ul>\n<li>\u2026 and the sender\u2019s earliest current commitment transaction has been revoked</li>\n<li>Alice has 2 current commitment transactions: A_(i+1) and A_(i+2)\n<ul>\n<li>increased burn amount and HTLC output are in A_(i+1)</li>\n<li>failed HTLC (without increased burn amount or HTLC output) is in A_(i+2)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>e12 revoke_and_ack_(i+1) to receiver\n<ul>\n<li>\u2026 and the sender\u2019s previous commitment transaction has been revoked</li>\n<li>Alice has 1 current commitment transaction: A_(i+2)\n<ul>\n<li>failed HTLC (without increased burn amount or HTLC output) is in A_(i+2)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1><a name=\"p-4708-allowed-flows-for-spam-prevention-protocol-with-low-latency-15\" class=\"anchor\" href=\"#p-4708-allowed-flows-for-spam-prevention-protocol-with-low-latency-15\"></a>Allowed Flows For Spam Prevention Protocol With Low Latency</h1>\n<h2><a name=\"p-4708-terminology-and-notation-16\" class=\"anchor\" href=\"#p-4708-terminology-and-notation-16\"></a>Terminology and Notation</h2>\n<ul>\n<li>\n<p>an HTLC is \u201cspeculative\u201d at the sender/offerer until the receiver/offeree has been given a signature for their corresponding HTLC output</p>\n</li>\n<li>\n<p>a state is \u201cfailed\u201d if it includes an HTLC output for a speculative HTLC which cannot be used because the receiver failed to commit to the increased burn amount during the grace period</p>\n</li>\n<li>\n<p>a failed state will be indicated with an exclamation mark</p>\n</li>\n<li>\n<p>Configuration 1: 1 current state (not failed)</p>\n<ul>\n<li>x</li>\n</ul>\n</li>\n<li>\n<p>Configuration 2: 2 current states (neither failed)</p>\n<ul>\n<li>x</li>\n<li>x+1</li>\n</ul>\n</li>\n<li>\n<p>Configuration 3: 3 current states (none failed)</p>\n<ul>\n<li>x</li>\n<li>x+1</li>\n<li>x+2</li>\n</ul>\n</li>\n<li>\n<p>Configuration 4: 3 current states (only last one failed)</p>\n<ul>\n<li>x</li>\n<li>x+1</li>\n<li>x+2!</li>\n</ul>\n</li>\n<li>\n<p>Configuration 5: 2 current states (only last one failed)</p>\n<ul>\n<li>x</li>\n<li>x+1!</li>\n</ul>\n</li>\n<li>\n<p>Configuration 6: 3 current states (only second one failed)</p>\n<ul>\n<li>x</li>\n<li>x+1!</li>\n<li>x+2</li>\n</ul>\n</li>\n<li>\n<p>Configuration 7: 2 current states (only first one failed)</p>\n<ul>\n<li>x!</li>\n<li>x+1</li>\n</ul>\n</li>\n</ul>\n<p>Note: One\u2019s partner knows exactly which configuration one has, except they can\u2019t distinguish 3 from 4.</p>\n<h2><a name=\"p-4708-allowed-flows-17\" class=\"anchor\" href=\"#p-4708-allowed-flows-17\"></a>Allowed Flows:</h2>\n<ul>\n<li>State update without adding a speculative HTLC\n<ul>\n<li>1-&gt;2-&gt;1</li>\n</ul>\n</li>\n<li>State update adding a successful speculative HTLC\n<ul>\n<li>1-&gt;2-&gt;3-&gt;2-&gt;1</li>\n</ul>\n</li>\n<li>State update adding a failed speculative HTLC\n<ul>\n<li>1-&gt;2-&gt;4-&gt;5-&gt;6-&gt;7-&gt;1</li>\n</ul>\n</li>\n</ul>",
  "post_number": 5,
  "post_type": 1,
  "posts_count": 5,
  "updated_at": "2025-04-05T19:42:07.993Z",
  "reply_count": 0,
  "reply_to_post_number": 4,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.4,
  "yours": false,
  "topic_id": 1524,
  "topic_slug": "fee-based-spam-prevention-for-lightning",
  "topic_title": "Fee-Based Spam Prevention For Lightning",
  "topic_html_title": "Fee-Based Spam Prevention For Lightning",
  "category_id": 7,
  "display_username": null,
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "harding",
    "name": "David A. Harding",
    "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/925_2.png"
  },
  "bookmarked": false,
  "raw": "Hi Dave,\n\nThanks for pointing out the benefits of time-dependent Hold Fees for not-immediately-settled payments.\n\nRegarding the increase in latency, I agree that the bug fix (which increases the burn funds before it adds the HTLC output) adds one round-trip time (RTT).\nHowever, I believe this is a 1.67x increase (rather than a 3x increase) as the downstream node has to wait for the revocation of the upstream node's commitment transaction that doesn't include the HTLC output (step 3 in your description of the current protocol and step 5 in your description of the protocol with the bug fix).\nThus, the latency goes from 1.5 RTTs to 2.5 RTTs.\n\nFortunately, I think it's possible to eliminate this latency penalty while implementing time-dependent Hold Fees with the bug fix.\n\nThe idea is to increase burn funds before adding the HTLC output (as in the high-latency bug fix), but to allow the downstream node to provide signatures for both of these updates consecutively (without a RTT in between).\n\nIf the downstream node committed to the increase burn funds (by revoking their previous commitment transaction) *during* the grace period, the upstream node can commit to the addition of the HTLC output (by revoking all earlier commitment transactions).\nThen the upstream node gives the downstream node a signature for a commitment transaction with the HTLC output.\nAt this point, the downstream node is guaranteed to be able to get payment for the HTLC if they get the hash preimage in time, so the downstream node can offer the HTLC in the payment's next channel.\nNote that the overall latency is just 1.5 RTTs.\n\nOn the other hand, if the downstream node committed to the increased burn funds *after* the grace period, the upstream node does not have to commit to the addition of the HTLC output.\nInstead, it sends an update_remove_htlc packet to the downstream node, followed by a revocation of only the commitment transaction that precedes the one with increased burn funds.\nAs a result, the upstream node still has an unrevoked commitment transaction without the HTLC output that it can put on-chain if needed.\nThe downstream node responds with a signature for a new commitment transaction without the increased burn funds or HTLC output and the upstream node revokes all commitment transactions that precede this latest one.\nThis flow uses 2.5 RTTs, but it only occurs when there's a failure to propagate the payment within the grace period.\nAs a result, the payment fails without having to wait beyond the grace period.\n\nThis improved protocol requires the upstream node to have up to 3 current (signed and not revoked) transactions at a time.\nTherefore, the rules for providing pc_points and pc_secrets have to be modified.\nIn particular, the current revoke_and_ack packet includes pc_secret_x and pc_point_(x+2) (for an arbitrary value of x).\nTo make this new low-latency spam-prevention protocol work, we have to change the revoke_and_ack packet to include pc_secret_x and pc_point_(x+3).\nIn addition, the funding_locked packet is changed to include pc_point_1 and pc_point_2 (rather than just pc_point_1).\n\nThe detailed protocol is presented below.\nIf no one finds any problems with it, I'll update the paper to include it.\n\nCurrent Protocol\n================\n\nTerminology, Notation and Packet Definitions\n--------------------------------------------\n* Alice is sender\n* Bob is receiver\n* A_i is Alice's commitment transaction using pc_point_i\n* B_j is Bob's commitment transaction using pc_point_j\n* open_channel packet includes pc_point_0\n* accept_channel packet includes pc_point_0\n* funding_locked packet includes pc_point_1\n* revoke_and_ack_x packet includes pc_secret_x and pc_point_(x+2)\n* commitment_signed_x is commitment_signed message providing a signature for the commitment transaction which uses pc_point_x\n* commitment transaction x is:\n  - \"signed\" if commitment_signed_x has been received, \"unsigned\" otherwise\n  - \"revoked\" if revoke_and_ack_x has been received\n  - \"current\" if it is signed and not revoked\n\nFlow for adding an HTLC\n-----------------------\n* pending on the receiver\n* ... in the receiver's latest commitment transaction\n* ... and the receiver's previous commitment transaction has been revoked, and the update is pending on the sender\n* ... and in the sender's latest commitment transaction\n* ... and the sender's previous commitment transaction has been revoked\n\nDetailed Protocol\n-----------------\n* a1  update_add_htlc to receiver\n  * HTLC output pending on the receiver\n  * Bob has 1 current commitment transaction\n    - HTLC output is not in Bob's current commitment transaction\n* a2  commitment_signed_j to receiver\n  * ... and the HTLC output is in the receiver's latest commitment transaction\n  * Bob has 2 current commitment transactions: B_(j-1) and B_j\n    - HTLC output is not in B_(j-1)\n    - HTLC output is in B_j\n* a3  revoke_and_ack_(j-1) to sender\n  * ... and the receiver's previous commitment transaction has been revoked, and the HTLC output is pending on the sender\n  * Bob has 1 current commitment transaction: B_j\n    - HTLC output is in B_j\n* a4  commitment_signed_i to sender\n  * ... and the HTLC output is in the sender's latest commitment transaction\n  * Alice has 2 current commitment transactions: A_(i-1) and A_i\n    - HTLC output is not in A_(i-1)\n    - HTLC output is in A_i\n* a5  revoke_and_ack_(i-1) to receiver\n  * ... and the sender's previous commitment transaction has been revoked\n  * Alice has 1 current commitment transaction: A_i\n    - HTLC output is in A_i\n\nand eventually:\n\n* a6  update_fulfill_htlc or update_fail_htlc to sender\n  * ... and the HTLC resolution is pending on the sender\n* a7  commitment_signed_x to sender\n  * ... and the HTLC resolution is in the sender's latest commitment transaction\n  * Alice has 2 current commitment transactions: A_(x-1) and A_x\n    - HTLC output is in A_(x-1)\n    - resolved HTLC (without HTLC output) is in A_x\n* a8  revoke_and_ack_(x-1) to receiver\n  * ... and the sender's previous commitment transaction has been revoked, and the HTLC resolution is pending on the receiver\n  * Alice has 1 current commitment transactions: A_x\n    - resolved HTLC (without HTLC output) is in A_x\na9  commitment_signed_y to receiver\n  * ... and the HTLC resolution is in the receiver's latest commitment transaction\n  * Bob has 2 current commitment transactions: B_(y-1) and B_y\n    - HTLC output is in B_(y-1)\n    - resolved HTLC (without HTLC output) is in B_y\n* a10 revoke_and_ack_(y-1) to sender\n  * ... and the receiver's previous commitment transaction has been revoked\n  * Bob has 1 current commitment transactions: B_y\n    - resolved HTLC (without HTLC output) is in B_y\n\nHTLC Propagation Latency\n------------------------\n* receiver can send update_add_htlc in next channel after receiving a5\n* 1.5 RTTs:\n  * a1/a2\n  * a3/a4\n  * a5\n\n\nSpam Prevention Protocol Without Increased Latency\n==================================================\n\nTerminology, Notation and Packet Definitions\n--------------------------------------------\n* Alice is sender\n* Bob is receiver\n* A_i is Alice's commitment transaction using pc_point_i\n* B_j is Bob's commitment transaction using pc_point_j\n* open_channel packet includes pc_point_0\n* accept_channel packet includes pc_point_0\n* funding_locked packet includes pc_point_1 and pc_point_2\n* revoke_and_ack_x packet includes pc_secret_x and pc_point_(x+3)\n* commitment_signed_x is commitment_signed message providing a signature for the commitment transaction which uses pc_point_x\n* commitment transaction x is:\n  - \"signed\" if commitment_signed_x has been received, \"unsigned\" otherwise\n  - \"revoked\" if revoke_and_ack_x has been received\n  - \"current\" if it is signed and not revoked\n\nCase 1: Receiver commits to increased burn amount *during* grace period\n======================================================================\n\nFlow for adding an HTLC\n-----------------------\n* increased burn amount is pending on the receiver\n* ... and the increased burn amount is in the receiver's latest commitment transaction\n* ... and the receiver's previous commitment transaction has been revoked, and the increased burn amount is pending on the sender\n* ... and the increased burn amount is in the sender's latest commitment transaction, and the HTLC output is pending on the sender\n* ... and the increased burn amount and HTLC output are in the sender's latest commitment transaction\n* ... and the sender's earliest current commitment transaction has been revoked\n* ... and the sender's previous commitment transaction has been revoked, and the HTLC output is pending on the receiver\n* ... and the HTLC output is in the receiver's latest commitment transaction\n* ... and the receiver's previous commitment transaction has been revoked\n\n\nDetailed Protocol\n-----------------\n* d1  update_add_htlc to receiver\n  * increased burn amount pending on the receiver\n  * Bob has 1 current commitment transaction\n    - increased burn amount is not in Bob's current commitment transaction\n* d2  commitment_signed_j to receiver\n  * ... and the increased burn amount is in the receiver's latest commitment transaction\n  * Bob has 2 current commitment transactions: B_(j-1) and B_j\n    - increased burn amount is not in B_(j-1)\n    - increased burn amount is in B_j\n* d3  revoke_and_ack_(j-1) to sender during grace period\n  * ... and the receiver's previous commitment transaction has been revoked, and the increased burn amount is pending on the sender\n  * Bob has 1 current commitment transaction: B_j\n    - increased burn amount is in B_j\n* d4  commitment_signed_i to sender\n  * ... and the increased burn amount is in the sender's latest commitment transaction, and the HTLC output is pending on the sender\n  * Alice has 2 current commitment transactions: A_(i-1) and A_i\n    - increased burn amount is not in A_(i-1)\n    - increased burn amount is in A_i\n* d5  commitment_signed_(i+1) to sender\n  * ... and the increased burn amount and HTLC output are in the sender's latest commitment transaction\n  * Alice has 3 current commitment transactions: A_(i-1), A_i and A_(i+1)\n    - increased burn amount is not in A_(i-1)\n    - increased burn amount is in A_i, HTLC output is not in A_i\n    - increased burn amount and HTLC output are in A_(i+1)\n* d6  revoke_and_ack_(i-1) to receiver\n  * ... and the sender's earliest current commitment transaction has been revoked\n  * Alice has 2 current commitment transaction: A_i and A_(i+1)\n    - increased burn amount is in A_i, HTLC output is not in A_i\n    - increased burn amount and HTLC output are in A_(i+1)\n* d7  revoke_and_ack_i to receiver\n  * ... and the sender's previous commitment transaction has been revoked, and the HTLC output is pending on the receiver\n  * Alice has 1 current commitment transaction: A_(i+1)\n    - increased burn amount and HTLC output are in A_(i+1)\n* d8  commitment_signed_(j+1) to receiver\n  * ... and the HTLC output is in the receiver's latest commitment transaction\n  * Bob has 2 current commitment transactions: B_j and B_(j+1)\n    - increased burn amount is in B_j, HTLC output is not in B_j\n    - increased burn amount and HTLC output are in B_(j+1)\n* d9  revoke_and_ack_j to sender\n  * ... and the receiver's previous commitment transaction has been revoked\n  * Bob has 1 current commitment transaction: B_(j+1)\n    - increased burn amount and HTLC output are in B_(j+1)\n\nand eventually:\n\n* d10 update_fulfill_htlc or update_fail_htlc to sender\n  * ... and the HTLC resolution is pending on the sender\n* d11 commitment_signed_x to sender\n  * ... and the HTLC resolution is in the sender's latest commitment transaction\n  * Alice has 2 current commitment transactions: A_(x-1) and A_x\n    - increased burn amount and HTLC output are in A_(x-1)\n    - resolved HTLC (without increased burn amount or HTLC output) is in A_x\n* d12 revoke_and_ack_(x-1) to receiver\n  * ... and the sender's previous commitment transaction has been revoked, and the HTLC resolution is pending on the receiver\n  * Alice has 1 current commitment transactions: A_x\n    - resolved HTLC (without increased burn amount or HTLC output) is in A_x\n* d13 commitment_signed_y to receiver\n  * ... and the HTLC resolution is in the receiver's latest commitment transaction\n  * Bob has 2 current commitment transactions: B_(y-1) and B_y\n    - increased burn amount and HTLC output are in B_(y-1)\n    - resolved HTLC (without increased burn amount or HTLC output) is in B_y\n* d14 revoke_and_ack_(y-1) to sender\n  * ... and the receiver's previous commitment transaction has been revoked\n  * Bob has 1 current commitment transactions: B_y\n    - resolved HTLC (without increased burn amount or HTLC output) is in B_y\n\n\nHTLC Propagation Latency\n------------------------\n* receiver can send update_add_htlc in next channel after receiving d8\n* 1.5 RTTs:\n  * d1/d2\n  * d3/d4/d5\n  * d6/d7/d8\n\n\nCase 2: Receiver commits to increased burn amount *after* grace period\n=====================================================================\n\nFlow for adding an HTLC\n-----------------------\n* increased burn amount is pending on the receiver\n* ... and the increased burn amount is in the receiver's latest commitment transaction\n* ... and the receiver's previous commitment transaction has been revoked, and the increased burn amount is pending on the sender\n* ... and the increased burn amount is in the sender's latest commitment transaction, and the HTLC output is pending on the sender\n* ... and the increased burn amount and HTLC output are in the sender's latest commitment transaction\n* ... and the failed HTLC (without increased burn amount or HTLC output) is pending on the receiver\n* ... and the sender's earliest current commitment transaction has been revoked\n* ... and the failed HTLC (without increased burn amount or HTLC output) is in the receiver's latest commitment transaction\n* ... and the receiver's previous commitment transaction has been revoked, and the failed HTLC (without increased burn amount or HTLC output) is pending on the sender\n* ... and the failed HTLC (without increased burn amount or HTLC output) is in the sender's latest commitment transaction\n* ... and the sender's earliest current commitment transaction has been revoked\n* ... and the sender's previous commitment transaction has been revoked\n\n\n\nDetailed Protocol\n-----------------\n* e1  update_add_htlc to receiver\n  * increased burn amount pending on the receiver\n  * Bob has 1 current commitment transaction\n    - increased burn amount is not in Bob's current commitment transactions\n* e2  commitment_signed_j to receiver\n  * ... and the increased burn amount is in the receiver's latest commitment transaction\n  * Bob has 2 current commitment transactions: B_(j-1) and B_j\n    - increased burn amount is not in B_(j-1)\n    - increased burn amount is in B_j\n* e3  revoke_and_ack_(j-1) to sender after grace period\n  * ... and the receiver's previous commitment transaction has been revoked, and the increased burn amount is pending on the sender\n  * Bob has 1 current commitment transaction: B_j\n    - increased burn amount is in B_j\n* e4  commitment_signed_i to sender\n  * ... and the increased burn amount is in the sender's latest commitment transaction, and the HTLC output is pending on the sender\n  * Alice has 2 current commitment transactions: A_(i-1) and A_i\n    - increased burn amount is not in A_(i-1)\n    - increased burn amount is in A_i\n* e5  commitment_signed_(i+1) to sender\n  * ... and the increased burn amount and HTLC output are in the sender's latest commitment transaction\n  * Alice has 3 current commitment transactions: A_(i-1), A_i and A_(i+1)\n    - increased burn amount is not in A_(i-1)\n    - increased burn amount is in A_i, HTLC output is not in A_i\n    - increased burn amount and HTLC output are in A_(i+1)\n* e6  update_remove_htlc to receiver\n  * ... and the failed HTLC (without increased burn amount or HTLC output) is pending on the receiver\n* e7  revoke_and_ack_(i-1) to receiver\n  * ... and the sender's earliest current commitment transaction has been revoked\n  * Alice has 2 current commitment transaction: A_i and A_(i+1)\n    - increased burn amount is in A_i, HTLC output is not in A_i\n    - increased burn amount and HTLC output are in A_(i+1)\n* e8  commitment_signed_(j+1) to receiver\n  * ... and the failed HTLC (without increased burn amount or HTLC output) is in the receiver's latest commitment transaction\n  * Bob has 2 current commitment transactions: B_j and B_(j+1)\n    - increased burn amount is in B_j, HTLC output is not in B_j\n    - failed HTLC (without increased burn amount or HTLC output) is in B_(j+1)\n* e9  revoke_and_ack_j to sender\n  * ... and the receiver's previous commitment transaction has been revoked, and the failed HTLC (without increased burn amount or HTLC output) is pending on the sender\n  * Bob has 1 current commitment transaction: B_(j+1)\n    - failed HTLC (without increased burn amount or HTLC output) is in B_(j+1)\n* e10 commitment_signed_(i+2) to sender\n  * ... and the failed HTLC (without increased burn amount or HTLC output) is in the sender's latest commitment transaction\n  * Alice has 3 current commitment transaction: A_i, A_(i+1) and A_(i+2)\n    - increased burn amount is in A_i, HTLC output is not in A_i\n    - increased burn amount and HTLC output are in A_(i+1)\n    - failed HTLC (without increased burn amount or HTLC output) is in A_(i+2)\n* e11 revoke_and_ack_i to receiver\n  * ... and the sender's earliest current commitment transaction has been revoked\n  * Alice has 2 current commitment transactions: A_(i+1) and A_(i+2)\n    - increased burn amount and HTLC output are in A_(i+1)\n    - failed HTLC (without increased burn amount or HTLC output) is in A_(i+2)\n* e12 revoke_and_ack_(i+1) to receiver\n  * ... and the sender's previous commitment transaction has been revoked\n  * Alice has 1 current commitment transaction: A_(i+2)\n    - failed HTLC (without increased burn amount or HTLC output) is in A_(i+2)\n\n\nAllowed Flows For Spam Prevention Protocol With Low Latency\n===========================================================\n\nTerminology and Notation\n------------------------\n* an HTLC is \"speculative\" at the sender/offerer until the receiver/offeree has been given a signature for their corresponding HTLC output\n* a state is \"failed\" if it includes an HTLC output for a speculative HTLC which cannot be used because the receiver failed to commit to the increased burn amount during the grace period\n* a failed state will be indicated with an exclamation mark\n\n* Configuration 1: 1 current state (not failed)\n  * x\n\n* Configuration 2: 2 current states (neither failed)\n  * x\n  * x+1\n\n* Configuration 3: 3 current states (none failed)\n  * x\n  * x+1\n  * x+2\n\n* Configuration 4: 3 current states (only last one failed)\n  * x\n  * x+1\n  * x+2!\n\n* Configuration 5: 2 current states (only last one failed)\n  * x\n  * x+1!\n\n* Configuration 6: 3 current states (only second one failed)\n  * x\n  * x+1!\n  * x+2\n\n* Configuration 7: 2 current states (only first one failed)\n  * x!\n  * x+1\n\nNote: One's partner knows exactly which configuration one has, except they can't distinguish 3 from 4.\n\nAllowed Flows:\n-------------\n* State update without adding a speculative HTLC\n  * 1->2->1\n* State update adding a successful speculative HTLC\n  * 1->2->3->2->1\n* State update adding a failed speculative HTLC\n  * 1->2->4->5->6->7->1",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 279,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Hi Dave, \nThanks for pointing out the benefits of time-dependent Hold Fees for not-immediately-settled payments. \nRegarding the increase in latency, I agree that the bug fix (which increases the burn funds before it adds the HTLC output) adds one round-trip time (RTT).\nHowever, I believe this is a 1&hellip;",
  "truncated": true,
  "post_url": "/t/fee-based-spam-prevention-for-lightning/1524/5",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}