{
  "id": 4894,
  "name": "Robin Linus",
  "username": "RobinLinus",
  "avatar_template": "/user_avatar/delvingbitcoin.org/robinlinus/{size}/130_2.png",
  "created_at": "2025-04-29T15:44:26.746Z",
  "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"RobinLinus\" data-post=\"1\" data-topic=\"1591\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/robinlinus/48/130_2.png\" class=\"avatar\"> RobinLinus:</div>\n<blockquote>\n<h3>The scriptSig Trick</h3>\n<p>The key idea is to use the fact that CTV commits to the scriptSig of all inputs. Say we want to express \u201cinputA is spendable only together with inputB\u201d.</p>\n<ol>\n<li>Define inputB to be a (legacy) P2SH output.</li>\n<li>Presign a signature using sighash <code>ANYONECANPAY|NONE</code>, effectively signing only inputB. This signature commits to inputB and since P2SH is not SegWit the signature will be in inputB\u2019s scriptSig.</li>\n<li>Define inputA to be a P2TR output and contain a CTV condition with a template hash that commits to the scriptSigs, including the signature for inputB.</li>\n</ol>\n<p>The result: <strong>inputA</strong> commits to the signature for <strong>inputB</strong>, which itself commits to <strong>inputB</strong>. So <strong>inputA</strong> becomes spendable only in conjunction with <strong>inputB</strong>.</p>\n</blockquote>\n</aside>\n<p>For completeness, we are encountering another issue with this construction:</p>\n<ul>\n<li>If <code>inputA</code> and <code>inputB</code> are created by the same transaction, we cannot apply our trick, as it would create a hash cycle.</li>\n<li>For the same reason, we cannot apply it to any <code>inputB'</code> that is a child of <code>inputB</code>.</li>\n<li>Similarly, we cannot apply it to any <code>inputA'</code> that is a child of <code>inputA</code> and connected via a chain of CTV hashes.</li>\n</ul>\n<p>Furthermore, <code>inputB</code> should use sighash <code>ANYONECANPAY|ALL</code> to ensure it creates the correct output. However, it could still be spent \u201cmaliciously\u201d without <code>inputA</code>.</p>",
  "post_number": 23,
  "post_type": 1,
  "posts_count": 21,
  "updated_at": "2025-04-29T16:01:48.456Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 7.0,
  "yours": false,
  "topic_id": 1591,
  "topic_slug": "how-ctv-csfs-improves-bitvm-bridges",
  "topic_title": "How CTV+CSFS improves BitVM bridges",
  "topic_html_title": "How CTV+CSFS improves BitVM bridges",
  "category_id": 7,
  "display_username": "Robin Linus",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"RobinLinus, post:1, topic:1591\"]\n### The scriptSig Trick\n\nThe key idea is to use the fact that CTV commits to the scriptSig of all inputs. Say we want to express \u201cinputA is spendable only together with inputB\u201d.\n\n1. Define inputB to be a (legacy) P2SH output.\n2. Presign a signature using sighash `ANYONECANPAY|NONE`, effectively signing only inputB. This signature commits to inputB and since P2SH is not SegWit the signature will be in inputB\u2019s scriptSig.\n3. Define inputA to be a P2TR output and contain a CTV condition with a template hash that commits to the scriptSigs, including the signature for inputB.\n\nThe result: **inputA** commits to the signature for **inputB**, which itself commits to **inputB**. So **inputA** becomes spendable only in conjunction with **inputB**.\n[/quote]\n\n\nFor completeness, we are encountering another issue with this construction:\n\n* If `inputA` and `inputB` are created by the same transaction, we cannot apply our trick, as it would create a hash cycle.\n* For the same reason, we cannot apply it to any `inputB'` that is a child of `inputB`.\n* Similarly, we cannot apply it to any `inputA'` that is a child of `inputA` and connected via a chain of CTV hashes.\n\nFurthermore, `inputB` should use sighash `ANYONECANPAY|ALL` to ensure it creates the correct output. However, it could still be spent \"maliciously\" without `inputA`.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 131,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "For completeness, we are encountering another issue with this construction: \n\nIf inputA and inputB are created by the same transaction, we cannot apply our trick, as it would create a hash cycle.\nFor the same reason, we cannot apply it to any inputB&#39; that is a child of inputB.\nSimilarly, we cannot &hellip;",
  "truncated": true,
  "post_url": "/t/how-ctv-csfs-improves-bitvm-bridges/1591/23",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}