{
  "id": 4679,
  "name": "Sebastian Falbesoner",
  "username": "theStack",
  "avatar_template": "/user_avatar/delvingbitcoin.org/thestack/{size}/420_2.png",
  "created_at": "2025-04-02T17:21:03.812Z",
  "cooked": "<p>A few weeks ago <a class=\"mention\" href=\"/u/rubensomsen\">@RubenSomsen</a> proposed to speed up the IBD phase in Bitcoin Core by\nreducing the chainstate operations with the aid of pre-generated hints. Right now, the main optimization\nis to skip script verification up to the <code>-assumevalid</code> block (enabled by default, <a href=\"https://github.com/bitcoin/bitcoin/blob/1344d3bd0f3b0ef3c4f339624da9ed96778bc138/src/kernel/chainparams.cpp#L121\">updated on each release</a>), but all other block validation checks\nare still active. In particular, UTXO set lookups and removals can be quite expensive and cause regular coins cache and expensive leveldb disk I/O operations.</p>\n<p>The idea is to only ever add coins to the UTXO set if we know that they will still be\nunspent at a certain block height N. All the other coins we don\u2019t have to add or remove during IBD in the first place,\nsince we already know that they end up being spent on the way. The historical hints data consists of one boolean flag\nfor each transaction output ever created (up to including block N), signalling the answer to the question:\n\u201cIs this transaction output ending up in the UTXO set at block N?\u201d.</p>\n<p>If the answer is yes, we obviously add it (as we would also normally do), but if the answer is no,\nwe ignore it. Consequently, we don\u2019t have to do any UTXO set lookups and removals during the IBD phase\nanymore; the UTXO set only grows, and the order in which blocks are validated doesn\u2019t matter anymore,\ni.e. the block validation could be done in parallel. The obvious way to store the hints data is bit-encoded, leading to a rough\nsize of <code>(number_of_outputs_created / 8)</code> bytes, being in the hundreds of mega-bytes area for mainnet (e.g. ~348 MiB for block 850900).</p>\n<p>As a rough overview, the following checks in <code>ConnectBlock</code> are done in each mode:</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th>validation step</th>\n<th>regular operation</th>\n<th>assumevalid</th>\n<th>IBD Booster</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Consensus::CheckTxInputs</td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/x.png?v=12\" title=\":x:\" class=\"emoji only-emoji\" alt=\":x:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n</tr>\n<tr>\n<td>BIP68 lock checks</td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/x.png?v=12\" title=\":x:\" class=\"emoji only-emoji\" alt=\":x:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n</tr>\n<tr>\n<td>SigOp limit checks</td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/x.png?v=12\" title=\":x:\" class=\"emoji only-emoji\" alt=\":x:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n</tr>\n<tr>\n<td>input script checks</td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/x.png?v=12\" title=\":x:\" class=\"emoji only-emoji\" alt=\":x:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/x.png?v=12\" title=\":x:\" class=\"emoji only-emoji\" alt=\":x:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n</tr>\n<tr>\n<td>update UTXO set</td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td>grow-only, with MuHash check (see below)</td>\n</tr>\n<tr>\n<td>block reward check</td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/white_check_mark.png?v=12\" title=\":white_check_mark:\" class=\"emoji only-emoji\" alt=\":white_check_mark:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n<td><img src=\"https://delvingbitcoin.org/images/emoji/twitter/x.png?v=12\" title=\":x:\" class=\"emoji only-emoji\" alt=\":x:\" loading=\"lazy\" width=\"20\" height=\"20\"></td>\n</tr>\n</tbody>\n</table>\n</div><p>To give some assurance that the given hints data is correct, the state of the spent coins is tracked\nin a MuHash instance, where elements can be add and deleted in any order. If we encounter a transaction\noutput where our hints data says \u201cfalse\u201d (meaning, it doesn\u2019t end up in the final UTXO set at block N\nand will be spent on the way there), we add its outpoint (txid+vout serialization) to the MuHash.\nFor any spend in a transaction, we then remove its outpoint (again txid+vout serialization)\nfrom the MuHash. After block N, we can verify that indeed all the coins we didn\u2019t add to the UTXO have been spent (implying that the given hints data was correct) by verifying that the MuHash represents\nan empty set at this point (internally that can be checked by comparing that the numerator and denominator have the same value).</p>\n<p>I\u2019ve implemented a proof-of-concept of this proposal and called it \u201cIBD Booster\u201d, consisting of two parts:</p>\n<ul>\n<li>A python script ibd-booster-hints-gen, which builds on <a href=\"https://github.com/stickies-v/py-bitcoinkernel\">py-bitcoinkernel</a> and takes a datadir and a utxo set in SQLite format (as created by the <a href=\"https://github.com/bitcoin/bitcoin/blob/1344d3bd0f3b0ef3c4f339624da9ed96778bc138/contrib/utxo-tools/utxo_to_sqlite.py\">utxo_to_sqlite.py</a> script) as input, and outputs the bit-encoded hints file: <a href=\"https://github.com/theStack/ibd-booster-hints-gen\" class=\"inline-onebox\">GitHub - theStack/ibd-booster-hints-gen: Tool to create a binary-encoded hints file for the \"IBD-Booster\" proposal.</a></li>\n<li>A Bitcoin Core branch which supports reading in the hints file and use it for the optimization as described above with a <code>-ibdboosterfile</code> parameter: <a href=\"https://github.com/theStack/bitcoin/tree/ibd_booster_v0\" class=\"inline-onebox\">GitHub - theStack/bitcoin at ibd_booster_v0</a></li>\n</ul>\n<p>The main logic is implemented in a function called <code>UpdateCoinsIBDBooster</code>, which is called as a drop-in replacement of <code>UpdateCoins</code> if\nthe IBD Booster is active for the current block, see <a href=\"https://github.com/theStack/bitcoin/blob/ce4d1aa5ac4e2a08172bcbc7e80f9b5675b20983/src/validation.cpp#L2106-L2119\" class=\"inline-onebox\">bitcoin/src/validation.cpp at ce4d1aa5ac4e2a08172bcbc7e80f9b5675b20983 \u00b7 theStack/bitcoin \u00b7 GitHub</a> vs. <a href=\"https://github.com/theStack/bitcoin/blob/ce4d1aa5ac4e2a08172bcbc7e80f9b5675b20983/src/validation.cpp#L2121-L2152\" class=\"inline-onebox\">bitcoin/src/validation.cpp at ce4d1aa5ac4e2a08172bcbc7e80f9b5675b20983 \u00b7 theStack/bitcoin \u00b7 GitHub</a></p>\n<p>A guide for trying out the proof-of-concept implementation is following:</p>\n<h2>Generate the hints data</h2>\n<ol>\n<li>\n<p>Run a non-pruned node, sync at least to the desired booster target height (886000 in this example)</p>\n</li>\n<li>\n<p>Dump UTXO set at target height, convert it to SQLite3 database</p>\n</li>\n</ol>\n<pre><code class=\"lang-auto\">$ ./build/bin/bitcoin-cli -rpcclienttimeout=0 -named dumptxoutset $PWD/utxo-886000.dat rollback=886000\n$ ./contrib/utxo-tools/utxo_to_sqlite.py ./utxo-886000.dat ./utxo-886000.sqlite\n</code></pre>\n<ol start=\"3\">\n<li>Stop Bitcoin Core</li>\n</ol>\n<pre><code class=\"lang-auto\">$ ./build/bin/bitcoin-cli stop\n</code></pre>\n<ol start=\"4\">\n<li>Fetch the IBD Booster branch (contains the booster hints generation script in <code>./contrib</code>)</li>\n</ol>\n<pre><code class=\"lang-auto\">$ git clone -b ibd_booster_v0 https://github.com/theStack/bitcoin\n$ cd bitcoin\n</code></pre>\n<ol start=\"4\">\n<li>Create IBD Booster file containing hints bitmap\n(first start might take a while as the py-bitcoinkernel dependency has to be built in the background first [1])</li>\n</ol>\n<pre><code class=\"lang-auto\">$ pushd ./contrib/ibd-booster-hints-gen\n$ uv run booster-gen.py -v ~/.bitcoin ../../utxo-886000.sqlite ~/booster-886000.bin\n$ popd\n</code></pre>\n<h2> Setup a fresh node using IBD Booster </h2>\n<p>Instructions:</p>\n<ol>\n<li>Build and run the IBD-Booster branch (checked out above already)</li>\n</ol>\n<pre><code class=\"lang-auto\">$ &lt;build as usual&gt;\n$ ./build/bin/bitcoind -ibdboosterfile=~/booster-886000.bin\n</code></pre>\n<ol start=\"2\">\n<li>Wait and enjoy. If everything goes well, you should see the following debug message after the booster target block:</li>\n</ol>\n<pre><code class=\"lang-auto\">*** IBD Booster: MuHash check at block height 886000 succeeded. ***\n</code></pre>\n<h2> First benchmark results </h2>\nOn a rented large-storage, low-performance VPS I observed a ~2,24x speed up (40h 54min vs. 18h 14min) for running on mainnet with `-reindex-chainstate` (up to block 850900 [2]):\n<pre><code class=\"lang-auto\">$ time ./build/bin/bitcoind -datadir=./datadir -reindex-chainstate -server=0 -stopatheight=850901\n\nreal    2454m37.039s\nuser    9660m20.123s\nsys     380m30.070s\n\n$ time ./build/bin/bitcoind -datadir=./datadir -reindex-chainstate -server=0 -stopatheight=850901 -ibdboosterfile=./booster850900.bin\n\nreal    1094m31.100s\nuser    1132m53.000s\nsys     46m45.212s\n</code></pre>\n<p>The generated hints file for block 850900 can be downloaded here: <a href=\"https://github.com/theStack/bitcoin/raw/refs/heads/booster_data_850900/booster850900.bin.xz\">https://github.com/theStack/bitcoin/raw/refs/heads/booster_data_850900/booster850900.bin.xz</a> (note that this file has to be unpacked first using the <code>unxz</code> command)</p>\n<p>One major drawback of this proposal is that we can\u2019t create undo data (the rev*.dat files) anymore, as we obviously don\u2019t have the prevout\ninformation available in the UTXO set during the IBD booster phase. So the node we end up is unfortunately limited in functionality, as some indexes (e.g.\ncoinstatsindex and blockfilterindex) and RPC calls (e.g. getblock for higher verbosity that shows prevout data) rely on these files for\ncreating/delivering the full data.\nMy hope is that this proof-of-concept still serves as a nice starting point for further research of simliar ideas, or maybe is useful\nfor projects like benchcoin.</p>\n<p>Potential improvements:</p>\n<ul>\n<li>investigate further speedups (e.g we don\u2019t really need the full coin cache functionality up to the target block)</li>\n<li>don\u2019t load all hints data into RAM at once</li>\n<li>refine file format to include metadata and magic bytes for easy detection</li>\n<li>research about potential compression of the hints data (probably not worth the complexity imho, but an interesting topic for sure)</li>\n<li>implement parallel block validation</li>\n<li>investigate including the coin heights in the hints data to enable more checks (leads to significantly larger hints data though)</li>\n<li>hints generation tool speedups?</li>\n<li>\u2026</li>\n</ul>\n<p>Thanks go to <a class=\"mention\" href=\"/u/rubensomsen\">@RubenSomsen</a>, <a class=\"mention\" href=\"/u/davidgumberg\">@davidgumberg</a>, <a class=\"mention\" href=\"/u/fjahr\">@fjahr</a> and <a class=\"mention\" href=\"/u/l0rinc\">@l0rinc</a> (sorry if I forgot anyone) for discussing this idea more intensely a few weeks ago, and to <a class=\"mention\" href=\"/u/stickies-v\">@stickies-v</a> for providing the great <a href=\"https://github.com/stickies-v/py-bitcoinkernel\">py-bitcoinkernel</a> project (I was considering to use <a href=\"https://github.com/TheCharlatan/rust-bitcoinkernel\">rust-bitcoinkernel</a> instead for performance reasons, but my knowledge of Rust is unfortunately still too bad).\nSuggestions and feedback in any form, or more diverse benchmark results (or suggestions on how to benchmark this best) would be highly appreciated.</p>\n<p>Cheers,\nSebastian</p>\n<p>[1] Note that I only tried to run the script with <a href=\"https://docs.astral.sh/uv/\">uv</a> so far, since it just worked \u2122 flawlessly from the start without any headaches. Using other Python package management tools might also work to build and run this script, but I haven\u2019t tested them.</p>\n<p>[2] Block 850900 is way in the past of the current assumevalid block, but I had to stop there as I ran out of space on the benchmark machine.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2025-04-02T17:26:06.981Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 3,
  "reads": 20,
  "readers_count": 19,
  "score": 49.0,
  "yours": false,
  "topic_id": 1562,
  "topic_slug": "ibd-booster-speeding-up-ibd-with-pre-generated-hints-poc",
  "topic_title": "IBD Booster -- Speeding up IBD with pre-generated hints (PoC)",
  "topic_html_title": "IBD Booster &ndash; Speeding up IBD with pre-generated hints (PoC)",
  "category_id": 8,
  "display_username": "Sebastian Falbesoner",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "A few weeks ago @RubenSomsen proposed to speed up the IBD phase in Bitcoin Core by \nreducing the chainstate operations with the aid of pre-generated hints. Right now, the main optimization\nis to skip script verification up to the `-assumevalid` block (enabled by default, [updated on each release](https://github.com/bitcoin/bitcoin/blob/1344d3bd0f3b0ef3c4f339624da9ed96778bc138/src/kernel/chainparams.cpp#L121)), but all other block validation checks\nare still active. In particular, UTXO set lookups and removals can be quite expensive and cause regular coins cache and expensive leveldb disk I/O operations. \n\nThe idea is to only ever add coins to the UTXO set if we know that they will still be\nunspent at a certain block height N. All the other coins we don't have to add or remove during IBD in the first place,\nsince we already know that they end up being spent on the way. The historical hints data consists of one boolean flag\nfor each transaction output ever created (up to including block N), signalling the answer to the question:\n\"Is this transaction output ending up in the UTXO set at block N?\".\n\nIf the answer is yes, we obviously add it (as we would also normally do), but if the answer is no,\nwe ignore it. Consequently, we don't have to do any UTXO set lookups and removals during the IBD phase\nanymore; the UTXO set only grows, and the order in which blocks are validated doesn't matter anymore,\ni.e. the block validation could be done in parallel. The obvious way to store the hints data is bit-encoded, leading to a rough\nsize of `(number_of_outputs_created / 8)` bytes, being in the hundreds of mega-bytes area for mainnet (e.g. ~348 MiB for block 850900).\n\nAs a rough overview, the following checks in `ConnectBlock` are done in each mode:\n|validation step | regular operation | assumevalid | IBD Booster|\n|--- | --- | --- | ---|\n|Consensus::CheckTxInputs  | :white_check_mark: | :white_check_mark: | :x: |\n|BIP68 lock checks | :white_check_mark: | :white_check_mark: | :x: |\n|SigOp limit checks | :white_check_mark:| :white_check_mark: | :x: |\n|input script checks | :white_check_mark:| :x: | :x: |\n|update UTXO set | :white_check_mark: | :white_check_mark: | grow-only, with MuHash check (see below)|\n|block reward check | :white_check_mark: | :white_check_mark: | :x: |\n\nTo give some assurance that the given hints data is correct, the state of the spent coins is tracked\nin a MuHash instance, where elements can be add and deleted in any order. If we encounter a transaction\noutput where our hints data says \"false\" (meaning, it doesn't end up in the final UTXO set at block N\nand will be spent on the way there), we add its outpoint (txid+vout serialization) to the MuHash.\nFor any spend in a transaction, we then remove its outpoint (again txid+vout serialization)\nfrom the MuHash. After block N, we can verify that indeed all the coins we didn't add to the UTXO have been spent (implying that the given hints data was correct) by verifying that the MuHash represents\nan empty set at this point (internally that can be checked by comparing that the numerator and denominator have the same value).\n\nI've implemented a proof-of-concept of this proposal and called it \"IBD Booster\", consisting of two parts:\n* A python script ibd-booster-hints-gen, which builds on [py-bitcoinkernel](https://github.com/stickies-v/py-bitcoinkernel) and takes a datadir and a utxo set in SQLite format (as created by the [utxo_to_sqlite.py](https://github.com/bitcoin/bitcoin/blob/1344d3bd0f3b0ef3c4f339624da9ed96778bc138/contrib/utxo-tools/utxo_to_sqlite.py) script) as input, and outputs the bit-encoded hints file: https://github.com/theStack/ibd-booster-hints-gen\n* A Bitcoin Core branch which supports reading in the hints file and use it for the optimization as described above with a `-ibdboosterfile` parameter: https://github.com/theStack/bitcoin/tree/ibd_booster_v0\n\nThe main logic is implemented in a function called `UpdateCoinsIBDBooster`, which is called as a drop-in replacement of `UpdateCoins` if\nthe IBD Booster is active for the current block, see https://github.com/theStack/bitcoin/blob/ce4d1aa5ac4e2a08172bcbc7e80f9b5675b20983/src/validation.cpp#L2106-L2119 vs. https://github.com/theStack/bitcoin/blob/ce4d1aa5ac4e2a08172bcbc7e80f9b5675b20983/src/validation.cpp#L2121-L2152\n\nA guide for trying out the proof-of-concept implementation is following:\n\n\n<h2>Generate the hints data</h2>\n\n1. Run a non-pruned node, sync at least to the desired booster target height (886000 in this example)\n\n2. Dump UTXO set at target height, convert it to SQLite3 database\n\n```\n$ ./build/bin/bitcoin-cli -rpcclienttimeout=0 -named dumptxoutset $PWD/utxo-886000.dat rollback=886000\n$ ./contrib/utxo-tools/utxo_to_sqlite.py ./utxo-886000.dat ./utxo-886000.sqlite\n```\n\n3. Stop Bitcoin Core\n\n```\n$ ./build/bin/bitcoin-cli stop\n```\n\n4. Fetch the IBD Booster branch (contains the booster hints generation script in `./contrib`)\n```\n$ git clone -b ibd_booster_v0 https://github.com/theStack/bitcoin\n$ cd bitcoin\n```\n\n4. Create IBD Booster file containing hints bitmap\n(first start might take a while as the py-bitcoinkernel dependency has to be built in the background first [1])\n\n```\n$ pushd ./contrib/ibd-booster-hints-gen\n$ uv run booster-gen.py -v ~/.bitcoin ../../utxo-886000.sqlite ~/booster-886000.bin\n$ popd\n```\n\n<h2> Setup a fresh node using IBD Booster </h2>\n\nInstructions:\n\n1. Build and run the IBD-Booster branch (checked out above already)\n```\n$ <build as usual>\n$ ./build/bin/bitcoind -ibdboosterfile=~/booster-886000.bin\n```\n2. Wait and enjoy. If everything goes well, you should see the following debug message after the booster target block:\n```\n*** IBD Booster: MuHash check at block height 886000 succeeded. ***\n```\n\n<h2> First benchmark results </h2>\nOn a rented large-storage, low-performance VPS I observed a ~2,24x speed up (40h 54min vs. 18h 14min) for running on mainnet with `-reindex-chainstate` (up to block 850900 [2]):\n\n```\n$ time ./build/bin/bitcoind -datadir=./datadir -reindex-chainstate -server=0 -stopatheight=850901\n\nreal    2454m37.039s\nuser    9660m20.123s\nsys     380m30.070s\n\n$ time ./build/bin/bitcoind -datadir=./datadir -reindex-chainstate -server=0 -stopatheight=850901 -ibdboosterfile=./booster850900.bin\n\nreal    1094m31.100s\nuser    1132m53.000s\nsys     46m45.212s\n```\n\nThe generated hints file for block 850900 can be downloaded here: https://github.com/theStack/bitcoin/raw/refs/heads/booster_data_850900/booster850900.bin.xz (note that this file has to be unpacked first using the `unxz` command)\n\nOne major drawback of this proposal is that we can't create undo data (the rev*.dat files) anymore, as we obviously don't have the prevout\ninformation available in the UTXO set during the IBD booster phase. So the node we end up is unfortunately limited in functionality, as some indexes (e.g.\ncoinstatsindex and blockfilterindex) and RPC calls (e.g. getblock for higher verbosity that shows prevout data) rely on these files for\ncreating/delivering the full data.\nMy hope is that this proof-of-concept still serves as a nice starting point for further research of simliar ideas, or maybe is useful\nfor projects like benchcoin. \n\nPotential improvements:\n- investigate further speedups (e.g we don't really need the full coin cache functionality up to the target block)\n- don't load all hints data into RAM at once\n- refine file format to include metadata and magic bytes for easy detection\n- research about potential compression of the hints data (probably not worth the complexity imho, but an interesting topic for sure)\n- implement parallel block validation\n- investigate including the coin heights in the hints data to enable more checks (leads to significantly larger hints data though)\n- hints generation tool speedups?\n- ...\n\nThanks go to @RubenSomsen, @davidgumberg, @fjahr and @l0rinc (sorry if I forgot anyone) for discussing this idea more intensely a few weeks ago, and to @stickies-v for providing the great [py-bitcoinkernel](https://github.com/stickies-v/py-bitcoinkernel) project (I was considering to use [rust-bitcoinkernel](https://github.com/TheCharlatan/rust-bitcoinkernel) instead for performance reasons, but my knowledge of Rust is unfortunately still too bad).\nSuggestions and feedback in any form, or more diverse benchmark results (or suggestions on how to benchmark this best) would be highly appreciated.\n\nCheers,\nSebastian\n\n[1] Note that I only tried to run the script with [uv](https://docs.astral.sh/uv/) so far, since it just worked (tm) flawlessly from the start without any headaches. Using other Python package management tools might also work to build and run this script, but I haven't tested them.\n\n[2] Block 850900 is way in the past of the current assumevalid block, but I had to stop there as I ran out of space on the benchmark machine.",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 346,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 2
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}