{
  "id": 4695,
  "name": "Ruben Somsen",
  "username": "RubenSomsen",
  "avatar_template": "/user_avatar/delvingbitcoin.org/rubensomsen/{size}/188_2.png",
  "created_at": "2025-04-03T14:39:09.839Z",
  "cooked": "<blockquote>\n<p>Assumeutxo snapshots, on the other hand, aren\u2019t trusted in the same way that hints seem to be given that the snapshots are committed to with hashes in the source code.</p>\n</blockquote>\n<p>The exact same can apply to the hints - they could equally be committed in the source code.</p>\n<p>Also note that unlike assumvalid/assumeutxo the hints cannot affect consensus since validation will fail if the hints aren\u2019t correct rather than ending up on the wrong chain. This makes it much more conceivable to get them from a trusted third party and use them to validate all the way up to the tip (the worst they can do is waste your time).</p>\n<blockquote>\n<p>isn\u2019t this more or less what we spent a bunch of time on assumeutxo to accomplish</p>\n</blockquote>\n<p>It\u2019s actually completely orthogonal.</p>\n<p>Today your options are to start with assumeutxo or not, and then to either use assumevalid or not for (background) validation. SwiftSync speeds up the latter, regardless of whether you utilize assumeutxo or not.</p>\n<p>In fact, assumeutxo and SwiftSync synergize quite nicely in some ways. SwiftSync makes background validation near-stateless, meaning you wouldn\u2019t have to manage two full chainstates when you\u2019re simultaneously validating at the tip. And if you use SwiftSync (specifically the non-assumevalid version) with assumeutxo then you don\u2019t even need the hints anymore. You can just add every output (spent or unspent) to the hash aggregate and subtract the UTXO set from it (i.e. all outputs - inputs - UTXO set == 0).</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2025-04-03T14:39:09.839Z",
  "reply_count": 0,
  "reply_to_post_number": 5,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 1.0,
  "yours": false,
  "topic_id": 1562,
  "topic_slug": "ibd-booster-speeding-up-ibd-with-pre-generated-hints-poc",
  "topic_title": "IBD Booster -- Speeding up IBD with pre-generated hints (PoC)",
  "topic_html_title": "IBD Booster &ndash; Speeding up IBD with pre-generated hints (PoC)",
  "category_id": 8,
  "display_username": "Ruben Somsen",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "reply_to_user": {
    "username": "jamesob",
    "name": "James O'Beirne",
    "avatar_template": "/user_avatar/delvingbitcoin.org/jamesob/{size}/271_2.png"
  },
  "bookmarked": false,
  "raw": ">Assumeutxo snapshots, on the other hand, aren\u2019t trusted in the same way that hints seem to be given that the snapshots are committed to with hashes in the source code.\n\nThe exact same can apply to the hints - they could equally be committed in the source code. \n\nAlso note that unlike assumvalid/assumeutxo the hints cannot affect consensus since validation will fail if the hints aren't correct rather than ending up on the wrong chain. This makes it much more conceivable to get them from a trusted third party and use them to validate all the way up to the tip (the worst they can do is waste your time).\n\n>isn\u2019t this more or less what we spent a bunch of time on assumeutxo to accomplish\n\nIt's actually completely orthogonal.\n\nToday your options are to start with assumeutxo or not, and then to either use assumevalid or not for (background) validation. SwiftSync speeds up the latter, regardless of whether you utilize assumeutxo or not.\n\nIn fact, assumeutxo and SwiftSync synergize quite nicely in some ways. SwiftSync makes background validation near-stateless, meaning you wouldn't have to manage two full chainstates when you're simultaneously validating at the tip. And if you use SwiftSync (specifically the non-assumevalid version) with assumeutxo then you don't even need the hints anymore. You can just add every output (spent or unspent) to the hash aggregate and subtract the UTXO set from it (i.e. all outputs - inputs - UTXO set == 0).",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 2,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}