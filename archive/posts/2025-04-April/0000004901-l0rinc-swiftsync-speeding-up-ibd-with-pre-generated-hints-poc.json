{
  "id": 4901,
  "name": "l0rinc",
  "username": "l0rinc",
  "avatar_template": "/user_avatar/delvingbitcoin.org/l0rinc/{size}/859_2.png",
  "created_at": "2025-04-30T11:24:37.593Z",
  "cooked": "<h1><a name=\"p-4901-swiftsync-benchmark-analysis-and-future-ideas-1\" class=\"anchor\" href=\"#p-4901-swiftsync-benchmark-analysis-and-future-ideas-1\"></a>SwiftSync Benchmark Analysis and Future Ideas</h1>\n<p>I love this idea (needed a few iterations with Ruben to understand how it changes the guarantees); it\u2019s a much-needed alternative for something between full IBD and AssumeUTXO.\n<a class=\"mention\" href=\"/u/thestack\">@theStack</a> created an excellent prototype that makes it easy to check it out and experiment further.</p>\n<p>I usually test my IBDs using hyperfine for precision, either an i9 processor with an NVMe SSD (or an i7 with an HDD, not used here).</p>\n<p>I have separated the addition of ibdboosterfile/swiftsyncfile argument to be the very first commit so that I can run both before/after versions with the exact same arguments (in the first instance the value is ignored; it\u2019s basically master branch with an unused arg).\nI have measured a <code>-reindex-chainstate</code> instead of a full IBD to reduce unrelated networking fluctuations.</p>\n<p>I have first tried it with the provided <em>850900</em> block hints with MuHash for <code>-dbcache=4500</code> (since we\u2019re not testing flushing behavior, so let\u2019s use plenty of memory).\nAs mentioned before, it seems like the MuHash version is surprisingly slow, it\u2019s actually 2x <strong>slower</strong> than master:</p>\n<details>\n<summary>\nMuHash benchmark details with 4.5 GB cache</summary>\n<pre data-code-wrap=\"bash\"><code class=\"lang-bash\">COMMITS=\"76a731ed49e4234e62a79f492657d0138ded6437 9cdda4f301aa4aa1113024ee52c87b92449ad02b\"; \\\nSTOP_HEIGHT=850901; DBCACHE=4500; \\\nCC=gcc; CXX=g++; \\\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\n(echo \"\"; for c in $COMMITS; do git fetch origin $c -q &amp;&amp; git log -1 --pretty=format:'%h %s' $c || exit 1; done; echo \"\") &amp;&amp; \\\nhyperfine \\\n  --sort 'command' \\\n  --runs 1 \\\n  --export-json \"$BASE_DIR/rdx-${COMMITS// /-}-$STOP_HEIGHT-$DBCACHE-$CC.json\" \\\n  --parameter-list COMMIT ${COMMITS// /,} \\\n  --prepare \"killall bitcoind; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard; \\\n    cmake -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_WALLET=OFF &amp;&amp; cmake --build build -j$(nproc) --target bitcoind &amp;&amp; \\\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP_HEIGHT -dbcache=5000 -printtoconsole=0; sleep 100\" \\\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log\" \\\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -stopatheight=$STOP_HEIGHT -dbcache=$DBCACHE -ibdboosterfile=../booster850900.bin\"\n</code></pre>\n<pre><code class=\"lang-auto\">&gt; branch - 76a731ed49 IBD Booster: bugfix: skip txs that are overwritten later (duplicate txids)\n&gt; master - 9cdda4f301 Add ibdboosterfile arg - to simplify benchmark params\n</code></pre>\n<pre><code class=\"lang-auto\">Benchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=850901 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -ibdboosterfile=../booster850900.bin (COMMIT = 76a731ed49e4234e62a79f492657d0138ded6437)\n  Time (abs \u2261):        30699.125 s               [User: 30626.081 s, System: 534.603 s]\n\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=850901 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -ibdboosterfile=../booster850900.bin (COMMIT = 9cdda4f301aa4aa1113024ee52c87b92449ad02b)\n  Time (abs \u2261):        15758.185 s               [User: 17931.351 s, System: 832.149 s]\n</code></pre>\n<pre><code class=\"lang-auto\">Relative speed comparison\n        1.95          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=850901 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -ibdboosterfile=../booster850900.bin (COMMIT = 76a731ed49e4234e62a79f492657d0138ded6437)\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=850901 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -ibdboosterfile=../booster850900.bin (COMMIT = 9cdda4f301aa4aa1113024ee52c87b92449ad02b)\n</code></pre>\n</details>\n<p>Luckily <a class=\"mention\" href=\"/u/thestack\">@theStack</a> provided an alternative which just uses SHA-256 to keep track of spentness via <code>HashWriter</code>.\nI have tested this version as well by first generating the hints until block <em>888888</em> for good luck\ud83c\udf40 and gave it more cowbell (45 GB in-memory cache to have a single flush at the end to reduce noise).\nThis is indeed 56% faster for me, resulting in a 2h:47m reindex-chainstate - sweet, I could get used to that.</p>\n<details>\n<summary>\nSHA-256 benchmark details with 45 GB cache</summary>\n<pre data-code-wrap=\"bash\"><code class=\"lang-bash\">COMMITS=\"ab8dec1c87aef36e390bcc7d64d8604cc9170b93 e7194c13507a89544a3cf5f31c4eab88c19ba72b\"; \\\nSTOP_HEIGHT=888888; DBCACHE=45000; \\\nCC=gcc; CXX=g++; \\\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\n(echo \"\"; for c in $COMMITS; do git fetch origin $c -q &amp;&amp; git log -1 --pretty=format:'%h %s' $c || exit 1; done; echo \"\") &amp;&amp; \\\nhyperfine \\\n  --sort 'command' \\\n  --runs 1 \\\n  --export-json \"$BASE_DIR/rdx-${COMMITS// /-}-$STOP_HEIGHT-$DBCACHE-$CC.json\" \\\n  --parameter-list COMMIT ${COMMITS// /,} \\\n  --prepare \"killall bitcoind; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard; \\\n    cmake -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_WALLET=OFF &amp;&amp; cmake --build build -j$(nproc) --target bitcoind &amp;&amp; \\\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP_HEIGHT -dbcache=5000 -printtoconsole=0; sleep 100\" \\\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log\" \\\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -stopatheight=$STOP_HEIGHT -dbcache=$DBCACHE -swiftsyncfile=../ibd-booster-888888.bin\"\n</code></pre>\n<pre><code class=\"lang-auto\">&gt; master - ab8dec1c87 init: add -swiftsyncfile option\n&gt; branch - e7194c1350 init: use the -swiftsyncfile option\n</code></pre>\n<pre><code class=\"lang-auto\">Benchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=888888 -dbcache=45000 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -swiftsyncfile=../ibd-booster-888888.bin (COMMIT = ab8dec1c87aef36e390bcc7d64d8604cc9170b93)\n  Time (abs \u2261):        15653.472 s               [User: 19512.089 s, System: 663.930 s]\n\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=888888 -dbcache=45000 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -swiftsyncfile=../ibd-booster-888888.bin (COMMIT = e7194c13507a89544a3cf5f31c4eab88c19ba72b)\n  Time (abs \u2261):        10040.169 s               [User: 11106.200 s, System: 533.065 s]\n</code></pre>\n<pre><code class=\"lang-auto\">Relative speed comparison\n        1.56          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=888888 -dbcache=45000 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -swiftsyncfile=../ibd-booster-888888.bin (COMMIT = ab8dec1c87aef36e390bcc7d64d8604cc9170b93)\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=888888 -dbcache=45000 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -swiftsyncfile=../ibd-booster-888888.bin (COMMIT = e7194c13507a89544a3cf5f31c4eab88c19ba72b)\n</code></pre>\n</details>\n<p>The final flush from memory to disk was included in the benchmark, it took roughly 12\u00bd minutes (see <a href=\"https://github.com/bitcoin/bitcoin/pull/32043\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">[IBD] Tracking PR for speeding up Initial Block Download by l0rinc \u00b7 Pull Request #32043 \u00b7 bitcoin/bitcoin \u00b7 GitHub</a> for other pull requests meant to speed that up).</p>\n<details>\n<summary>\nLog details</summary>\n<pre data-code-wrap=\"bash\"><code class=\"lang-bash\">2025-04-30T06:44:15Z *** SwiftSync: aggregate hash check at terminal block height 888888 succeeded. ***\n2025-04-30T06:44:15Z UpdateTip: new best=00000000000000000001347938c263a968987bf444eb9596ab0597f721e4e9e8 height=888888 version=0x24bc4000 log2_work=95.509247 tx=1169009164 date='2025-03-22T09:15:51Z' progress=0.986891 cache=25442.8MiB(173676464txo)\n...\n2025-04-30T06:44:15Z [warning] Flushing large (24 GiB) UTXO set to disk, it may take several minutes\n2025-04-30T06:56:52Z Shutdown: done\n</code></pre>\n</details>\n<h2><a name=\"p-4901-future-ideas-and-questions-2\" class=\"anchor\" href=\"#p-4901-future-ideas-and-questions-2\"></a>Future Ideas and Questions</h2>\n<p>I have a few ideas and questions about the implementation (some might be a bit undercooked for now):</p>\n<ol>\n<li>\n<p><strong>Further Optimizations</strong></p>\n<ul>\n<li>Do we really need a cryptographic hash here, or can we use a \u201cpretty-good\u201d hash instead? I\u2019d like to better understand the requirements for salting, especially if we\u2019re storing the hint hashes as well.</li>\n<li>Could we use a native 64/128-bit aggregator instead of a 256-bit one? Especially if we can split one big aggregator to one-per-thread, which we\u2019d combine at the very end to check for validity (fork-join)\u2026 Given a 256-bit hash for the hints and AssumeUTXO heights, can we make this \u201cless secure\u201d?</li>\n</ul>\n</li>\n<li>\n<p><strong>Memory/Disk Handling</strong></p>\n<ul>\n<li>Since we don\u2019t need to read or remove from the UTXO set anymore, we could use a concurrent queue/ring-buffer instead of the dbcache and write continuously to disk via a background thread (avoiding the expensive final flush). Or maybe just directly write to LevelDB with bigger in-memory cache.</li>\n<li>We could investigate what it would take to add undos on a background thread during swift-syncing (e.g. while the main thread connects the next block).</li>\n<li>Would this enable ultra-low-memory IBD (e.g., 100MiB, assuming gradual hint loading)?</li>\n</ul>\n</li>\n<li>\n<p><strong>Validation and Security</strong></p>\n<ul>\n<li>We should definitely validate that total amounts at the current tip don\u2019t exceed expected mined values (just noticed you mention this in the latest version of the writeup as well). While assumevalid skips script validation (doesn\u2019t really concern me), I find skipping amount validation more concerning (potential inflation bugs).</li>\n<li>We need more negative tests for various invalid scenarios (invalid hints, different tricky double-spends, etc.).</li>\n<li>Validate current state against hard-coded AssumeUTXO heights to fail early if inconsistencies are found. We could also add the utxo-hint-hashes there as well to be able to request the hints from any node safely.</li>\n<li>Do we need to validate whether any of the outpoints accidentally hash to the same value?</li>\n</ul>\n</li>\n<li>\n<p><strong>Performance</strong></p>\n<ul>\n<li>How would this combine with other pending IBD optimizations (batched block reading/writing, obfuscation speedup, faster UTXO batch writing, etc.)?</li>\n<li>What are the next bottlenecks after removing the obvious ones (since this removed the most obvious ones, which eclipsed all other ones)?</li>\n<li>How many blocks have outputs that were either all spent or all unspent until a given height?  Could we optimize the hints for these cases? Can we optimize the storage compressibility (e.g. sorting by similar block spends)?</li>\n</ul>\n</li>\n<li>\n<p><strong>Usage Extensions</strong></p>\n<ul>\n<li>Could SwiftSync work for very low-performance devices (e.g. smartwatch) even after IBD (reorgs)?</li>\n<li>Should we keep updating the hints after IBD to speed up RPC calls (maybe <code>gettxout</code>, <code>gettxoutsetinfo</code>, <code>scantxoutset</code>, <code>listunspent</code>, etc)?</li>\n<li>Initially introduce this for <code>reindex(-chainstate)</code> only, since we\u2019ve already validated the chain.</li>\n</ul>\n</li>\n</ol>\n<p>I\u2019ll try to parallelize this in the following weeks (threadpool + coroutines?), which should be straightforward (though measuring takes time), and apply other orthogonal optimizations (see <a href=\"https://github.com/bitcoin/bitcoin/pull/32043\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">[IBD] Tracking PR for speeding up Initial Block Download by l0rinc \u00b7 Pull Request #32043 \u00b7 bitcoin/bitcoin \u00b7 GitHub</a>) to get a clearer picture of what we can achieve here.</p>",
  "post_number": 13,
  "post_type": 1,
  "posts_count": 13,
  "updated_at": "2025-04-30T16:56:05.237Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 8,
  "reads": 19,
  "readers_count": 18,
  "score": 88.6,
  "yours": false,
  "topic_id": 1562,
  "topic_slug": "swiftsync-speeding-up-ibd-with-pre-generated-hints-poc",
  "topic_title": "SwiftSync -- Speeding up IBD with pre-generated hints (PoC)",
  "topic_html_title": "SwiftSync &ndash; Speeding up IBD with pre-generated hints (PoC)",
  "category_id": 8,
  "display_username": "l0rinc",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "\n\n# SwiftSync Benchmark Analysis and Future Ideas\n\nI love this idea (needed a few iterations with Ruben to understand how it changes the guarantees); it's a much-needed alternative for something between full IBD and AssumeUTXO.\n@theStack created an excellent prototype that makes it easy to check it out and experiment further.\n\nI usually test my IBDs using hyperfine for precision, either an i9 processor with an NVMe SSD (or an i7 with an HDD, not used here).\n\nI have separated the addition of ibdboosterfile/swiftsyncfile argument to be the very first commit so that I can run both before/after versions with the exact same arguments (in the first instance the value is ignored; it's basically master branch with an unused arg).\nI have measured a `-reindex-chainstate` instead of a full IBD to reduce unrelated networking fluctuations.\n\nI have first tried it with the provided *850900* block hints with MuHash for `-dbcache=4500` (since we're not testing flushing behavior, so let's use plenty of memory).\nAs mentioned before, it seems like the MuHash version is surprisingly slow, it's actually 2x **slower** than master:\n\n[details=\"MuHash benchmark details with 4.5 GB cache\"]\n\n```bash\nCOMMITS=\"76a731ed49e4234e62a79f492657d0138ded6437 9cdda4f301aa4aa1113024ee52c87b92449ad02b\"; \\\nSTOP_HEIGHT=850901; DBCACHE=4500; \\\nCC=gcc; CXX=g++; \\\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\n(echo \"\"; for c in $COMMITS; do git fetch origin $c -q && git log -1 --pretty=format:'%h %s' $c || exit 1; done; echo \"\") && \\\nhyperfine \\\n  --sort 'command' \\\n  --runs 1 \\\n  --export-json \"$BASE_DIR/rdx-${COMMITS// /-}-$STOP_HEIGHT-$DBCACHE-$CC.json\" \\\n  --parameter-list COMMIT ${COMMITS// /,} \\\n  --prepare \"killall bitcoind; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard; \\\n    cmake -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_WALLET=OFF && cmake --build build -j$(nproc) --target bitcoind && \\\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP_HEIGHT -dbcache=5000 -printtoconsole=0; sleep 100\" \\\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log\" \\\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -stopatheight=$STOP_HEIGHT -dbcache=$DBCACHE -ibdboosterfile=../booster850900.bin\"\n```\n\n```\n> branch - 76a731ed49 IBD Booster: bugfix: skip txs that are overwritten later (duplicate txids)\n> master - 9cdda4f301 Add ibdboosterfile arg - to simplify benchmark params\n```\n\n```\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=850901 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -ibdboosterfile=../booster850900.bin (COMMIT = 76a731ed49e4234e62a79f492657d0138ded6437)\n  Time (abs \u2261):        30699.125 s               [User: 30626.081 s, System: 534.603 s]\n\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=850901 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -ibdboosterfile=../booster850900.bin (COMMIT = 9cdda4f301aa4aa1113024ee52c87b92449ad02b)\n  Time (abs \u2261):        15758.185 s               [User: 17931.351 s, System: 832.149 s]\n```\n\n```\nRelative speed comparison\n        1.95          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=850901 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -ibdboosterfile=../booster850900.bin (COMMIT = 76a731ed49e4234e62a79f492657d0138ded6437)\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=850901 -dbcache=4500 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -ibdboosterfile=../booster850900.bin (COMMIT = 9cdda4f301aa4aa1113024ee52c87b92449ad02b)\n```\n\n[/details]\n\nLuckily @theStack provided an alternative which just uses SHA-256 to keep track of spentness via `HashWriter`.\nI have tested this version as well by first generating the hints until block *888888* for good luck\ud83c\udf40 and gave it more cowbell (45 GB in-memory cache to have a single flush at the end to reduce noise).\nThis is indeed 56% faster for me, resulting in a 2h:47m reindex-chainstate - sweet, I could get used to that.\n\n[details=\"SHA-256 benchmark details with 45 GB cache\"]\n\n```bash\nCOMMITS=\"ab8dec1c87aef36e390bcc7d64d8604cc9170b93 e7194c13507a89544a3cf5f31c4eab88c19ba72b\"; \\\nSTOP_HEIGHT=888888; DBCACHE=45000; \\\nCC=gcc; CXX=g++; \\\nBASE_DIR=\"/mnt/my_storage\"; DATA_DIR=\"$BASE_DIR/BitcoinData\"; LOG_DIR=\"$BASE_DIR/logs\"; \\\n(echo \"\"; for c in $COMMITS; do git fetch origin $c -q && git log -1 --pretty=format:'%h %s' $c || exit 1; done; echo \"\") && \\\nhyperfine \\\n  --sort 'command' \\\n  --runs 1 \\\n  --export-json \"$BASE_DIR/rdx-${COMMITS// /-}-$STOP_HEIGHT-$DBCACHE-$CC.json\" \\\n  --parameter-list COMMIT ${COMMITS// /,} \\\n  --prepare \"killall bitcoind; rm -f $DATA_DIR/debug.log; git checkout {COMMIT}; git clean -fxd; git reset --hard; \\\n    cmake -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_WALLET=OFF && cmake --build build -j$(nproc) --target bitcoind && \\\n    ./build/bin/bitcoind -datadir=$DATA_DIR -stopatheight=$STOP_HEIGHT -dbcache=5000 -printtoconsole=0; sleep 100\" \\\n  --cleanup \"cp $DATA_DIR/debug.log $LOG_DIR/debug-{COMMIT}-$(date +%s).log\" \\\n  \"COMPILER=$CC ./build/bin/bitcoind -datadir=$DATA_DIR -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -stopatheight=$STOP_HEIGHT -dbcache=$DBCACHE -swiftsyncfile=../ibd-booster-888888.bin\"\n```\n\n```\n> master - ab8dec1c87 init: add -swiftsyncfile option\n> branch - e7194c1350 init: use the -swiftsyncfile option\n```\n\n```\nBenchmark 1: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=888888 -dbcache=45000 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -swiftsyncfile=../ibd-booster-888888.bin (COMMIT = ab8dec1c87aef36e390bcc7d64d8604cc9170b93)\n  Time (abs \u2261):        15653.472 s               [User: 19512.089 s, System: 663.930 s]\n\nBenchmark 2: COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=888888 -dbcache=45000 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -swiftsyncfile=../ibd-booster-888888.bin (COMMIT = e7194c13507a89544a3cf5f31c4eab88c19ba72b)\n  Time (abs \u2261):        10040.169 s               [User: 11106.200 s, System: 533.065 s]\n```\n\n```\nRelative speed comparison\n        1.56          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=888888 -dbcache=45000 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -swiftsyncfile=../ibd-booster-888888.bin (COMMIT = ab8dec1c87aef36e390bcc7d64d8604cc9170b93)\n        1.00          COMPILER=gcc ./build/bin/bitcoind -datadir=/mnt/my_storage/BitcoinData -stopatheight=888888 -dbcache=45000 -reindex-chainstate -blocksonly -connect=0 -printtoconsole=0 -swiftsyncfile=../ibd-booster-888888.bin (COMMIT = e7194c13507a89544a3cf5f31c4eab88c19ba72b)\n```\n\n[/details]\n\nThe final flush from memory to disk was included in the benchmark, it took roughly 12\u00bd minutes (see https://github.com/bitcoin/bitcoin/pull/32043 for other pull requests meant to speed that up).\n\n[details=\"Log details\"]\n\n```bash\n2025-04-30T06:44:15Z *** SwiftSync: aggregate hash check at terminal block height 888888 succeeded. ***\n2025-04-30T06:44:15Z UpdateTip: new best=00000000000000000001347938c263a968987bf444eb9596ab0597f721e4e9e8 height=888888 version=0x24bc4000 log2_work=95.509247 tx=1169009164 date='2025-03-22T09:15:51Z' progress=0.986891 cache=25442.8MiB(173676464txo)\n...\n2025-04-30T06:44:15Z [warning] Flushing large (24 GiB) UTXO set to disk, it may take several minutes\n2025-04-30T06:56:52Z Shutdown: done\n```\n\n[/details]\n\n## Future Ideas and Questions\nI have a few ideas and questions about the implementation (some might be a bit undercooked for now):\n\n1. **Further Optimizations**\n   * Do we really need a cryptographic hash here, or can we use a \"pretty-good\" hash instead? I'd like to better understand the requirements for salting, especially if we're storing the hint hashes as well.\n   * Could we use a native 64/128-bit aggregator instead of a 256-bit one? Especially if we can split one big aggregator to one-per-thread, which we'd combine at the very end to check for validity (fork-join)... Given a 256-bit hash for the hints and AssumeUTXO heights, can we make this \"less secure\"?\n\n2. **Memory/Disk Handling**\n   * Since we don't need to read or remove from the UTXO set anymore, we could use a concurrent queue/ring-buffer instead of the dbcache and write continuously to disk via a background thread (avoiding the expensive final flush). Or maybe just directly write to LevelDB with bigger in-memory cache.\n   * We could investigate what it would take to add undos on a background thread during swift-syncing (e.g. while the main thread connects the next block).\n   * Would this enable ultra-low-memory IBD (e.g., 100MiB, assuming gradual hint loading)?\n\n3. **Validation and Security**\n   * We should definitely validate that total amounts at the current tip don't exceed expected mined values (just noticed you mention this in the latest version of the writeup as well). While assumevalid skips script validation (doesn't really concern me), I find skipping amount validation more concerning (potential inflation bugs).\n   * We need more negative tests for various invalid scenarios (invalid hints, different tricky double-spends, etc.).\n   * Validate current state against hard-coded AssumeUTXO heights to fail early if inconsistencies are found. We could also add the utxo-hint-hashes there as well to be able to request the hints from any node safely.\n   * Do we need to validate whether any of the outpoints accidentally hash to the same value?\n\n4. **Performance**\n   * How would this combine with other pending IBD optimizations (batched block reading/writing, obfuscation speedup, faster UTXO batch writing, etc.)?\n   * What are the next bottlenecks after removing the obvious ones (since this removed the most obvious ones, which eclipsed all other ones)?\n   * How many blocks have outputs that were either all spent or all unspent until a given height?  Could we optimize the hints for these cases? Can we optimize the storage compressibility (e.g. sorting by similar block spends)?\n\n5. **Usage Extensions**\n   * Could SwiftSync work for very low-performance devices (e.g. smartwatch) even after IBD (reorgs)?\n   * Should we keep updating the hints after IBD to speed up RPC calls (maybe `gettxout`, `gettxoutsetinfo`, `scantxoutset`, `listunspent`, etc)?\n   * Initially introduce this for `reindex(-chainstate)` only, since we've already validated the chain.\n\n\nI'll try to parallelize this in the following weeks (threadpool + coroutines?), which should be straightforward (though measuring takes time), and apply other orthogonal optimizations (see https://github.com/bitcoin/bitcoin/pull/32043) to get a clearer picture of what we can achieve here.",
  "actions_summary": [
    {
      "id": 2,
      "count": 3
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 580,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "<a name=\"p-4901-swiftsync-benchmark-analysis-and-future-ideas-1\" class=\"anchor\" href=\"#p-4901-swiftsync-benchmark-analysis-and-future-ideas-1\"></a>SwiftSync Benchmark Analysis and Future Ideas\nI love this idea (needed a few iterations with Ruben to understand how it changes the guarantees); it\u2019s a much-needed alternative for something between full IBD and AssumeUTXO.\n<a class=\"mention\" href=\"/u/thestack\">@theStack</a> created an excellent prototype that makes it easy to check it out a&hellip;",
  "truncated": true,
  "post_url": "/t/swiftsync-speeding-up-ibd-with-pre-generated-hints-poc/1562/13",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 3
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 3,
  "current_user_used_main_reaction": false
}