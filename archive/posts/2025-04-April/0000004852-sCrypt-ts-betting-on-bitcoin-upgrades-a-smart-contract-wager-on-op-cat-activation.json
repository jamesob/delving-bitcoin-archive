{
  "id": 4852,
  "name": "sCrypt",
  "username": "sCrypt-ts",
  "avatar_template": "/user_avatar/delvingbitcoin.org/scrypt-ts/{size}/746_2.png",
  "created_at": "2025-04-22T09:37:32.932Z",
  "cooked": "<h1><a name=\"p-4852-betting-on-bitcoin-upgrades-a-smart-contract-wager-on-op_cat-activation-1\" class=\"anchor\" href=\"#p-4852-betting-on-bitcoin-upgrades-a-smart-contract-wager-on-op_cat-activation-1\"></a>Betting on Bitcoin Upgrades: A Smart Contract Wager on OP_CAT Activation</h1>\n<h2><a name=\"p-4852-no-oracles-no-middlemen-pure-on-chain-logic-that-works-today-2\" class=\"anchor\" href=\"#p-4852-no-oracles-no-middlemen-pure-on-chain-logic-that-works-today-2\"></a><em><strong>No oracles. No middlemen. Pure on-chain logic that works today.</strong></em></h2>\n<p>OP_CAT, proposed in BIP 0347, aims to enhance Bitcoin\u2019s scripting capabilities by allowing concatenation of two stack elements, enabling complex covenants and smart contracts. In the ever-evolving world of Bitcoin, soft forks like OP_CAT spark heated debates about functionality, security, and adoption. But talk is cheap \u2014 what if you could put your money where your mouth is? Enter Alice and Bob, two Bitcoin enthusiasts betting on whether OP_CAT will activate by a specific time or block height. Using a clever Bitcoin smart contract, they create a trustless, oracle-free wager that ensures one walks away with the prize, with real skin in the game. We can implement a trustless bet on <code>OP_CAT</code>\u2019s activation <strong>today</strong>, using only <strong>existing Bitcoin opcodes</strong>. It\u2019s Bitcoin-native, self-enforcing, and doesn\u2019t rely on third-party arbitration like <a href=\"https://polymarket.com/event/will-bitcoin-activate-op-ctv-or-op-cat-in-2025?tid=1745283822768\" rel=\"noopener nofollow ugc\">Polymarket</a>. No soft fork is needed.</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/2X/a/a7f2ec5adbac6018e766f188f6131aa9b57b6db6.png\" data-download-href=\"https://delvingbitcoin.org/uploads/default/a7f2ec5adbac6018e766f188f6131aa9b57b6db6\" title=\"\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/2X/a/a7f2ec5adbac6018e766f188f6131aa9b57b6db6_2_500x500.png\" alt=\"\" data-base62-sha1=\"nXKci52FlavfyBy4cbqqRWtLIYC\" width=\"500\" height=\"500\" role=\"presentation\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/2X/a/a7f2ec5adbac6018e766f188f6131aa9b57b6db6_2_500x500.png, https://delvingbitcoin.org/uploads/default/original/2X/a/a7f2ec5adbac6018e766f188f6131aa9b57b6db6.png 1.5x, https://delvingbitcoin.org/uploads/default/original/2X/a/a7f2ec5adbac6018e766f188f6131aa9b57b6db6.png 2x\" data-dominant-color=\"736237\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\"></span><span class=\"informations\">700\u00d7700 828 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<h1><a name=\"p-4852-the-bet-op_cat-activation-by-block-height-n-3\" class=\"anchor\" href=\"#p-4852-the-bet-op_cat-activation-by-block-height-n-3\"></a>The Bet: OP_CAT Activation by Block Height N</h1>\n<p>Alice believes OP_CAT, which redefines OP_SUCCESS126 to enable string concatenation (BIP-347), will activate by block height 900,000 (roughly November 2025, assuming 2-week difficulty adjustments). Bob, skeptical of miner consensus, bets it won\u2019t. They agree to lock 1 BTC each into a smart contract with clear rules:</p>\n<ul>\n<li>If OP_CAT is active by block height 900,000, Alice wins and claims 2 BTC.</li>\n<li>If OP_CAT is not active by block height 900,000, Bob wins and claims 2 BTC.</li>\n<li>No oracles or third parties are allowed \u2014 the contract must resolve using Bitcoin\u2019s blockchain alone.</li>\n</ul>\n<p>This isn\u2019t just a friendly wager; it\u2019s a financial commitment that forces both to back their convictions with real capital, embodying the \u201cskin in the game\u201d ethos.</p>\n<h1><a name=\"p-4852-why-its-tricky-the-op_success126-challenge-4\" class=\"anchor\" href=\"#p-4852-why-its-tricky-the-op_success126-challenge-4\"></a>Why It\u2019s Tricky: The OP_SUCCESS126 Challenge</h1>\n<p>Designing this contract is no small feat. OP_CAT\u2019s activation hinges on redefining OP_SUCCESS126, a placeholder opcode that, pre-activation, causes any script executing it to <strong>succeed</strong> immediately. This means a naive script expecting OP_CAT to fail pre-activation (e.g., to block Alice\u2019s spending) would instead allow Alice to claim funds prematurely, breaking the bet\u2019s logic. To overcome this, Alice and Bob need a contract that distinguishes OP_CAT\u2019s post-activation behavior (concatenation) from OP_SUCCESS126\u2019s pre-activation behavior (immediate success) without external data.</p>\n<h1><a name=\"p-4852-the-smart-contract-design-5\" class=\"anchor\" href=\"#p-4852-the-smart-contract-design-5\"></a>The Smart Contract Design</h1>\n<p>The contract uses a Taproot output with a single script path/tapleaf with two conditional branches\u00b9. The script is compiled from the following <a href=\"https://docs.scrypt.io/\" rel=\"noopener nofollow ugc\">sCrypt</a> smart contract.</p>\n<pre data-code-wrap=\"ts\"><code class=\"lang-ts\">01 export class OPCAT_Wager extends SmartContract {\n02     @prop()\n03     pubA: PubKey;\n04\n05     @prop()\n06     pubB: PubKey;\n07\n08     @prop()\n09     deadline: int32;\n10\n11     @prop()\n12     delta: int32;\n13\n14     @method()\n15     public unlock(a: ByteString, b: ByteString, sigA: Sig, sigB: Sig) {\n16         if (this.checkSig(sigB, this.pubB)) {\n17             this.absTimelock(this.deadline);\n18             assert(sha256(a + b) == toByteString('00..00'));\n19         } else {\n20             this.absTimelock(this.deadline + this.delta);\n21             this.checkSig(sigA, this.pubA);\n22         }\n23     }\n24 }\n\n</code></pre>\n<h2><a name=\"p-4852-why-this-works-6\" class=\"anchor\" href=\"#p-4852-why-this-works-6\"></a>Why This Works</h2>\n<ul>\n<li><code>sha256(a + b) == toByteString('00..00')</code> is impossible: no inputs from concatenating two strings hash to all zeros.<code> +</code>is the concatenation operator and compiles to OP_CAT. This assertion at Line 18 will always fail if OP_CAT is re-enabled. It can only succeed if OP_CAT is not re-enabled, when Bob wins.</li>\n<li>Absolute timelock<code>absTimelock()</code> (compiled to OP_CHECKLOCKTIMEVERIFY/CLTV, instead of relative timelock OP_CSV) ensures neither can spend before the agreed activation deadline.</li>\n<li>We add more time delay <code>delta</code> for Alice at Line 20, because otherwise <strong>she can also spend</strong> even if OP_CAT is not re-enabled at the block height and may frontrun Bob. The time delay can be set conservatively long to ensure Bob\u2019s spending transaction can be mined before Alice\u2019s attempt, say, 48 hours. Note that once OP_CAT is reactivated, it will remained reactivated after <code>delta</code>.</li>\n</ul>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/2X/b/b004b6aef87c88bb4d6be31ec98edfd2584e10a3.png\" data-download-href=\"https://delvingbitcoin.org/uploads/default/b004b6aef87c88bb4d6be31ec98edfd2584e10a3\" title=\"\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/2X/b/b004b6aef87c88bb4d6be31ec98edfd2584e10a3_2_625x500.png\" alt=\"\" data-base62-sha1=\"p788hM0GGaJW6A9F7dFbP7FCRgL\" width=\"625\" height=\"500\" role=\"presentation\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/2X/b/b004b6aef87c88bb4d6be31ec98edfd2584e10a3_2_625x500.png, https://delvingbitcoin.org/uploads/default/original/2X/b/b004b6aef87c88bb4d6be31ec98edfd2584e10a3.png 1.5x, https://delvingbitcoin.org/uploads/default/original/2X/b/b004b6aef87c88bb4d6be31ec98edfd2584e10a3.png 2x\" data-dominant-color=\"F8F5F2\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\"></span><span class=\"informations\">700\u00d7559 41.7 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Execution Flow: How the Bet Resolves</p>\n<h2><a name=\"p-4852-miner-extractable-value-mev-risks-7\" class=\"anchor\" href=\"#p-4852-miner-extractable-value-mev-risks-7\"></a>Miner Extractable Value (MEV) Risks</h2>\n<p>In the context of this bet, MEV could arise if miners influence OP_CAT\u2019s activation to manipulate the outcome. For instance, miners could accelerate signaling to favor Alice. However, as long as the total bet amount remains relatively small, the financial incentive for miners to engage in such manipulation for a softfork is limited, and we do not consider MEV a significant concern here and deem it out of scope for this analysis.</p>\n<h1><a name=\"p-4852-final-thoughts-8\" class=\"anchor\" href=\"#p-4852-final-thoughts-8\"></a><img src=\"https://delvingbitcoin.org/images/emoji/twitter/chequered_flag.png?v=14\" title=\":chequered_flag:\" class=\"emoji\" alt=\":chequered_flag:\" loading=\"lazy\" width=\"20\" height=\"20\"> Final Thoughts</h1>\n<p>This isn\u2019t theoretical \u2014 you can deploy this right now. It leverages Bitcoin\u2019s existing rules to create a self-executing, trustless bet on <code>OP_CAT</code>\u2019s future activation. It also sets a precedent for other prediction markets (e.g., betting on other opcodes, protocol changes).</p>\n<p>Want to try it? Find a counterparty, agree on activation block height and lock the funds. The blockchain enforces the rest.</p>\n<p>No soft forks. No oracles. <strong>Just Bitcoin.</strong> <img src=\"https://delvingbitcoin.org/images/emoji/twitter/rocket.png?v=14\" title=\":rocket:\" class=\"emoji\" alt=\":rocket:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<p>[1] Alternatively, we can uses a Taproot address with two script paths: one for Alice\u2019s win, the other for Bob\u2019s. We choose one script path for ease of exposition here.</p>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 7,
  "updated_at": "2025-04-22T09:42:38.587Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 65,
  "reads": 17,
  "readers_count": 16,
  "score": 328.4,
  "yours": false,
  "topic_id": 1632,
  "topic_slug": "betting-on-bitcoin-upgrades-a-smart-contract-wager-on-op-cat-activation",
  "topic_title": "Betting on Bitcoin Upgrades: A Smart Contract Wager on OP_CAT Activation",
  "topic_html_title": "Betting on Bitcoin Upgrades: A Smart Contract Wager on OP_CAT Activation",
  "category_id": 8,
  "display_username": "sCrypt",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "# Betting on Bitcoin Upgrades: A Smart Contract Wager on OP_CAT Activation\n\n## ***No oracles. No middlemen. Pure on-chain logic that works today.***\n\n\nOP_CAT, proposed in BIP 0347, aims to enhance Bitcoin\u2019s scripting capabilities by allowing concatenation of two stack elements, enabling complex covenants and smart contracts. In the ever-evolving world of Bitcoin, soft forks like OP_CAT spark heated debates about functionality, security, and adoption. But talk is cheap \u2014 what if you could put your money where your mouth is? Enter Alice and Bob, two Bitcoin enthusiasts betting on whether OP_CAT will activate by a specific time or block height. Using a clever Bitcoin smart contract, they create a trustless, oracle-free wager that ensures one walks away with the prize, with real skin in the game. We can implement a trustless bet on `OP_CAT`\u2019s activation **today**, using only **existing Bitcoin opcodes**. It\u2019s Bitcoin-native, self-enforcing, and doesn\u2019t rely on third-party arbitration like [Polymarket](https://polymarket.com/event/will-bitcoin-activate-op-ctv-or-op-cat-in-2025?tid=1745283822768). No soft fork is needed.\n\n![|700x700](upload://nXKci52FlavfyBy4cbqqRWtLIYC.png)\n\n# The Bet: OP_CAT Activation by Block Height N\n\nAlice believes OP_CAT, which redefines OP_SUCCESS126 to enable string concatenation (BIP-347), will activate by block height 900,000 (roughly November 2025, assuming 2-week difficulty adjustments). Bob, skeptical of miner consensus, bets it won\u2019t. They agree to lock 1 BTC each into a smart contract with clear rules:\n\n* If OP_CAT is active by block height 900,000, Alice wins and claims 2 BTC.\n* If OP_CAT is not active by block height 900,000, Bob wins and claims 2 BTC.\n* No oracles or third parties are allowed \u2014 the contract must resolve using Bitcoin\u2019s blockchain alone.\n\nThis isn\u2019t just a friendly wager; it\u2019s a financial commitment that forces both to back their convictions with real capital, embodying the \u201cskin in the game\u201d ethos.\n\n# Why It\u2019s Tricky: The OP_SUCCESS126 Challenge\n\nDesigning this contract is no small feat. OP_CAT\u2019s activation hinges on redefining OP_SUCCESS126, a placeholder opcode that, pre-activation, causes any script executing it to **succeed** immediately. This means a naive script expecting OP_CAT to fail pre-activation (e.g., to block Alice\u2019s spending) would instead allow Alice to claim funds prematurely, breaking the bet\u2019s logic. To overcome this, Alice and Bob need a contract that distinguishes OP_CAT\u2019s post-activation behavior (concatenation) from OP_SUCCESS126\u2019s pre-activation behavior (immediate success) without external data.\n\n# The Smart Contract Design\n\nThe contract uses a Taproot output with a single script path/tapleaf with two conditional branches\u00b9. The script is compiled from the following [sCrypt](https://docs.scrypt.io/) smart contract.\n\n```ts\n01 export class OPCAT_Wager extends SmartContract {\n02     @prop()\n03     pubA: PubKey;\n04\n05     @prop()\n06     pubB: PubKey;\n07\n08     @prop()\n09     deadline: int32;\n10\n11     @prop()\n12     delta: int32;\n13\n14     @method()\n15     public unlock(a: ByteString, b: ByteString, sigA: Sig, sigB: Sig) {\n16         if (this.checkSig(sigB, this.pubB)) {\n17             this.absTimelock(this.deadline);\n18             assert(sha256(a + b) == toByteString('00..00'));\n19         } else {\n20             this.absTimelock(this.deadline + this.delta);\n21             this.checkSig(sigA, this.pubA);\n22         }\n23     }\n24 }\n\n```\n\n## Why This Works\n\n* `sha256(a + b) == toByteString('00..00')` is impossible: no inputs from concatenating two strings hash to all zeros.` +`is the concatenation operator and compiles to OP_CAT. This assertion at Line 18 will always fail if OP_CAT is re-enabled. It can only succeed if OP_CAT is not re-enabled, when Bob wins.\n* Absolute timelock`absTimelock()` (compiled to OP_CHECKLOCKTIMEVERIFY/CLTV, instead of relative timelock OP_CSV) ensures neither can spend before the agreed activation deadline.\n* We add more time delay `delta` for Alice at Line 20, because otherwise **she can also spend** even if OP_CAT is not re-enabled at the block height and may frontrun Bob. The time delay can be set conservatively long to ensure Bob\u2019s spending transaction can be mined before Alice\u2019s attempt, say, 48 hours. Note that once OP_CAT is reactivated, it will remained reactivated after `delta`.\n\n![|700x560](upload://p788hM0GGaJW6A9F7dFbP7FCRgL.png)\n\nExecution Flow: How the Bet Resolves\n\n## Miner Extractable Value (MEV) Risks\n\nIn the context of this bet, MEV could arise if miners influence OP_CAT\u2019s activation to manipulate the outcome. For instance, miners could accelerate signaling to favor Alice. However, as long as the total bet amount remains relatively small, the financial incentive for miners to engage in such manipulation for a softfork is limited, and we do not consider MEV a significant concern here and deem it out of scope for this analysis.\n\n# \ud83c\udfc1 Final Thoughts\n\nThis isn\u2019t theoretical \u2014 you can deploy this right now. It leverages Bitcoin\u2019s existing rules to create a self-executing, trustless bet on `OP_CAT`\u2019s future activation. It also sets a precedent for other prediction markets (e.g., betting on other opcodes, protocol changes).\n\nWant to try it? Find a counterparty, agree on activation block height and lock the funds. The blockchain enforces the rest.\n\nNo soft forks. No oracles. **Just Bitcoin.** \ud83d\ude80\n\n[1] Alternatively, we can uses a Taproot address with two script paths: one for Alice\u2019s win, the other for Bob\u2019s. We choose one script path for ease of exposition here.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 477,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "downloaded local copies of images",
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "<a name=\"p-4852-betting-on-bitcoin-upgrades-a-smart-contract-wager-on-op_cat-activation-1\" class=\"anchor\" href=\"#p-4852-betting-on-bitcoin-upgrades-a-smart-contract-wager-on-op_cat-activation-1\"></a>Betting on Bitcoin Upgrades: A Smart Contract Wager on OP_CAT Activation\n<a name=\"p-4852-no-oracles-no-middlemen-pure-on-chain-logic-that-works-today-2\" class=\"anchor\" href=\"#p-4852-no-oracles-no-middlemen-pure-on-chain-logic-that-works-today-2\"></a>No oracles. No middlemen. Pure on-chain logic that works today.\nOP_CAT, proposed in BIP 0347, aims to enhance Bitcoin\u2019s scripting capabilities by allowing concatenation of two stack elements, enabling complex covenants and smar&hellip;",
  "truncated": true,
  "post_url": "/t/betting-on-bitcoin-upgrades-a-smart-contract-wager-on-op-cat-activation/1632/1",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}