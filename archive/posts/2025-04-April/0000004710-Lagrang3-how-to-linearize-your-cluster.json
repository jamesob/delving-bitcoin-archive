{
  "id": 4710,
  "name": "Lagrang3",
  "username": "Lagrang3",
  "avatar_template": "/user_avatar/delvingbitcoin.org/lagrang3/{size}/377_2.png",
  "created_at": "2025-04-05T21:20:04.873Z",
  "cooked": "<p>I was implementing a proof of concept myself, just to get some understanding of GGT.\n</p><aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/Lagrang3/max-density-closure/blob/e298019aac6b4b7725d68156737aaff20b87968b/examples/maxfeerate-ggt.cpp\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/Lagrang3/max-density-closure/blob/e298019aac6b4b7725d68156737aaff20b87968b/examples/maxfeerate-ggt.cpp\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com/Lagrang3/max-density-closure</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/Lagrang3/max-density-closure/blob/e298019aac6b4b7725d68156737aaff20b87968b/examples/maxfeerate-ggt.cpp\" target=\"_blank\" rel=\"noopener nofollow ugc\">examples/maxfeerate-ggt.cpp</a></h4>\n\n<div class=\"git-blob-info\">\n  <a href=\"https://github.com/Lagrang3/max-density-closure/blob/e298019aac6b4b7725d68156737aaff20b87968b/examples/maxfeerate-ggt.cpp\" rel=\"noopener nofollow ugc\"><code>e298019aa</code></a>\n</div>\n\n\n      <pre><code class=\"lang-cpp\">/* Maximum feerate closure.\n *\n * Input:\n * N M // N: number of transactions, M: number of dependencies\n * f_i, z_i // N lines, one for each transaction, f_i: the fee of transaction i,\n * z_i: the size of transaction i\n * a_i b_i // M lines, one for each dependency, a_i depends on b_i.\n * */\n\n#include &lt;algorithm&gt;\n#include &lt;cassert&gt;\n#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;span&gt;\n#include &lt;sstream&gt;\n#include &lt;vector&gt;\n\n#include \"clusterlinearize.h\"\n\nint can_reach_sink(std::span&lt;const int&gt; dependency,\n</code></pre>\n\n\n\n  This file has been truncated. <a href=\"https://github.com/Lagrang3/max-density-closure/blob/e298019aac6b4b7725d68156737aaff20b87968b/examples/maxfeerate-ggt.cpp\" target=\"_blank\" rel=\"noopener nofollow ugc\">show original</a>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>I will love to see through your code.</p>\n<p>I think there might be a little optimization gain if we consider the fact that the graph\nis bipartite. Nodes have either a non-zero capacity arc with the source or the sink but not both.\nIf we classify nodes this way, let\u2019s say into set N1 (nodes connected to the source)\nand N2 (nodes connected to the sink) we also realize that we can ignore arcs that go from\nN1 to N1, and N2 to N2, why is that? because for any arc that connects nodes a and b (in N1 for\ninstance) that arc either:</p>\n<p>case 1, does NOT carry any flow in the final solution, so it can be ignored,</p>\n<p>case 2, it DOES carry some flow, but that means that there exist some node c in N2 for which\na and b have an arc with (by the dependency transitivity) so we might as well deviate that flow\ndirectly from a to c and not use arc a-b, this can be done since these arcs have infinite capacity.</p>\n<p>Similarly with N2-N2 arcs.</p>\n<p>I might be wrong though, but I think it is an interesting idea worth exploring.</p>",
  "post_number": 65,
  "post_type": 1,
  "posts_count": 78,
  "updated_at": "2025-04-05T21:26:50.550Z",
  "reply_count": 2,
  "reply_to_post_number": 62,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 32,
  "readers_count": 31,
  "score": 16.4,
  "yours": false,
  "topic_id": 303,
  "topic_slug": "how-to-linearize-your-cluster",
  "topic_title": "How to linearize your cluster",
  "topic_html_title": "How to linearize your cluster",
  "category_id": 8,
  "display_username": "Lagrang3",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 96,
    "username": "sipa",
    "name": "Pieter Wuille",
    "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/1100_2.png"
  },
  "bookmarked": false,
  "raw": "I was implementing a proof of concept myself, just to get some understanding of GGT.\nhttps://github.com/Lagrang3/max-density-closure/blob/e298019aac6b4b7725d68156737aaff20b87968b/examples/maxfeerate-ggt.cpp\n\nI will love to see through your code.\n\nI think there might be a little optimization gain if we consider the fact that the graph\nis bipartite. Nodes have either a non-zero capacity arc with the source or the sink but not both.\nIf we classify nodes this way, let's say into set N1 (nodes connected to the source)\nand N2 (nodes connected to the sink) we also realize that we can ignore arcs that go from\nN1 to N1, and N2 to N2, why is that? because for any arc that connects nodes a and b (in N1 for\ninstance) that arc either:\n\ncase 1, does NOT carry any flow in the final solution, so it can be ignored,\n\ncase 2, it DOES carry some flow, but that means that there exist some node c in N2 for which\na and b have an arc with (by the dependency transitivity) so we might as well deviate that flow\ndirectly from a to c and not use arc a-b, this can be done since these arcs have infinite capacity.\n\nSimilarly with N2-N2 arcs.\n\nI might be wrong though, but I think it is an interesting idea worth exploring.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 314,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I was implementing a proof of concept myself, just to get some understanding of GGT.\n \n\nI will love to see through your code. \nI think there might be a little optimization gain if we consider the fact that the graph\nis bipartite. Nodes have either a non-zero capacity arc with the source or the sink &hellip;",
  "truncated": true,
  "post_url": "/t/how-to-linearize-your-cluster/303/65",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}