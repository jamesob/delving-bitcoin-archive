{
  "id": 4795,
  "name": "",
  "username": "roasbeef",
  "avatar_template": "/user_avatar/delvingbitcoin.org/roasbeef/{size}/160_2.png",
  "created_at": "2025-04-15T23:26:53.820Z",
  "cooked": "<p>Kudos for this write up, it\u2019s probably the most succinct, yet clear write up of the Ark design I\u2019ve seen to date.</p>\n<aside class=\"quote no-group\" data-username=\"stevenroose\" data-post=\"1\" data-topic=\"1602\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/stevenroose/48/1087_2.png\" class=\"avatar\"> stevenroose:</div>\n<blockquote>\n<p>We can use CTV+CSFS to implement rebindable signatures.</p>\n</blockquote>\n</aside>\n<p>After this fragment, there\u2019s no further mention of CSFS until the very end of the post. What exactly is the message being signed here? If the message isn\u2019t constructed carefully, replays may be possible.</p>\n<blockquote>\n<p>Erk rounds have no user interaction (in the sense that users have to take actions synchronously together)</p>\n</blockquote>\n<p>Don\u2019t the users still need to interact in order to send to each other in a round? IIUC, they still need to:</p>\n<ul>\n<li>Get the new public key of the receiver.</li>\n<li>Obtain the new VTXO+connector tree from the server.</li>\n<li>Give the receiver the new VTXO+connector tree so they can verify everything.</li>\n<li>Get a signature from the receiver on the new VTXO.</li>\n</ul>\n<p>Or is the assumption that the server is trusted to transmit all this information to receivers? Or is the assumption that the statechains security model (trust server and prior owner to not collude, Arkoor as y\u2019all call it) is meant to be used for all <em>actual</em> transfers?</p>\n<p>Even if CTV is used, until the round is constructed the \u201croot\u201d CTV hash isn\u2019t known. That can only be known once all participants provide their parameters (keys timeouts, amts, etc). As a result, users must remain online until all other users have committed to parameters, as they need to sign their leaf to ensure they can exit.</p>\n<p>Is my mental model here off?</p>\n<blockquote>\n<p>The core and fundamental principle of Erk rests on the following tx, which we call a <em>refund tx</em> .</p>\n</blockquote>\n<p>How can they sign for this new exit tx if it doesn\u2019t yet exist, and has a txid that can\u2019t be known until <em>new</em> exit tree (which is dependent on the participants) is created? For NO_INPUT/APO, this is possible as you don\u2019t sign the outpoint, so there\u2019s no dependency other than the script.</p>\n<blockquote>\n<p>At that point, the server can safely create a new vtxo tree, issuing the same vtxo (minus some fee) for the user. This new vtxo has an exit policy with the user\u2019s new key</p>\n</blockquote>\n<p>Is the deducted fee known to the user ahead of time? If not, how can they pre-sign this new vtxo exit if they don\u2019t know the fee (assuming <code>SIGHASH_ALL</code>)?</p>\n<blockquote>\n<p>This means that the server can at any time safely re-issue the vtxo, holding the refund tx that guarantees the user can never claim both.</p>\n</blockquote>\n<p>Related to the question above, how can the user pre-sign the refund tx if they don\u2019t yet know what the new second input is (the new round txn, which hasn\u2019t been created yet).</p>",
  "post_number": 3,
  "post_type": 1,
  "posts_count": 4,
  "updated_at": "2025-04-15T23:26:53.820Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 18,
  "readers_count": 17,
  "score": 23.6,
  "yours": false,
  "topic_id": 1602,
  "topic_slug": "evolving-the-ark-protocol-using-ctv-and-csfs",
  "topic_title": "Evolving the Ark protocol using CTV and CSFS",
  "topic_html_title": "Evolving the Ark protocol using CTV and CSFS",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Kudos for this write up, it's probably the most succinct, yet clear write up of the Ark design I've seen to date. \n\n[quote=\"stevenroose, post:1, topic:1602\"]\nWe can use CTV+CSFS to implement rebindable signatures.\n[/quote]\n\nAfter this fragment, there's no further mention of CSFS until the very end of the post. What exactly is the message being signed here? If the message isn't constructed carefully, replays may be possible. \n\n> Erk rounds have no user interaction (in the sense that users have to take actions synchronously together)\n\nDon't the users still need to interact in order to send to each other in a round? IIUC, they still need to:\n  * Get the new public key of the receiver. \n  * Obtain the new VTXO+connector tree from the server. \n  * Give the receiver the new VTXO+connector tree so they can verify everything. \n  * Get a signature from the receiver on the new VTXO. \n\nOr is the assumption that the server is trusted to transmit all this information to receivers? Or is the assumption that the statechains security model (trust server and prior owner to not collude, Arkoor as y'all call it) is meant to be used for all _actual_ transfers? \n\nEven if CTV is used, until the round is constructed the \"root\" CTV hash isn't known. That can only be known once all participants provide their parameters (keys timeouts, amts, etc). As a result, users must remain online until all other users have committed to parameters, as they need to sign their leaf to ensure they can exit.  \n\nIs my mental model here off? \n\n> The core and fundamental principle of Erk rests on the following tx, which we call a *refund tx* .\n\nHow can they sign for this new exit tx if it doesn't yet exist, and has a txid that can't be known until _new_ exit tree (which is dependent on the participants) is created? For NO_INPUT/APO, this is possible as you don't sign the outpoint, so there's no dependency other than the script. \n\n> At that point, the server can safely create a new vtxo tree, issuing the same vtxo (minus some fee) for the user. This new vtxo has an exit policy with the user\u2019s new key \n\nIs the deducted fee known to the user ahead of time? If not, how can they pre-sign this new vtxo exit if they don't know the fee (assuming `SIGHASH_ALL`)?\n\n> This means that the server can at any time safely re-issue the vtxo, holding the refund tx that guarantees the user can never claim both.\n\nRelated to the question above, how can the user pre-sign the refund tx if they don't yet know what the new second input is (the new round txn, which hasn't been created yet).",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 143,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Kudos for this write up, it\u2019s probably the most succinct, yet clear write up of the Ark design I\u2019ve seen to date. \n\nAfter this fragment, there\u2019s no further mention of CSFS until the very end of the post. What exactly is the message being signed here? If the message isn\u2019t constructed carefully, repla&hellip;",
  "truncated": true,
  "post_url": "/t/evolving-the-ark-protocol-using-ctv-and-csfs/1602/3",
  "reactions": [
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}