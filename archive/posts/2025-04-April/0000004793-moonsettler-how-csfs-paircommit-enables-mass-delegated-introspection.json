{
  "id": 4793,
  "name": "moonsettler",
  "username": "moonsettler",
  "avatar_template": "/user_avatar/delvingbitcoin.org/moonsettler/{size}/38_2.png",
  "created_at": "2025-04-15T17:13:25.275Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"josh\" data-post=\"4\" data-topic=\"1599\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/josh/48/95_2.png\" class=\"avatar\"> josh:</div>\n<blockquote>\n<p>The byte savings is nice, but the real benefit of PAIRCOMMIT is that it doesn\u2019t enable the kind of recursive covenants that CAT does, so it might be easier for the community to support.</p>\n</blockquote>\n</aside>\n<p>Recursive covenants do not really grasp the core of the issue. If you have state carrying covenants that naturally quine, then you can create something close to \u201cnative\u201d tokens, as in exogenous assets that you can interact with in contracting language and make AMMs for them and stuff like that. That might be a bit of a hard sell for the community.</p>\n<p><code>PC</code> was conceived as a tool that might enable multi-commitments and with that Merkle proofs, but do not break this particular threshold and do not allow for arbitrarily fine grained introspection or inspection of ancestor transactions.</p>",
  "post_number": 5,
  "post_type": 1,
  "posts_count": 5,
  "updated_at": "2025-04-15T17:14:20.070Z",
  "reply_count": 0,
  "reply_to_post_number": 4,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 12,
  "readers_count": 11,
  "score": 17.4,
  "yours": false,
  "topic_id": 1599,
  "topic_slug": "how-csfs-paircommit-enables-mass-delegated-introspection",
  "topic_title": "How CSFS+PAIRCOMMIT enables mass delegated introspection",
  "topic_html_title": "How CSFS+PAIRCOMMIT enables mass delegated introspection",
  "category_id": 7,
  "display_username": "moonsettler",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"josh, post:4, topic:1599\"]\nThe byte savings is nice, but the real benefit of PAIRCOMMIT is that it doesn\u2019t enable the kind of recursive covenants that CAT does, so it might be easier for the community to support.\n[/quote]\n\nRecursive covenants do not really grasp the core of the issue. If you have state carrying covenants that naturally quine, then you can create something close to \"native\" tokens, as in exogenous assets that you can interact with in contracting language and make AMMs for them and stuff like that. That might be a bit of a hard sell for the community.\n\n`PC` was conceived as a tool that might enable multi-commitments and with that Merkle proofs, but do not break this particular threshold and do not allow for arbitrarily fine grained introspection or inspection of ancestor transactions.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 48,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Recursive covenants do not really grasp the core of the issue. If you have state carrying covenants that naturally quine, then you can create something close to \u201cnative\u201d tokens, as in exogenous assets that you can interact with in contracting language and make AMMs for them and stuff like that. Tha&hellip;",
  "truncated": true,
  "post_url": "/t/how-csfs-paircommit-enables-mass-delegated-introspection/1599/5",
  "reactions": [
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}