{
  "id": 4697,
  "name": "",
  "username": "josh",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josh/{size}/95_2.png",
  "created_at": "2025-04-03T22:22:17.326Z",
  "cooked": "<p><a class=\"mention\" href=\"/u/harding\">@harding</a> Thank you for the feedback! I\u2019ll focus on your second point about introspection, as that is perhaps more interesting. I\u2019ll come back to your first point later when I\u2019ve had more time to gather my thoughts.</p>\n<blockquote>\n<p>For point 2 (additional introspection opcodes), this is heavily discussed. The novelty in your proposal is potentially only allowing certain types of introspection during delegation rather than original script creation. Do you have any examples of how that might be useful?</p>\n</blockquote>\n<p>Sure! Full introspection during \u201cdelegation\u201d would be useful for non-interactive single-transaction protocols where a user needs to commit to many possible transaction templates with a single signature. This is particularly valuable if we want two-sided bitcoin-native markets to develop without enabling recursive covenants.</p>\n<h3><a name=\"p-4697-the-bidding-problem-1\" class=\"anchor\" href=\"#p-4697-the-bidding-problem-1\"></a>The bidding problem</h3>\n<p>Let\u2019s suppose that there exists some fungible asset <span class=\"math\">A</span> held across <span class=\"math\">N</span> UTXOs, transferrable according to some metaprotocol. Ideally, this would represent equity in some bitcoin-aligned public company, but for now, let\u2019s assume it is a token that already exists, like a rune.</p>\n<p>Suppose that a user wishes to make an offer to buy <span class=\"math\">X_A</span> of asset <span class=\"math\">A</span> for <span class=\"math\">b</span> bitcoin, which anyone can accept if they own a UTXO with sufficient <span class=\"math\">A</span>. Today, the bidder would need to produce separately signed PSBTs for every offer they wish to make, using sighash ALL. This is impractical without a hot wallet, if there are thousands of UTXOs they need to bid on.</p>\n<p>For this reason, non-interactive bitcoin markets are one-sided. If we want to see two-sided markets without trusted escrow agents, we need introspection.</p>\n<h3><a name=\"p-4697-why-introspection-helps-2\" class=\"anchor\" href=\"#p-4697-why-introspection-helps-2\"></a>Why introspection helps</h3>\n<p>Suppose that an introspection opcode exists. Let\u2019s put delegation / subscripting aside for the moment and assume this opcode can be used anywhere. As we\u2019ll see, introspection would make non-interactive buy offers practical, by using a single signature to commit to thousands of possible transaction templates.</p>\n<p>Here\u2019s how it might work:</p>\n<ol>\n<li>The bidder creates a staging transaction <span class=\"math\">T_0</span> spending to a taproot output, which anyone can spend by satisfying any one of thousands of possible locking scripts.</li>\n<li>Using an introspection opcode, each locking script commits to a single transaction template, spending from a UTXO holding <span class=\"math\">A</span>. The template sends <span class=\"math\">X_A</span> to the bidder\u2019s output and lets the seller take <span class=\"math\">b</span> bitcoin from the bidder\u2019s input.</li>\n<li>The bidder broadcasts <span class=\"math\">T_0</span> alongside the data necessary for anyone to derive the locking scripts.</li>\n<li>A seller accepts the offer by signing a second transaction <span class=\"math\">T_1</span>, spending from <span class=\"math\">T_0</span> by revealing the locking script it satisfies.</li>\n</ol>\n<h3><a name=\"p-4697-avoiding-recursive-covenants-3\" class=\"anchor\" href=\"#p-4697-avoiding-recursive-covenants-3\"></a>Avoiding recursive covenants</h3>\n<p>The approach outlined above has two problems:</p>\n<ol>\n<li>\n<p>It requires two transactions, rather than one.</p>\n</li>\n<li>\n<p>It uses functionality that would enable recursive covenants.</p>\n</li>\n</ol>\n<p>Any opcode that can 1) encumber a UTXO, and 2) enable <em>full</em> introspection (including of the spent outpoints) can enable recursive covenants. On the other hand, <strong>an opcode that cannot encumber a UTXO cannot enable multi-transaction covenants.</strong></p>\n<p>A locking subscript merely adds spending conditions to a transaction input after it has been signed. It is impossible for a UTXO to commit to these conditions ahead of time. Therefore, we can safely turn on introspection during \u201cdelegation\u201d / subscripting without enabling recursive covenants.</p>\n<p>In summary, \u201cdelegated\u201d introspection would add meaningful expressivity to PSBT offers and facilitate the creation of non-interactive two-sided bitcoin-native markets, without enabling recursive covenants.</p>\n<hr>\n<h3><a name=\"p-4697-follow-up-4\" class=\"anchor\" href=\"#p-4697-follow-up-4\"></a>Follow up</h3>\n<p>I thought I might add a few additional \u201cminor\u201d use cases that would benefit from introspection during delegation / subscripting:</p>\n<ol>\n<li>\n<p><em>Non-interactive multi-input offers:</em> If Alice wishes to make an offer to sell exactly <span class=\"math\">X_A</span> held across two or more of her UTXOs, which anyone can accept, she needs to make two transactions today (one to consolidate her balances, and one to make the offer). If she can introspect, however, through delegation / locking subscripts, each input can commit to the presence of the other, and she can make her offer in a single transaction.</p>\n</li>\n<li>\n<p><em>Non-interactive multi-output offers:</em> I understand that proposals have been made to add new types of sighashes, like SIGHASH_GROUP. Enabling introspection during delegation / subscripting could provide a highly generic alternative.</p>\n</li>\n</ol>\n<hr>\n<p>I hope that\u2019s helpful! Let me know if any of what I said would benefit from clarification.</p>",
  "post_number": 3,
  "post_type": 1,
  "posts_count": 3,
  "updated_at": "2025-04-03T22:22:17.326Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 14,
  "readers_count": 13,
  "score": 7.4,
  "yours": false,
  "topic_id": 1520,
  "topic_slug": "post-signature-cross-input-scripting-using-the-taproot-annex",
  "topic_title": "Post-Signature Cross-Input Scripting Using the Taproot Annex",
  "topic_html_title": "Post-Signature Cross-Input Scripting Using the Taproot Annex",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "harding",
    "name": "David A. Harding",
    "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/925_2.png"
  },
  "bookmarked": false,
  "raw": "@harding Thank you for the feedback! I'll focus on your second point about introspection, as that is perhaps more interesting. I'll come back to your first point later when I've had more time to gather my thoughts.\n\n> For point 2 (additional introspection opcodes), this is heavily discussed. The novelty in your proposal is potentially only allowing certain types of introspection during delegation rather than original script creation. Do you have any examples of how that might be useful?\n\nSure! Full introspection during \"delegation\" would be useful for non-interactive single-transaction protocols where a user needs to commit to many possible transaction templates with a single signature. This is particularly valuable if we want two-sided bitcoin-native markets to develop without enabling recursive covenants.\n\n### The bidding problem\n\nLet's suppose that there exists some fungible asset $A$ held across $N$ UTXOs, transferrable according to some metaprotocol. Ideally, this would represent equity in some bitcoin-aligned public company, but for now, let's assume it is a token that already exists, like a rune.\n\nSuppose that a user wishes to make an offer to buy $X_A$ of asset $A$ for $b$ bitcoin, which anyone can accept if they own a UTXO with sufficient $A$. Today, the bidder would need to produce separately signed PSBTs for every offer they wish to make, using sighash ALL. This is impractical without a hot wallet, if there are thousands of UTXOs they need to bid on.\n\nFor this reason, non-interactive bitcoin markets are one-sided. If we want to see two-sided markets without trusted escrow agents, we need introspection.\n\n### Why introspection helps\n\nSuppose that an introspection opcode exists. Let's put delegation / subscripting aside for the moment and assume this opcode can be used anywhere. As we'll see, introspection would make non-interactive buy offers practical, by using a single signature to commit to thousands of possible transaction templates.\n\nHere's how it might work:\n\n1. The bidder creates a staging transaction $T_0$ spending to a taproot output, which anyone can spend by satisfying any one of thousands of possible locking scripts.\n2. Using an introspection opcode, each locking script commits to a single transaction template, spending from a UTXO holding $A$. The template sends $X_A$ to the bidder's output and lets the seller take $b$ bitcoin from the bidder's input.\n3. The bidder broadcasts $T_0$ alongside the data necessary for anyone to derive the locking scripts.\n4. A seller accepts the offer by signing a second transaction $T_1$, spending from $T_0$ by revealing the locking script it satisfies.\n\n### Avoiding recursive covenants\n\nThe approach outlined above has two problems:\n\n1. It requires two transactions, rather than one.\n\n2. It uses functionality that would enable recursive covenants.\n\nAny opcode that can 1) encumber a UTXO, and 2) enable *full* introspection (including of the spent outpoints) can enable recursive covenants. On the other hand, **an opcode that cannot encumber a UTXO cannot enable multi-transaction covenants.**\n\nA locking subscript merely adds spending conditions to a transaction input after it has been signed. It is impossible for a UTXO to commit to these conditions ahead of time. Therefore, we can safely turn on introspection during \"delegation\" / subscripting without enabling recursive covenants.\n\nIn summary, \"delegated\" introspection would add meaningful expressivity to PSBT offers and facilitate the creation of non-interactive two-sided bitcoin-native markets, without enabling recursive covenants.\n\n-----\n\n### Follow up\n\nI thought I might add a few additional \"minor\" use cases that would benefit from introspection during delegation / subscripting:\n\n1. *Non-interactive multi-input offers:* If Alice wishes to make an offer to sell exactly $X_A$ held across two or more of her UTXOs, which anyone can accept, she needs to make two transactions today (one to consolidate her balances, and one to make the offer). If she can introspect, however, through delegation / locking subscripts, each input can commit to the presence of the other, and she can make her offer in a single transaction.\n\n2. *Non-interactive multi-output offers:* I understand that proposals have been made to add new types of sighashes, like SIGHASH_GROUP. Enabling introspection during delegation / subscripting could provide a highly generic alternative.\n\n-----\n\nI hope that's helpful! Let me know if any of what I said would benefit from clarification.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 98,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "<a class=\"mention\" href=\"/u/harding\">@harding</a> Thank you for the feedback! I\u2019ll focus on your second point about introspection, as that is perhaps more interesting. I\u2019ll come back to your first point later when I\u2019ve had more time to gather my thoughts. \n\nFor point 2 (additional introspection opcodes), this is heavily discussed. The nove&hellip;",
  "truncated": true,
  "post_url": "/t/post-signature-cross-input-scripting-using-the-taproot-annex/1520/3",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}