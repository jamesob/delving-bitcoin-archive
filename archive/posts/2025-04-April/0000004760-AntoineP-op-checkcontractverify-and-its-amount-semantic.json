{
  "id": 4760,
  "name": "Antoine Poinsot",
  "username": "AntoineP",
  "avatar_template": "/user_avatar/delvingbitcoin.org/antoinep/{size}/483_2.png",
  "created_at": "2025-04-14T15:06:40.974Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"salvatoshi\" data-post=\"7\" data-topic=\"1527\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/salvatoshi/48/72_2.png\" class=\"avatar\"> salvatoshi:</div>\n<blockquote>\n<p>Can you elaborate on why? Validity is necessarily meaningful only at transaction-level. So I don\u2019t know what you mean by \u201cspill-over\u201d - these new validation rules are by definition at transaction-level, the same way that CHECKSIG is.</p>\n</blockquote>\n</aside>\n<p>Sure, but CHECKSIG is precomputed before the execution of the scripts. In a sense, my suggestion achieves exactly the same for the amount constraints.</p>\n<aside class=\"quote no-group\" data-username=\"salvatoshi\" data-post=\"7\" data-topic=\"1527\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/salvatoshi/48/72_2.png\" class=\"avatar\"> salvatoshi:</div>\n<blockquote>\n<p>On the opposite direction, it might be interesting to attempt a refactoring/simplification of the validation code so that jobs in <code>ConnectBlock</code> receive <em>transactions</em> to validate, rather than input scripts. That\u2019s where the implementation complexity of any kind of cross-input logic stems from (because of the added synchronization code), and I strongly suspect that input-level parallelism doesn\u2019t bring any measurable improvement in performance.</p>\n</blockquote>\n</aside>\n<p>I think this is the wrong direction to take. There are a few reasons:</p>\n<ol>\n<li>On its face, reducing parallelization (and most likely efficiency as a consequence) to match a proposal seems inappropriate if the same goal can be achieved without reducing parallelization.</li>\n<li>Although this is implementation specific, i think breaking a property the implementation was able to rely upon raises questions about whether this property is desirable to keep when designing extensions to the Script language.</li>\n<li>Input-level parallelization is key to reducing the validation time for unconfirmed transactions, where a would-be attacker does not have to expend a PoW to incur costs on a node, as well as worst case block validation times which adds up across a block propagation path.</li>\n</ol>\n<aside class=\"quote no-group\" data-username=\"salvatoshi\" data-post=\"7\" data-topic=\"1527\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/salvatoshi/48/72_2.png\" class=\"avatar\"> salvatoshi:</div>\n<blockquote>\n<p>It would of course work, although I do see some downsides, while it\u2019s not too yet clear to me what are the benefits.</p>\n</blockquote>\n</aside>\n<p>Benefits include not breaking cross-input parallelization, a cleaner implementation and a more composable primitive (separation of concerns).</p>\n<aside class=\"quote no-group\" data-username=\"salvatoshi\" data-post=\"7\" data-topic=\"1527\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/salvatoshi/48/72_2.png\" class=\"avatar\"> salvatoshi:</div>\n<blockquote>\n<p>Therefore, the opcode has to repeat in full the constraint as it appears in the annex, doubling the number of bytes needed to express it.</p>\n</blockquote>\n</aside>\n<p>I agree the repetition isn\u2019t ideal, but i don\u2019t see a few weight units more as a major downside. Overall i think it\u2019s a good tradeoff to make.</p>\n<aside class=\"quote no-group\" data-username=\"salvatoshi\" data-post=\"7\" data-topic=\"1527\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/salvatoshi/48/72_2.png\" class=\"avatar\"> salvatoshi:</div>\n<blockquote>\n<p>Some care would also need to be taken to make sure that the annex is not malleable (as the input Script could use CCV without any signature).</p>\n</blockquote>\n</aside>\n<p>If your transaction doesn\u2019t have a signature, malleability already goes out the window.</p>\n<aside class=\"quote no-group\" data-username=\"salvatoshi\" data-post=\"7\" data-topic=\"1527\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/salvatoshi/48/72_2.png\" class=\"avatar\"> salvatoshi:</div>\n<blockquote>\n<p>As a side note, I think a solution using the annex would be very similar in implementation complexity to my previous attempt in <a href=\"https://github.com/bitcoin-inquisition/bitcoin/compare/4e23c3a9867eedadb9e20387936ec9f0eca6e918...Merkleize:bitcoin:34f05028661932b417b59bdcdd58f4453f19cec5\">this diff</a></p>\n</blockquote>\n</aside>\n<p>Why \u201cwould\u201d? I <a href=\"https://github.com/bitcoin/bitcoin/compare/v29.0...darosior:2504_hack_poc_annex_amounts\">demonstrated it</a> already, and it\u2019s <em>much</em> simpler.</p>\n<aside class=\"quote no-group\" data-username=\"salvatoshi\" data-post=\"7\" data-topic=\"1527\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/salvatoshi/48/72_2.png\" class=\"avatar\"> salvatoshi:</div>\n<blockquote>\n<p>based on the <em>deferred checks framework</em> from James O\u2019Beirne\u2019s OP_VAULT PR (particularly, <a href=\"https://github.com/bitcoin-inquisition/bitcoin/commit/32c9b122d72b3748051c979ce2d46f07a48c44cc\">this commit</a>).</p>\n</blockquote>\n</aside>\n<p>In a sense you could see my suggestion as \u201cpreemptive\u201d (\u201ceager\u201d?), rather than \u201cdeferred\u201d, checks. Existing features, for instance absolute locktimes, could have also been designed to have transaction-level checks be deferred to after executing the inputs scripts. Instead they were designed with transaction-level checks performed beforehand (surely because for those the field already existed in the transaction), and i think it is much cleaner.</p>",
  "post_number": 10,
  "post_type": 1,
  "posts_count": 10,
  "updated_at": "2025-04-14T15:06:40.974Z",
  "reply_count": 0,
  "reply_to_post_number": 7,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 4,
  "readers_count": 3,
  "score": 0.8,
  "yours": false,
  "topic_id": 1527,
  "topic_slug": "op-checkcontractverify-and-its-amount-semantic",
  "topic_title": "OP_CHECKCONTRACTVERIFY and its amount semantic",
  "topic_html_title": "OP_CHECKCONTRACTVERIFY and its amount semantic",
  "category_id": 7,
  "display_username": "Antoine Poinsot",
  "primary_group_name": null,
  "flair_name": "wg-consensus-cleanup",
  "flair_url": "/uploads/default/original/1X/856d779f9ec58484f3a96285a21a813538b689f6.png",
  "flair_bg_color": "",
  "flair_color": "",
  "flair_group_id": 43,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "Regular",
  "title_is_group": false,
  "bookmarked": false,
  "raw": "[quote=\"salvatoshi, post:7, topic:1527\"]\nCan you elaborate on why? Validity is necessarily meaningful only at transaction-level. So I don\u2019t know what you mean by \u201cspill-over\u201d - these new validation rules are by definition at transaction-level, the same way that CHECKSIG is.\n[/quote]\n\nSure, but CHECKSIG is precomputed before the execution of the scripts. In a sense, my suggestion achieves exactly the same for the amount constraints.\n\n[quote=\"salvatoshi, post:7, topic:1527\"]\nOn the opposite direction, it might be interesting to attempt a refactoring/simplification of the validation code so that jobs in `ConnectBlock` receive *transactions* to validate, rather than input scripts. That\u2019s where the implementation complexity of any kind of cross-input logic stems from (because of the added synchronization code), and I strongly suspect that input-level parallelism doesn\u2019t bring any measurable improvement in performance.\n[/quote]\n\nI think this is the wrong direction to take. There are a few reasons:\n1. On its face, reducing parallelization (and most likely efficiency as a consequence) to match a proposal seems inappropriate if the same goal can be achieved without reducing parallelization.\n2. Although this is implementation specific, i think breaking a property the implementation was able to rely upon raises questions about whether this property is desirable to keep when designing extensions to the Script language.\n3. Input-level parallelization is key to reducing the validation time for unconfirmed transactions, where a would-be attacker does not have to expend a PoW to incur costs on a node, as well as worst case block validation times which adds up across a block propagation path.\n\n[quote=\"salvatoshi, post:7, topic:1527\"]\nIt would of course work, although I do see some downsides, while it\u2019s not too yet clear to me what are the benefits.\n[/quote]\n\nBenefits include not breaking cross-input parallelization, a cleaner implementation and a more composable primitive (separation of concerns).\n\n[quote=\"salvatoshi, post:7, topic:1527\"]\nTherefore, the opcode has to repeat in full the constraint as it appears in the annex, doubling the number of bytes needed to express it.\n[/quote]\n\nI agree the repetition isn't ideal, but i don't see a few weight units more as a major downside. Overall i think it's a good tradeoff to make.\n\n[quote=\"salvatoshi, post:7, topic:1527\"]\nSome care would also need to be taken to make sure that the annex is not malleable (as the input Script could use CCV without any signature).\n[/quote]\n\nIf your transaction doesn't have a signature, malleability already goes out the window.\n\n[quote=\"salvatoshi, post:7, topic:1527\"]\nAs a side note, I think a solution using the annex would be very similar in implementation complexity to my previous attempt in [this diff](https://github.com/bitcoin-inquisition/bitcoin/compare/4e23c3a9867eedadb9e20387936ec9f0eca6e918...Merkleize:bitcoin:34f05028661932b417b59bdcdd58f4453f19cec5)\n[/quote]\n\nWhy \"would\"? I [demonstrated it](https://github.com/bitcoin/bitcoin/compare/v29.0...darosior:2504_hack_poc_annex_amounts) already, and it's *much* simpler.\n\n[quote=\"salvatoshi, post:7, topic:1527\"]\nbased on the *deferred checks framework* from James O\u2019Beirne\u2019s OP_VAULT PR (particularly, [this commit](https://github.com/bitcoin-inquisition/bitcoin/commit/32c9b122d72b3748051c979ce2d46f07a48c44cc)).\n[/quote]\n\nIn a sense you could see my suggestion as \"preemptive\" (\"eager\"?), rather than \"deferred\", checks. Existing features, for instance absolute locktimes, could have also been designed to have transaction-level checks be deferred to after executing the inputs scripts. Instead they were designed with transaction-level checks performed beforehand (surely because for those the field already existed in the transaction), and i think it is much cleaner.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 12,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Sure, but CHECKSIG is precomputed before the execution of the scripts. In a sense, my suggestion achieves exactly the same for the amount constraints. \n\nI think this is the wrong direction to take. There are a few reasons: \n\nOn its face, reducing parallelization (and most likely efficiency as a con&hellip;",
  "truncated": true,
  "post_url": "/t/op-checkcontractverify-and-its-amount-semantic/1527/10",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}