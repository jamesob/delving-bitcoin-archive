{
  "id": 4903,
  "name": "salvatoshi",
  "username": "salvatoshi",
  "avatar_template": "/user_avatar/delvingbitcoin.org/salvatoshi/{size}/72_2.png",
  "created_at": "2025-04-30T14:30:44.320Z",
  "cooked": "<p>Thanks for raising the discussion. I think it\u2019s an important problem, and it will become increasingly more important in the future. I\u2019ll add some of my thoughts for consideration in the discussion.</p>\n<h2><a name=\"p-4903-save-the-coin_type-1\" class=\"anchor\" href=\"#p-4903-save-the-coin_type-1\"></a>Save the <code>coin_type'</code></h2>\n<p>A little note that while I agree that descriptors mostly supersede the various derivation standards, there\u2019s still value in using hardened derivations to partition key hierarchies. Arguably, of the three level defined in <a href=\"https://github.com/bitcoin/bips/blob/74fc5b92b04152ed7d4cd367644d78b4afefd8e8/bip-0044.mediawiki\" rel=\"noopener nofollow ugc\">BIP-44</a> (<code>purpose'/coin_type'/account'</code>), the <code>coin_type'</code> is still quite useful to partition keys across networks/coins. In fact, Ledger (and I suspect other vendors) uses it to disallow the acceptable derivation paths for most apps.</p>\n<p>If a BIP-XXX emerges from this discussion, it could still make sense to have <code>XXX'/coin_type'</code> as the first two derivation steps.</p>\n<h2><a name=\"p-4903-concerns-for-hardware-signing-device-ux-2\" class=\"anchor\" href=\"#p-4903-concerns-for-hardware-signing-device-ux-2\"></a>Concerns for hardware signing device UX</h2>\n<p>About the scheme, a concern is that it increases the amount of information content (entropy) of the descriptor. That information <strong>has to be displayed to the user</strong>, and failure to check it could lead to <em><strong>ransom attacks</strong></em> if the software wallet is compromised (<small>that is: malware tricks the user into registering a descriptor with a wrong backup. Then, all they need to do in order to lock the user out of their funds is to delete their software wallet. When the user tries to recover from their incorrect backup, the attacker can ransom them in exchange for the correct descriptor</small>).</p>\n<p>Therefore, this is making a tradeoff: improving privacy by default, but also making the UX a bit worse by default - at a security-critical moment like the on-device descriptor registration).</p>\n<p>Unfortunately, minimizing the entropy while at the same time obtaining privacy by default seems to inherently require state - and I don\u2019t think keeping the state on the signing devices is viable.</p>\n<h2><a name=\"p-4903-light_bulb-monotonic-backups-3\" class=\"anchor\" href=\"#p-4903-light_bulb-monotonic-backups-3\"></a><img src=\"https://delvingbitcoin.org/images/emoji/twitter/light_bulb.png?v=14\" title=\":light_bulb:\" class=\"emoji\" alt=\":light_bulb:\" loading=\"lazy\" width=\"20\" height=\"20\"> Monotonic backups?</h2>\n<p>A possible solution I was toying with (but certainly nontrivial to implement) could be to have <em>small storage providers</em> that are only trusted to store small amounts of encrypted data. That would kind of generalize <a href=\"https://delvingbitcoin.org/t/a-simple-backup-scheme-for-wallet-accounts/1607\">what I proposed for descriptors and wallet policies</a>, in that you would backup some extra information, and you\u2019d want to be able to update it dynamically over time (therefore, some more care is needed for the cryptography, compared to the linked scheme).</p>\n<p>Information like <code>I used xpub m/xx'/yy'/zz</code> is very small, and monotonically updated over time (you never <em>un-use</em> a used xpub).\nTherefore, you could (should!) have multiple digital copies of this information, and it is straightforward to reconcile diverging copies: you store the union of the two sets of <em>used xpubs</em>. Since the loss of this information is not catastrophic (at most you end up re-using an xpub), something that works <em>almost always</em> might be good enough in practice.</p>\n<p><em>Small storage providers</em> could be: the user\u2019s own devices; cloud storage accounts; semi-trusted nostr contacts; service providers for wallets (like Liana); etc.</p>\n<p>Such a backup system could also be used for other <em>monotonic</em> info wallets might want to store (<a href=\"https://github.com/bitcoin/bips/blob/74fc5b92b04152ed7d4cd367644d78b4afefd8e8/bip-0329.mediawiki\" rel=\"noopener nofollow ugc\">BIP-329</a> labels?).</p>\n<p>However, building the tooling for such a system (standards, storage types and management, reconciliation) is rather large endeavor which extends much beyond the scope of your post.</p>",
  "post_number": 3,
  "post_type": 1,
  "posts_count": 3,
  "updated_at": "2025-04-30T15:13:39.995Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 1.4,
  "yours": false,
  "topic_id": 1644,
  "topic_slug": "avoiding-xpub-derivation-reuse-across-wallets-in-a-ux-friendly-manner",
  "topic_title": "Avoiding xpub+derivation reuse across wallets, in a UX-friendly manner",
  "topic_html_title": "Avoiding xpub+derivation reuse across wallets, in a UX-friendly manner",
  "category_id": 8,
  "display_username": "salvatoshi",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thanks for raising the discussion. I think it's an important problem, and it will become increasingly more important in the future. I'll add some of my thoughts for consideration in the discussion.\n\n## Save the `coin_type'`\n\nA little note that while I agree that descriptors mostly supersede the various derivation standards, there's still value in using hardened derivations to partition key hierarchies. Arguably, of the three level defined in [BIP-44](https://github.com/bitcoin/bips/blob/74fc5b92b04152ed7d4cd367644d78b4afefd8e8/bip-0044.mediawiki) (`purpose'/coin_type'/account'`), the `coin_type'` is still quite useful to partition keys across networks/coins. In fact, Ledger (and I suspect other vendors) uses it to disallow the acceptable derivation paths for most apps.\n\nIf a BIP-XXX emerges from this discussion, it could still make sense to have `XXX'/coin_type'` as the first two derivation steps.\n\n## Concerns for hardware signing device UX\n\nAbout the scheme, a concern is that it increases the amount of information content (entropy) of the descriptor. That information **has to be displayed to the user**, and failure to check it could lead to ***ransom attacks*** if the software wallet is compromised (<small>that is: malware tricks the user into registering a descriptor with a wrong backup. Then, all they need to do in order to lock the user out of their funds is to delete their software wallet. When the user tries to recover from their incorrect backup, the attacker can ransom them in exchange for the correct descriptor</small>).\n\nTherefore, this is making a tradeoff: improving privacy by default, but also making the UX a bit worse by default - at a security-critical moment like the on-device descriptor registration).\n\nUnfortunately, minimizing the entropy while at the same time obtaining privacy by default seems to inherently require state - and I don't think keeping the state on the signing devices is viable.\n\n## :light_bulb: Monotonic backups?\n\nA possible solution I was toying with (but certainly nontrivial to implement) could be to have *small storage providers* that are only trusted to store small amounts of encrypted data. That would kind of generalize [what I proposed for descriptors and wallet policies](https://delvingbitcoin.org/t/a-simple-backup-scheme-for-wallet-accounts/1607), in that you would backup some extra information, and you'd want to be able to update it dynamically over time (therefore, some more care is needed for the cryptography, compared to the linked scheme).\n\nInformation like `I used xpub m/xx'/yy'/zz` is very small, and monotonically updated over time (you never *un-use* a used xpub).\nTherefore, you could (should!) have multiple digital copies of this information, and it is straightforward to reconcile diverging copies: you store the union of the two sets of *used xpubs*. Since the loss of this information is not catastrophic (at most you end up re-using an xpub), something that works *almost always* might be good enough in practice.\n\n*Small storage providers* could be: the user's own devices; cloud storage accounts; semi-trusted nostr contacts; service providers for wallets (like Liana); etc.\n\nSuch a backup system could also be used for other *monotonic* info wallets might want to store ([BIP-329](https://github.com/bitcoin/bips/blob/74fc5b92b04152ed7d4cd367644d78b4afefd8e8/bip-0329.mediawiki) labels?).\n\nHowever, building the tooling for such a system (standards, storage types and management, reconciliation) is rather large endeavor which extends much beyond the scope of your post.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 81,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Thanks for raising the discussion. I think it\u2019s an important problem, and it will become increasingly more important in the future. I\u2019ll add some of my thoughts for consideration in the discussion. \n<a name=\"p-4903-save-the-coin_type-1\" class=\"anchor\" href=\"#p-4903-save-the-coin_type-1\"></a>Save the coin_type&#39;\nA little note that while I agree that descriptors mostly supersede the various de&hellip;",
  "truncated": true,
  "post_url": "/t/avoiding-xpub-derivation-reuse-across-wallets-in-a-ux-friendly-manner/1644/3",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}