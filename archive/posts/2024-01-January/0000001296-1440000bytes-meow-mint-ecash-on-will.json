{
  "id": 1296,
  "name": "/dev/fd0",
  "username": "1440000bytes",
  "avatar_template": "/user_avatar/delvingbitcoin.org/1440000bytes/{size}/301_2.png",
  "created_at": "2024-01-23T04:12:24.168Z",
  "cooked": "<h2>Problem:</h2>\n<p>Chaumian eCash used in cashu and fedimint is custodial.</p>\n<h2>Research:</h2>\n<p>I researched <a href=\"https://en.bitcoin.it/wiki/Hash_Time_Locked_Contracts\" rel=\"noopener nofollow ugc\">HTLC</a>, <a href=\"https://www.youtube.com/watch?v=VwMzNE1D3so\" rel=\"noopener nofollow ugc\">Chaumian eCash</a> and <a href=\"https://en.wikipedia.org/wiki/Hawala\" rel=\"noopener nofollow ugc\">Hawala</a> to use certain procedures for solving this problem.</p>\n<p><a href=\"https://imgbb.com/\" data-bbcode=\"true\" rel=\"noopener nofollow ugc\"><img src=\"https://delvingbitcoin.org/uploads/default/original/1X/99d8d6e861b83ab893f7950e073ba4e8652eba42.png\" alt=\"\" data-base62-sha1=\"lWZD1wBsT0F8KVitJWDRS1qeyI2\" role=\"presentation\" width=\"625\" height=\"488\"></a></p>\n<p><a class=\"mention\" href=\"/u/moonsettler\">@moonsettler</a> has documented a process to use <a href=\"https://gist.github.com/moonsettler/42b588fa97a1da3ac0adea0dd16dadf2\" rel=\"noopener nofollow ugc\">eCash without custodial risk</a> which helped me understand things better and come up with a solution. <a class=\"mention\" href=\"/u/zmnscpxj\">@ZmnSCPxj</a> suggested a few ideas in a <a href=\"https://x.com/jxpcsnmz/status/1748156002619588791?s=20\" rel=\"noopener nofollow ugc\">tweet thread</a>. They could also be used to research further and implement better solutions.</p>\n<h2>Solution:</h2>\n<ol>\n<li>Bob mints eCash tokens for Alice and adds (Bob, Carol, Dave) as redeemers in it.</li>\n</ol>\n<blockquote>\n<p>A fork of <a href=\"https://github.com/ngutech21/moksha\" rel=\"noopener nofollow ugc\">moksha</a> could be used for mint because it supports on-chain minting and melting</p>\n</blockquote>\n<ol start=\"2\">\n<li>Alice creates HTLC with a long preimage secret, her pubkey and redeemers pubkey. She shares <code>BOB123</code> part of preimage secret with Bob, <code>CAROL456</code> with Dave and <code>DAVE789</code> with Eve.</li>\n</ol>\n<pre><code class=\"lang-auto\">import hashlib\n\nfrom bitcoin import SelectParams\nfrom bitcoin.core import Hash160\nfrom bitcoin.core.script import CScript, OP_HASH160, OP_SHA256, OP_EQUALVERIFY, OP_0, OP_DUP, OP_IF, OP_ELSE, OP_ENDIF, OP_CHECKSEQUENCEVERIFY, OP_DROP, OP_EQUALVERIFY, OP_CHECKSIG\nfrom bitcoin.wallet import P2WSHBitcoinAddress\n\nSelectParams('signet')\n\npreimage_secret = b\"BOB123CAROL456DAVE789EVE012\"\npreimage = hashlib.sha256(preimage_secret).digest()\n\npubkey_alice = bytes.fromhex(\"03b8821767bb83f8928a25735d94ddd2f1f481ed82d3a05e8decdc926bac2e185a\")\npubkey_redeemer = bytes.fromhex(\"03ee8232b06b14d1f996350345a51b715e3df265fec3209b73930dbe3f890f5403\")\n\nredeem_script = CScript([\n    OP_IF,\n        OP_SHA256, preimage, OP_EQUALVERIFY, OP_DUP, OP_HASH160, Hash160(pubkey_redeemer),\n    OP_ELSE,\n        2016, OP_CHECKSEQUENCEVERIFY, OP_DROP, OP_DUP, OP_HASH160, Hash160(pubkey_alice),\n    OP_ENDIF,\n    OP_EQUALVERIFY,\n    OP_CHECKSIG,\n])\n\nredeem_script_hash = hashlib.sha256(redeem_script).digest()\nscript_pubkey = CScript([OP_0, redeem_script_hash])\naddress = P2WSHBitcoinAddress.from_scriptPubKey(script_pubkey)\nprint(f\"HTLC Address: {address}\")\n</code></pre>\n<ol start=\"3\">\n<li>\n<p>Alice gets the HTLC address. She funds it with some bitcoin based on eCash minted, transaction fees, redeem fees etc.</p>\n</li>\n<li>\n<p>Alice uses eCash to pay Eve, shares 3 sha256 hashes and <code>EVE012</code> secret along with eCash:</p>\n</li>\n</ol>\n<pre><code class=\"lang-auto\">Bob: c6f3e97b0314172f37f84b4383aed77532aa0ed46fe2a59479b81d24148dfe2e\nCarol: a76a9c3dd985816d90f66aa679f165c53cbfdc7b26ee9395894a9c31797c3e53\nDave: b734eb0b425d9bb099506e18ebcb50f904d07de94f9d9b9ba0b56d54cc33a3a0\n</code></pre>\n<ol start=\"5\">\n<li>\n<p>Eve verifies that eCash has not expired (2016 blocks). She accepts eCash payment and tries to re-issue eCash using it. Frank mints eCash for her and adds (Frank, Gracy, Henry) as redeemers in it.</p>\n</li>\n<li>\n<p>Eve creates HTLC with a new <code>preimage_secret</code>: <code>FRANK345GRACY678HENRY901IAN123</code>, her pubkey and redeemers pubkey. She shares the HTLC address with Bob.</p>\n</li>\n<li>\n<p>Bob creates a transaction to spend the HTLC that was created by Alice earlier and adds 4 outputs in it (1 HTLC created by Eve and others to pay redeem fees to self, Carol and Dave). He shares redeem script and signature with Eve after coordinating with other redeemers to get partial preimage.</p>\n</li>\n</ol>\n<p><em>If Bob, Carol or Dave are unable to coordinate and complete the preimage required for next steps then eCash would be invalidated and Alice gets back locked bitcoin after 2016 blocks.</em></p>\n<pre><code class=\"lang-auto\">txid = \"1111111111111111111111111111111111111111111111111111111111111111\"\nvout = 0\n\namount_locked = int(1 * COIN)\nredeem_fee_bob = int(0.001 * COIN)\nredeem_fee_carol = int(0.0005 * COIN)\nredeem_fee_dave = int(0.0005 * COIN)\ntotal_redeem_fee = redeem_fee_bob + redeem_fee_carol + redeem_fee_dave\namount_eve_htlc = int(amount_locked - (total_redeem_fee + (0.0001 * COIN)))\n\ntxin = CMutableTxIn(COutPoint(lx(txid), vout))\ntxout_bob = CMutableTxOut(redeem_fee_bob, P2WPKHBitcoinAddress(\"tb1qq4kmxcjgfmeg2psvth2c905np4pctdeh8rd34x\").to_scriptPubKey())\ntxout_carol = CMutableTxOut(redeem_fee_carol, P2WPKHBitcoinAddress(\"tb1qnef4evey7592xh56sdsenjr00c7vh2afh2947k\").to_scriptPubKey())\ntxout_dave = CMutableTxOut(redeem_fee_dave, P2WPKHBitcoinAddress(\"tb1qe5hm92mmgfgflj8l3hrwe03zfme79pmkqr4x53\").to_scriptPubKey())\ntxout_eve_htlc = CMutableTxOut(amount_eve_htlc, P2WPKHBitcoinAddress(\"tb1qcgrvanjt2y9tckvermnanwsex062vuhq3yqxss\").to_scriptPubKey())\ntx = CMutableTransaction([txin], [txout_bob, txout_carol, txout_dave, txout_eve_htlc])\n\nsighash = SignatureHash(\n    script=redeem_script,\n    txTo=tx,\n    inIdx=0,\n    hashtype=SIGHASH_ALL,\n    amount=amount_locked,\n    sigversion=SIGVERSION_WITNESS_V0,\n)\n\nsig = CBitcoinSecret(\"cSCdFuVUYAEDhakyRJr4PXwhfwysnfF6khRkdyLnZPRyKFMjiVLq\").sign(sighash) + bytes([SIGHASH_ALL])\n\n</code></pre>\n<ol start=\"8\">\n<li>Eve adds <code>preimage_secret</code> required for witness and broadcasts the transaction</li>\n</ol>\n<pre><code class=\"lang-auto\">witness = CScriptWitness([sig, pubkey_redeemer, preimage_secret, b'\\x01', redeem_script])\ntx.wit = CTxWitness([CTxInWitness(witness)])\n\nprint(\"Serialized transaction: \\n{}\".format(b2x(tx.serialize())))\n</code></pre>\n<p><em>If Frank, Gracy or Henry are unable to coordinate and complete the preimage required for next steps then eCash would be invalidated and Eve gets back locked bitcoin after 2016 blocks.</em></p>\n<h2>Conclusion:</h2> This protocol can be used for decentralized eCash and isn't custodial. There are some tradeoffs and it could be improved further. If this protocol works, I would recommend everyone involved in minting and redeeming to stay anonymous. Feel free to comment with improvements or corrections in the suggested solution.",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-01-23T04:21:49.150Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 32,
  "reads": 8,
  "readers_count": 7,
  "score": 161.6,
  "yours": false,
  "topic_id": 466,
  "topic_slug": "meow-mint-ecash-on-will",
  "topic_title": "MEOW: Mint eCash On Will",
  "topic_html_title": "MEOW: Mint eCash On Will",
  "category_id": 7,
  "display_username": "/dev/fd0",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "<h2>Problem:</h2>\n\nChaumian eCash used in cashu and fedimint is custodial.\n\n<h2>Research:</h2>\n \nI researched [HTLC](https://en.bitcoin.it/wiki/Hash_Time_Locked_Contracts), [Chaumian eCash](https://www.youtube.com/watch?v=VwMzNE1D3so) and [Hawala](https://en.wikipedia.org/wiki/Hawala) to use certain procedures for solving this problem.\n\n[url=https://imgbb.com/]![](upload://lWZD1wBsT0F8KVitJWDRS1qeyI2.png)[/url]\n\n@moonsettler has documented a process to use [eCash without custodial risk](https://gist.github.com/moonsettler/42b588fa97a1da3ac0adea0dd16dadf2) which helped me understand things better and come up with a solution. @ZmnSCPxj suggested a few ideas in a [tweet thread](https://x.com/jxpcsnmz/status/1748156002619588791?s=20). They could also be used to research further and implement better solutions.\n\n<h2>Solution:</h2>\n\n1. Bob mints eCash tokens for Alice and adds (Bob, Carol, Dave) as redeemers in it. \n\n> A fork of [moksha](https://github.com/ngutech21/moksha) could be used for mint because it supports on-chain minting and melting\n\n2. Alice creates HTLC with a long preimage secret, her pubkey and redeemers pubkey. She shares `BOB123` part of preimage secret with Bob, `CAROL456` with Dave and `DAVE789` with Eve.\n\n```\nimport hashlib\n\nfrom bitcoin import SelectParams\nfrom bitcoin.core import Hash160\nfrom bitcoin.core.script import CScript, OP_HASH160, OP_SHA256, OP_EQUALVERIFY, OP_0, OP_DUP, OP_IF, OP_ELSE, OP_ENDIF, OP_CHECKSEQUENCEVERIFY, OP_DROP, OP_EQUALVERIFY, OP_CHECKSIG\nfrom bitcoin.wallet import P2WSHBitcoinAddress\n\nSelectParams('signet')\n\npreimage_secret = b\"BOB123CAROL456DAVE789EVE012\"\npreimage = hashlib.sha256(preimage_secret).digest()\n\npubkey_alice = bytes.fromhex(\"03b8821767bb83f8928a25735d94ddd2f1f481ed82d3a05e8decdc926bac2e185a\")\npubkey_redeemer = bytes.fromhex(\"03ee8232b06b14d1f996350345a51b715e3df265fec3209b73930dbe3f890f5403\")\n\nredeem_script = CScript([\n    OP_IF,\n        OP_SHA256, preimage, OP_EQUALVERIFY, OP_DUP, OP_HASH160, Hash160(pubkey_redeemer),\n    OP_ELSE,\n        2016, OP_CHECKSEQUENCEVERIFY, OP_DROP, OP_DUP, OP_HASH160, Hash160(pubkey_alice),\n    OP_ENDIF,\n    OP_EQUALVERIFY,\n    OP_CHECKSIG,\n])\n\nredeem_script_hash = hashlib.sha256(redeem_script).digest()\nscript_pubkey = CScript([OP_0, redeem_script_hash])\naddress = P2WSHBitcoinAddress.from_scriptPubKey(script_pubkey)\nprint(f\"HTLC Address: {address}\")\n```\n\n3. Alice gets the HTLC address. She funds it with some bitcoin based on eCash minted, transaction fees, redeem fees etc.\n\n4. Alice uses eCash to pay Eve, shares 3 sha256 hashes and `EVE012` secret along with eCash:\n\n  ```\n  Bob: c6f3e97b0314172f37f84b4383aed77532aa0ed46fe2a59479b81d24148dfe2e\n  Carol: a76a9c3dd985816d90f66aa679f165c53cbfdc7b26ee9395894a9c31797c3e53\n  Dave: b734eb0b425d9bb099506e18ebcb50f904d07de94f9d9b9ba0b56d54cc33a3a0\n  ```\n5. Eve verifies that eCash has not expired (2016 blocks). She accepts eCash payment and tries to re-issue eCash using it. Frank mints eCash for her and adds (Frank, Gracy, Henry) as redeemers in it.\n\n6. Eve creates HTLC with a new `preimage_secret`: `FRANK345GRACY678HENRY901IAN123`, her pubkey and redeemers pubkey. She shares the HTLC address with Bob.\n\n7. Bob creates a transaction to spend the HTLC that was created by Alice earlier and adds 4 outputs in it (1 HTLC created by Eve and others to pay redeem fees to self, Carol and Dave). He shares redeem script and signature with Eve after coordinating with other redeemers to get partial preimage.\n\n*If Bob, Carol or Dave are unable to coordinate and complete the preimage required for next steps then eCash would be invalidated and Alice gets back locked bitcoin after 2016 blocks.*\n\n```\ntxid = \"1111111111111111111111111111111111111111111111111111111111111111\"\nvout = 0\n\namount_locked = int(1 * COIN)\nredeem_fee_bob = int(0.001 * COIN)\nredeem_fee_carol = int(0.0005 * COIN)\nredeem_fee_dave = int(0.0005 * COIN)\ntotal_redeem_fee = redeem_fee_bob + redeem_fee_carol + redeem_fee_dave\namount_eve_htlc = int(amount_locked - (total_redeem_fee + (0.0001 * COIN)))\n\ntxin = CMutableTxIn(COutPoint(lx(txid), vout))\ntxout_bob = CMutableTxOut(redeem_fee_bob, P2WPKHBitcoinAddress(\"tb1qq4kmxcjgfmeg2psvth2c905np4pctdeh8rd34x\").to_scriptPubKey())\ntxout_carol = CMutableTxOut(redeem_fee_carol, P2WPKHBitcoinAddress(\"tb1qnef4evey7592xh56sdsenjr00c7vh2afh2947k\").to_scriptPubKey())\ntxout_dave = CMutableTxOut(redeem_fee_dave, P2WPKHBitcoinAddress(\"tb1qe5hm92mmgfgflj8l3hrwe03zfme79pmkqr4x53\").to_scriptPubKey())\ntxout_eve_htlc = CMutableTxOut(amount_eve_htlc, P2WPKHBitcoinAddress(\"tb1qcgrvanjt2y9tckvermnanwsex062vuhq3yqxss\").to_scriptPubKey())\ntx = CMutableTransaction([txin], [txout_bob, txout_carol, txout_dave, txout_eve_htlc])\n\nsighash = SignatureHash(\n    script=redeem_script,\n    txTo=tx,\n    inIdx=0,\n    hashtype=SIGHASH_ALL,\n    amount=amount_locked,\n    sigversion=SIGVERSION_WITNESS_V0,\n)\n\nsig = CBitcoinSecret(\"cSCdFuVUYAEDhakyRJr4PXwhfwysnfF6khRkdyLnZPRyKFMjiVLq\").sign(sighash) + bytes([SIGHASH_ALL])\n\n```\n\n8. Eve adds `preimage_secret` required for witness and broadcasts the transaction\n\n```\nwitness = CScriptWitness([sig, pubkey_redeemer, preimage_secret, b'\\x01', redeem_script])\ntx.wit = CTxWitness([CTxInWitness(witness)])\n\nprint(\"Serialized transaction: \\n{}\".format(b2x(tx.serialize())))\n```\n\n*If Frank, Gracy or Henry are unable to coordinate and complete the preimage required for next steps then eCash would be invalidated and Eve gets back locked bitcoin after 2016 blocks.*\n\n<h2>Conclusion:</h2> This protocol can be used for decentralized eCash and isn't custodial. There are some tradeoffs and it could be improved further. If this protocol works, I would recommend everyone involved in minting and redeeming to stay anonymous. Feel free to comment with improvements or corrections in the suggested solution.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 247,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "downloaded local copies of images",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}