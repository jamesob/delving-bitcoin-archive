{
  "id": 1007,
  "name": "Robin Linus",
  "username": "RobinLinus",
  "avatar_template": "/user_avatar/delvingbitcoin.org/robinlinus/{size}/130_2.png",
  "created_at": "2024-01-08T03:14:02.638Z",
  "cooked": "<p>Not sure I understand you correctly. This procedure should enforce the message to be the</p>\n<aside class=\"quote no-group quote-modified\" data-username=\"ajtowns\" data-post=\"2\" data-topic=\"370\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/3_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p> tx msg hash used by the CHECKSIG operation.</p>\n</blockquote>\n</aside>\n<ul>\n<li>In step1 it is obviously the case.</li>\n<li>In step2 m=z is enforced with Andrew\u2019s CAT trick. It can be used as a primitive to push the sighash digest onto the stack. (Of course, you have to check here that the signature is exactly 64 bytes, implicitly enforcing SIGHASH_ALL.)</li>\n</ul>\n<p>I don\u2019t see how your attack breaks that.</p>\n<hr>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"2\" data-topic=\"370\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/3_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>If you\u2019re introducing a new secp256k1-specific 256 bit opcode <code>op_secp256k1_scalar_sub</code></p>\n</blockquote>\n</aside>\n<p>That\u2019s a misunderstanding. I do not want to introduce any opcode.</p>\n<p>My main point is that OP_CAT can reduce scalar multiplication for <em>curve points</em> to a single subtraction of <em>field elements</em>. That in itself is an interesting result.</p>\n<p>Furthermore, I estimate that (given CAT) we probably can already implement subtraction of field elements in less than 250 opcodes. Definitely seems to be trivially possible when using kilobytes of Script. That\u2019s why I thought it\u2019s fair to assume <code>op_secp256k1_scalar_sub</code> as given, to then show the main point.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-01-08T03:46:20.052Z",
  "reply_count": 1,
  "reply_to_post_number": 2,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 5.6,
  "yours": false,
  "topic_id": 370,
  "topic_slug": "emulating-curve-point-scalar-multiplication-with-op-cat",
  "topic_title": "Emulating curve point scalar multiplication with OP_CAT",
  "topic_html_title": "Emulating curve point scalar multiplication with OP_CAT",
  "category_id": 7,
  "display_username": "Robin Linus",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Not sure I understand you correctly. This procedure should enforce the message to be the\n[quote=\"ajtowns, post:2, topic:370\"] tx msg hash used by the CHECKSIG operation.[/quote]\n\n\n- In step1 it is obviously the case.\n- In step2 m=z is enforced with Andrew's CAT trick. It can be used as a primitive to push the sighash digest onto the stack. (Of course, you have to check here that the signature is exactly 64 bytes, implicitly enforcing SIGHASH_ALL.)\n\nI don't see how your attack breaks that.\n\n\n-----\n\n\n[quote=\"ajtowns, post:2, topic:370\"]\nIf you\u2019re introducing a new secp256k1-specific 256 bit opcode `op_secp256k1_scalar_sub`\n[/quote]\n\nThat's a misunderstanding. I do not want to introduce any opcode. \n\nMy main point is that OP_CAT can reduce scalar multiplication for *curve points* to a single subtraction of *field elements*. That in itself is an interesting result.\n\nFurthermore, I estimate that (given CAT) we probably can already implement subtraction of field elements in less than 250 opcodes. Definitely seems to be trivially possible when using kilobytes of Script. That's why I thought it's fair to assume `op_secp256k1_scalar_sub` as given, to then show the main point.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 131,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}