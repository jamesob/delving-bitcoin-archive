{
  "id": 1033,
  "name": "Bastien Teinturier",
  "username": "t-bast",
  "avatar_template": "/user_avatar/delvingbitcoin.org/t-bast/{size}/98_2.png",
  "created_at": "2024-01-09T09:03:40.558Z",
  "cooked": "<blockquote>\n<p>Why would anyone make a non-trivial-value ephemeral anchor? Is it really necessary to put code in place to fix this?</p>\n</blockquote>\n<p>In the context of lightning, this is necessary to handle dust HTLCs. When Alice sends a dust HTLC to Bob, the following steps happen:</p>\n<ol>\n<li>Sign a commitment transaction where we subtract the HTLC amount from Alice\u2019s main output: since the HTLC is dust, we <strong>don\u2019t</strong> create a corresponding HTLC output in that commitment transaction</li>\n<li>When Bob fulfills the HTLC, sign a commitment transaction where the HTLC amount is added to Bob\u2019s main output</li>\n</ol>\n<p>In the first step, since we subtracted the HTLC amount from Alice\u2019s output but didn\u2019t add this amount anywhere else, <em>we temporarily increased the on-chain fees of the commitment transaction</em>. In the second step, we decrease the on-chain fees of the commitment transaction back to its previous value. If the commitment transaction of the first step is broadcast, <em>the dust HTLC amount goes directly to the miners</em>.</p>\n<p>I believe any L2 contract that allows transferring amounts that cannot be claimed on-chain will have a similar issue.</p>\n<p>Once we introduce ephemeral anchors, we can either:</p>\n<ol>\n<li>Not change anything to the current protocol and keep increasing the commitment transaction fees by the dust HTLC amount</li>\n<li>Add the dust HTLC amount to the ephemeral anchor output to keep the commitment transaction fees constant</li>\n</ol>\n<p>The issue with the first option is that the commitment transaction can end up paying a lot of on-chain fees on its own, which means it would make sense to include it in a block without claiming the tiny (most likely 0 sat) ephemeral anchor output (which will then pollute the utxo set).</p>\n<p>That\u2019s why we\u2019re currently advocating for the second option, which ensures that the feerate of the commitment transaction is always 0 sat/byte (which then simplifies the lightning protocol greatly). However, from the miner\u2019s point of view, they\u2019ll always want to claim the whole value of the ephemeral anchor output for themselves if it\u2019s larger than the current feerate (MEV)! In that scenario it is a bit wasteful that we need a follow-up transaction to spend the ephemeral anchor to the miner (without adding any new input since it pays enough fees on its own), but I don\u2019t see how to do it better.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-01-09T09:03:40.558Z",
  "reply_count": 1,
  "reply_to_post_number": 2,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 16,
  "readers_count": 15,
  "score": 13.0,
  "yours": false,
  "topic_id": 383,
  "topic_slug": "ephemeral-anchors-and-mev",
  "topic_title": "Ephemeral Anchors and MEV",
  "topic_html_title": "Ephemeral Anchors and MEV",
  "category_id": 7,
  "display_username": "Bastien Teinturier",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "rustynail",
    "name": null,
    "avatar_template": "/letter_avatar_proxy/v4/letter/r/cc9497/{size}.png"
  },
  "bookmarked": false,
  "raw": "> Why would anyone make a non-trivial-value ephemeral anchor? Is it really necessary to put code in place to fix this?\n\nIn the context of lightning, this is necessary to handle dust HTLCs. When Alice sends a dust HTLC to Bob, the following steps happen:\n\n1. Sign a commitment transaction where we subtract the HTLC amount from Alice's main output: since the HTLC is dust, we **don't** create a corresponding HTLC output in that commitment transaction\n2. When Bob fulfills the HTLC, sign a commitment transaction where the HTLC amount is added to Bob's main output\n\nIn the first step, since we subtracted the HTLC amount from Alice's output but didn't add this amount anywhere else, *we temporarily increased the on-chain fees of the commitment transaction*. In the second step, we decrease the on-chain fees of the commitment transaction back to its previous value. If the commitment transaction of the first step is broadcast, *the dust HTLC amount goes directly to the miners*.\n\nI believe any L2 contract that allows transferring amounts that cannot be claimed on-chain will have a similar issue.\n\nOnce we introduce ephemeral anchors, we can either:\n\n1. Not change anything to the current protocol and keep increasing the commitment transaction fees by the dust HTLC amount\n2. Add the dust HTLC amount to the ephemeral anchor output to keep the commitment transaction fees constant\n\nThe issue with the first option is that the commitment transaction can end up paying a lot of on-chain fees on its own, which means it would make sense to include it in a block without claiming the tiny (most likely 0 sat) ephemeral anchor output (which will then pollute the utxo set).\n\nThat's why we're currently advocating for the second option, which ensures that the feerate of the commitment transaction is always 0 sat/byte (which then simplifies the lightning protocol greatly). However, from the miner's point of view, they'll always want to claim the whole value of the ephemeral anchor output for themselves if it's larger than the current feerate (MEV)! In that scenario it is a bit wasteful that we need a follow-up transaction to spend the ephemeral anchor to the miner (without adding any new input since it pays enough fees on its own), but I don't see how to do it better.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 101,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}