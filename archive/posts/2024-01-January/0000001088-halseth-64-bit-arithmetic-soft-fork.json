{
  "id": 1088,
  "name": "Johan T. Halseth",
  "username": "halseth",
  "avatar_template": "/user_avatar/delvingbitcoin.org/halseth/{size}/198_2.png",
  "created_at": "2024-01-12T13:16:48.916Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"sipa\" data-post=\"6\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sipa/48/102_2.png\" class=\"avatar\"> sipa:</div>\n<blockquote>\n<p>Moreover, it has the enormous benefit of being already implemented, tested, deployed, and in use.</p>\n</blockquote>\n</aside>\n<p>I find the arguments pretty convincing; if we can enable 64-bit arithmetics using <em>the existing</em> <code>CSScriptNum</code> implementation, that sounds desirable.</p>\n<p>I do see the benefits of having a more approachable number format available for new developers, but <code>CScriptNum</code> is already there so they kinda have to deal with it in some form anyway.</p>\n<aside class=\"quote no-group\" data-username=\"sipa\" data-post=\"6\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sipa/48/102_2.png\" class=\"avatar\"> sipa:</div>\n<blockquote>\n<p>it\u2019s minimal-length big endian, which for literals inside the script has the advantage of being more compact than forcing a full length constant.</p>\n</blockquote>\n</aside>\n<p>If we introduce fixed-size LE version in addition to the existing minimal-length BE, this could possibly give developers incentives to convert between them and only use the fixed-length types when needed to save on space. Not saying this is a dealbreaker, but it could slow the clean transition to a 64 bit number version.</p>\n<aside class=\"quote no-group\" data-username=\"Chris_Stewart_5\" data-post=\"9\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/c/da6949/48.png\" class=\"avatar\"> Chris_Stewart_5:</div>\n<blockquote>\n<p>Perhaps I am not understanding what this alternative implementation looks like, so please correct me if I am wrong.</p>\n</blockquote>\n</aside>\n<p>There might be some edge cases in using the existing <code>CScriptNum</code> type for 8 byte values, but if I understand <a class=\"mention\" href=\"/u/sipa\">@sipa</a> correctly, it could be as easy as this: <a href=\"https://github.com/halseth/bitcoin/pull/1/commits/13c1848edf66410517b3cb6d47d80874438abb1f\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">interpreter: allow 8 byte CScriptNum by halseth \u00b7 Pull Request #1 \u00b7 halseth/bitcoin \u00b7 GitHub</a></p>\n<p>(This includes 64-bit support for all the numeric opcodes, including OP_WITHIN, OP_1ADD etc)</p>\n<p>We already have <code>leaf_version</code> available from the interpreter, so it\u2019s just about defining a new one.</p>\n<aside class=\"quote no-group\" data-username=\"sipa\" data-post=\"15\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sipa/48/102_2.png\" class=\"avatar\"> sipa:</div>\n<blockquote>\n<p>If <code>OP_MUL</code> or a variant thereof is added, I can see why detecting/dealing with overflows becomes an issue that the existing interface doesn\u2019t deal well with.</p>\n</blockquote>\n</aside>\n<p>If we want to re-enable these opcodes, it would be nice indeed to have them be backwards compatible with the existing number format (still with a <code>leaf_version</code> bump of course).</p>",
  "post_number": 18,
  "post_type": 1,
  "updated_at": "2024-01-12T13:20:15.414Z",
  "reply_count": 0,
  "reply_to_post_number": 15,
  "quote_count": 3,
  "incoming_link_count": 2,
  "reads": 16,
  "readers_count": 15,
  "score": 28.0,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Johan T. Halseth",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"sipa, post:6, topic:397\"]\nMoreover, it has the enormous benefit of being already implemented, tested, deployed, and in use.\n[/quote]\n\nI find the arguments pretty convincing; if we can enable 64-bit arithmetics using _the existing_ `CSScriptNum` implementation, that sounds desirable. \n\n\nI do see the benefits of having a more approachable number format available for new developers, but `CScriptNum` is already there so they kinda have to deal with it in some form anyway.\n\n[quote=\"sipa, post:6, topic:397\"]\nit\u2019s minimal-length big endian, which for literals inside the script has the advantage of being more compact than forcing a full length constant.\n[/quote]\n\nIf we introduce fixed-size LE version in addition to the existing minimal-length BE, this could possibly give developers incentives to convert between them and only use the fixed-length types when needed to save on space. Not saying this is a dealbreaker, but it could slow the clean transition to a 64 bit number version.  \n\n[quote=\"Chris_Stewart_5, post:9, topic:397\"]\nPerhaps I am not understanding what this alternative implementation looks like, so please correct me if I am wrong.\n[/quote]\n\nThere might be some edge cases in using the existing `CScriptNum` type for 8 byte values, but if I understand @sipa correctly, it could be as easy as this: https://github.com/halseth/bitcoin/pull/1/commits/13c1848edf66410517b3cb6d47d80874438abb1f\n\n(This includes 64-bit support for all the numeric opcodes, including OP_WITHIN, OP_1ADD etc)\n\nWe already have `leaf_version` available from the interpreter, so it's just about defining a new one.\n\n[quote=\"sipa, post:15, topic:397\"]\nIf `OP_MUL` or a variant thereof is added, I can see why detecting/dealing with overflows becomes an issue that the existing interface doesn\u2019t deal well with.\n[/quote]\nIf we want to re-enable these opcodes, it would be nice indeed to have them be backwards compatible with the existing number format (still with a `leaf_version` bump of course).",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 163,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}