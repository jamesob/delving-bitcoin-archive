{
  "id": 1235,
  "name": "Max Edwards",
  "username": "m3dwards",
  "avatar_template": "/user_avatar/delvingbitcoin.org/m3dwards/{size}/148_2.png",
  "created_at": "2024-01-19T23:48:02.294Z",
  "cooked": "<p>I have put together most of this described test into a <a href=\"https://github.com/bitcoin-dev-project/warnet/blob/957aec9e0a286893afe72cf0dfc6780ac35f1da2/src/scenarios/double_tx_relay.py\" rel=\"noopener nofollow ugc\">Warnet scenario</a> and have run a few simulations of 100 nodes on one large vm for a few hours each.</p>\n<p>The first thing the simulation does is mine a block every few seconds to give each node a starting balance of 50 BTC which is split up into 499 x 0.1 BTC taproot outputs. The following charts do not show that setup and instead start from when each block is produced at a normal rate and the transactions start being sent at a set rate. I implemented a simple block timing function that assumes an exponential distribution of block times with an average of 600 seconds to try and make the test more realistic.</p>\n<p>Simulation without PR applied (using tag 26.0)\n<div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/1X/e6e6ecd21c06f1b103f1ca6934c3fd2317023a15.jpeg\" data-download-href=\"https://delvingbitcoin.org/uploads/default/e6e6ecd21c06f1b103f1ca6934c3fd2317023a15\" title=\"Screenshot 2024-01-19 at 17.18.14\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/1X/e6e6ecd21c06f1b103f1ca6934c3fd2317023a15_2_690x406.jpeg\" alt=\"Screenshot 2024-01-19 at 17.18.14\" data-base62-sha1=\"wWEzwfUPoTHuSpuXXS7GYC5WGb3\" width=\"690\" height=\"406\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/1X/e6e6ecd21c06f1b103f1ca6934c3fd2317023a15_2_690x406.jpeg, https://delvingbitcoin.org/uploads/default/optimized/1X/e6e6ecd21c06f1b103f1ca6934c3fd2317023a15_2_1035x609.jpeg 1.5x, https://delvingbitcoin.org/uploads/default/optimized/1X/e6e6ecd21c06f1b103f1ca6934c3fd2317023a15_2_1380x812.jpeg 2x\" data-dominant-color=\"212125\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">Screenshot 2024-01-19 at 17.18.14</span><span class=\"informations\">1920\u00d71131 167 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Both simulations were with a 3.75 tx/s confirmation rate and a 7 tx/s creation rate. On a single box with higher transaction rates I have been struggling to keep the simulation stable.</p>\n<p>The top box on both screenshots shows how many transactions are being requested to reconstruct the block. The middle chart is the size of the mempool and bottom chart isn\u2019t very useful for this test but just shows number of outbound connections.</p>\n<p>I can\u2019t see any improvement (or much of a difference) with the PR enabled vs not but perhaps this would become apparent at much higher transaction rates? This simulation also does not RBF or CPFP or construct any chains of unconfirmed transactions. Perhaps this is needed?</p>\n<p>Some things I\u2019m a bit hazy on:</p>\n<ol>\n<li>\n<p>What is the relationship between relay rate and number of transactions requested? Is it that a higher relay rate should cause more churn in the mempool? As the fees are not all the same I would expect the mempool to keep the best transactions and be fairly similar between all nodes?</p>\n</li>\n<li>\n<p>How would RBF / CPFP / chains of unconfirmed transactions impact this test?</p>\n</li>\n</ol>\n<p>I would like to move these simulations over to Warnet running with a kubernetes backend as I think it should be a lot more stable with 100+ nodes and higher transaction rates. On one box things tend to get a bit network / IO bound.</p>",
  "post_number": 7,
  "post_type": 1,
  "updated_at": "2024-01-19T23:56:02.399Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 3,
  "reads": 10,
  "readers_count": 9,
  "score": 22.0,
  "yours": false,
  "topic_id": 294,
  "topic_slug": "warnet-increase-tx-relay-rate",
  "topic_title": "Warnet + Increase Tx Relay Rate",
  "topic_html_title": "Warnet + Increase Tx Relay Rate",
  "category_id": 8,
  "display_username": "Max Edwards",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I have put together most of this described test into a [Warnet scenario](https://github.com/bitcoin-dev-project/warnet/blob/957aec9e0a286893afe72cf0dfc6780ac35f1da2/src/scenarios/double_tx_relay.py) and have run a few simulations of 100 nodes on one large vm for a few hours each.\n\nThe first thing the simulation does is mine a block every few seconds to give each node a starting balance of 50 BTC which is split up into 499 x 0.1 BTC taproot outputs. The following charts do not show that setup and instead start from when each block is produced at a normal rate and the transactions start being sent at a set rate. I implemented a simple block timing function that assumes an exponential distribution of block times with an average of 600 seconds to try and make the test more realistic.\n\nSimulation without PR applied (using tag 26.0)\n![Screenshot 2024-01-19 at 17.18.14|690x406](upload://wWEzwfUPoTHuSpuXXS7GYC5WGb3.jpeg)\n\nBoth simulations were with a 3.75 tx/s confirmation rate and a 7 tx/s creation rate. On a single box with higher transaction rates I have been struggling to keep the simulation stable.\n\nThe top box on both screenshots shows how many transactions are being requested to reconstruct the block. The middle chart is the size of the mempool and bottom chart isn't very useful for this test but just shows number of outbound connections.\n\nI can't see any improvement (or much of a difference) with the PR enabled vs not but perhaps this would become apparent at much higher transaction rates? This simulation also does not RBF or CPFP or construct any chains of unconfirmed transactions. Perhaps this is needed?\n\nSome things I'm a bit hazy on:\n\n1) What is the relationship between relay rate and number of transactions requested? Is it that a higher relay rate should cause more churn in the mempool? As the fees are not all the same I would expect the mempool to keep the best transactions and be fairly similar between all nodes?\n\n2) How would RBF / CPFP / chains of unconfirmed transactions impact this test?\n\nI would like to move these simulations over to Warnet running with a kubernetes backend as I think it should be a lot more stable with 100+ nodes and higher transaction rates. On one box things tend to get a bit network / IO bound.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 134,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}