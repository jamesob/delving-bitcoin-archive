{
  "id": 932,
  "name": "Gregory Sanders",
  "username": "instagibbs",
  "avatar_template": "/user_avatar/delvingbitcoin.org/instagibbs/{size}/28_2.png",
  "created_at": "2024-01-05T18:39:06.465Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"ProofOfKeags\" data-post=\"2\" data-topic=\"359\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/proofofkeags/48/156_2.png\" class=\"avatar\"> ProofOfKeags:</div>\n<blockquote>\n<p>Can you elaborate on precisely why this is the case. I\u2019m not sure I intuit why this is necessary. In theory the injunction period in the existing protocol is two rounds max: breach and justice. In eltoo, my understanding is that it is still two rounds: breach and fast-forward.</p>\n</blockquote>\n</aside>\n<p>Fairly simple to explain and obvious in retrospect:</p>\n<ol>\n<li>Alice and Bob do some channel ops</li>\n<li>Alice then sends <code>update_signed</code> which is a MuSig2 partial sig</li>\n<li>Bob smirks now that he\u2019s the only one with the full signature, goes silent</li>\n<li>Alice goes to chain with prior state, waits however long the \u201cupdate phase\u201d has a timelock for the \u201csettle transaction\u201d to be valid</li>\n<li>Right before timelock expires, Bob publishes the final state</li>\n<li>wait for this timelock to expire\u2026 publish settle tx</li>\n<li>finally can settle HTLCs</li>\n</ol>\n<p>that\u2019s 2x the update phase timelock, not 1x. I know there\u2019s some \u201csandwiching\u201d you can do to compress it a bit(conversations between LN engineers I didn\u2019t understand!), but it\u2019s north of my once expected 1x.</p>\n<p>This game also shows up in the \u201clayered eltoo\u201d design from <a href=\"https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html\" class=\"inline-onebox\">[Lightning-dev] Layered commitments with eltoo</a> which was supposed to get rid of the additional delta values altogether.</p>\n<aside class=\"quote no-group\" data-username=\"ProofOfKeags\" data-post=\"2\" data-topic=\"359\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/proofofkeags/48/156_2.png\" class=\"avatar\"> ProofOfKeags:</div>\n<blockquote>\n<p>I\u2019m thoroughly unsurprised by this as CTV/Covenant schemes can, in principle, give you state-graph cut-through on any state machine encoded into Bitcoin transactions. However, I do have a question as to whether alternative covenant schemes also give you this property? I suspect but am not certain that they can.</p>\n</blockquote>\n</aside>\n<p>OP_CTV is probably the ideal here? I never validated it end to end or carefully looked though. I emulated it for a few more vbytes using APO.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-01-05T18:41:17.125Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 1,
  "incoming_link_count": 1,
  "reads": 12,
  "readers_count": 11,
  "score": 7.4,
  "yours": false,
  "topic_id": 359,
  "topic_slug": "ln-symmetry-project-recap",
  "topic_title": "LN-Symmetry Project Recap",
  "topic_html_title": "LN-Symmetry Project Recap",
  "category_id": 7,
  "display_username": "Gregory Sanders",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"ProofOfKeags, post:2, topic:359\"]\nCan you elaborate on precisely why this is the case. I\u2019m not sure I intuit why this is necessary. In theory the injunction period in the existing protocol is two rounds max: breach and justice. In eltoo, my understanding is that it is still two rounds: breach and fast-forward.\n[/quote]\n\nFairly simple to explain and obvious in retrospect:\n1) Alice and Bob do some channel ops\n2) Alice then sends `update_signed` which is a MuSig2 partial sig\n3) Bob smirks now that he's the only one with the full signature, goes silent\n4) Alice goes to chain with prior state, waits however long the \"update phase\" has a timelock for the \"settle transaction\" to be valid\n5) Right before timelock expires, Bob publishes the final state\n6) wait for this timelock to expire... publish settle tx\n7) finally can settle HTLCs\n\nthat's 2x the update phase timelock, not 1x. I know there's some \"sandwiching\" you can do to compress it a bit(conversations between LN engineers I didn't understand!), but it's north of my once expected 1x.\n\nThis game also shows up in the \"layered eltoo\" design from https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html which was supposed to get rid of the additional delta values altogether.\n\n[quote=\"ProofOfKeags, post:2, topic:359\"]\nI\u2019m thoroughly unsurprised by this as CTV/Covenant schemes can, in principle, give you state-graph cut-through on any state machine encoded into Bitcoin transactions. However, I do have a question as to whether alternative covenant schemes also give you this property? I suspect but am not certain that they can.\n[/quote]\n\nOP_CTV is probably the ideal here? I never validated it end to end or carefully looked though. I emulated it for a few more vbytes using APO.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 31,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}