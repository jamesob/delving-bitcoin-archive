{
  "id": 1380,
  "name": "Gloria Zhao",
  "username": "glozow",
  "avatar_template": "/user_avatar/delvingbitcoin.org/glozow/{size}/261_2.png",
  "created_at": "2024-01-30T10:35:57.166Z",
  "cooked": "<p>First of all, there is an \u201calternatives\u201d section of the v3 BIP. It describes common suggestions and why they do not work, are good ideas but can only be applied to limited topologies (which is what v3 is for), are only feasible to implement generally after cluster mempool (which is a step after v3), or are not conflicting with this proposal.</p>\n<p>I\u2019d also encourage people to read the discussions linked in the BIP and PR. There is a lot of context and history, but there\u2019s tons of publicly-viewable text to build background on it.</p>\n<h3><a name=\"general-replace-by-feerate-1\" class=\"anchor\" href=\"#general-replace-by-feerate-1\"></a>General Replace by Feerate</h3>\n<p>\u201cGet rid of Rule 3+4 and use feerate instead\u201d is a good place to start brainstorming, but it\u2019s free relay / DoSy. Not much new to say here.</p>\n<h3><a name=\"replace-by-feerate-and-having-2-sets-of-rbf-rules-2\" class=\"anchor\" href=\"#replace-by-feerate-and-having-2-sets-of-rbf-rules-2\"></a>Replace by Feerate and having 2 sets of RBF rules</h3>\n<p>There has also been lots of exploration of the idea \u201cin certain special situations, use a different set of rules based on {feerate, miner score}.\u201d One-Shot Replace by Feerate is one. There\u2019s also <a href=\"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/016998.html\">\u201c[PROPOSAL] Emergency RBF (BIP 125)\u201d</a> and <a href=\"https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff#fees-in-next-block-and-feerate-for-the-rest-of-the-mempool\">\u201cFees in Next Block and Feerate for the Rest of the Mempool\u201d</a>, among others.</p>\n<p>For me, a key takeaway from those discussions was:</p>\n<ul>\n<li>A replacement should confirm \u201cfaster\u201d than the replacee. Users should not be paying higher fees and feerate only to have their transaction confirm slower.</li>\n<li>We should have a \u201cminer score\u201d or some miner incentive compatibility metric that we can use to compare the replacement and replacee (obviously individual feerate does not work). And we should require that replacements increase miner score.</li>\n</ul>\n<p>Some major problems with this include:</p>\n<ul>\n<li>Free relay is usually still present. See <a href=\"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2024-January/022302.html\">this</a> or <a href=\"https://gist.github.com/glozow/797bb412868ce959dcd0a2981322fd2a#free-relay-problem\">this</a> on infinite replacements. Intuitively, having 2 sets of rules designed to bypass each other can easily result in this kind of loop. I\u2019m not saying it\u2019s impossible to design 2 that don\u2019t do this, but just some intuition if you don\u2019t want to go through the math.</li>\n<li>The notion of \u201cwould confirm soon\u201d or \u201cin the top N portion of the mempool\u201d such that it\u2019s <em>safe</em> and <em>useful</em> to employ this other set of rules is not well-defined. It\u2019s also not at all easy to implement (see next point).</li>\n<li>The mempool as it exists to today doesn\u2019t support an efficient way to calculate \u201cminer score\u201d or incentive compatibility, due to unbounded cluster sizes.\n<ul>\n<li>There is no static calculation using the cached ancestor set values. Lots of people propose ancestor feerate (including myself, see <a href=\"https://github.com/bitcoin/bitcoin/pull/23121\">this PR</a> which I do think is deserving of the \u201chalf baked\u201d criticism), but it doesn\u2019t work. Also see <a href=\"https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff#mining-score-of-a-mempool-transaction\">this more deatiled breakdown of 4 options for static calculation</a>.</li>\n<li>Actually calculating the miner score (see <a href=\"https://github.com/bitcoin/bitcoin/pull/27021\">this implementation</a> for privileged wallet which needs to halt at 500) is too computationally complex to include as a step in mempool validation.</li>\n<li>I\u2019ve <a href=\"https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff#mempool-changes-need-for-implementation\">proposed</a> meeting halfway and caching the top block\u2019s worth. That is also <a href=\"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019879.html\">considered</a> too complex.</li>\n</ul>\n</li>\n</ul>\n<p>One advantage of cluster mempool is being able to calculate things like miner score and incentive compatibility across the mempool. Similarly, one advantage of v3 is being able to do this before cluster mempool because of restricted topology. Before people took on the challenge of designing and implementing cluster mempool, I had been <a href=\"https://bitcoincore.reviews/25038\">framing</a> v3 as \u201ccluster limits\u201d without having to implement cluster limits, as it\u2019s one of the only ways to codify a cluster limit (count=2) using existing package limits (anc=2, desc=2. Once you go up to 3, you can have infinite clusters again). Another advantage of v3 is that it helps unblock cluster mempool, which is imo a no-brainer.</p>\n<p>In summary, I don\u2019t think the One-Shot Replace by Feerate proposal works (i.e. doesn\u2019t have a free relay problem and is feasible to implement accurately). The path of upgrades proposed (v3 package RBF, v3 sibling eviction, 1p1c package relay, cluster mempool) is the most complete solution by far. V3 is simple (and perhaps that leads people to think it is not well thought out?) and useful both as a building block and for solving specific problems in general.</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-01-30T10:35:57.166Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 8,
  "readers_count": 7,
  "score": 1.4,
  "yours": false,
  "topic_id": 488,
  "topic_slug": "replace-by-fee-rate-vs-v3",
  "topic_title": "Replace-By-Fee-Rate vs V3",
  "topic_html_title": "Replace-By-Fee-Rate vs V3",
  "category_id": 7,
  "display_username": "Gloria Zhao",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "First of all, there is an \"alternatives\" section of the v3 BIP. It describes common suggestions and why they do not work, are good ideas but can only be applied to limited topologies (which is what v3 is for), are only feasible to implement generally after cluster mempool (which is a step after v3), or are not conflicting with this proposal.\n\nI'd also encourage people to read the discussions linked in the BIP and PR. There is a lot of context and history, but there's tons of publicly-viewable text to build background on it.\n\n### General Replace by Feerate\n\n\"Get rid of Rule 3+4 and use feerate instead\" is a good place to start brainstorming, but it's free relay / DoSy. Not much new to say here.\n\n### Replace by Feerate and having 2 sets of RBF rules\n\nThere has also been lots of exploration of the idea \"in certain special situations, use a different set of rules based on {feerate, miner score}.\" One-Shot Replace by Feerate is one. There's also [\"[PROPOSAL] Emergency RBF (BIP 125)\"](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-June/016998.html ) and [\"Fees in Next Block and Feerate for the Rest of the Mempool\"](https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff#fees-in-next-block-and-feerate-for-the-rest-of-the-mempool), among others.\n\nFor me, a key takeaway from those discussions was:\n- A replacement should confirm \"faster\" than the replacee. Users should not be paying higher fees and feerate only to have their transaction confirm slower.\n- We should have a \"miner score\" or some miner incentive compatibility metric that we can use to compare the replacement and replacee (obviously individual feerate does not work). And we should require that replacements increase miner score.\n\nSome major problems with this include:\n- Free relay is usually still present. See [this](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2024-January/022302.html) or [this](https://gist.github.com/glozow/797bb412868ce959dcd0a2981322fd2a#free-relay-problem) on infinite replacements. Intuitively, having 2 sets of rules designed to bypass each other can easily result in this kind of loop. I'm not saying it's impossible to design 2 that don't do this, but just some intuition if you don't want to go through the math.\n- The notion of \"would confirm soon\" or \"in the top N portion of the mempool\" such that it's *safe* and *useful* to employ this other set of rules is not well-defined. It's also not at all easy to implement (see next point).\n- The mempool as it exists to today doesn't support an efficient way to calculate \"miner score\" or incentive compatibility, due to unbounded cluster sizes.\n  - There is no static calculation using the cached ancestor set values. Lots of people propose ancestor feerate (including myself, see [this PR](https://github.com/bitcoin/bitcoin/pull/23121) which I do think is deserving of the \"half baked\" criticism), but it doesn't work. Also see [this more deatiled breakdown of 4 options for static calculation](https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff#mining-score-of-a-mempool-transaction).\n  - Actually calculating the miner score (see [this implementation](https://github.com/bitcoin/bitcoin/pull/27021) for privileged wallet which needs to halt at 500) is too computationally complex to include as a step in mempool validation.\n  - I've [proposed](https://gist.github.com/glozow/25d9662c52453bd08b4b4b1d3783b9ff#mempool-changes-need-for-implementation) meeting halfway and caching the top block's worth. That is also [considered](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-February/019879.html) too complex.\n\nOne advantage of cluster mempool is being able to calculate things like miner score and incentive compatibility across the mempool. Similarly, one advantage of v3 is being able to do this before cluster mempool because of restricted topology. Before people took on the challenge of designing and implementing cluster mempool, I had been [framing](https://bitcoincore.reviews/25038) v3 as \"cluster limits\" without having to implement cluster limits, as it's one of the only ways to codify a cluster limit (count=2) using existing package limits (anc=2, desc=2. Once you go up to 3, you can have infinite clusters again). Another advantage of v3 is that it helps unblock cluster mempool, which is imo a no-brainer.\n\nIn summary, I don't think the One-Shot Replace by Feerate proposal works (i.e. doesn't have a free relay problem and is feasible to implement accurately). The path of upgrades proposed (v3 package RBF, v3 sibling eviction, 1p1c package relay, cluster mempool) is the most complete solution by far. V3 is simple (and perhaps that leads people to think it is not well thought out?) and useful both as a building block and for solving specific problems in general.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 7,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}