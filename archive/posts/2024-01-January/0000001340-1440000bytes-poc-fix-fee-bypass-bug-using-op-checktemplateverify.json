{
  "id": 1340,
  "name": "/dev/fd0",
  "username": "1440000bytes",
  "avatar_template": "/user_avatar/delvingbitcoin.org/1440000bytes/{size}/301_2.png",
  "created_at": "2024-01-25T17:14:24.119Z",
  "cooked": "<h2>Problem</h2>\n<p>HodlHodl uses 2-of-3 multisig for P2P trades and a new multisig address is created for each trade using public keys for buyer, seller and HodlHodl. Buyer and Seller can coordinate with each other during a trade and spend bitcoin locked by seller without paying fees to HodlHodl. There is an open source tool to help users achieve this: <a href=\"https://gitlab.com/hodlhodl-public/escrow_extractor/\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">hodlhodl-public / escrow_extractor \u00b7 GitLab</a></p>\n<h2>Research</h2>\n<ul>\n<li>HodlHodl Multisig <a href=\"https://gitlab.com/hodlhodl-public/hodl-client-js/-/blob/master/multisig-spec.md\" rel=\"noopener nofollow ugc\">contract specification</a></li>\n<li>OP_<a href=\"https://github.com/bitcoin/bips/blob/deae64bfd31f6938253c05392aa355bf6d7e7605/bip-0119.mediawiki\" rel=\"noopener nofollow ugc\">CHECKTEMPLATEVERIFY</a></li>\n</ul>\n<blockquote>\n<p>HodlHodl is aware of this bug and acknowledged it in this <a href=\"https://x.com/hodlhodl/status/1739363250515406912\" rel=\"noopener nofollow ugc\">tweet</a></p>\n</blockquote>\n<p><a href=\"https://ibb.co/2YcQXst\" data-bbcode=\"true\" rel=\"noopener nofollow ugc\"><img src=\"https://delvingbitcoin.org/uploads/default/original/1X/29d2e5dfe31ff675127401584b999670a0157d47.png\" alt=\"\" data-base62-sha1=\"5XZqeekOXta3JNKq0tSVBjGW9kr\" role=\"presentation\" width=\"639\" height=\"300\"></a></p>\n<h2>Solution</h2>\n<ol>\n<li>\n<p>Seller funds a CTV address with bitcoin that can only be spent to two addresses (2-of-3 multisig and hodlhodl) using <code>lock_tx</code>.</p>\n<p>Example: <a href=\"https://mempool.space/signet/tx/76b79ff326522dccbe46befe40d7f4e9b66e63695707ae0e11cc4f65f0d1db9d\" rel=\"noopener nofollow ugc\">76b79ff326522dccbe46befe40d7f4e9b66e63695707ae0e11cc4f65f0d1db9d</a></p>\n</li>\n<li>\n<p>Seller shares <code>unlock_tx</code> hex with buyer and HodlHodl.</p>\n<p>Example:</p>\n<pre><code class=\"lang-auto\">02000000019ddbd1f0654fcc110eae075769636eb6e9f4d740febe46becc2d5226f39fb7760000000000ffffffff0268f40c000000000069522103a9a8b3ee7b0fb6d097ca1f878b103c6ebdfdd735b56a7730b5f6f6ffeda5646a2102afabe1ff44b40e775a76bc2e5c11217fa6f47d03eea3d1743894bd15722210bb2102ecfbf9e8cf29422dd809d316f8a21e937c2eaf50864bbc91599734cbd8de080c53ae50c30000000000001600148eeb90fd37f496fd40fadc135939609acc13c90600000000\n</code></pre>\n</li>\n<li>\n<p>Buyer sends money to seller\u2019s bank account and broadcasts <code>unlock_tx</code>. This transaction pays trading fee to HodlHodl in second output and locks left amount in a 2-of-3 multisig.</p>\n<p>Example: <a href=\"https://mempool.space/signet/tx/85e1db10c47d222b83ed0b540acbe2568e65ad34f25968725d06d7e7a8c02b1b\" rel=\"noopener nofollow ugc\">85e1db10c47d222b83ed0b540acbe2568e65ad34f25968725d06d7e7a8c02b1b</a></p>\n</li>\n<li>\n<p>2-of-3 multisig is spent using 2 keys to send bitcoin to buyer. In case of dispute, HodlHodl decides if it goes back to seller or not.</p>\n</li>\n</ol>\n<pre><code class=\"lang-auto\">import struct\nimport hashlib\nimport sys\nimport pprint\nimport typing as t\nfrom dataclasses import dataclass\nimport hashlib\nfrom bitcoin import SelectParams\nfrom bitcoin.core import (\n    CTransaction,\n    CMutableTransaction,\n    CMutableTxIn,\n    CTxIn,\n    CTxOut,\n    CScript,\n    COutPoint,\n    CTxWitness,\n    CTxInWitness,\n    CScriptWitness,\n    COIN,\n    lx,\n)\nfrom bitcoin.core import script\nfrom bitcoin.wallet import CBech32BitcoinAddress, P2WPKHBitcoinAddress, CBitcoinSecret\nfrom buidl.hd import HDPrivateKey, PrivateKey\nfrom buidl.ecc import S256Point\n\nSelectParams('signet')\n\nOP_CHECKTEMPLATEVERIFY = script.OP_NOP4\nTX_FEE = 1000\nBUY_AMOUNT = int(0.01 * COIN)\nHHFEES_AMOUNT = BUY_AMOUNT * 0.05\n\nfunding_prvkey = CBitcoinSecret(\"cTQmtSFJpEYxMPui7LnF6m3gM8DeimmvUbjpGYY47NMK5HZPbAJv\")\nfunding_pubkey = funding_prvkey.pub\nfunding_address = P2WPKHBitcoinAddress.from_scriptPubKey(CScript([script.OP_0, script.Hash160(funding_pubkey)]))\nprint(\"funding address:\", funding_address)\n\n\ndef sha256(input):\n    return hashlib.sha256(input).digest()\n\n\ndef get_txid(tx):\n    return tx.GetTxid()[::-1]\n\n\ndef create_template_hash(tx: CTransaction, nIn: int) -&gt; bytes:\n    r = b\"\"\n    r += struct.pack(\"&lt;i\", tx.nVersion)\n    r += struct.pack(\"&lt;I\", tx.nLockTime)\n    vin = tx.vin or []\n    vout = tx.vout or []\n\n    if any(inp.scriptSig for inp in vin):\n        r += sha256(b\"\".join(ser_string(inp.scriptSig) for inp in vin))\n    r += struct.pack(\"&lt;I\", len(tx.vin))\n    r += sha256(b\"\".join(struct.pack(\"&lt;I\", inp.nSequence) for inp in vin))\n    \n    r += struct.pack(\"&lt;I\", len(tx.vout))\n\n    r += sha256(b\"\".join(out.serialize() for out in vout))\n    r += struct.pack(\"&lt;I\", nIn)\n    return hashlib.sha256(r).digest()\n\n\ndef hodlhodl_template(buy_amount: int = None, hhfees_amount: int = None):\n    tx = CMutableTransaction()\n    tx.nVersion = 2\n\n    tx.vin = [CMutableTxIn()]\n\n    buyer_pubkey = bytes.fromhex(\"03a9a8b3ee7b0fb6d097ca1f878b103c6ebdfdd735b56a7730b5f6f6ffeda5646a\")\n    seller_pubkey = bytes.fromhex(\"02afabe1ff44b40e775a76bc2e5c11217fa6f47d03eea3d1743894bd15722210bb\")\n    hh_pubkey = bytes.fromhex(\"02ecfbf9e8cf29422dd809d316f8a21e937c2eaf50864bbc91599734cbd8de080c\")\n    multisig_script = CScript([script.OP_2, buyer_pubkey, seller_pubkey, hh_pubkey, script.OP_3, script.OP_CHECKMULTISIG])\n\n    tx.vout.append(CTxOut(buy_amount - 100000, multisig_script))\n\n    hh_witness_program = bytes.fromhex(\"8eeb90fd37f496fd40fadc135939609acc13c906\")\n    hh_script = CScript([script.OP_0, hh_witness_program])\n\n    tx.vout.append(CTxOut(hhfees_amount, hh_script))\n\n    return tx\n\n\ndef hodlhodl_tx(amount: int=None, hhfees_amount: int=None, vin_txid=None, vin_index=None):\n    tx = hodlhodl_template(amount, hhfees_amount)\n    tx.vin = [CTxIn(COutPoint(lx(vin_txid), vin_index), nSequence=0xffffffff)]\n    return tx\n\n\ndef ctv_tx(amount: int = None, vin_txid: str = None, vin_index: int = None):\n    template = hodlhodl_template(buy_amount=amount - TX_FEE - HHFEES_AMOUNT, hhfees_amount=HHFEES_AMOUNT)\n    hodlhodl_ctv_hash = create_template_hash(template, 0)\n    tx = CMutableTransaction()\n\n    tx.vin = [CTxIn(COutPoint(lx(vin_txid), vin_index))]\n    tx.vout = [CTxOut(amount - TX_FEE, CScript([hodlhodl_ctv_hash, OP_CHECKTEMPLATEVERIFY]))]\n\n    redeem_script = funding_address.to_redeemScript()\n    sighash = script.SignatureHash(\n        script=redeem_script,\n        txTo=tx,\n        inIdx=0,\n        hashtype=script.SIGHASH_ALL,\n        amount=amount,\n        sigversion=script.SIGVERSION_WITNESS_V0,\n    )\n    signature = funding_prvkey.sign(sighash) + bytes([script.SIGHASH_ALL])\n\n    tx.wit = CTxWitness([CTxInWitness(CScriptWitness([signature, funding_pubkey]))])\n    return tx\n\n\nif __name__ == \"__main__\":\n    lock_tx = ctv_tx(\n        amount=BUY_AMOUNT,\n        vin_txid=\"6c5cda350a5fb367b90ea18bf442ff73d619acbe3b898e8c11607dd368ac42d2\",\n        vin_index=1,\n    )\n    print(\"\\nLOCK TX:\", lock_tx.serialize().hex()) \n    \n    unlock_tx = hodlhodl_tx(\n        amount=BUY_AMOUNT - TX_FEE - HHFEES_AMOUNT,\n        hhfees_amount=HHFEES_AMOUNT,\n        vin_txid=get_txid(lock_tx).hex(),\n        vin_index=0,\n    )\n    print(\"\\nUNLOCK TX:\", unlock_tx.serialize().hex())\n</code></pre>\n<h2>Alternatives</h2>\n<p>HodlHodl could use 3-of-3 multisig however that would make it custodial and users will not be able to release bitcoin from escrow in case HodlHodl goes down.</p>\n<h2>Conclusion</h2>\n<p>Using OP_CHECKTEMPLATEVERIFY ensures HodlHodl gets the fee in every trade. This is a proof of concept and could be improved further.</p>\n<h2>Acknowledgement</h2>\n<ul>\n<li><a href=\"https://twitter.com/JeremyRubin\" rel=\"noopener nofollow ugc\">Jeremy Rubin</a></li>\n<li><a href=\"https://hodlhodl.com/\" rel=\"noopener nofollow ugc\">HodlHodl</a></li>\n<li><a href=\"https://twitter.com/0x0ff_\" rel=\"noopener nofollow ugc\">katsu</a></li>\n</ul>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-01-25T17:32:41.372Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 83,
  "reads": 28,
  "readers_count": 27,
  "score": 420.6,
  "yours": false,
  "topic_id": 478,
  "topic_slug": "poc-fix-fee-bypass-bug-using-op-checktemplateverify",
  "topic_title": "PoC: Fix fee bypass bug using OP_CHECKTEMPLATEVERIFY",
  "topic_html_title": "PoC: Fix fee bypass bug using OP_CHECKTEMPLATEVERIFY",
  "category_id": 8,
  "display_username": "/dev/fd0",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "<h2>Problem</h2>\n\nHodlHodl uses 2-of-3 multisig for P2P trades and a new multisig address is created for each trade using public keys for buyer, seller and HodlHodl. Buyer and Seller can coordinate with each other during a trade and spend bitcoin locked by seller without paying fees to HodlHodl. There is an open source tool to help users achieve this: https://gitlab.com/hodlhodl-public/escrow_extractor/\n\n<h2>Research</h2>\n\n- HodlHodl Multisig [contract specification](https://gitlab.com/hodlhodl-public/hodl-client-js/-/blob/master/multisig-spec.md)\n- OP_[CHECKTEMPLATEVERIFY](https://github.com/bitcoin/bips/blob/deae64bfd31f6938253c05392aa355bf6d7e7605/bip-0119.mediawiki)\n\n> HodlHodl is aware of this bug and acknowledged it in this [tweet](https://x.com/hodlhodl/status/1739363250515406912)\n\n[url=https://ibb.co/2YcQXst]![](upload://5XZqeekOXta3JNKq0tSVBjGW9kr.png)[/url]\n\n<h2>Solution</h2>\n\n1. Seller funds a CTV address with bitcoin that can only be spent to two addresses (2-of-3 multisig and hodlhodl) using `lock_tx`.\n\n   Example: [76b79ff326522dccbe46befe40d7f4e9b66e63695707ae0e11cc4f65f0d1db9d](https://mempool.space/signet/tx/76b79ff326522dccbe46befe40d7f4e9b66e63695707ae0e11cc4f65f0d1db9d)\n\n2. Seller shares `unlock_tx` hex with buyer and HodlHodl.\n\n   Example:\n   ```\n   02000000019ddbd1f0654fcc110eae075769636eb6e9f4d740febe46becc2d5226f39fb7760000000000ffffffff0268f40c000000000069522103a9a8b3ee7b0fb6d097ca1f878b103c6ebdfdd735b56a7730b5f6f6ffeda5646a2102afabe1ff44b40e775a76bc2e5c11217fa6f47d03eea3d1743894bd15722210bb2102ecfbf9e8cf29422dd809d316f8a21e937c2eaf50864bbc91599734cbd8de080c53ae50c30000000000001600148eeb90fd37f496fd40fadc135939609acc13c90600000000\n   ```\n3. Buyer sends money to seller's bank account and broadcasts `unlock_tx`. This transaction pays trading fee to HodlHodl in second output and locks left amount in a 2-of-3 multisig.\n\n   Example: [85e1db10c47d222b83ed0b540acbe2568e65ad34f25968725d06d7e7a8c02b1b](https://mempool.space/signet/tx/85e1db10c47d222b83ed0b540acbe2568e65ad34f25968725d06d7e7a8c02b1b)\n\n4. 2-of-3 multisig is spent using 2 keys to send bitcoin to buyer. In case of dispute, HodlHodl decides if it goes back to seller or not.\n\n```\nimport struct\nimport hashlib\nimport sys\nimport pprint\nimport typing as t\nfrom dataclasses import dataclass\nimport hashlib\nfrom bitcoin import SelectParams\nfrom bitcoin.core import (\n    CTransaction,\n    CMutableTransaction,\n    CMutableTxIn,\n    CTxIn,\n    CTxOut,\n    CScript,\n    COutPoint,\n    CTxWitness,\n    CTxInWitness,\n    CScriptWitness,\n    COIN,\n    lx,\n)\nfrom bitcoin.core import script\nfrom bitcoin.wallet import CBech32BitcoinAddress, P2WPKHBitcoinAddress, CBitcoinSecret\nfrom buidl.hd import HDPrivateKey, PrivateKey\nfrom buidl.ecc import S256Point\n\nSelectParams('signet')\n\nOP_CHECKTEMPLATEVERIFY = script.OP_NOP4\nTX_FEE = 1000\nBUY_AMOUNT = int(0.01 * COIN)\nHHFEES_AMOUNT = BUY_AMOUNT * 0.05\n\nfunding_prvkey = CBitcoinSecret(\"cTQmtSFJpEYxMPui7LnF6m3gM8DeimmvUbjpGYY47NMK5HZPbAJv\")\nfunding_pubkey = funding_prvkey.pub\nfunding_address = P2WPKHBitcoinAddress.from_scriptPubKey(CScript([script.OP_0, script.Hash160(funding_pubkey)]))\nprint(\"funding address:\", funding_address)\n\n\ndef sha256(input):\n    return hashlib.sha256(input).digest()\n\n\ndef get_txid(tx):\n    return tx.GetTxid()[::-1]\n\n\ndef create_template_hash(tx: CTransaction, nIn: int) -> bytes:\n    r = b\"\"\n    r += struct.pack(\"<i\", tx.nVersion)\n    r += struct.pack(\"<I\", tx.nLockTime)\n    vin = tx.vin or []\n    vout = tx.vout or []\n\n    if any(inp.scriptSig for inp in vin):\n        r += sha256(b\"\".join(ser_string(inp.scriptSig) for inp in vin))\n    r += struct.pack(\"<I\", len(tx.vin))\n    r += sha256(b\"\".join(struct.pack(\"<I\", inp.nSequence) for inp in vin))\n    \n    r += struct.pack(\"<I\", len(tx.vout))\n\n    r += sha256(b\"\".join(out.serialize() for out in vout))\n    r += struct.pack(\"<I\", nIn)\n    return hashlib.sha256(r).digest()\n\n\ndef hodlhodl_template(buy_amount: int = None, hhfees_amount: int = None):\n    tx = CMutableTransaction()\n    tx.nVersion = 2\n\n    tx.vin = [CMutableTxIn()]\n\n    buyer_pubkey = bytes.fromhex(\"03a9a8b3ee7b0fb6d097ca1f878b103c6ebdfdd735b56a7730b5f6f6ffeda5646a\")\n    seller_pubkey = bytes.fromhex(\"02afabe1ff44b40e775a76bc2e5c11217fa6f47d03eea3d1743894bd15722210bb\")\n    hh_pubkey = bytes.fromhex(\"02ecfbf9e8cf29422dd809d316f8a21e937c2eaf50864bbc91599734cbd8de080c\")\n    multisig_script = CScript([script.OP_2, buyer_pubkey, seller_pubkey, hh_pubkey, script.OP_3, script.OP_CHECKMULTISIG])\n\n    tx.vout.append(CTxOut(buy_amount - 100000, multisig_script))\n\n    hh_witness_program = bytes.fromhex(\"8eeb90fd37f496fd40fadc135939609acc13c906\")\n    hh_script = CScript([script.OP_0, hh_witness_program])\n\n    tx.vout.append(CTxOut(hhfees_amount, hh_script))\n\n    return tx\n\n\ndef hodlhodl_tx(amount: int=None, hhfees_amount: int=None, vin_txid=None, vin_index=None):\n    tx = hodlhodl_template(amount, hhfees_amount)\n    tx.vin = [CTxIn(COutPoint(lx(vin_txid), vin_index), nSequence=0xffffffff)]\n    return tx\n\n\ndef ctv_tx(amount: int = None, vin_txid: str = None, vin_index: int = None):\n    template = hodlhodl_template(buy_amount=amount - TX_FEE - HHFEES_AMOUNT, hhfees_amount=HHFEES_AMOUNT)\n    hodlhodl_ctv_hash = create_template_hash(template, 0)\n    tx = CMutableTransaction()\n\n    tx.vin = [CTxIn(COutPoint(lx(vin_txid), vin_index))]\n    tx.vout = [CTxOut(amount - TX_FEE, CScript([hodlhodl_ctv_hash, OP_CHECKTEMPLATEVERIFY]))]\n\n    redeem_script = funding_address.to_redeemScript()\n    sighash = script.SignatureHash(\n        script=redeem_script,\n        txTo=tx,\n        inIdx=0,\n        hashtype=script.SIGHASH_ALL,\n        amount=amount,\n        sigversion=script.SIGVERSION_WITNESS_V0,\n    )\n    signature = funding_prvkey.sign(sighash) + bytes([script.SIGHASH_ALL])\n\n    tx.wit = CTxWitness([CTxInWitness(CScriptWitness([signature, funding_pubkey]))])\n    return tx\n\n\nif __name__ == \"__main__\":\n    lock_tx = ctv_tx(\n        amount=BUY_AMOUNT,\n        vin_txid=\"6c5cda350a5fb367b90ea18bf442ff73d619acbe3b898e8c11607dd368ac42d2\",\n        vin_index=1,\n    )\n    print(\"\\nLOCK TX:\", lock_tx.serialize().hex()) \n    \n    unlock_tx = hodlhodl_tx(\n        amount=BUY_AMOUNT - TX_FEE - HHFEES_AMOUNT,\n        hhfees_amount=HHFEES_AMOUNT,\n        vin_txid=get_txid(lock_tx).hex(),\n        vin_index=0,\n    )\n    print(\"\\nUNLOCK TX:\", unlock_tx.serialize().hex())\n```\n\n<h2>Alternatives</h2>\n\nHodlHodl could use 3-of-3 multisig however that would make it custodial and users will not be able to release bitcoin from escrow in case HodlHodl goes down.\n\n<h2>Conclusion</h2>\n\nUsing OP_CHECKTEMPLATEVERIFY ensures HodlHodl gets the fee in every trade. This is a proof of concept and could be improved further.\n\n<h2>Acknowledgement</h2>\n\n- [Jeremy Rubin](https://twitter.com/JeremyRubin)\n- [HodlHodl](https://hodlhodl.com/)\n- [katsu](https://twitter.com/0x0ff_)",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 247,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}