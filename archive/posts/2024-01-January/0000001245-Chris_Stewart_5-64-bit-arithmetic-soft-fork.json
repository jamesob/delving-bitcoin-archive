{
  "id": 1245,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/letter_avatar_proxy/v4/letter/c/da6949/{size}.png",
  "created_at": "2024-01-20T13:02:17.097Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"Chris_Stewart_5\" data-post=\"29\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/c/da6949/48.png\" class=\"avatar\"> Chris_Stewart_5:</div>\n<blockquote>\n<p>I believe if your Script does not use <code>OP_PUSHDATAx</code> this holds true for <code>p2sh</code>,<code>p2wsh</code>, <code>p2trsp</code></p>\n</blockquote>\n</aside>\n<p>I\u2019m still exploring what the scope of this proposal <em>could include</em> while trying to adhere to <a href=\"https://twitter.com/Chris_Stewart_5/status/1748361651651289305\" rel=\"noopener nofollow ugc\">my rule about soft forks</a> :-). <a class=\"mention\" href=\"/u/jamesob\">@jamesob</a> got me thinking about the 2 paths forward via a DM.</p>\n<p>I\u2019m trying to decide where to draw the line between requiring all existing op codes to take 8 byte inputs (in a backwards compatible way via a <code>SigVersion</code>), or just adding these arithmetic op codes and allowing people to use the conversion op codes to \u2018cast\u2019 stack tops to the appropriate input size (<code>OP_LE64TOSCRIPTNUM</code>, <code>OP_SCRIPTNUMTOLE64</code>, <code>OP_LE32TOLE64</code>) for op codes that pre-date this soft fork proposal.</p>\n<p>This proposal currently does the latter, would like to hear others input on this to see if the juice is worth the squeeze with requiring all inputs to be 8 bytes to existing op codes (i.e. <code>OP_CLTV</code>, <code>OP_CSV</code>, <code>OP_WITHIN</code>, <code>OP_DEPTH</code>\u2026)</p>\n<p>This comment also is a bit confusing as of course legacy Scripts will not need to be rewritten (<code>p2sh</code>, <code>p2wsh</code>, <code>p2trsp</code>).</p>\n<p>If you want to upgrade to use this new proposed soft fork that require 8 byte inputs for operations such as <code>OP_CLTV</code>, this would require Script programmers to upgrade their Scripts to use the soft fork.</p>\n<p>If we don\u2019t require 8 byte inputs for anything besides the new numeric op codes (<code>OP_ADD64</code>, <code>OP_SUB64</code>, \u2026) the upgrade story is pretty easy, but we retain the 2nd encoding.</p>",
  "post_number": 32,
  "post_type": 1,
  "updated_at": "2024-01-20T13:16:16.585Z",
  "reply_count": 0,
  "reply_to_post_number": 29,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 9,
  "readers_count": 8,
  "score": 1.6,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 5,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"Chris_Stewart_5, post:29, topic:397\"]\nI believe if your Script does not use `OP_PUSHDATAx` this holds true for `p2sh`,`p2wsh`, `p2trsp`\n[/quote]\n\nI'm still exploring what the scope of this proposal _could include_ while trying to adhere to [my rule about soft forks](https://twitter.com/Chris_Stewart_5/status/1748361651651289305) :-). @jamesob got me thinking about the 2 paths forward via a DM.\n\nI'm trying to decide where to draw the line between requiring all existing op codes to take 8 byte inputs (in a backwards compatible way via a `SigVersion`), or just adding these arithmetic op codes and allowing people to use the conversion op codes to 'cast' stack tops to the appropriate input size (`OP_LE64TOSCRIPTNUM`, `OP_SCRIPTNUMTOLE64`, `OP_LE32TOLE64`) for op codes that pre-date this soft fork proposal. \n\nThis proposal currently does the latter, would like to hear others input on this to see if the juice is worth the squeeze with requiring all inputs to be 8 bytes to existing op codes (i.e. `OP_CLTV`, `OP_CSV`, `OP_WITHIN`, `OP_DEPTH`...)\n\nThis comment also is a bit confusing as of course legacy Scripts will not need to be rewritten (`p2sh`, `p2wsh`, `p2trsp`). \n\nIf you want to upgrade to use this new proposed soft fork that require 8 byte inputs for operations such as `OP_CLTV`, this would require Script programmers to upgrade their Scripts to use the soft fork. \n\nIf we don't require 8 byte inputs for anything besides the new numeric op codes (`OP_ADD64`, `OP_SUB64`, ...) the upgrade story is pretty easy, but we retain the 2nd encoding.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}