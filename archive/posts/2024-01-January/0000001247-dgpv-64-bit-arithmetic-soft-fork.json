{
  "id": 1247,
  "name": "",
  "username": "dgpv",
  "avatar_template": "/user_avatar/delvingbitcoin.org/dgpv/{size}/75_2.png",
  "created_at": "2024-01-20T14:34:48.427Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"19\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>In case you missed it, please consider: <a href=\"https://rusty.ozlabs.org/2023/12/30/arithmetic-opcodes.html\">Arithmetic Opcodes: What Could They Look Like? | Rusty Russell\u2019s Quiet Corner of The Internet </a></p>\n</blockquote>\n</aside>\n<p>I liked the ideas in that article. Dealing only with non-negative numbers might simplify some things.</p>\n<p>Also removing \u201cnormalization\u201d from LSHIFT and RSHIFT is the right thing - Elements implementations remove leading zeroes, and coupled with sign bit that is not actually considered after the shift, it makes modelling these opcodes with Z3 needlessly complex, and also normalization can introduce malleability: <code>5 LSHIFT</code> can take 0x01, 0x0100, 0x010000 with the same result.</p>\n<p>Relying on <code>__uint128_t</code> support in GCC and clang is a bit iffy\u2026 Would that mean that other compilers will be somehow discouraged ?</p>\n<p>I think there\u2019s still need for a way to easily convert to fixed-with numbers. Maybe a generic opcode that would take number of bytes, and zero-pads or truncates if necessary ? Pobably truncation should success only if zeroes are removed.</p>\n<p>For example, <code>4 FIXNUM</code> would make LE32 from the argument, <code>8 FIXNUM</code> will make LE64, <code>32 FIXNUM</code> will make a 256-bit number</p>",
  "post_number": 33,
  "post_type": 1,
  "updated_at": "2024-01-20T14:36:06.211Z",
  "reply_count": 0,
  "reply_to_post_number": 19,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 1.0,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "[quote=\"rustyrussell, post:19, topic:397\"]\nIn case you missed it, please consider: [Arithmetic Opcodes: What Could They Look Like? | Rusty Russell\u2019s Quiet Corner of The Internet ](https://rusty.ozlabs.org/2023/12/30/arithmetic-opcodes.html)\n[/quote]\n\nI liked the ideas in that article. Dealing only with non-negative numbers might simplify some things.\n\nAlso removing \"normalization\" from LSHIFT and RSHIFT is the right thing - Elements implementations remove leading zeroes, and coupled with sign bit that is not actually considered after the shift, it makes modelling these opcodes with Z3 needlessly complex, and also normalization can introduce malleability: `5 LSHIFT` can take 0x01, 0x0100, 0x010000 with the same result.\n\nRelying on `__uint128_t` support in GCC and clang is a bit iffy... Would that mean that other compilers will be somehow discouraged ?\n\nI think there's still need for a way to easily convert to fixed-with numbers. Maybe a generic opcode that would take number of bytes, and zero-pads or truncates if necessary ? Pobably truncation should success only if zeroes are removed.\n\nFor example, `4 FIXNUM` would make LE32 from the argument, `8 FIXNUM` will make LE64, `32 FIXNUM` will make a 256-bit number",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 85,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}