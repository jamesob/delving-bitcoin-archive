{
  "id": 1074,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png",
  "created_at": "2024-01-11T14:49:53.313Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"Chris_Stewart_5\" data-post=\"5\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/c/da6949/48.png\" class=\"avatar\"> Chris_Stewart_5:</div>\n<blockquote>\n<p>I don\u2019t understand this. Little endian is a pretty conventional encoding system no? I think the goal should be to remove weirdness when possible in favor of conventional number systems.</p>\n</blockquote>\n</aside>\n<p>Sure, little endian is very conventional, and it\u2019d be a reasonable choice if you\u2019re building something from scratch. But I don\u2019t think there is anything weird with the existing encoding though, it\u2019s minimal-length big endian, which for literals inside the script has the advantage of being more compact than forcing a full length constant. Moreover, it has the enormous benefit of being already implemented, tested, deployed, and in use.</p>\n<aside class=\"quote no-group\" data-username=\"Chris_Stewart_5\" data-post=\"5\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/c/da6949/48.png\" class=\"avatar\"> Chris_Stewart_5:</div>\n<blockquote>\n<p>Could you link me to more information on this so I can read about it?</p>\n</blockquote>\n</aside>\n<p>There is a <a href=\"https://github.com/bitcoin/bips/blob/deae64bfd31f6938253c05392aa355bf6d7e7605/bip-0342.mediawiki#cite_note-1\">footnote</a> in BIP324:</p>\n<blockquote>\n<p><code>OP_SUCCESSx</code> may also redefine the behavior of existing opcodes so they could work together with the new opcode. For example, if an <code>OP_SUCCESSx</code>-derived opcode works with 64-bit integers, it may also allow the existing arithmetic opcodes in the <em>same script</em> to do the same.</p>\n</blockquote>\n<p>This seems strictly better to me. It needs fewer new opcodes, doesn\u2019t require a new integer encoding, and leaves the ability to use short literals.</p>\n<aside class=\"quote no-group\" data-username=\"Chris_Stewart_5\" data-post=\"5\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/c/da6949/48.png\" class=\"avatar\"> Chris_Stewart_5:</div>\n<blockquote>\n<p>IMO, on the next witness version we should remove OP_ADD/OP_SUB/comparison ops and just force people to use 64 bit versions. That would remove confusion.</p>\n</blockquote>\n</aside>\n<p>Sorry, that\u2019s just baffling to me. You want to push the entire ecosystem to switch to a different number encoding because you think the existing one is a little strange?</p>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2024-01-11T14:54:55.887Z",
  "reply_count": 1,
  "reply_to_post_number": 5,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 6,
  "readers_count": 5,
  "score": 6.0,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"Chris_Stewart_5, post:5, topic:397\"]\nI don\u2019t understand this. Little endian is a pretty conventional encoding system no? I think the goal should be to remove weirdness when possible in favor of conventional number systems.\n[/quote]\n\nSure, little endian is very conventional, and it'd be a reasonable choice if you're building something from scratch. But I don't think there is anything weird with the existing encoding though, it's minimal-length big endian, which for literals inside the script has the advantage of being more compact than forcing a full length constant. Moreover, it has the enormous benefit of being already implemented, tested, deployed, and in use.\n\n[quote=\"Chris_Stewart_5, post:5, topic:397\"]\nCould you link me to more information on this so I can read about it?\n[/quote]\n\nThere is a [footnote](https://github.com/bitcoin/bips/blob/deae64bfd31f6938253c05392aa355bf6d7e7605/bip-0342.mediawiki#cite_note-1) in BIP324:\n\n> `OP_SUCCESSx` may also redefine the behavior of existing opcodes so they could work together with the new opcode. For example, if an `OP_SUCCESSx`-derived opcode works with 64-bit integers, it may also allow the existing arithmetic opcodes in the *same script* to do the same.\n\nThis seems strictly better to me. It needs fewer new opcodes, doesn't require a new integer encoding, and leaves the ability to use short literals.\n\n[quote=\"Chris_Stewart_5, post:5, topic:397\"]\nIMO, on the next witness version we should remove OP_ADD/OP_SUB/comparison ops and just force people to use 64 bit versions. That would remove confusion.\n[/quote]\n\nSorry, that's just baffling to me. You want to push the entire ecosystem to switch to a different number encoding because you think the existing one is a little strange?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}