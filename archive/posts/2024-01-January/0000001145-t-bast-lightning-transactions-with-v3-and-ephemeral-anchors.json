{
  "id": 1145,
  "name": "Bastien Teinturier",
  "username": "t-bast",
  "avatar_template": "/user_avatar/delvingbitcoin.org/t-bast/{size}/98_2.png",
  "created_at": "2024-01-16T17:28:44.919Z",
  "cooked": "<h1><a name=\"lightning-transactions-with-v3-and-ephemeral-anchors-1\" class=\"anchor\" href=\"#lightning-transactions-with-v3-and-ephemeral-anchors-1\"></a>Lightning transactions with v3 and ephemeral anchors</h1>\n<p>In this post, I\u2019ll detail the changes I believe we should make to lightning transactions to leverage v3 transactions and ephemeral anchors.\nSee <a href=\"https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning\">https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning</a> for details on those policy changes at the bitcoin layer.</p>\n<h2><a name=\"commitment-transaction-2\" class=\"anchor\" href=\"#commitment-transaction-2\"></a>Commitment transaction</h2>\n<p>The commitment transaction represents the current state of a lightning channel\u2019s funds, by splitting the funding amount into the various outputs of the commitment transaction.\nWhenever a change happens in the channel (HTLCs are added or removed or the feerate changes), a new commitment transaction is signed.\nThe previous commitment transaction is revoked by revealing a revocation key that allows the other peer to spend every output of that transaction.</p>\n<p>It has the following format:</p>\n<pre data-code-wrap=\"ascii\"><code class=\"lang-ascii\">+------------+\n| funding tx |\n+------------+\n      |\n      |        +-------------------+\n      +-------&gt;|    commit tx B    |\n               +-------------------+\n                  |  |  |  |  |  |  \n                  |  |  |  |  |  | A's main output\n                  |  |  |  |  |  +-----------------&gt; to A after a 1-block relative delay\n                  |  |  |  |  |\n                  |  |  |  |  |                 +---&gt; to B after a relative delay\n                  |  |  |  |  | B's main output |\n                  |  |  |  |  +-----------------+\n                  |  |  |  |                    |\n                  |  |  |  |                    +---&gt; to A immediately with revocation key\n                  |  |  |  |\n                  |  |  |  |                   +---&gt; to A with its channel funding key\n                  |  |  |  | A's anchor output |\n                  |  |  |  +-------------------+\n                  |  |  |                      |\n                  |  |  |                      +---&gt; to anyone after a 16-blocks relative delay\n                  |  |  |\n                  |  |  |                   +---&gt; to B with its channel funding key\n                  |  |  | B's anchor output |\n                  |  |  +-------------------+\n                  |  |                      |\n                  |  |                      +---&gt; to anyone after a 16-blocks relative delay\n                  |  |\n                  |  |                                              +---&gt; to B after relative delay\n                  |  |                        +-----------------+   |\n                  |  |                   +---&gt;| HTLC-timeout tx |---+\n                  |  | HTLC offered by B |    +-----------------+   |\n                  |  +-------------------+      (after timeout)     +---&gt; to A immediately with revocation key\n                  |                      |\n                  |                      +---&gt; to A with payment preimage after a 1-block relative delay\n                  |                      |\n                  |                      +---&gt; to A immediately with revocation key\n                  |\n                  |                                                     +---&gt; to B after relative delay\n                  |                            +-----------------+      |\n                  |                    +------&gt;| HTLC-success tx |------+\n                  | HTLC received by B |       +-----------------+      |\n                  +--------------------+     (with payment preimage)    +---&gt; to A immediately with revocation key\n                                       |\n                                       +---&gt; to A after timeout (absolute delay) and a 1-block relative delay\n                                       |\n                                       +---&gt; to A immediately with revocation key\n</code></pre>\n<p>Some interesting details to highlight are:</p>\n<ul>\n<li>the anchor outputs are the only outputs that don\u2019t have a CSV (except when spending a revoked commitment)</li>\n<li>the anchor outputs have a fixed amount (330 sat)</li>\n</ul>\n<p>The fees of the commitment transaction are deduced from the channel initiator\u2019s main output.\nBoth peers can agree to update the feerate and thus deduce more (or less) fees from the channel initiator\u2019s output.\nNote that this creates a strong coupling between the current on-chain fees and the funds that are available to spend off-chain, which is undesirable.</p>\n<p>There is another mechanism that increases the fees paid by the commitment transaction: pending trimmed HTLCs.\nWhen HTLCs are added that aren\u2019t economical to spend on-chain, we don\u2019t create an HTLC-offered or HTLC-received output in the commitment transaction.\nThe amount of that HTLC is instead simply deduced from the sender\u2019s main output, and temporarily allocated to mining fees.\nWhen that HTLC is resolved, its amount is either added back to the sender\u2019s main output (if failed) or added to the recipient\u2019s main output (if fulfilled).</p>\n<p>With v3 and ephemeral anchors, we could make the following changes:</p>\n<ul>\n<li>the commit tx uses v3</li>\n<li>we replace the two anchor outputs by a single ephemeral anchor output</li>\n<li>the amount of the ephemeral anchor output will be the sum of all pending trimmed HTLCs (thus potentially 0 sat)</li>\n<li>we remove the 1-block relative delay on the main outputs and HTLC outputs</li>\n<li>we remove the <code>update_fee</code> message (since commitment transactions don\u2019t pay fees anymore)</li>\n</ul>\n<p>This effectively removes the coupling between the current on-chain fees and the funds available to spend off-chain.\nThe maximum amounts that can be sent and received on a given channel are now fully deterministic.\nWe don\u2019t need hacks such as the <a href=\"https://github.com/lightning/bolts/pull/740\">fee spike buffer</a> anymore and similar edge cases disappear.\nChannel participants only need to care about on-chain fees whenever they publish a commitment transaction.</p>\n<p>Notes and caveats:</p>\n<ul>\n<li>the commitment transaction can only be published as a package, with a child transaction spending the ephemeral anchor</li>\n<li>only packages of 1-parent 1-child will be allowed initially, which prevents batching</li>\n<li>the ephemeral anchor transaction may need additional wallet inputs when broadcasting our local commitment, if the ephemeral anchor value is too low\n<ul>\n<li>those wallet inputs must be confirmed</li>\n</ul>\n</li>\n<li>but it doesn\u2019t need any wallet input when we detect a revoked commitment or the remote commitment: we can instead use one of the channel\u2019s outputs to pay the fees</li>\n</ul>\n<p>An interesting thing to note is that if the ephemeral anchor output has an amount that is greater than the current on-chain fees, miners will always have an incentive to claim it all for themselves.\nFor example Alice may publish a commitment transaction with a 50 000 sats ephemeral anchor, along with a child transaction spending the ephemeral anchor and sending 20 000 sats back to herself.\nThis package pays 30 000 sats of mining fees. But since the ephemeral anchor can be spent by anyone, miners should replace the child transaction by one that sends the funds to themselves, thus earning 50 000 sats of fees.\nThis isn\u2019t an issue, since this is already the case with lightning today: whenever a commitment transaction with pending trimmed HTLCs is broadcast, those trimmed HTLCs directly go to miners.\nNode operators decide what their <a href=\"https://github.com/lightning/bolts/pull/919\">maximum dust exposure</a> is, and it will constrain the amount of the ephemeral anchor output.</p>\n<p>The commitment transaction will then have the following format:</p>\n<pre data-code-wrap=\"ascii\"><code class=\"lang-ascii\">+------------+\n| funding tx |\n+------------+\n      |\n      |        +-----------------+\n      +-------&gt;|   commit tx B   |\n               +-----------------+\n                  |  |  |  |  |  \n                  |  |  |  |  | A's main output\n                  |  |  |  |  +-----------------&gt; to A\n                  |  |  |  |\n                  |  |  |  |                 +---&gt; to B after a relative delay\n                  |  |  |  | B's main output |\n                  |  |  |  +-----------------+\n                  |  |  |                    |\n                  |  |  |                    +---&gt; to A with revocation key\n                  |  |  |\n                  |  |  |\n                  |  |  | ephemeral anchor output\n                  |  |  +-------------------------&gt; to anyone\n                  |  |  \n                  |  |                                              +---&gt; to B after relative delay\n                  |  |                        +-----------------+   |\n                  |  |                   +---&gt;| HTLC-timeout tx |---+\n                  |  | HTLC offered by B |    +-----------------+   |\n                  |  +-------------------+      (after timeout)     +---&gt; to A with revocation key\n                  |                      |\n                  |                      +---&gt; to A with payment preimage\n                  |                      |\n                  |                      +---&gt; to A with revocation key\n                  |\n                  |                                                     +---&gt; to B after relative delay\n                  |                            +-----------------+      |\n                  |                    +------&gt;| HTLC-success tx |------+\n                  | HTLC received by B |       +-----------------+      |\n                  +--------------------+     (with payment preimage)    +---&gt; to A with revocation key\n                                       |\n                                       +---&gt; to A after timeout (absolute delay)\n                                       |\n                                       +---&gt; to A with revocation key\n</code></pre>\n<h2><a name=\"htlc-transactions-3\" class=\"anchor\" href=\"#htlc-transactions-3\"></a>HTLC transactions</h2>\n<p>When using <code>option_anchors_zero_fee_htlc_tx</code>, HTLC transactions don\u2019t pay any mining fees: they are signed with <code>SIGHASH_SINGLE | SIGHASH_ANYONECANPAY</code> to allow the broadcaster to add inputs.\nWe don\u2019t need to change this behavior, it will keep working exactly the same after changing the format of the commitment transaction.\nI don\u2019t think we should change anything for HTLC transactions, but maybe I\u2019m missing an interesting opportunity here?</p>\n<h2><a name=\"upgrade-path-4\" class=\"anchor\" href=\"#upgrade-path-4\"></a>Upgrade path</h2>\n<p>There are various proposals to upgrade channels without closing them:</p>\n<ul>\n<li><a href=\"https://github.com/lightning/bolts/pull/868\" class=\"inline-onebox\">BOLT 2: upgrade protocol on reestablish by rustyrussell \u00b7 Pull Request #868 \u00b7 lightning/bolts \u00b7 GitHub</a></li>\n<li><a href=\"https://github.com/lightning/bolts/pull/1117\" class=\"inline-onebox\">Extension/dynamic commitments by ProofOfKeags \u00b7 Pull Request #1117 \u00b7 lightning/bolts \u00b7 GitHub</a></li>\n</ul>\n<p>They have nice interactions with <a href=\"https://github.com/lightning/bolts/pull/863\">splicing</a> (which is a feature that most implementations are already working on).\nDepending on the timeline and perceived urgency of upgrading, we may wait for one of these proposals to be finalized into the spec, or create a simpler upgrade path for that specific scenario.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-01-16T17:28:44.919Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 62,
  "reads": 22,
  "readers_count": 21,
  "score": 314.4,
  "yours": false,
  "topic_id": 418,
  "topic_slug": "lightning-transactions-with-v3-and-ephemeral-anchors",
  "topic_title": "Lightning transactions with v3 and ephemeral anchors",
  "topic_html_title": "Lightning transactions with v3 and ephemeral anchors",
  "category_id": 7,
  "display_username": "Bastien Teinturier",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "# Lightning transactions with v3 and ephemeral anchors\n\nIn this post, I'll detail the changes I believe we should make to lightning transactions to leverage v3 transactions and ephemeral anchors.\nSee https://delvingbitcoin.org/t/v3-transaction-policy-for-anti-pinning for details on those policy changes at the bitcoin layer.\n\n## Commitment transaction\n\nThe commitment transaction represents the current state of a lightning channel's funds, by splitting the funding amount into the various outputs of the commitment transaction.\nWhenever a change happens in the channel (HTLCs are added or removed or the feerate changes), a new commitment transaction is signed.\nThe previous commitment transaction is revoked by revealing a revocation key that allows the other peer to spend every output of that transaction.\n\nIt has the following format:\n\n```ascii\n+------------+\n| funding tx |\n+------------+\n      |\n      |        +-------------------+\n      +------->|    commit tx B    |\n               +-------------------+\n                  |  |  |  |  |  |  \n                  |  |  |  |  |  | A's main output\n                  |  |  |  |  |  +-----------------> to A after a 1-block relative delay\n                  |  |  |  |  |\n                  |  |  |  |  |                 +---> to B after a relative delay\n                  |  |  |  |  | B's main output |\n                  |  |  |  |  +-----------------+\n                  |  |  |  |                    |\n                  |  |  |  |                    +---> to A immediately with revocation key\n                  |  |  |  |\n                  |  |  |  |                   +---> to A with its channel funding key\n                  |  |  |  | A's anchor output |\n                  |  |  |  +-------------------+\n                  |  |  |                      |\n                  |  |  |                      +---> to anyone after a 16-blocks relative delay\n                  |  |  |\n                  |  |  |                   +---> to B with its channel funding key\n                  |  |  | B's anchor output |\n                  |  |  +-------------------+\n                  |  |                      |\n                  |  |                      +---> to anyone after a 16-blocks relative delay\n                  |  |\n                  |  |                                              +---> to B after relative delay\n                  |  |                        +-----------------+   |\n                  |  |                   +--->| HTLC-timeout tx |---+\n                  |  | HTLC offered by B |    +-----------------+   |\n                  |  +-------------------+      (after timeout)     +---> to A immediately with revocation key\n                  |                      |\n                  |                      +---> to A with payment preimage after a 1-block relative delay\n                  |                      |\n                  |                      +---> to A immediately with revocation key\n                  |\n                  |                                                     +---> to B after relative delay\n                  |                            +-----------------+      |\n                  |                    +------>| HTLC-success tx |------+\n                  | HTLC received by B |       +-----------------+      |\n                  +--------------------+     (with payment preimage)    +---> to A immediately with revocation key\n                                       |\n                                       +---> to A after timeout (absolute delay) and a 1-block relative delay\n                                       |\n                                       +---> to A immediately with revocation key\n```\n\nSome interesting details to highlight are:\n\n- the anchor outputs are the only outputs that don't have a CSV (except when spending a revoked commitment)\n- the anchor outputs have a fixed amount (330 sat)\n\nThe fees of the commitment transaction are deduced from the channel initiator's main output.\nBoth peers can agree to update the feerate and thus deduce more (or less) fees from the channel initiator's output.\nNote that this creates a strong coupling between the current on-chain fees and the funds that are available to spend off-chain, which is undesirable.\n\nThere is another mechanism that increases the fees paid by the commitment transaction: pending trimmed HTLCs.\nWhen HTLCs are added that aren't economical to spend on-chain, we don't create an HTLC-offered or HTLC-received output in the commitment transaction.\nThe amount of that HTLC is instead simply deduced from the sender's main output, and temporarily allocated to mining fees.\nWhen that HTLC is resolved, its amount is either added back to the sender's main output (if failed) or added to the recipient's main output (if fulfilled).\n\nWith v3 and ephemeral anchors, we could make the following changes:\n\n- the commit tx uses v3\n- we replace the two anchor outputs by a single ephemeral anchor output\n- the amount of the ephemeral anchor output will be the sum of all pending trimmed HTLCs (thus potentially 0 sat)\n- we remove the 1-block relative delay on the main outputs and HTLC outputs\n- we remove the `update_fee` message (since commitment transactions don't pay fees anymore)\n\nThis effectively removes the coupling between the current on-chain fees and the funds available to spend off-chain.\nThe maximum amounts that can be sent and received on a given channel are now fully deterministic.\nWe don't need hacks such as the [fee spike buffer](https://github.com/lightning/bolts/pull/740) anymore and similar edge cases disappear.\nChannel participants only need to care about on-chain fees whenever they publish a commitment transaction.\n\nNotes and caveats:\n\n- the commitment transaction can only be published as a package, with a child transaction spending the ephemeral anchor\n- only packages of 1-parent 1-child will be allowed initially, which prevents batching\n- the ephemeral anchor transaction may need additional wallet inputs when broadcasting our local commitment, if the ephemeral anchor value is too low\n  - those wallet inputs must be confirmed\n- but it doesn't need any wallet input when we detect a revoked commitment or the remote commitment: we can instead use one of the channel's outputs to pay the fees\n\nAn interesting thing to note is that if the ephemeral anchor output has an amount that is greater than the current on-chain fees, miners will always have an incentive to claim it all for themselves.\nFor example Alice may publish a commitment transaction with a 50 000 sats ephemeral anchor, along with a child transaction spending the ephemeral anchor and sending 20 000 sats back to herself.\nThis package pays 30 000 sats of mining fees. But since the ephemeral anchor can be spent by anyone, miners should replace the child transaction by one that sends the funds to themselves, thus earning 50 000 sats of fees.\nThis isn't an issue, since this is already the case with lightning today: whenever a commitment transaction with pending trimmed HTLCs is broadcast, those trimmed HTLCs directly go to miners.\nNode operators decide what their [maximum dust exposure](https://github.com/lightning/bolts/pull/919) is, and it will constrain the amount of the ephemeral anchor output.\n\nThe commitment transaction will then have the following format:\n\n```ascii\n+------------+\n| funding tx |\n+------------+\n      |\n      |        +-----------------+\n      +------->|   commit tx B   |\n               +-----------------+\n                  |  |  |  |  |  \n                  |  |  |  |  | A's main output\n                  |  |  |  |  +-----------------> to A\n                  |  |  |  |\n                  |  |  |  |                 +---> to B after a relative delay\n                  |  |  |  | B's main output |\n                  |  |  |  +-----------------+\n                  |  |  |                    |\n                  |  |  |                    +---> to A with revocation key\n                  |  |  |\n                  |  |  |\n                  |  |  | ephemeral anchor output\n                  |  |  +-------------------------> to anyone\n                  |  |  \n                  |  |                                              +---> to B after relative delay\n                  |  |                        +-----------------+   |\n                  |  |                   +--->| HTLC-timeout tx |---+\n                  |  | HTLC offered by B |    +-----------------+   |\n                  |  +-------------------+      (after timeout)     +---> to A with revocation key\n                  |                      |\n                  |                      +---> to A with payment preimage\n                  |                      |\n                  |                      +---> to A with revocation key\n                  |\n                  |                                                     +---> to B after relative delay\n                  |                            +-----------------+      |\n                  |                    +------>| HTLC-success tx |------+\n                  | HTLC received by B |       +-----------------+      |\n                  +--------------------+     (with payment preimage)    +---> to A with revocation key\n                                       |\n                                       +---> to A after timeout (absolute delay)\n                                       |\n                                       +---> to A with revocation key\n```\n\n## HTLC transactions\n\nWhen using `option_anchors_zero_fee_htlc_tx`, HTLC transactions don't pay any mining fees: they are signed with `SIGHASH_SINGLE | SIGHASH_ANYONECANPAY` to allow the broadcaster to add inputs.\nWe don't need to change this behavior, it will keep working exactly the same after changing the format of the commitment transaction.\nI don't think we should change anything for HTLC transactions, but maybe I'm missing an interesting opportunity here?\n\n## Upgrade path\n\nThere are various proposals to upgrade channels without closing them:\n\n- https://github.com/lightning/bolts/pull/868\n- https://github.com/lightning/bolts/pull/1117\n\nThey have nice interactions with [splicing](https://github.com/lightning/bolts/pull/863) (which is a feature that most implementations are already working on).\nDepending on the timeline and perceived urgency of upgrading, we may wait for one of these proposals to be finalized into the spec, or create a simpler upgrade path for that specific scenario.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 101,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}