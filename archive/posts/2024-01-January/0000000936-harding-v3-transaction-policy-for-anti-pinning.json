{
  "id": 936,
  "name": "David A. Harding",
  "username": "harding",
  "avatar_template": "/user_avatar/delvingbitcoin.org/harding/{size}/6_2.png",
  "created_at": "2024-01-05T20:23:25.973Z",
  "cooked": "<p>In this post, I will attempt to show that Peter Todd\u2019s recent <a href=\"https://petertodd.org/2023/v3-transactions-review\">post</a> significantly underestimates the time to sign multiple commitment transaction fee variants.  I then directly address the concern about \u201cthe danger to decentralization\u201d of building protocols on top of CPFP; I note that a simple as-need soft fork and small change to ephemeral anchor rules makes them into a powerful tool for <em>protecting</em> decentralization in the face of CPFP-based protocols.</p>\n<h2><a name=\"different-parents-have-different-children-1\" class=\"anchor\" href=\"#different-parents-have-different-children-1\"></a>Different parents have different children</h2>\n<p>To fully spend an HTLC in LN-Penalty, you need to publish three transactions:</p>\n<ol>\n<li>\n<p>The commitment transaction.  Money is allocated to an output of the commitment transaction using an HTLC script.</p>\n</li>\n<li>\n<p>An HTLC-Success or HTLC-Timeout transaction.  These implement the classic logic of HTLCs: Alice can claim money at any time with a preimage (HTLC-Success) or Bob can receive a refund after a timeout (HTLC-timeout).</p>\n</li>\n<li>\n<p>HTLC-Penalty or delayed spend.  If either the HTLC-Success or HTLC-Timeout transaction were created in a revoked commitment transaction, these allow the party who didn\u2019t publish the revoked state to claim the full amount of the HTLC.  If the current commitment transaction was used, this is delayed by a timelock (to allow an HTLC-Penalty to be broadcast) but can otherwise be a normal spend (although with a large witness).</p>\n</li>\n</ol>\n<p>Bitcoin currently lacks <a href=\"https://bitcoinops.org/en/topics/covenants/\">covenants</a>, so the only way to ensure an HTLC-Success or HTLC-Timeout transaction pays an output with the HTLC-Penalty conditions is for the HTLC-Success and HTLC-Timeout transactions to require signatures from both parties, allowing each party to only sign payments to the HTLC-Penalty conditions.  To ensure each party can act unilaterally (a requirement for trustlessness), each party must presign their half of the spend and send it to the other party before that party accepts (relies upon) an HTLC in the commitment transaction.</p>\n<p>This means that updating an LN-Penalty commitment transaction requires sending 1 signature for the commitment transaction and 1 signature for every HTLC output of that commitment transaction.  Each party can add a maximum of 483 outputs (source: BOLT2) to a commitment transaction, for a total of <code>2*483=966</code> outputs, which is also 966 signatures.</p>\n<p>In the above-linked post, Peter Todd suggests presigning multiple versions of the commitment transaction at different feerates.  He also notes that HTLC-Success and HTLC-Timeout transactions would need to be signed at different feerates if the same technique was applied to them, resulting in N^2 signatures, although he suggests mitigations.</p>\n<p>Not <s>mentioned</s> detailed in that post is the effect of the HTLC-Success and HTLC-Timeout transactions being children of the commitment transaction.  Each different version of the commitment transaction at a different feerate has a different txid.  An HTLC-Success or HTLC-Timeout transaction will only be valid if a particular txid gets confirmed, so for every different version of the commitment transaction, a different version of the HTLC-Success and HTLC-Timeout transaction is needed.  This requires N+N*M signatures, where N is the number of commitment transaction variants and M is the number of HTLCs.</p>\n<p>The post suggests N=50 and a points to a Jonas Nick benchmark of 100us per signature (with non-controversial LN upgrades applied). BOLT2 suggests a maximum M=966, for a worst-case of 48,350 signatures that take a bit under 5 seconds to generate.  Even a single hop adding a five second delay would be a significant degradation from the performance we hope for in the <em>Lightning</em> Network.</p>\n<p>Using a more likely average M=200 and assuming 10 hops would give a minimum payment forwarding time of 12.5 seconds.</p>\n<p>This does not consider other negative consequences of massively increasing signature operations, such as the increase in bandwidth and receiver-side verification operations.</p>\n<p>If I haven\u2019t messed up my analysis, I think this implies presigned incremental fee bumping does not provide an acceptable substitute to CPFP fee bumping of LN commitment transactions in all reasonable cases.  If CPFP of commitment transactions is to continue to be used, we should encourage P2P protocol developers to improve support for it, e.g.  through package relay, package RBF, v3 relay, and ephemeral anchors.</p>\n<h2><a name=\"ephemeral-anchors-can-protect-decentralization-from-cpfp-based-protocols-2\" class=\"anchor\" href=\"#ephemeral-anchors-can-protect-decentralization-from-cpfp-based-protocols-2\"></a>Ephemeral anchors can protect decentralization from CPFP-based protocols</h2>\n<p><strong>Edit: the points in this section are undermined by later replies in the thread.  I still think there\u2019s something conceptually useful here, but this solution is broken for now.  You probably want to skip reading this.</strong></p>\n<p>In the post, Peter Todd argues:</p>\n<blockquote>\n<p>if you have an anchor-using transaction that you need to get mined, it\ncosts twice as much blockspace to get the transaction mined via the\nintended mechanism \u2014 the anchor output \u2014 as it does by getting a miner\nto include the transaction without the anchor output spend. [\u2026] a\nlarge miner could easily offer out-of-band fee payments at, say, a 25%\ndiscount, giving them a substantial 25% premium over their smaller\ncompetitors.</p>\n</blockquote>\n<p>I find this to be a compelling argument about the dangers of building protocols that depend on CPFP fee bumping.  However, ephemeral anchors are different than other forms of CPFP fee bumping in that we can easily turn their policy rules into consensus rules, plus make one small change to eliminates the advantage of out-of-band payments.</p>\n<p>The <em>policy</em> rules for ephemeral anchors are basically:</p>\n<ul>\n<li>\n<p>If a transaction pays a certain specified scriptPubKey (the parent\u2019s ephemeral anchor)</p>\n</li>\n<li>\n<p>It will only be considered policy-valid if it is packaged with a spend of that output (the child)</p>\n</li>\n</ul>\n<p>Miners following that policy will only include transactions with ephemeral anchor outputs if the same block includes the spend of that output.  As described in the post, that\u2019s just a policy rule and any miner can choose not to include the spend.</p>\n<p>However, it\u2019s easy to turn those rules into consensus rules: a block may only include a parent ephemeral anchor if it also includes the child spend.  We could also add an extra rule in the soft fork: the child spend must include at least two inputs.  That would mean the amount of block space used by someone paying miners out-of-band would be equal to the (best and expected normal case) of someone paying any miner in a decentralized fashion.  In other words, the incentive for paying out of band would be eliminated.</p>\n<p>Whether as policy or consensus, ephemeral anchors are totally opt-in, don\u2019t affect any other part of the Bitcoin protocol, don\u2019t add significant resource costs, and don\u2019t complex code or new primitives.  Implementing them as a soft fork is almost as easy a soft fork as could be.  (Forbiding 64 byte transactions is easier, but we have no excuse for not having done that yet IMO.)</p>\n<p>If we start with policy-only ephemeral anchors, then any protocol that depended on the policy version of them would continue working without changes if a soft fork activated.  Only people who expected to pay fees out of band would be affected, and they would simply have to use the CPFP method already implemented in stock software.</p>\n<p>This leads me personally to the opposite conclusion of that section of the original post.  The post says,</p>\n<blockquote>\n<p>We must not build protocols that put decentralized mining at a\ndisadvantage. On this basis alone, there is a good argument that V3\ntransactions and ephemeral anchor outputs should not be implemented.</p>\n</blockquote>\n<p>If we expect people to continue to build protocols based on CPFP fee bumping, and I think there\u2019s a compelling case for that in the previous section, then ephemeral anchors is the <strong>best</strong> way I know of to prevent a CPFP-based reduction in mining decentralization.  We should start with policy-only ephemeral anchors and, if it gains traction and we don\u2019t discover anything better, eventually switch to consensus-enforced ephemeral anchors.</p>\n<p>Edits:</p>\n<ul>\n<li>2023-01-05 13:17 HST.  Added note about soft fork ephemeral anchors not being a satisfactory solution after additional feedback.  Struck out comment that PT hadn\u2019t mentioned needing to sign N variants per HTLC; his post says, \u201cwe will have to sign N HTLC variants rather than a single variant\u201d.</li>\n</ul>",
  "post_number": 6,
  "post_type": 1,
  "updated_at": "2024-01-05T23:17:45.270Z",
  "reply_count": 3,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 10,
  "reads": 7,
  "readers_count": 6,
  "score": 66.4,
  "yours": false,
  "topic_id": 340,
  "topic_slug": "v3-transaction-policy-for-anti-pinning",
  "topic_title": "V3 transaction policy for anti-pinning",
  "topic_html_title": "V3 transaction policy for anti-pinning",
  "category_id": 7,
  "display_username": "David A. Harding",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "In this post, I will attempt to show that Peter Todd's recent [post][pt post] significantly underestimates the time to sign multiple commitment transaction fee variants.  I then directly address the concern about \"the danger to decentralization\" of building protocols on top of CPFP; I note that a simple as-need soft fork and small change to ephemeral anchor rules makes them into a powerful tool for _protecting_ decentralization in the face of CPFP-based protocols.\n\n## Different parents have different children\n\nTo fully spend an HTLC in LN-Penalty, you need to publish three transactions:\n\n1. The commitment transaction.  Money is allocated to an output of the commitment transaction using an HTLC script.\n\n2. An HTLC-Success or HTLC-Timeout transaction.  These implement the classic logic of HTLCs: Alice can claim money at any time with a preimage (HTLC-Success) or Bob can receive a refund after a timeout (HTLC-timeout).\n\n3. HTLC-Penalty or delayed spend.  If either the HTLC-Success or HTLC-Timeout transaction were created in a revoked commitment transaction, these allow the party who didn't publish the revoked state to claim the full amount of the HTLC.  If the current commitment transaction was used, this is delayed by a timelock (to allow an HTLC-Penalty to be broadcast) but can otherwise be a normal spend (although with a large witness).\n\nBitcoin currently lacks [covenants][], so the only way to ensure an HTLC-Success or HTLC-Timeout transaction pays an output with the HTLC-Penalty conditions is for the HTLC-Success and HTLC-Timeout transactions to require signatures from both parties, allowing each party to only sign payments to the HTLC-Penalty conditions.  To ensure each party can act unilaterally (a requirement for trustlessness), each party must presign their half of the spend and send it to the other party before that party accepts (relies upon) an HTLC in the commitment transaction.\n\nThis means that updating an LN-Penalty commitment transaction requires sending 1 signature for the commitment transaction and 1 signature for every HTLC output of that commitment transaction.  Each party can add a maximum of 483 outputs (source: BOLT2) to a commitment transaction, for a total of `2*483=966` outputs, which is also 966 signatures.\n\nIn the above-linked post, Peter Todd suggests presigning multiple versions of the commitment transaction at different feerates.  He also notes that HTLC-Success and HTLC-Timeout transactions would need to be signed at different feerates if the same technique was applied to them, resulting in N^2 signatures, although he suggests mitigations.\n\nNot ~~mentioned~~ detailed in that post is the effect of the HTLC-Success and HTLC-Timeout transactions being children of the commitment transaction.  Each different version of the commitment transaction at a different feerate has a different txid.  An HTLC-Success or HTLC-Timeout transaction will only be valid if a particular txid gets confirmed, so for every different version of the commitment transaction, a different version of the HTLC-Success and HTLC-Timeout transaction is needed.  This requires N+N*M signatures, where N is the number of commitment transaction variants and M is the number of HTLCs.\n\nThe post suggests N=50 and a points to a Jonas Nick benchmark of 100us per signature (with non-controversial LN upgrades applied). BOLT2 suggests a maximum M=966, for a worst-case of 48,350 signatures that take a bit under 5 seconds to generate.  Even a single hop adding a five second delay would be a significant degradation from the performance we hope for in the _Lightning_ Network.\n\nUsing a more likely average M=200 and assuming 10 hops would give a minimum payment forwarding time of 12.5 seconds.\n\nThis does not consider other negative consequences of massively increasing signature operations, such as the increase in bandwidth and receiver-side verification operations.\n\nIf I haven't messed up my analysis, I think this implies presigned incremental fee bumping does not provide an acceptable substitute to CPFP fee bumping of LN commitment transactions in all reasonable cases.  If CPFP of commitment transactions is to continue to be used, we should encourage P2P protocol developers to improve support for it, e.g.  through package relay, package RBF, v3 relay, and ephemeral anchors.\n\n## Ephemeral anchors can protect decentralization from CPFP-based protocols\n\n**Edit: the points in this section are undermined by later replies in the thread.  I still think there's something conceptually useful here, but this solution is broken for now.  You probably want to skip reading this.**\n\nIn the post, Peter Todd argues:\n\n> if you have an anchor-using transaction that you need to get mined, it\n> costs twice as much blockspace to get the transaction mined via the\n> intended mechanism \u2014 the anchor output \u2014 as it does by getting a miner\n> to include the transaction without the anchor output spend. [...] a\n> large miner could easily offer out-of-band fee payments at, say, a 25%\n> discount, giving them a substantial 25% premium over their smaller\n> competitors.\n\nI find this to be a compelling argument about the dangers of building protocols that depend on CPFP fee bumping.  However, ephemeral anchors are different than other forms of CPFP fee bumping in that we can easily turn their policy rules into consensus rules, plus make one small change to eliminates the advantage of out-of-band payments.\n\nThe _policy_ rules for ephemeral anchors are basically:\n\n- If a transaction pays a certain specified scriptPubKey (the parent's ephemeral anchor)\n\n- It will only be considered policy-valid if it is packaged with a spend of that output (the child)\n\nMiners following that policy will only include transactions with ephemeral anchor outputs if the same block includes the spend of that output.  As described in the post, that's just a policy rule and any miner can choose not to include the spend.\n\nHowever, it's easy to turn those rules into consensus rules: a block may only include a parent ephemeral anchor if it also includes the child spend.  We could also add an extra rule in the soft fork: the child spend must include at least two inputs.  That would mean the amount of block space used by someone paying miners out-of-band would be equal to the (best and expected normal case) of someone paying any miner in a decentralized fashion.  In other words, the incentive for paying out of band would be eliminated.\n\nWhether as policy or consensus, ephemeral anchors are totally opt-in, don't affect any other part of the Bitcoin protocol, don't add significant resource costs, and don't complex code or new primitives.  Implementing them as a soft fork is almost as easy a soft fork as could be.  (Forbiding 64 byte transactions is easier, but we have no excuse for not having done that yet IMO.)\n\nIf we start with policy-only ephemeral anchors, then any protocol that depended on the policy version of them would continue working without changes if a soft fork activated.  Only people who expected to pay fees out of band would be affected, and they would simply have to use the CPFP method already implemented in stock software.\n\nThis leads me personally to the opposite conclusion of that section of the original post.  The post says,\n\n> We must not build protocols that put decentralized mining at a\n> disadvantage. On this basis alone, there is a good argument that V3\n> transactions and ephemeral anchor outputs should not be implemented.\n\nIf we expect people to continue to build protocols based on CPFP fee bumping, and I think there's a compelling case for that in the previous section, then ephemeral anchors is the **best** way I know of to prevent a CPFP-based reduction in mining decentralization.  We should start with policy-only ephemeral anchors and, if it gains traction and we don't discover anything better, eventually switch to consensus-enforced ephemeral anchors.\n\nEdits:\n\n- 2023-01-05 13:17 HST.  Added note about soft fork ephemeral anchors not being a satisfactory solution after additional feedback.  Struck out comment that PT hadn't mentioned needing to sign N variants per HTLC; his post says, \"we will have to sign N HTLC variants rather than a single variant\".\n\n[pt post]: https://petertodd.org/2023/v3-transactions-review\n[covenants]: https://bitcoinops.org/en/topics/covenants/",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 6,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}