{
  "id": 1318,
  "name": "Johan T. Halseth",
  "username": "halseth",
  "avatar_template": "/user_avatar/delvingbitcoin.org/halseth/{size}/198_2.png",
  "created_at": "2024-01-23T20:36:15.253Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"Chris_Stewart_5\" data-post=\"29\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/chris_stewart_5/48/296_2.png\" class=\"avatar\"> Chris_Stewart_5:</div>\n<blockquote>\n<p>I don\u2019t think this is the case. First off - literals (<code>OP_0</code>,<code>OP_1</code>,<code>OP_2</code>\u2026) can just be re-interpreted based on sig version. That means the space they consume will remain at 1 byte, however when they are pushed onto the stack they will no longer be 1 byte - rather 8 bytes. This increases <em>memory consumption</em>, not disk space.</p>\n</blockquote>\n</aside>\n<p>I think this is only true for the 0-16 numbers. The moment you want to push &gt; 16 onto the stack, you have to add the full 8-byte representation to your script.</p>\n<p>This leads me towards thinking we should keep variable length encoding the default, as we could move to the new format without incurring extra cost.</p>\n<p>That being said, having worked with RISC-V emulation in Bitcoin Script lately (see <a href=\"https://github.com/halseth/elftrace\" rel=\"noopener nofollow ugc\">Eltrace</a>), I see a real need for the ability to get the 32/64 bit LE representation of a number during script execution. That we could easily add independently of the underlying number format (<code>OP_SCRIPTNUM[TO/FROM]LE64</code>), and perhaps give us all what we need without introducing full arithmetic support for another format.</p>\n<aside class=\"quote no-group\" data-username=\"dgpv\" data-post=\"20\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/dgpv/48/75_2.png\" class=\"avatar\"> dgpv:</div>\n<blockquote>\n<p>In complex covenants the computed values are often used to compare/combine with introspected values taken from the transaction, and the encoding of that values are usually LE64 or LE32.</p>\n</blockquote>\n</aside>\n<p>I think this is an important point. The reason we want 64-bit arithmetics in the first place is to enforce values on the next transaction, and the interesting values are indeed (AFAIK) encoded using fixed-length LE (notable exception is number of inputs/outputs).</p>\n<p>How to handle this comes down to the introspection opcodes themselves, as they can be made to put <code>ScriptNum</code> on the stack if that\u2019s what we want.</p>\n<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"19\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>In case you missed it, please consider: <a href=\"https://rusty.ozlabs.org/2023/12/30/arithmetic-opcodes.html\" rel=\"noopener nofollow ugc\">Arithmetic Opcodes: What Could They Look Like? | Rusty Russell\u2019s Quiet Corner of The Internet </a></p>\n</blockquote>\n</aside>\n<p>Thanks for this writeup, Rusty! I agree moving to unsigned-only values could simplify a lot of things, especially if the format is backwards compatible with the existing <code>ScriptNum</code> representation for positive numbers.</p>\n<p>By bumping the leaf version you could also re-use all existing opcodes (no <code>OP_ADDV</code> etc)?</p>",
  "post_number": 35,
  "post_type": 1,
  "updated_at": "2024-01-23T20:36:15.253Z",
  "reply_count": 0,
  "reply_to_post_number": 29,
  "quote_count": 3,
  "incoming_link_count": 0,
  "reads": 9,
  "readers_count": 8,
  "score": 1.8,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Johan T. Halseth",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"Chris_Stewart_5, post:29, topic:397\"]\nI don\u2019t think this is the case. First off - literals (`OP_0`,`OP_1`,`OP_2`\u2026) can just be re-interpreted based on sig version. That means the space they consume will remain at 1 byte, however when they are pushed onto the stack they will no longer be 1 byte - rather 8 bytes. This increases *memory consumption*, not disk space.\n[/quote]\n\nI think this is only true for the 0-16 numbers. The moment you want to push > 16 onto the stack, you have to add the full 8-byte representation to your script.\n\nThis leads me towards thinking we should keep variable length encoding the default, as we could move to the new format without incurring extra cost.\n\nThat being said, having worked with RISC-V emulation in Bitcoin Script lately (see [Eltrace](https://github.com/halseth/elftrace)), I see a real need for the ability to get the 32/64 bit LE representation of a number during script execution. That we could easily add independently of the underlying number format (`OP_SCRIPTNUM[TO/FROM]LE64`), and perhaps give us all what we need without introducing full arithmetic support for another format.\n\n[quote=\"dgpv, post:20, topic:397\"]\nIn complex covenants the computed values are often used to compare/combine with introspected values taken from the transaction, and the encoding of that values are usually LE64 or LE32.\n[/quote]\nI think this is an important point. The reason we want 64-bit arithmetics in the first place is to enforce values on the next transaction, and the interesting values are indeed (AFAIK) encoded using fixed-length LE (notable exception is number of inputs/outputs).\n\nHow to handle this comes down to the introspection opcodes themselves, as they can be made to put `ScriptNum` on the stack if that's what we want. \n\n[quote=\"rustyrussell, post:19, topic:397\"]\nIn case you missed it, please consider: [Arithmetic Opcodes: What Could They Look Like? | Rusty Russell\u2019s Quiet Corner of The Internet ](https://rusty.ozlabs.org/2023/12/30/arithmetic-opcodes.html)\n[/quote]\nThanks for this writeup, Rusty! I agree moving to unsigned-only values could simplify a lot of things, especially if the format is backwards compatible with the existing `ScriptNum` representation for positive numbers.\n\nBy bumping the leaf version you could also re-use all existing opcodes (no `OP_ADDV` etc)?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 163,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}