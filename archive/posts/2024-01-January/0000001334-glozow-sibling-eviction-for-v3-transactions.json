{
  "id": 1334,
  "name": "Gloria Zhao",
  "username": "glozow",
  "avatar_template": "/user_avatar/delvingbitcoin.org/glozow/{size}/261_2.png",
  "created_at": "2024-01-25T09:40:17.993Z",
  "cooked": "<p>To clarify, this would be in addition to package RBF and 1p1c package relay.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"3\" data-topic=\"472\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/3_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>I think we\u2019re using \u201csibling eviction\u201d to refer to evicting a non-conflicting tx that spends a different output from a common parent.</p>\n</blockquote>\n</aside>\n<p>Exactly. We\u2019re \u201creplacing\u201d our sibling even though we don\u2019t actually spend the same input / have a conflict with them.</p>\n<aside class=\"quote no-group\" data-username=\"ajtowns\" data-post=\"3\" data-topic=\"472\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/ajtowns/48/3_2.png\" class=\"avatar\"> ajtowns:</div>\n<blockquote>\n<p>(I guess it would be cousin eviction if it was a non-conflicting tx that shares an ancestor, or was in the same cluster?)</p>\n</blockquote>\n</aside>\n<p>Right, in v3, there\u2019s only siblings (direct child of a direct parent). We\u2019ve also talked about this for more complex topologies, where you can evict some descendant of your ancestor (I\u2019m hesitant to use family relationship terms as it starts getting a bit Game of Thronesy\u2026)</p>\n<p>(I\u2019ve edited the original post now to include a clearer definition, thanks).</p>\n<p>Going back to the \u201cimbuing existing LN commitment transactions with v3 while they aren\u2019t actually v3\u201d idea, we want to make it so that if your remote broadcasts one of the following:</p>\n<ul>\n<li>(1r) their commit + child of their anchor</li>\n<li>(2r) your commit + child of their anchor</li>\n</ul>\n<p>You are always able to CPFP by broadcasting:</p>\n<ul>\n<li>(1l) your commit + child of your anchor</li>\n<li>(2l) child of their anchor</li>\n<li>subsequent child RBF if you want to raise the fee again</li>\n</ul>\n<p>So regardless of what happens, you are always able to bump:</p>\n<ul>\n<li>(1l) can replace (1r) via package RBF</li>\n<li>(1l) can replace the (2r) child via sibling eviction</li>\n<li>(2l) can replace (1r) child via sibling eviction.</li>\n</ul>\n<p>And mempools will keep the 1-parent-1-child topology instead of needing to deal with 2 children (breaks package RBF which currently is based on 1p1c).</p>",
  "post_number": 4,
  "post_type": 1,
  "updated_at": "2024-01-25T09:45:32.410Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 23,
  "readers_count": 22,
  "score": 9.6,
  "yours": false,
  "topic_id": 472,
  "topic_slug": "sibling-eviction-for-v3-transactions",
  "topic_title": "Sibling Eviction for v3 transactions",
  "topic_html_title": "Sibling Eviction for v3 transactions",
  "category_id": 8,
  "display_username": "Gloria Zhao",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "To clarify, this would be in addition to package RBF and 1p1c package relay.\n[quote=\"ajtowns, post:3, topic:472\"]\nI think we\u2019re using \u201csibling eviction\u201d to refer to evicting a non-conflicting tx that spends a different output from a common parent.\n[/quote]\n\nExactly. We're \"replacing\" our sibling even though we don't actually spend the same input / have a conflict with them.\n\n[quote=\"ajtowns, post:3, topic:472\"]\n(I guess it would be cousin eviction if it was a non-conflicting tx that shares an ancestor, or was in the same cluster?)\n[/quote]\n\nRight, in v3, there's only siblings (direct child of a direct parent). We've also talked about this for more complex topologies, where you can evict some descendant of your ancestor (I'm hesitant to use family relationship terms as it starts getting a bit Game of Thronesy...)\n\n(I've edited the original post now to include a clearer definition, thanks).\n\nGoing back to the \"imbuing existing LN commitment transactions with v3 while they aren't actually v3\" idea, we want to make it so that if your remote broadcasts one of the following:\n* (1r) their commit + child of their anchor\n* (2r) your commit + child of their anchor\n\nYou are always able to CPFP by broadcasting:\n* (1l) your commit + child of your anchor \n* (2l) child of their anchor\n* subsequent child RBF if you want to raise the fee again\n\nSo regardless of what happens, you are always able to bump:\n* (1l) can replace (1r) via package RBF\n* (1l) can replace the (2r) child via sibling eviction\n* (2l) can replace (1r) child via sibling eviction.\n\nAnd mempools will keep the 1-parent-1-child topology instead of needing to deal with 2 children (breaks package RBF which currently is based on 1p1c).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 7,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}