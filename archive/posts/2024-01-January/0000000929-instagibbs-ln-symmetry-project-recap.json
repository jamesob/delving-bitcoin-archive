{
  "id": 929,
  "name": "Gregory Sanders",
  "username": "instagibbs",
  "avatar_template": "/user_avatar/delvingbitcoin.org/instagibbs/{size}/28_2.png",
  "created_at": "2024-01-05T17:13:05.973Z",
  "cooked": "<h1><a name=\"ln-symmetry-project-1\" class=\"anchor\" href=\"#ln-symmetry-project-1\"></a>LN-Symmetry Project</h1>\n<p>ln-symmetry started with a simple idea: Someone should take the <a href=\"https://blockstream.com/eltoo.pdf\">eltoo</a>\nidea and take it as far as possible to prove out the concept, without requiring community consensus required\nactions like softforks before proving it out.</p>\n<p>The end result is research-level quality software, with basic functional tests of the common cases:</p>\n<ol>\n<li>channel opens</li>\n<li>payments (revamped + simplified channel state machine)</li>\n<li>payments with hops</li>\n<li>unilateral closes</li>\n<li>Reconnection logic (with tests!)</li>\n</ol>\n<p>It did not implement:</p>\n<ol>\n<li>cooperative closes: There\u2019s a lot of spec work to make this better for today\u2019s channels, and it would nearly be copy-paste, so I didn\u2019t bother</li>\n<li>Proper persistence of the new keytypes/fields. In other words, if you restart your node, you\u2019ll crash. Couldn\u2019t quite figure it out</li>\n<li>anchor spending support: Rusty was working hard at the time on <code>option_anchors</code> support; rebasing everything on top now should fix this</li>\n<li>Gossip for these channels. So if you\u2019re playing around with it, you need to use them as private channels</li>\n</ol>\n<p>I also got these opens/closes <a href=\"https://mempool.space/signet/tx/9d63375a596ffd2be55624049580267ae07bf464e4d2fddc4043c7c3be79944c#vout=0\">broadcasted on signet via bitcoin-inquisition</a>:</p>\n<h1><a name=\"key-focuses-2\" class=\"anchor\" href=\"#key-focuses-2\"></a>Key Focuses</h1>\n<ol>\n<li>KISS: I felt almost too stupid to understand the current BOLTs. How much shorter and simpler can I make them with a new channel type using APO-like functionality? Answer is quite a bit, at least within BOLTs 2, 3, and 5.</li>\n<li>De-risking eltoo technical challenges: What are we missing in our handwaves of an idea? There\u2019s always something. Is that something fatal to the idea?</li>\n</ol>\n<h1><a name=\"key-takeaways-3\" class=\"anchor\" href=\"#key-takeaways-3\"></a>Key Takeaways</h1>\n<ol>\n<li>Pinning is super hard to avoid. At least 1/3 of the work I bet was designing the system to be as robust against pinning as possible. I think I completed the task, except for HTLC-Success cases which actually need to be pre-signed to be pin-resistant. It\u2019s my biggest remaining design bug I know about.</li>\n<li>eltoo-style channels have even longer than expect htlc expiry deltas to stay secure. No one had actually worked through the state machine before.</li>\n<li>Much more flexible fee management: All outputs in settlement transactions(except HTLC-Success paths as noted before) are free to spend, allowing endogenous fees from all other output cases of balance and HTLC outputs. Reduces the burden on having a utxo pool for fees to only pay maximum once per unilteral close during the \u201cchallenge\u201d period.</li>\n<li>CTV(emulation) ended up being useful! It removed the necessity of round-trips from the payment protocol, allowing for \u201cfast forwards\u201d that are extremely simple, and would likely reduce payment times if widely adopted.</li>\n<li>I\u2019m less convinced than ever that penalties are the way forward in the future. Penalties are, in practice against a competent adversary, only as large as their reserve requirements, so \u201cmake sure it works right\u201d seems to be the best deterrent. Make the expected chance of success essentially zero, and the incentive should be to collaboratively close to save fees.</li>\n</ol>\n<h1><a name=\"key-work-artifacts-4\" class=\"anchor\" href=\"#key-work-artifacts-4\"></a>Key work artifacts</h1>\n<ol>\n<li>Tons of anti-pinning research resulting in many milestones in the <a href=\"https://github.com/bitcoin/bitcoin/issues/27463\">Package Relay Project</a> including my novel invention of <a href=\"https://github.com/instagibbs/bips/blob/d33cdbd0777700f4fc488d54b90a8795d2c33639/bip-ephemeralanchors.mediawiki\">Ephemeral Anchors</a> which builds on top of \u201cV3\u201d concept.</li>\n<li>CLN implementation here: <a href=\"https://github.com/instagibbs/lightning/tree/eltoo_support\" class=\"inline-onebox\">GitHub - instagibbs/lightning at eltoo_support</a></li>\n<li>Bitcoin Core branch with necessary changes for CLN blackbox tests: <a href=\"https://github.com/instagibbs/bitcoin/tree/202207-anyprevout\" class=\"inline-onebox\">GitHub - instagibbs/bitcoin at 202207-anyprevout</a> (though this has non-segwit version of ephemeral anchors)</li>\n<li>or maybe <a href=\"https://github.com/bitcoin-inquisition/bitcoin/releases/tag/v25.1-inq\" class=\"inline-onebox\">Release Bitcoin Inquisition 25.1 \u00b7 bitcoin-inquisition/bitcoin \u00b7 GitHub</a></li>\n<li>BOLT draft for ln-symmetry(with segwit ephemeral anchors): <a href=\"https://github.com/instagibbs/bolts/tree/eltoo_draft\" class=\"inline-onebox\">GitHub - instagibbs/bolts at eltoo_draft</a></li>\n<li>libwally work to support taprooty CLN changes(chunks of this was upstreamed but not all): <a href=\"https://github.com/instagibbs/libwally-core/tree/taproot\" class=\"inline-onebox\">GitHub - instagibbs/libwally-core at taproot</a></li>\n<li>Notes on PTLCs, where eltoo-style channels get trivial fast-forwards still(aka APO-style fork fixes this): <a href=\"https://gist.github.com/instagibbs/1d02d0251640c250ceea1c66665ec163#single-sig-adaptor-ln-symmetry\" class=\"inline-onebox\">PTLCs for LN \u00b7 GitHub</a></li>\n<li>Backporting anti-pin tech to today\u2019s BOLTs with proposed Bitcoin Core policy changes only: <a href=\"https://github.com/instagibbs/bolts/commits/zero_fee_commitment\" class=\"inline-onebox\">Commits \u00b7 instagibbs/bolts \u00b7 GitHub</a></li>\n</ol>\n<h1><a name=\"current-status-5\" class=\"anchor\" href=\"#current-status-5\"></a>Current Status</h1>\n<p>On hold while I focus on the mempool side of things. I hope this work helps derisk conversations about future softforks and channel designs.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-01-05T18:03:45.164Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 68,
  "reads": 13,
  "readers_count": 12,
  "score": 347.6,
  "yours": false,
  "topic_id": 359,
  "topic_slug": "ln-symmetry-project-recap",
  "topic_title": "LN-Symmetry Project Recap",
  "topic_html_title": "LN-Symmetry Project Recap",
  "category_id": 7,
  "display_username": "Gregory Sanders",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "# LN-Symmetry Project\n\nln-symmetry started with a simple idea: Someone should take the [eltoo](https://blockstream.com/eltoo.pdf)\nidea and take it as far as possible to prove out the concept, without requiring community consensus required\nactions like softforks before proving it out.\n\nThe end result is research-level quality software, with basic functional tests of the common cases:\n1) channel opens\n2) payments (revamped + simplified channel state machine)\n3) payments with hops \n4) unilateral closes\n5) Reconnection logic (with tests!)\n\nIt did not implement:\n1) cooperative closes: There's a lot of spec work to make this better for today's channels, and it would nearly be copy-paste, so I didn't bother\n2) Proper persistence of the new keytypes/fields. In other words, if you restart your node, you'll crash. Couldn't quite figure it out\n3) anchor spending support: Rusty was working hard at the time on `option_anchors` support; rebasing everything on top now should fix this\n4) Gossip for these channels. So if you're playing around with it, you need to use them as private channels\n\nI also got these opens/closes [broadcasted on signet via bitcoin-inquisition](https://mempool.space/signet/tx/9d63375a596ffd2be55624049580267ae07bf464e4d2fddc4043c7c3be79944c#vout=0):\n\n\n# Key Focuses\n\n1) KISS: I felt almost too stupid to understand the current BOLTs. How much shorter and simpler can I make them with a new channel type using APO-like functionality? Answer is quite a bit, at least within BOLTs 2, 3, and 5.\n3) De-risking eltoo technical challenges: What are we missing in our handwaves of an idea? There's always something. Is that something fatal to the idea?\n\n# Key Takeaways\n\n1) Pinning is super hard to avoid. At least 1/3 of the work I bet was designing the system to be as robust against pinning as possible. I think I completed the task, except for HTLC-Success cases which actually need to be pre-signed to be pin-resistant. It's my biggest remaining design bug I know about.\n2) eltoo-style channels have even longer than expect htlc expiry deltas to stay secure. No one had actually worked through the state machine before.\n3) Much more flexible fee management: All outputs in settlement transactions(except HTLC-Success paths as noted before) are free to spend, allowing endogenous fees from all other output cases of balance and HTLC outputs. Reduces the burden on having a utxo pool for fees to only pay maximum once per unilteral close during the \"challenge\" period.\n4) CTV(emulation) ended up being useful! It removed the necessity of round-trips from the payment protocol, allowing for \"fast forwards\" that are extremely simple, and would likely reduce payment times if widely adopted. \n5) I'm less convinced than ever that penalties are the way forward in the future. Penalties are, in practice against a competent adversary, only as large as their reserve requirements, so \"make sure it works right\" seems to be the best deterrent. Make the expected chance of success essentially zero, and the incentive should be to collaboratively close to save fees.\n\n# Key work artifacts\n\n1) Tons of anti-pinning research resulting in many milestones in the [Package Relay Project](https://github.com/bitcoin/bitcoin/issues/27463) including my novel invention of [Ephemeral Anchors](https://github.com/instagibbs/bips/blob/d33cdbd0777700f4fc488d54b90a8795d2c33639/bip-ephemeralanchors.mediawiki) which builds on top of \"V3\" concept.\n2) CLN implementation here: https://github.com/instagibbs/lightning/tree/eltoo_support\n3) Bitcoin Core branch with necessary changes for CLN blackbox tests: https://github.com/instagibbs/bitcoin/tree/202207-anyprevout (though this has non-segwit version of ephemeral anchors)\n4) or maybe https://github.com/bitcoin-inquisition/bitcoin/releases/tag/v25.1-inq\n5) BOLT draft for ln-symmetry(with segwit ephemeral anchors): https://github.com/instagibbs/bolts/tree/eltoo_draft\n6) libwally work to support taprooty CLN changes(chunks of this was upstreamed but not all): https://github.com/instagibbs/libwally-core/tree/taproot\n7) Notes on PTLCs, where eltoo-style channels get trivial fast-forwards still(aka APO-style fork fixes this): https://gist.github.com/instagibbs/1d02d0251640c250ceea1c66665ec163#single-sig-adaptor-ln-symmetry\n8) Backporting anti-pin tech to today's BOLTs with proposed Bitcoin Core policy changes only: https://github.com/instagibbs/bolts/commits/zero_fee_commitment\n\n# Current Status\nOn hold while I focus on the mempool side of things. I hope this work helps derisk conversations about future softforks and channel designs.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 31,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "rocket",
      "type": "emoji",
      "count": 4
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 4,
  "current_user_used_main_reaction": false
}