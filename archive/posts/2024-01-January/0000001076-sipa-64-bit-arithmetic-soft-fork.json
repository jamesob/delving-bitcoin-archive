{
  "id": 1076,
  "name": "Pieter Wuille",
  "username": "sipa",
  "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png",
  "created_at": "2024-01-11T15:21:11.591Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"Chris_Stewart_5\" data-post=\"7\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/c/da6949/48.png\" class=\"avatar\"> Chris_Stewart_5:</div>\n<blockquote>\n<p>You are skeptical of a new encoding - strict 64 bit little endian requirements that would increase witness sizes rather than requiring minimal encoding (I believe <code>fRequireMinimal</code> is the flag in <code>interpreter.cpp</code>). You also don\u2019t want to create more confusion by switching from BE \u2192 LE.</p>\n</blockquote>\n</aside>\n<p>Yes. I also think it\u2019s better not to encroach too much on available opcode space.</p>\n<aside class=\"quote no-group\" data-username=\"Chris_Stewart_5\" data-post=\"7\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/c/da6949/48.png\" class=\"avatar\"> Chris_Stewart_5:</div>\n<blockquote>\n<p>IIUC - you are NOT skeptical about expanding arithmetic support from 51 bit support to 64 bit support.</p>\n</blockquote>\n</aside>\n<p>Eh, current script arithmetic opcodes are limited to 4-byte inputs, which means 32 bits signed integers.</p>\n<p>I have no comment on whether we should pursue changing that.</p>\n<aside class=\"quote no-group\" data-username=\"Chris_Stewart_5\" data-post=\"7\" data-topic=\"397\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/c/da6949/48.png\" class=\"avatar\"> Chris_Stewart_5:</div>\n<blockquote>\n<p>How would this be deployed with existing v1 tapscripts if we redefine the semantics of the arithmetic op codes? Wouldn\u2019t this run into issues of potentially breaking Scripts already deployed with v1?</p>\n</blockquote>\n</aside>\n<p>One possibility is having an <code>OP_ENABLE64BIT</code>, which has no effect on the stack when executed, but its presence in a script makes all arithmetic opcodes accept up to 8-byte inputs for example. This will not affect any existing scripts because existing scripts don\u2019t have <code>OP_ENABLE64BIT</code> in them. It has the advantage of, even if <code>OP_ENABLE64BIT</code> is present, not changing semantics of <em>valid</em> existing scripts. And it is softfork-safe because the mere presence (not even execution) of <code>OP_ENABLE64BIT</code> makes a script anyone-can-spend according to the existing consensus rules.</p>\n<p>Alternatively, a new taproot leaf version could be used too. That\u2019s even more compact.</p>",
  "post_number": 8,
  "post_type": 1,
  "updated_at": "2024-01-11T15:23:39.480Z",
  "reply_count": 0,
  "reply_to_post_number": 7,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 4,
  "readers_count": 3,
  "score": 0.4,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Pieter Wuille",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"Chris_Stewart_5, post:7, topic:397\"]\nYou are skeptical of a new encoding - strict 64 bit little endian requirements that would increase witness sizes rather than requiring minimal encoding (I believe `fRequireMinimal` is the flag in `interpreter.cpp`). You also don\u2019t want to create more confusion by switching from BE \u2192 LE.\n[/quote]\n\nYes. I also think it's better not to encroach too much on available opcode space.\n\n[quote=\"Chris_Stewart_5, post:7, topic:397\"]\nIIUC - you are NOT skeptical about expanding arithmetic support from 51 bit support to 64 bit support.\n[/quote]\n\nEh, current script arithmetic opcodes are limited to 4-byte inputs, which means 32 bits signed integers.\n\nI have no comment on whether we should pursue changing that.\n\n[quote=\"Chris_Stewart_5, post:7, topic:397\"]\nHow would this be deployed with existing v1 tapscripts if we redefine the semantics of the arithmetic op codes? Wouldn\u2019t this run into issues of potentially breaking Scripts already deployed with v1?\n[/quote]\n\nOne possibility is having an `OP_ENABLE64BIT`, which has no effect on the stack when executed, but its presence in a script makes all arithmetic opcodes accept up to 8-byte inputs for example. This will not affect any existing scripts because existing scripts don't have `OP_ENABLE64BIT` in them. It has the advantage of, even if `OP_ENABLE64BIT` is present, not changing semantics of *valid* existing scripts. And it is softfork-safe because the mere presence (not even execution) of `OP_ENABLE64BIT` makes a script anyone-can-spend according to the existing consensus rules.\n\nAlternatively, a new taproot leaf version could be used too. That's even more compact.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 96,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}