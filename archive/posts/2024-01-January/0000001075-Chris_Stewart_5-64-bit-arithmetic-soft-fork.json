{
  "id": 1075,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/letter_avatar_proxy/v4/letter/c/da6949/{size}.png",
  "created_at": "2024-01-11T15:08:42.326Z",
  "cooked": "<p>ok just to make sure I understand your concerns</p>\n<ol>\n<li>You are skeptical of a new encoding - strict 64 bit little endian requirements that would increase witness sizes rather than requiring minimal encoding (I believe <code>fRequireMinimal</code> is the flag in <code>interpreter.cpp</code>). You also don\u2019t want to create more confusion by switching from BE \u2192 LE.</li>\n<li>IIUC - you are NOT skeptical about expanding arithmetic support from 51 bit support to 64 bit support.</li>\n</ol>\n<blockquote>\n<p><code>OP_SUCCESSx</code> may also redefine the behavior of existing opcodes so they could work together with the new opcode. For example, if an <code>OP_SUCCESSx</code>-derived opcode works with 64-bit integers, it may also allow the existing arithmetic opcodes in the <em>same script</em> to do the same.</p>\n</blockquote>\n<p>How would this be deployed with existing v1 tapscripts if we redefine the semantics of the arithmetic op codes? Wouldn\u2019t this run into issues of potentially breaking Scripts already deployed with v1?</p>\n<p>I understand that OP_SUCCESSx was intended to allow state modification of the stack, I just don\u2019t get the compatibility story with existing v1 Scripts.</p>",
  "post_number": 7,
  "post_type": 1,
  "updated_at": "2024-01-11T15:08:42.326Z",
  "reply_count": 1,
  "reply_to_post_number": 6,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 17,
  "readers_count": 16,
  "score": 8.2,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "sipa",
    "name": "Pieter Wuille",
    "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/102_2.png"
  },
  "bookmarked": false,
  "raw": "ok just to make sure I understand your concerns\n\n1. You are skeptical of a new encoding - strict 64 bit little endian requirements that would increase witness sizes rather than requiring minimal encoding (I believe `fRequireMinimal` is the flag in `interpreter.cpp`). You also don't want to create more confusion by switching from BE -> LE.\n2. IIUC - you are NOT skeptical about expanding arithmetic support from 51 bit support to 64 bit support.\n\n> `OP_SUCCESSx` may also redefine the behavior of existing opcodes so they could work together with the new opcode. For example, if an `OP_SUCCESSx`-derived opcode works with 64-bit integers, it may also allow the existing arithmetic opcodes in the *same script* to do the same.\n\nHow would this be deployed with existing v1 tapscripts if we redefine the semantics of the arithmetic op codes? Wouldn't this run into issues of potentially breaking Scripts already deployed with v1? \n\nI understand that OP_SUCCESSx was intended to allow state modification of the stack, I just don't get the compatibility story with existing v1 Scripts.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}