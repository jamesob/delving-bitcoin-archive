{
  "id": 1154,
  "name": "Bastien Teinturier",
  "username": "t-bast",
  "avatar_template": "/user_avatar/delvingbitcoin.org/t-bast/{size}/98_2.png",
  "created_at": "2024-01-17T09:58:32.274Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"instagibbs\" data-post=\"2\" data-topic=\"418\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/instagibbs/48/28_2.png\" class=\"avatar\"> instagibbs:</div>\n<blockquote>\n<ol start=\"2\">\n<li>Imbue LN commit txs with two anchors with \u201cimplicit signaling\u201d of V3\na) Anything with <em>two 330-sat outputs</em>?</li>\n</ol>\n</blockquote>\n</aside>\n<p>Why can\u2019t you pattern match to apply the v3 rules <em>when an anchor output is spent</em> instead of trying to pattern match when seeing the commit tx alone?\nThis way you can explicitly match on the very specific anchor output script when it spends a 330 sat output:</p>\n<p><code>&lt;some_public_key&gt; OP_CHECKSIG OP_IFDUP OP_NOTIF OP_16 OP_CSV OP_ENDIF</code></p>\n<p>Since every other output has a CSV-1, the commit tx can only be spent through one of the anchors, so that should work easily, unless I\u2019m missing something?</p>\n<p>The only drawback I\u2019m seeing with that pattern-matching option is that LN implementations that currently do batching (spend multiple anchor outputs of unrelated channels in a single transaction) would have their anchor spend rejected by upgraded nodes, right? So LN implementations should first disable that batching code to avoid being negatively impacted, but apart from that I\u2019m not seeing any drawback to this implicit v3 rules application.</p>\n<p>One thing to note is that this kind of batching is inherently dangerous, so I don\u2019t mind that restriction (and haven\u2019t implemented it in eclair because of those security drawbacks), but I believe lnd does it so maybe <a class=\"mention\" href=\"/u/roasbeef\">@roasbeef</a> would be opposed to that?</p>\n<aside class=\"quote no-group\" data-username=\"instagibbs\" data-post=\"2\" data-topic=\"418\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/instagibbs/48/28_2.png\" class=\"avatar\"> instagibbs:</div>\n<blockquote>\n<p>We would also like feedback on what the maximal V3 child size should be. It\u2019s an inherent tradeoff between practical CPFP tx sizes and potential pin vectors, so it\u2019d be nice to know what expectations are around that from any wallet project.</p>\n</blockquote>\n</aside>\n<p>This is really hard to say, because it is very tightly correlated with the maximum size of the commitment transactions we allow. When allowing 483 HTLCs in both direction, we may need to pay a very large fee even at low feerate, thus requiring big-ish wallet inputs or multiple wallet inputs. However, with more restrictions on the commit tx size (such as eclair only allowing 30 HTLCs in both directions), the amounts are much lower and easier to satisfy with few inputs.</p>\n<p>Lightning nodes need to maintain a \u201chealthy\u201d utxo pool anyway to minimize their operational costs, so I guess this is just another parameter to take into account in the utxo pool management, so we should rather just pick \u201creasonable\u201d values to the maximum v3 child size (and the current bikeshed values seem \u201creasonable\u201d to me) and it\u2019s the job of the lightning implementation to make sure they have a wallet state that fits with that.</p>",
  "post_number": 4,
  "post_type": 1,
  "posts_count": 23,
  "updated_at": "2024-01-17T09:58:32.274Z",
  "reply_count": 1,
  "reply_to_post_number": 2,
  "quote_count": 1,
  "incoming_link_count": 1,
  "reads": 57,
  "readers_count": 56,
  "score": 21.4,
  "yours": false,
  "topic_id": 418,
  "topic_slug": "lightning-transactions-with-v3-and-ephemeral-anchors",
  "topic_title": "Lightning transactions with v3 and ephemeral anchors",
  "topic_html_title": "Lightning transactions with v3 and ephemeral anchors",
  "category_id": 7,
  "display_username": "Bastien Teinturier",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"instagibbs, post:2, topic:418\"]\n2. Imbue LN commit txs with two anchors with \u201cimplicit signaling\u201d of V3\na) Anything with *two 330-sat outputs*?\n[/quote]\n\nWhy can't you pattern match to apply the v3 rules *when an anchor output is spent* instead of trying to pattern match when seeing the commit tx alone?\nThis way you can explicitly match on the very specific anchor output script when it spends a 330 sat output:\n\n`<some_public_key> OP_CHECKSIG OP_IFDUP OP_NOTIF OP_16 OP_CSV OP_ENDIF`\n\nSince every other output has a CSV-1, the commit tx can only be spent through one of the anchors, so that should work easily, unless I'm missing something?\n\nThe only drawback I'm seeing with that pattern-matching option is that LN implementations that currently do batching (spend multiple anchor outputs of unrelated channels in a single transaction) would have their anchor spend rejected by upgraded nodes, right? So LN implementations should first disable that batching code to avoid being negatively impacted, but apart from that I'm not seeing any drawback to this implicit v3 rules application.\n\nOne thing to note is that this kind of batching is inherently dangerous, so I don't mind that restriction (and haven't implemented it in eclair because of those security drawbacks), but I believe lnd does it so maybe @roasbeef would be opposed to that?\n\n[quote=\"instagibbs, post:2, topic:418\"]\nWe would also like feedback on what the maximal V3 child size should be. It\u2019s an inherent tradeoff between practical CPFP tx sizes and potential pin vectors, so it\u2019d be nice to know what expectations are around that from any wallet project.\n[/quote]\n\nThis is really hard to say, because it is very tightly correlated with the maximum size of the commitment transactions we allow. When allowing 483 HTLCs in both direction, we may need to pay a very large fee even at low feerate, thus requiring big-ish wallet inputs or multiple wallet inputs. However, with more restrictions on the commit tx size (such as eclair only allowing 30 HTLCs in both directions), the amounts are much lower and easier to satisfy with few inputs.\n\nLightning nodes need to maintain a \"healthy\" utxo pool anyway to minimize their operational costs, so I guess this is just another parameter to take into account in the utxo pool management, so we should rather just pick \"reasonable\" values to the maximum v3 child size (and the current bikeshed values seem \"reasonable\" to me) and it's the job of the lightning implementation to make sure they have a wallet state that fits with that.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 101,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Why can\u2019t you pattern match to apply the v3 rules when an anchor output is spent instead of trying to pattern match when seeing the commit tx alone?\nThis way you can explicitly match on the very specific anchor output script when it spends a 330 sat output: \n&lt;some_public_key&gt; OP_CHECKSIG OP_IFDUP O&hellip;",
  "truncated": true,
  "post_url": "/t/lightning-transactions-with-v3-and-ephemeral-anchors/418/4",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}