{
  "id": 1228,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/letter_avatar_proxy/v4/letter/c/da6949/{size}.png",
  "created_at": "2024-01-19T19:59:40.096Z",
  "cooked": "<blockquote>\n<p>I think it would be a (potentially big) waste of chainspace to move from minimally encoded numbers to fixed-length 64 bit numbers</p>\n</blockquote>\n<p>I don\u2019t think this is the case. First off - literals (<code>OP_0</code>,<code>OP_1</code>,<code>OP_2</code>\u2026) can just be re-interpreted based on sig version. That means the space they consume will remain at 1 byte, however when they are pushed onto the stack they will no longer be 1 byte - rather 8 bytes. This increases <em>memory consumption</em>, not disk space.</p>\n<p>EDIT: Found a bug in my results of historical scanning of the blockchain, will come back and update this section after my bug is fixed and my results are accurate.</p>\n<p>We can speculate what future blockchain usage patterns will look like, but lets be honest that is just speculation.</p>\n<blockquote>\n<p>but they\u2019re there for a reason!</p>\n</blockquote>\n<p>Yes! They are. But not for the reason you mentioned.</p>\n<p>Lets examine the ill fated <a href=\"https://github.com/bitcoin/bips/blob/deae64bfd31f6938253c05392aa355bf6d7e7605/bip-0062.mediawiki#user-content-Number\" rel=\"noopener nofollow ugc\">BIP62</a>. BIP62 was <em>intended to solve transaction malleability</em>, not optimizing for disk space.</p>\n<p>Wrt to script numbers:</p>\n<blockquote>\n<p><strong>Zero-padded number pushes</strong> Any time a script opcode consumes a stack value that is interpreted as a number, it must be encoded in its shortest possible form. \u2018Negative zero\u2019 is not allowed. See reference: <a href=\"https://github.com/bitcoin/bips/blob/deae64bfd31f6938253c05392aa355bf6d7e7605/bip-0062.mediawiki#numbers\" rel=\"noopener nofollow ugc\">Numbers</a>.</p>\n</blockquote>\n<p>This is meant to solve malleability that was occurring on the network that would cause bitcoin businesses to lose track of withdrawals from their business (IIUC - MtGox suffered from this, again why i\u2019m suspicious of my results).</p>\n<p>If we <a href=\"https://github.com/bitcoin/bitcoin/commit/698c6abb25c1fbbc7fa4ba46b60e9f17d97332ef\" rel=\"noopener nofollow ugc\">examine the commit</a> that introduced the <code>fRequireMinimal</code> flag in the interpreter, it specifically cites BIP62 rule <span class=\"hashtag-raw\">#3</span> and <span class=\"hashtag-raw\">#4</span> as for the reasoning for introducing it. It does not cite disk space usage.</p>\n<p>As a by product of this proposed change, I actually believe we could potentially simplify <code>interpreter.cpp</code> for future soft forks by removing the need for <code>SCRIPT_VERIFY_MINIMALDATA</code> - how great is that?! Admittedly, this proposal does not cover encoding for push operations. I\u2019m going to research expanding this proposal to cover these to see what effects it would have.</p>\n<p>I\u2019m also suspicious that the only reason we have <code>CScriptNum</code> is because it wrapped the openSSL number implementation. I\u2019ve tried to track this down on github history to verify, but i\u2019m unable to. Perhaps an OG can comment on this to see if this is correct. <a href=\"https://github.com/bitcoin/bitcoin/commits/7cd0af7cc222d0694ce72e71458aef460698ee2c/src/bignum.h?browsing_rename_history=true&amp;new_path=src/test/bignum.h&amp;original_branch=2b2ddc558e1cddb5ff54fd2d9e375793021a908e\" rel=\"noopener nofollow ugc\">Here is as far as I got in github archaeology</a></p>\n<blockquote>\n<p>The only thing worse than dealing with one weird encoding is having to implement another one alongside it.</p>\n</blockquote>\n<p>Yes, so why are you advocating for keeping the 2nd (arguably 3rd, if you count <code>CompactSize</code> ints) format? I\u2019m advocating for consolidating to a single format. As it exists today, we have two number encodings in the bitcoin protocol. The traditional int64_t one (which satoshi values are encoded in, and is of interest for a lot of BIP proposals) and our exotic one.</p>\n<p>It is my understanding we were given the 2nd format by satoshi (I haven\u2019t got to the bottom of this myself to confirm this) and have had to modify it multiple times to remove malleability.</p>\n<blockquote>\n<p><code>CScriptNum</code> parsing will probably always be a part of wallet software, if not just to validate legacy scripts.</p>\n</blockquote>\n<p>I think \u2018validate\u2019 is a bit of a strong word as I\u2019m not aware of a lot of external implementations of <code>interpreter.cpp</code> (although there are a few! <a href=\"https://github.com/bitcoin-s/bitcoin-s/blob/e6ceda44f2ab54d3cc9cfd45303010ed6e95660a/core/src/main/scala/org/bitcoins/core/script/interpreter/ScriptInterpreter.scala\" rel=\"noopener nofollow ugc\">bitcoin-s has one</a>), but they definitely need to be able to build Scripts for their wallet software to receive/withdraw funds.</p>\n<p>I don\u2019t think this proposal would affect wallets that do standard signing logic (<code>p2pkh</code>, <code>p2wpkh</code>, <code>p2trkp</code>). I believe if your Script does not use <code>OP_PUSHDATAx</code> this holds true for <code>p2sh</code>,<code>p2wsh</code>, <code>p2trsp</code>, although I would like others to think about this make sure my mental model is correct. <code>OP_PUSHDATAx</code> is a relatively infrequent opcode, so I suspect that there isn\u2019t wide usage of these (although I haven\u2019t looked too much into the NFT world, where it might make sense to use <code>OP_PUSHDATAx</code>)</p>\n<p>My view is that we should move away from exotic things like this in the bitcoin protocol in favor of standard encodings in the rest of the software ecosystem. While there will be an adjustment period, in 10 years people would look back on these changes say \u2018remember when you had a numbering system in bitcoin\u2019s programming language that was <em>different</em> than other protocol number representations? What a nightmare! Glad someone decided to consolidate that.\u2019</p>\n<p>Lets relegate this numbering system to a fun historical fact best talked about over a <img src=\"https://delvingbitcoin.org/images/emoji/twitter/beer.png?v=12\" title=\":beer:\" class=\"emoji\" alt=\":beer:\" loading=\"lazy\" width=\"20\" height=\"20\"> to establish your OG cred <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slightly_smiling_face.png?v=12\" title=\":slightly_smiling_face:\" class=\"emoji\" alt=\":slightly_smiling_face:\" loading=\"lazy\" width=\"20\" height=\"20\">.</p>",
  "post_number": 29,
  "post_type": 1,
  "updated_at": "2024-01-19T21:27:03.245Z",
  "reply_count": 1,
  "reply_to_post_number": 27,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 9,
  "readers_count": 8,
  "score": 1.6,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 6,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "jamesob",
    "name": "James O'Beirne",
    "avatar_template": "/user_avatar/delvingbitcoin.org/jamesob/{size}/271_2.png"
  },
  "bookmarked": false,
  "raw": "> I think it would be a (potentially big) waste of chainspace to move from minimally encoded numbers to fixed-length 64 bit numbers\n\nI don't think this is the case. First off - literals (`OP_0`,`OP_1`,`OP_2`..) can just be re-interpreted based on sig version. That means the space they consume will remain at 1 byte, however when they are pushed onto the stack they will no longer be 1 byte - rather 8 bytes. This increases _memory consumption_, not disk space.\n\nEDIT: Found a bug in my results of historical scanning of the blockchain, will come back and update this section after my bug is fixed and my results are accurate.\n\nWe can speculate what future blockchain usage patterns will look like, but lets be honest that is just speculation.\n\n>but they\u2019re there for a reason!\n\nYes! They are. But not for the reason you mentioned. \n\nLets examine the ill fated [BIP62](https://github.com/bitcoin/bips/blob/deae64bfd31f6938253c05392aa355bf6d7e7605/bip-0062.mediawiki#user-content-Number). BIP62 was _intended to solve transaction malleability_, not optimizing for disk space.\n\nWrt to script numbers:\n\n> **Zero-padded number pushes** Any time a script opcode consumes a stack value that is interpreted as a number, it must be encoded in its shortest possible form. 'Negative zero' is not allowed. See reference: [Numbers](https://github.com/bitcoin/bips/blob/deae64bfd31f6938253c05392aa355bf6d7e7605/bip-0062.mediawiki#numbers).\n\nThis is meant to solve malleability that was occurring on the network that would cause bitcoin businesses to lose track of withdrawals from their business (IIUC - MtGox suffered from this, again why i'm suspicious of my results).\n\nIf we [examine the commit](https://github.com/bitcoin/bitcoin/commit/698c6abb25c1fbbc7fa4ba46b60e9f17d97332ef) that introduced the `fRequireMinimal` flag in the interpreter, it specifically cites BIP62 rule #3 and #4 as for the reasoning for introducing it. It does not cite disk space usage.\n\nAs a by product of this proposed change, I actually believe we could potentially simplify `interpreter.cpp` for future soft forks by removing the need for `SCRIPT_VERIFY_MINIMALDATA` - how great is that?! Admittedly, this proposal does not cover encoding for push operations. I'm going to research expanding this proposal to cover these to see what effects it would have.\n\nI'm also suspicious that the only reason we have `CScriptNum` is because it wrapped the openSSL number implementation. I've tried to track this down on github history to verify, but i'm unable to. Perhaps an OG can comment on this to see if this is correct. [Here is as far as I got in github archaeology](https://github.com/bitcoin/bitcoin/commits/7cd0af7cc222d0694ce72e71458aef460698ee2c/src/bignum.h?browsing_rename_history=true&new_path=src/test/bignum.h&original_branch=2b2ddc558e1cddb5ff54fd2d9e375793021a908e)\n\n> The only thing worse than dealing with one weird encoding is having to implement another one alongside it.\n\nYes, so why are you advocating for keeping the 2nd (arguably 3rd, if you count `CompactSize` ints) format? I'm advocating for consolidating to a single format. As it exists today, we have two number encodings in the bitcoin protocol. The traditional int64_t one (which satoshi values are encoded in, and is of interest for a lot of BIP proposals) and our exotic one.\n\nIt is my understanding we were given the 2nd format by satoshi (I haven't got to the bottom of this myself to confirm this) and have had to modify it multiple times to remove malleability.\n\n>`CScriptNum` parsing will probably always be a part of wallet software, if not just to validate legacy scripts.\n\nI think 'validate' is a bit of a strong word as I'm not aware of a lot of external implementations of `interpreter.cpp` (although there are a few! [bitcoin-s has one](https://github.com/bitcoin-s/bitcoin-s/blob/e6ceda44f2ab54d3cc9cfd45303010ed6e95660a/core/src/main/scala/org/bitcoins/core/script/interpreter/ScriptInterpreter.scala)), but they definitely need to be able to build Scripts for their wallet software to receive/withdraw funds. \n\nI don't think this proposal would affect wallets that do standard signing logic (`p2pkh`, `p2wpkh`, `p2trkp`). I believe if your Script does not use `OP_PUSHDATAx` this holds true for `p2sh`,`p2wsh`, `p2trsp`, although I would like others to think about this make sure my mental model is correct. `OP_PUSHDATAx` is a relatively infrequent opcode, so I suspect that there isn't wide usage of these (although I haven't looked too much into the NFT world, where it might make sense to use `OP_PUSHDATAx`)\n\nMy view is that we should move away from exotic things like this in the bitcoin protocol in favor of standard encodings in the rest of the software ecosystem. While there will be an adjustment period, in 10 years people would look back on these changes say 'remember when you had a numbering system in bitcoin's programming language that was _different_ than other protocol number representations? What a nightmare! Glad someone decided to consolidate that.' \n\nLets relegate this numbering system to a fun historical fact best talked about over a :beer: to establish your OG cred :slightly_smiling_face:.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}