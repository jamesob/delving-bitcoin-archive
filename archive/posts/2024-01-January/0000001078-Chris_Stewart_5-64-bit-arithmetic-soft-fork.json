{
  "id": 1078,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/user_avatar/delvingbitcoin.org/chris_stewart_5/{size}/296_2.png",
  "created_at": "2024-01-11T16:43:09.908Z",
  "cooked": "<blockquote>\n<p>One possibility is having an <code>OP_ENABLE64BIT</code>\u2026</p>\n</blockquote>\n<p>Ok I understand what you are proposing but honestly seems like introducing even more complexity into Script.</p>\n<blockquote>\n<p>Alternatively, a new taproot leaf version could be used too. That\u2019s even more compact.</p>\n</blockquote>\n<p>This seems like a better idea IMO. This hasn\u2019t been done before, so implementing this would mean having access to <code>leaf_version</code> in <code>EvalScript()</code> and then building conditional logic inside of these arithmetic opcodes based on <code>leaf_version</code>?</p>\n<blockquote>\n<p>Sorry, that\u2019s just baffling to me. You want to push the entire ecosystem to switch to a different number encoding because you think the existing one is a little strange?</p>\n</blockquote>\n<p>Coming back to this, yes. <strong>I say this with the utmost respect</strong>, I understand why the numbering system isn\u2019t confusing to you or other long time bitcoin developers. You\u2019ve been working with it for a very long time. For newer developers, it is much easier to reason about things they have learned elsewhere in their software development career. Simple rules like things like inputs are always 8 bytes in length (not variable) make it much easier to reason about. If you would prefer big endian to be used rather than little endian I can see the value if that - although little endian is used elsewhere in the protocol.</p>\n<p>My understanding is the alternative implementation you are suggesting means modifying <code>CScriptNum</code> to support 64 bits. This introduces a ton of consensus risk for prior Scripts deployed. I was specifically recommended <strong>not to touch CScriptNum</strong> as it is hard to reason about.</p>\n<p>Perhaps I am not understanding what this alternative implementation looks like, so please correct me if I am wrong.</p>\n<p>IIUC - you do not have malleability concerns with this 8 byte proposal as 8 byte sizes would be required.</p>\n<blockquote>\n<p>it\u2019s minimal-length big endian, which for literals inside the script has the advantage of being more compact than forcing a full length constant.</p>\n</blockquote>\n<p>Just to make sure we are talking about the same thing, by literals you mean <code>OP_1,OP_2..</code> etc right? I think this is a fair critique as \u2013 IIUC \u2013 now you would have to have <code>OP_1</code> and <code>OP_1_64</code> or something like that I believe? Or else you would have to have special interpretation logic for pushing 8 byte values or 1 byte values onto the stack based on what the witness/leaf version is?</p>",
  "post_number": 9,
  "post_type": 1,
  "posts_count": 52,
  "updated_at": "2024-01-11T17:19:48.085Z",
  "reply_count": 3,
  "reply_to_post_number": 8,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 85,
  "readers_count": 84,
  "score": 42.0,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 96,
    "username": "sipa",
    "name": "Pieter Wuille",
    "avatar_template": "/user_avatar/delvingbitcoin.org/sipa/{size}/1100_2.png"
  },
  "bookmarked": false,
  "raw": "> One possibility is having an `OP_ENABLE64BIT`...\n\nOk I understand what you are proposing but honestly seems like introducing even more complexity into Script.\n\n>Alternatively, a new taproot leaf version could be used too. That\u2019s even more compact.\n\nThis seems like a better idea IMO. This hasn't been done before, so implementing this would mean having access to `leaf_version` in `EvalScript()` and then building conditional logic inside of these arithmetic opcodes based on `leaf_version`?\n\n>Sorry, that\u2019s just baffling to me. You want to push the entire ecosystem to switch to a different number encoding because you think the existing one is a little strange?\n\nComing back to this, yes. **I say this with the utmost respect**, I understand why the numbering system isn't confusing to you or other long time bitcoin developers. You've been working with it for a very long time. For newer developers, it is much easier to reason about things they have learned elsewhere in their software development career. Simple rules like things like inputs are always 8 bytes in length (not variable) make it much easier to reason about. If you would prefer big endian to be used rather than little endian I can see the value if that - although little endian is used elsewhere in the protocol.\n\nMy understanding is the alternative implementation you are suggesting means modifying `CScriptNum` to support 64 bits. This introduces a ton of consensus risk for prior Scripts deployed. I was specifically recommended **not to touch CScriptNum** as it is hard to reason about.\n\nPerhaps I am not understanding what this alternative implementation looks like, so please correct me if I am wrong.\n\nIIUC - you do not have malleability concerns with this 8 byte proposal as 8 byte sizes would be required.\n\n>it\u2019s minimal-length big endian, which for literals inside the script has the advantage of being more compact than forcing a full length constant.\n\nJust to make sure we are talking about the same thing, by literals you mean `OP_1,OP_2..` etc right? I think this is a fair critique as -- IIUC -- now you would have to have `OP_1` and `OP_1_64` or something like that I believe? Or else you would have to have special interpretation logic for pushing 8 byte values or 1 byte values onto the stack based on what the witness/leaf version is?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "One possibility is having an OP_ENABLE64BIT\u2026 \n\nOk I understand what you are proposing but honestly seems like introducing even more complexity into Script. \n\nAlternatively, a new taproot leaf version could be used too. That\u2019s even more compact. \n\nThis seems like a better idea IMO. This hasn\u2019t been &hellip;",
  "truncated": true,
  "post_url": "/t/64-bit-arithmetic-soft-fork/397/9",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}