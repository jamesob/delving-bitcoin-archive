{
  "id": 5519,
  "name": "",
  "username": "conduition",
  "avatar_template": "/user_avatar/delvingbitcoin.org/conduition/{size}/384_2.png",
  "created_at": "2025-07-18T23:00:22.994Z",
  "cooked": "<p>Hey <a class=\"mention\" href=\"/u/ethanheilman\">@EthanHeilman</a>, this is looking great, I like the new approach. I don\u2019t think the name really matters, but toss my hat in the \u201cPay to TapScript Hash\u201d (P2TSH) bucket. I don\u2019t think you should invoke the term \u201cQuantum resistant\u201d in this BIP, since it no longer specifies any PQ signature algorithm opcodes to use inside the MAST.</p>\n<p>The rest of this comment is possibly tangential and more in the realm of exploratory ideas but here goes.</p>\n<p>Are you familiar with how SPHINCS (SLH-DSA) works internally? <a href=\"https://conduition.io/cryptography/quantum-hbs/#SPINCS\" rel=\"noopener nofollow ugc\">I wrote a more detailed summary here</a>, but basically the authors of SPHINCS wanted to decouple the SPHINCS public key - which is just a merkle root hash - from the vast number of child signing keys (the leafs of the merkle tree) . They did this by using intermediate layers of \u201ccertification keys\u201d, which themselves sign other trees of certification keys, till eventually we reach the actual signing keys. Kinda like how TLS certificate authorities work.</p>\n<p>We can borrow this idea for BIP360 to build tapscript leaves which can be defined dynamically at spending time. This would let users start moving funds to quantum-safe addresses even though we don\u2019t have PQ opcodes defined yet.</p>\n<p>Imagine a P2QRH (or whatever) address, where one of its leaves commits to a hash-based one-time signature public key (such as WOTS or Lamport) instead of directly committing to a script.</p>\n<p>This leaf can be used to spend the UTXO if the spender provides <em>a locking script signed by the OTS pubkey,</em> and a witness stack to unlock the \u201cdynamically endorsed script\u201d.</p>\n<p>Why is this better than just defining OP_WINTERNITZ or some other OTS opcode to use inside tapscript?</p>\n<ul>\n<li>It will enable gentle transition towards new PQ signature opcodes defined in a future BIP. Users can start moving money over to P2QRH and be assured of quantum safety, even though the full-strength PQ signature opcodes and their public key formats aren\u2019t defined yet.</li>\n<li>We maintain forward-looking soft-fork compatibility as long as any PQ opcode is just a rename of OP_SUCCESS.</li>\n<li>If a quantum attacker learns our wallet descriptor, they cannot exploit EC pubkeys inside the endorsed script to steal money until the owner has published an OTS endorsement signature, even if the adversary knows and cracks the EC pubkey(s) inside the to-be-endorsed script.</li>\n<li>Users with funds in a P2QRH address can safely HODL until PQ opcodes are released, and then endorse a script which uses PQ opcodes instead of EC opcodes. They incur no short-term exposure to the quantum attacker at all. When the time comes, switching to PQ signatures will then be as easy as upgrading your wallet software.</li>\n<li>If a classical attacker learns our wallet descriptor, they can\u2019t sweep our money with an OP_SUCCESS opcode because they can\u2019t sign with the OTS key.</li>\n<li>Reusing the leaf doesn\u2019t leak the OTS secret key provided you always endorse the same script pubkey on every spend.</li>\n<li>Enables a new behavior never before possible on bitcoin: Dynamically choosing the script pubkey of an address <em>after</em> it is created, granted you can only do it once per leaf due to OTS limitations. Maybe there are new use cases to be explored?</li>\n</ul>\n<p>It\u2019d mean fully defining an OTS scheme for script endorsement, so maybe that\u2019d be best as a new script leaf version, in a new BIP. What do you think?</p>\n<p>EDIT: I still think if possible we should try to get ML-DSA and SLH-DSA standardized and packaged with BIP360, even if they are separate BIPs. However if that\u2019s not practical this \u201cdynamic script endorsement\u201d thing might give us a transition plan.</p>",
  "post_number": 19,
  "post_type": 1,
  "posts_count": 18,
  "updated_at": "2025-07-18T23:11:43.726Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 5,
  "readers_count": 4,
  "score": 0.8,
  "yours": false,
  "topic_id": 1811,
  "topic_slug": "changes-to-bip-360-pay-to-quantum-resistant-hash-p2qrh",
  "topic_title": "Changes to BIP-360 - Pay to Quantum Resistant Hash (P2QRH)",
  "topic_html_title": "Changes to BIP-360 - Pay to Quantum Resistant Hash (P2QRH)",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "Hey @EthanHeilman, this is looking great, I like the new approach. I don't think the name really matters, but toss my hat in the \"Pay to TapScript Hash\" (P2TSH) bucket. I don't think you should invoke the term \"Quantum resistant\" in this BIP, since it no longer specifies any PQ signature algorithm opcodes to use inside the MAST.\n\nThe rest of this comment is possibly tangential and more in the realm of exploratory ideas but here goes. \n\nAre you familiar with how SPHINCS (SLH-DSA) works internally? [I wrote a more detailed summary here](https://conduition.io/cryptography/quantum-hbs/#SPINCS), but basically the authors of SPHINCS wanted to decouple the SPHINCS public key - which is just a merkle root hash - from the vast number of child signing keys (the leafs of the merkle tree) . They did this by using intermediate layers of \"certification keys\", which themselves sign other trees of certification keys, till eventually we reach the actual signing keys. Kinda like how TLS certificate authorities work.\n\nWe can borrow this idea for BIP360 to build tapscript leaves which can be defined dynamically at spending time. This would let users start moving funds to quantum-safe addresses even though we don't have PQ opcodes defined yet.\n\nImagine a P2QRH (or whatever) address, where one of its leaves commits to a hash-based one-time signature public key (such as WOTS or Lamport) instead of directly committing to a script. \n\nThis leaf can be used to spend the UTXO if the spender provides *a locking script signed by the OTS pubkey,* and a witness stack to unlock the \"dynamically endorsed script\".\n\nWhy is this better than just defining OP_WINTERNITZ or some other OTS opcode to use inside tapscript?\n\n- It will enable gentle transition towards new PQ signature opcodes defined in a future BIP. Users can start moving money over to P2QRH and be assured of quantum safety, even though the full-strength PQ signature opcodes and their public key formats aren't defined yet.\n- We maintain forward-looking soft-fork compatibility as long as any PQ opcode is just a rename of OP_SUCCESS. \n- If a quantum attacker learns our wallet descriptor, they cannot exploit EC pubkeys inside the endorsed script to steal money until the owner has published an OTS endorsement signature, even if the adversary knows and cracks the EC pubkey(s) inside the to-be-endorsed script. \n- Users with funds in a P2QRH address can safely HODL until PQ opcodes are released, and then endorse a script which uses PQ opcodes instead of EC opcodes. They incur no short-term exposure to the quantum attacker at all. When the time comes, switching to PQ signatures will then be as easy as upgrading your wallet software.\n- If a classical attacker learns our wallet descriptor, they can't sweep our money with an OP_SUCCESS opcode because they can't sign with the OTS key.\n- Reusing the leaf doesn't leak the OTS secret key provided you always endorse the same script pubkey on every spend.\n- Enables a new behavior never before possible on bitcoin: Dynamically choosing the script pubkey of an address *after* it is created, granted you can only do it once per leaf due to OTS limitations. Maybe there are new use cases to be explored?\n\nIt'd mean fully defining an OTS scheme for script endorsement, so maybe that'd be best as a new script leaf version, in a new BIP. What do you think?\n\nEDIT: I still think if possible we should try to get ML-DSA and SLH-DSA standardized and packaged with BIP360, even if they are separate BIPs. However if that's not practical this \"dynamic script endorsement\" thing might give us a transition plan.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 129,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Hey <a class=\"mention\" href=\"/u/ethanheilman\">@EthanHeilman</a>, this is looking great, I like the new approach. I don\u2019t think the name really matters, but toss my hat in the \u201cPay to TapScript Hash\u201d (P2TSH) bucket. I don\u2019t think you should invoke the term \u201cQuantum resistant\u201d in this BIP, since it no longer specifies any PQ signature algorithm o&hellip;",
  "truncated": true,
  "post_url": "/t/changes-to-bip-360-pay-to-quantum-resistant-hash-p2qrh/1811/19",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}