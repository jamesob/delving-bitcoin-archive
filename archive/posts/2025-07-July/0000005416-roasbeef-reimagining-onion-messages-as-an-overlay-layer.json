{
  "id": 5416,
  "name": "",
  "username": "roasbeef",
  "avatar_template": "/user_avatar/delvingbitcoin.org/roasbeef/{size}/160_2.png",
  "created_at": "2025-07-08T23:04:27.933Z",
  "cooked": "<blockquote>\n<p>Let us say I invent 10 nodes and create 10 \u201cchannels\u201d from my real node to each of my fake nodes</p>\n</blockquote>\n<p>Thanks for this example! I understand the scenario you have in mind now.</p>\n<blockquote>\n<p>That is, for O(n) blockspace and minimum channel size amount, I can push O(n^2) onion links. Presumably, other nodes who are interested in sending onion messages would need to store those O(n^2) onion links in the very-unlikely case they might send to those nodes.</p>\n</blockquote>\n<p>I think the asymptotics here ignore some of the concrete realities that serve to mitigate nuisance attacks like this.</p>\n<p>For one, as this information would be piggy backed along side a <code>node_announcement</code>, which has a 65 KB limit like all other messages, the amount of onion links a node can advertise has a hard upper limit. As a result, for node announcements, we already have an upper bound on the amount of storage required per node.</p>\n<p>The creation of each of those initial backing costs also has a direct on-chain cost. Going further, clients that observe/implement this overlay can enforce additional constraints on the minimum eligibility requirements to advertise an onion link for public nodes. An example of such requirements would include: a min channel size, number of onion links per channel, etc.</p>\n<blockquote>\n<p>(We can of course use shortest-path-tree to prune the graph instead of a full graph, but that becomes fragile)</p>\n</blockquote>\n<p>Why would the maintenance of a <a href=\"https://en.wikipedia.org/wiki/Minimum_spanning_tree\" rel=\"noopener nofollow ugc\">minimum spanning tree</a> be fragile? Such algorithms are routinely used in the domain of computer networking. The textbook algorithms are also relatively efficient (<span class=\"math\">O(m \\log n)</span>) as far as graph algos go. Can you elaborate on why you think techniques to maintain a minimal graph like MST algos are fragile in this domain?</p>\n<p>Nodes are also free to add nearly arbitrary constraints on how their construct their view of the network. As an example, nodes can set a hard budget on the amount of vertexes to add to such a tree, as there\u2019s no need for an onion overlay with say, 100k links. If a node\u2019s added constraints impact reachability, then they can just re-run the algo with a higher threshold (they\u2019ve already downloaded the information via the set of node announcements).</p>",
  "post_number": 11,
  "post_type": 1,
  "posts_count": 11,
  "updated_at": "2025-07-08T23:04:27.933Z",
  "reply_count": 0,
  "reply_to_post_number": 10,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 0.2,
  "yours": false,
  "topic_id": 1799,
  "topic_slug": "reimagining-onion-messages-as-an-overlay-layer",
  "topic_title": "Reimagining Onion Messages as an Overlay Layer",
  "topic_html_title": "Reimagining Onion Messages as an Overlay Layer",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 104,
    "username": "ZmnSCPxj",
    "name": "ZmnSCPxj jxPCSnmZ",
    "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png"
  },
  "bookmarked": false,
  "raw": "> Let us say I invent 10 nodes and create 10 \u201cchannels\u201d from my real node to each of my fake nodes\n\nThanks for this example! I understand the scenario you have in mind now. \n\n>  That is, for O(n) blockspace and minimum channel size amount, I can push O(n^2) onion links. Presumably, other nodes who are interested in sending onion messages would need to store those O(n^2) onion links in the very-unlikely case they might send to those nodes.\n\nI think the asymptotics here ignore some of the concrete realities that serve to mitigate nuisance attacks like this. \n\nFor one, as this information would be piggy backed along side a `node_announcement`, which has a 65 KB limit like all other messages, the amount of onion links a node can advertise has a hard upper limit. As a result, for node announcements, we already have an upper bound on the amount of storage required per node. \n\nThe creation of each of those initial backing costs also has a direct on-chain cost. Going further, clients that observe/implement this overlay can enforce additional constraints on the minimum eligibility requirements to advertise an onion link for public nodes. An example of such requirements would include: a min channel size, number of onion links per channel, etc. \n\n> (We can of course use shortest-path-tree to prune the graph instead of a full graph, but that becomes fragile)\n\nWhy would the maintenance of a [minimum spanning tree](https://en.wikipedia.org/wiki/Minimum_spanning_tree) be fragile? Such algorithms are routinely used in the domain of computer networking. The textbook algorithms are also relatively efficient ($O(m \\log n)$) as far as graph algos go. Can you elaborate on why you think techniques to maintain a minimal graph like MST algos are fragile in this domain? \n\nNodes are also free to add nearly arbitrary constraints on how their construct their view of the network. As an example, nodes can set a hard budget on the amount of vertexes to add to such a tree, as there's no need for an onion overlay with say, 100k links. If a node's added constraints impact reachability, then they can just re-run the algo with a higher threshold (they've already downloaded the information via the set of node announcements).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 143,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Let us say I invent 10 nodes and create 10 \u201cchannels\u201d from my real node to each of my fake nodes \n\nThanks for this example! I understand the scenario you have in mind now. \n\nThat is, for O(n) blockspace and minimum channel size amount, I can push O(n^2) onion links. Presumably, other nodes who are &hellip;",
  "truncated": true,
  "post_url": "/t/reimagining-onion-messages-as-an-overlay-layer/1799/11",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}