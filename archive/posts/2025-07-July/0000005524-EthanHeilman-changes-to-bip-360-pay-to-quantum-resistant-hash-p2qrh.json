{
  "id": 5524,
  "name": "Ethan Heilman",
  "username": "EthanHeilman",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ethanheilman/{size}/328_2.png",
  "created_at": "2025-07-19T21:49:12.581Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"sipa\" data-post=\"20\" data-topic=\"1811\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sipa/48/1100_2.png\" class=\"avatar\"> sipa:</div>\n<blockquote>\n<p>I believe there may be an implicit understanding behind the proposal and how it is to be deployed in conjunction with other changes, because I do not understand the motivation for this proposal if it does not disable(**) DL-based opcodes along with removing the key path spend from the start.</p>\n</blockquote>\n</aside>\n<p>The purpose of BIP-360 and the future PQ signature BIP is to specify how to softfork Bitcoin so that funds can be securely spent in a post-quantum world. It does not need to have opinion on what to do about quantum vulnerable outputs.</p>\n<p>It makes sense to propose such solutions in separate BIPs. This lets us make forward progress in some areas without getting consensus on the freeze/don\u2019t freeze proposals.</p>\n<aside class=\"quote no-group\" data-username=\"sipa\" data-post=\"20\" data-topic=\"1811\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sipa/48/1100_2.png\" class=\"avatar\"> sipa:</div>\n<blockquote>\n<p>I <em>could</em> see an advantage to having a separate output type <strong>if</strong> it also disabled the existing checksig opcodes inside the scripts. That would enable things like the introduction of a protocol rule to only allow sending to definitely-quantum-safe output types at some stage in the future to encourage migration.</p>\n</blockquote>\n</aside>\n<p>Users are unlikely to move to spending with quantum resistant signatures due to the high fee cost until quantum computers are a serious threat. We want to avoid everyone having to move outputs all at once at a moment of crisis.</p>\n<p>With P2QRH, you can spend in a quantum-secure manner, but also spend using Schnorr so you don\u2019t hit high fees. This means users, exchanges, etc\u2026 can switch to P2QRH without any serious adoption cost and gain the benefits of post-quantum security. If, at some future time, the community decides to freeze quantum vulnerable spends, all funds in P2QRH outputs with PQ signature leafs are safe and don\u2019t need to move.</p>\n<p>If P2QRH disabled Schnorr, then no one would move their coin to it until absolutely necessary because fees would be 6 times higher. This means that wallet, exchange and lightning network support will probably not exist (why support an output type no one uses). A rapid project to add support and switch everyone over at the last minute will increase the risk of disaster.</p>\n<aside class=\"quote no-group\" data-username=\"sipa\" data-post=\"20\" data-topic=\"1811\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sipa/48/1100_2.png\" class=\"avatar\"> sipa:</div>\n<blockquote>\n<p>With that, the only benefit this proposal seems to give is to those who do not wish to pay the key-path reveal cost/complication in protocols that cannot or don\u2019t want to use a cooperate internal key, which I\u2019ve argued above is not a positive evolution in my view.</p>\n</blockquote>\n</aside>\n<p>In protocols with a cooperative key spend and uncooperative script spend the P2QRH Merkle tree looks like:</p>\n<ol>\n<li>Cooperative (key spend): A tiny script that does a simple 1 pubkey, 1 signature.</li>\n<li>Uncooperative (Script spend): A bigger script that does the more complex script spend with at least 2 pubkeys, 2 signatures.</li>\n</ol>\n<p>It is at least 32+64 bytes cheaper to do cooperative (so cooperative is still incentivized). Yes, you leak the fact that another spending condition may exist.</p>\n<p>Is there so much demand for script-only tapscript outputs with no cooperative path that making uncooperative 32 bytes cheaper would actually be problem?</p>\n<p>You could, if you wanted, have P2TR where the script path spend replaces OP_CHECKSIG with OP_CHECKSIG_PQ and then keep the key path spend as Schnorr. Then you could disable key path spends when a CRQC becomes relevant. The downside here is the uncooperative spends would be much larger which could reduce the security if used in the Lightning Network and then once key path spends are disabled we are wasting an additional 32 bytes. It is workable but P2QRH just seems slightly better (smaller, easier to adopt, less complex)</p>\n<aside class=\"quote no-group\" data-username=\"sipa\" data-post=\"20\" data-topic=\"1811\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/sipa/48/1100_2.png\" class=\"avatar\"> sipa:</div>\n<blockquote>\n<p>it can disable that for P2TR just as well as inside BIP360 scripts.</p>\n</blockquote>\n</aside>\n<p>We could take the path where there is a belief that P2TR is safe to use because P2TR key path spends are promised to be disabled if a CRQC arises. Such a promise could be made credible by having a quantum bounty that automatically disables P2TR key spends. Once disabled P2TR just becomes P2QRH but 32-bytes larger.</p>\n<p>I think such a strategy is workable but not as nice as P2QRH.  Softforking a system to disable key spend via a quantum bounty is more complex and risker than P2QRH. Without such a automatic disable switch the promise alone seems insufficient.</p>",
  "post_number": 21,
  "post_type": 1,
  "posts_count": 30,
  "updated_at": "2025-07-21T17:39:38.489Z",
  "reply_count": 1,
  "reply_to_post_number": 20,
  "quote_count": 1,
  "incoming_link_count": 5,
  "reads": 37,
  "readers_count": 36,
  "score": 52.4,
  "yours": false,
  "topic_id": 1811,
  "topic_slug": "changes-to-bip-360-pay-to-quantum-resistant-hash-p2qrh",
  "topic_title": "Changes to BIP-360 - Pay to Quantum Resistant Hash (P2QRH)",
  "topic_html_title": "Changes to BIP-360 - Pay to Quantum Resistant Hash (P2QRH)",
  "category_id": 7,
  "display_username": "Ethan Heilman",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"sipa, post:20, topic:1811\"]\nI believe there may be an implicit understanding behind the proposal and how it is to be deployed in conjunction with other changes, because I do not understand the motivation for this proposal if it does not disable(**) DL-based opcodes along with removing the key path spend from the start.\n[/quote]\n\nThe purpose of BIP-360 and the future PQ signature BIP is to specify how to softfork Bitcoin so that funds can be securely spent in a post-quantum world. It does not need to have opinion on what to do about quantum vulnerable outputs.\n\nIt makes sense to propose such solutions in separate BIPs. This lets us make forward progress in some areas without getting consensus on the freeze/don't freeze proposals.\n\n[quote=\"sipa, post:20, topic:1811\"]\nI *could* see an advantage to having a separate output type **if** it also disabled the existing checksig opcodes inside the scripts. That would enable things like the introduction of a protocol rule to only allow sending to definitely-quantum-safe output types at some stage in the future to encourage migration.\n[/quote]\n\nUsers are unlikely to move to spending with quantum resistant signatures due to the high fee cost until quantum computers are a serious threat. We want to avoid everyone having to move outputs all at once at a moment of crisis.\n\nWith P2QRH, you can spend in a quantum-secure manner, but also spend using Schnorr so you don't hit high fees. This means users, exchanges, etc... can switch to P2QRH without any serious adoption cost and gain the benefits of post-quantum security. If, at some future time, the community decides to freeze quantum vulnerable spends, all funds in P2QRH outputs with PQ signature leafs are safe and don't need to move.\n\nIf P2QRH disabled Schnorr, then no one would move their coin to it until absolutely necessary because fees would be 6 times higher. This means that wallet, exchange and lightning network support will probably not exist (why support an output type no one uses). A rapid project to add support and switch everyone over at the last minute will increase the risk of disaster.\n\n[quote=\"sipa, post:20, topic:1811\"]\nWith that, the only benefit this proposal seems to give is to those who do not wish to pay the key-path reveal cost/complication in protocols that cannot or don\u2019t want to use a cooperate internal key, which I\u2019ve argued above is not a positive evolution in my view.\n[/quote]\n\nIn protocols with a cooperative key spend and uncooperative script spend the P2QRH Merkle tree looks like:\n\n1. Cooperative (key spend): A tiny script that does a simple 1 pubkey, 1 signature. \n2. Uncooperative (Script spend): A bigger script that does the more complex script spend with at least 2 pubkeys, 2 signatures.\n\nIt is at least 32+64 bytes cheaper to do cooperative (so cooperative is still incentivized). Yes, you leak the fact that another spending condition may exist.\n\nIs there so much demand for script-only tapscript outputs with no cooperative path that making uncooperative 32 bytes cheaper would actually be problem?\n\nYou could, if you wanted, have P2TR where the script path spend replaces OP_CHECKSIG with OP_CHECKSIG_PQ and then keep the key path spend as Schnorr. Then you could disable key path spends when a CRQC becomes relevant. The downside here is the uncooperative spends would be much larger which could reduce the security if used in the Lightning Network and then once key path spends are disabled we are wasting an additional 32 bytes. It is workable but P2QRH just seems slightly better (smaller, easier to adopt, less complex)\n\n[quote=\"sipa, post:20, topic:1811\"]\nit can disable that for P2TR just as well as inside BIP360 scripts.\n[/quote]\n\nWe could take the path where there is a belief that P2TR is safe to use because P2TR key path spends are promised to be disabled if a CRQC arises. Such a promise could be made credible by having a quantum bounty that automatically disables P2TR key spends. Once disabled P2TR just becomes P2QRH but 32-bytes larger.\n\nI think such a strategy is workable but not as nice as P2QRH.  Softforking a system to disable key spend via a quantum bounty is more complex and risker than P2QRH. Without such a automatic disable switch the promise alone seems insufficient.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 267,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "The purpose of BIP-360 and the future PQ signature BIP is to specify how to softfork Bitcoin so that funds can be securely spent in a post-quantum world. It does not need to have opinion on what to do about quantum vulnerable outputs. \nIt makes sense to propose such solutions in separate BIPs. This&hellip;",
  "truncated": true,
  "post_url": "/t/changes-to-bip-360-pay-to-quantum-resistant-hash-p2qrh/1811/21",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}