{
  "id": 5431,
  "name": "",
  "username": "josh",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josh/{size}/95_2.png",
  "created_at": "2025-07-10T20:13:45.648Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"jamesob\" data-post=\"10\" data-topic=\"1809\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/jamesob/48/271_2.png\" class=\"avatar\"> jamesob:</div>\n<blockquote>\n<p>FWIW, there are a number of other reasons that only committing to the output side has problems (half-spend problem, malleation issues).</p>\n</blockquote>\n</aside>\n<p>(Reposting from the mailing list as I believe it\u2019s relevant)</p>\n<p>I might point out that we can resolve pinning, half-spend, and malleability concerns by modifying CTV to commit to sibling prevouts. In a naive implementation, this introduces quadratic hashing, but we can make it linear using MuHash with pre-processing.</p>\n<p>The idea is to define a sibling commitment as the MuHash of <span class=\"math\">SHA256(i \\, || \\, prevout_{i})</span> for all inputs except the current input.</p>\n<p>To validate, we precompute a MuHash over all prevouts and then selectively remove the hash of the current prevout. Removal is <span class=\"math\">O(1)</span> with MuHash, making validation <span class=\"math\">O(N)</span>, even with multiple inputs using CTV.</p>\n<p>Since MuHash is already implemented in Bitcoin Core for <code>assumeUTXO</code>, this wouldn\u2019t necessarily be a heavy lift.</p>",
  "post_number": 12,
  "post_type": 1,
  "posts_count": 12,
  "updated_at": "2025-07-10T20:13:45.648Z",
  "reply_count": 0,
  "reply_to_post_number": 10,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 1,
  "readers_count": 0,
  "score": 0,
  "yours": false,
  "topic_id": 1809,
  "topic_slug": "understanding-and-mitigating-a-op-ctv-footgun-the-unsatisfiable-utxo",
  "topic_title": "Understanding and Mitigating a OP_CTV Footgun: The Unsatisfiable UTXO",
  "topic_html_title": "Understanding and Mitigating a OP_CTV Footgun: The Unsatisfiable UTXO",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"jamesob, post:10, topic:1809\"]\nFWIW, there are a number of other reasons that only committing to the output side has problems (half-spend problem, malleation issues).\n[/quote]\n\n(Reposting from the mailing list as I believe it's relevant)\n\nI might point out that we can resolve pinning, half-spend, and malleability concerns by modifying CTV to commit to sibling prevouts. In a naive implementation, this introduces quadratic hashing, but we can make it linear using MuHash with pre-processing.\n\nThe idea is to define a sibling commitment as the MuHash of $SHA256(i \\, || \\, prevout_{i})$ for all inputs except the current input.\n\nTo validate, we precompute a MuHash over all prevouts and then selectively remove the hash of the current prevout. Removal is $O(1)$ with MuHash, making validation $O(N)$, even with multiple inputs using CTV.\n\nSince MuHash is already implemented in Bitcoin Core for `assumeUTXO`, this wouldn't necessarily be a heavy lift.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 98,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "(Reposting from the mailing list as I believe it\u2019s relevant) \nI might point out that we can resolve pinning, half-spend, and malleability concerns by modifying CTV to commit to sibling prevouts. In a naive implementation, this introduces quadratic hashing, but we can make it linear using MuHash wit&hellip;",
  "truncated": true,
  "post_url": "/t/understanding-and-mitigating-a-op-ctv-footgun-the-unsatisfiable-utxo/1809/12",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}