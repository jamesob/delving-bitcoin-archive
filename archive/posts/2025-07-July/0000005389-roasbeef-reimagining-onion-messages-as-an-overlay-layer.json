{
  "id": 5389,
  "name": "",
  "username": "roasbeef",
  "avatar_template": "/user_avatar/delvingbitcoin.org/roasbeef/{size}/160_2.png",
  "created_at": "2025-07-01T22:44:04.027Z",
  "cooked": "<blockquote>\n<p>So what you\u2019re saying is that in practice your proposal wouldn\u2019t change the network topology at all? What\u2019s the point, then?</p>\n</blockquote>\n<p>The fact that you arrived at the conclusion after reading my last post shows an impressive ability to make logical leaps. If one carefully reads the OP and my initial reply, they\u2019d arrive at the conclusion that: the onion overlay doesn\u2019t necessarily <em>mirror</em> the topology of the existing channel graph. This is due to the fact that: nodes that don\u2019t have direct channels with each other can create+advertise an onion link.</p>\n<blockquote>\n<p>The spec doesn\u2019t say that it has to be on the same connection, which implies that nodes are free to do whatever they want.\nAlso, there\u2019s no need for a separate port for this? You can just open a second connection on the same port.</p>\n</blockquote>\n<p>The <a href=\"https://github.com/lightning/bolts/blob/68881992b97f20aca29edf7a4d673b8e6a70379a/01-messaging.md#connection-handling-and-multiplexing\" rel=\"noopener nofollow ugc\">very first BOLT</a> is pretty clear on this point:</p>\n<blockquote>\n<p>Implementations MUST use a single connection per peer; channel messages (which include a channel ID) are multiplexed over this single connection.</p>\n</blockquote>\n<p>Again, can you point me to the where in the spec literally any of what you\u2019re describing is outlined?</p>\n<blockquote>\n<p>which implies that nodes are free to do whatever they want</p>\n</blockquote>\n<p>Sure, nodes implementation can implement pretty much anything they want to. However, interoperability requires that the behavior be specified so all implementations are on the same page. This is why we write <em>explicit</em> specs.</p>\n<blockquote>\n<p>Yes, TCP is all about applying backpressure from an application through to the sender to ensure the sender can do these things without making the recipient unable to respond</p>\n</blockquote>\n<p>You seem to have repeatedly missed the nuance in this example. So here\u2019s a simplified scenario that you should be able to understand:</p>\n<ul>\n<li>Alice has an FIFO internal queue that contains 5 messages: 3x <code>channel_update</code>, 1x <code>commit_sig</code>, and 1x <code>onion_message</code>.</li>\n<li>Bob only processes a single message a time, he\u2019s entirely single threaded. He\u2019s slow, and a single <code>channel_update</code> can take him 5 seconds to process. Bob never drops incoming messages, they\u2019re processed in order.</li>\n<li>Alice sends her first channel update, to Bob, the TCP parameters have been arbitrary restricted s.t only a single message can be outstanding at a time.</li>\n<li>In this scenario, only 15+ seconds after the first <code>channel_update</code> is sent can Alice send the <code>onion_message</code>.</li>\n</ul>\n<p>Can you see how using a distinct TCP (or even <a href=\"https://github.com/lightning/bolts/issues/1257\" rel=\"noopener nofollow ugc\">a single QUIC connection</a>!)  connection would allow Alice to send/propagate her <code>onion_message</code> more expediently? If not, then I\u2019m not sure we can continue to have a productive conversation on this matter.</p>\n<blockquote>\n<p>Head-of-line blocking isn\u2019t some death curse</p>\n</blockquote>\n<p>I\u2019m not presenting it as such, that\u2019s just a strawman you seem to enjoy wrangling with. My statement is pretty simple: onion messaging over a distinct TCP eliminates unnecessary blocking, and sidesteps networking+processing contention w/ other node functionality.</p>",
  "post_number": 8,
  "post_type": 1,
  "posts_count": 9,
  "updated_at": "2025-07-01T22:49:08.450Z",
  "reply_count": 0,
  "reply_to_post_number": 6,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 1.8,
  "yours": false,
  "topic_id": 1799,
  "topic_slug": "reimagining-onion-messages-as-an-overlay-layer",
  "topic_title": "Reimagining Onion Messages as an Overlay Layer",
  "topic_html_title": "Reimagining Onion Messages as an Overlay Layer",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 50,
    "username": "MattCorallo",
    "name": "Matt Corallo",
    "avatar_template": "/letter_avatar_proxy/v4/letter/m/e47c2d/{size}.png"
  },
  "bookmarked": false,
  "raw": "> So what you\u2019re saying is that in practice your proposal wouldn\u2019t change the network topology at all? What\u2019s the point, then?\n\nThe fact that you arrived at the conclusion after reading my last post shows an impressive ability to make logical leaps. If one carefully reads the OP and my initial reply, they'd arrive at the conclusion that: the onion overlay doesn't necessarily _mirror_ the topology of the existing channel graph. This is due to the fact that: nodes that don't have direct channels with each other can create+advertise an onion link. \n\n> The spec doesn\u2019t say that it has to be on the same connection, which implies that nodes are free to do whatever they want.\n> Also, there\u2019s no need for a separate port for this? You can just open a second connection on the same port.\n\nThe [very first BOLT](https://github.com/lightning/bolts/blob/68881992b97f20aca29edf7a4d673b8e6a70379a/01-messaging.md#connection-handling-and-multiplexing) is pretty clear on this point: \n> Implementations MUST use a single connection per peer; channel messages (which include a channel ID) are multiplexed over this single connection.\n\nAgain, can you point me to the where in the spec literally any of what you're describing is outlined? \n\n>  which implies that nodes are free to do whatever they want\n\nSure, nodes implementation can implement pretty much anything they want to. However, interoperability requires that the behavior be specified so all implementations are on the same page. This is why we write _explicit_ specs. \n\n> Yes, TCP is all about applying backpressure from an application through to the sender to ensure the sender can do these things without making the recipient unable to respond\n\nYou seem to have repeatedly missed the nuance in this example. So here's a simplified scenario that you should be able to understand:\n  * Alice has an FIFO internal queue that contains 5 messages: 3x `channel_update`, 1x `commit_sig`, and 1x `onion_message`. \n  * Bob only processes a single message a time, he's entirely single threaded. He's slow, and a single `channel_update` can take him 5 seconds to process. Bob never drops incoming messages, they're processed in order. \n  * Alice sends her first channel update, to Bob, the TCP parameters have been arbitrary restricted s.t only a single message can be outstanding at a time.  \n  * In this scenario, only 15+ seconds after the first `channel_update` is sent can Alice send the `onion_message`. \n\nCan you see how using a distinct TCP (or even [a single QUIC connection](https://github.com/lightning/bolts/issues/1257)!)  connection would allow Alice to send/propagate her `onion_message` more expediently? If not, then I'm not sure we can continue to have a productive conversation on this matter. \n\n> Head-of-line blocking isn\u2019t some death curse\n\nI'm not presenting it as such, that's just a strawman you seem to enjoy wrangling with. My statement is pretty simple: onion messaging over a distinct TCP eliminates unnecessary blocking, and sidesteps networking+processing contention w/ other node functionality.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 143,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "So what you\u2019re saying is that in practice your proposal wouldn\u2019t change the network topology at all? What\u2019s the point, then? \n\nThe fact that you arrived at the conclusion after reading my last post shows an impressive ability to make logical leaps. If one carefully reads the OP and my initial reply&hellip;",
  "truncated": true,
  "post_url": "/t/reimagining-onion-messages-as-an-overlay-layer/1799/8",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}