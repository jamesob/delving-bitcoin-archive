{
  "id": 5441,
  "name": "Zawy",
  "username": "zawy",
  "avatar_template": "/user_avatar/delvingbitcoin.org/zawy/{size}/750_2.png",
  "created_at": "2025-07-11T23:53:05.041Z",
  "cooked": "<p>I want to find the relation between chain_work and the lowest_hash (an N=1 situation).  The expected hash for given target is half the target, so a guess is that the \u201ceffective target\u201d for the lifetime of the chain is 2x the lowest hash seen.</p>\n<p><span class=\"math\">\\text{chain_work} = \\frac{2^{256}}{2 \\cdot \\text{lowest_hash}}</span></p>\n<p>This reasoning seems solid and it\u2019s close for Bitcoin: this equation gives 2x the actual chain work. Probably due to dividing by small numbers, experiment indicates this equation after many runs gives average results that are about 3.5x too high, but it varies often from 2x to 7x.</p>\n<p>The problem reminded me of being unable to estimate the expected solvetime (1/\u03bb) from a single solvetime. After playing around with it, it appears they are both based on the exponential distribution:</p>\n<p><span class=\"math\">D = \\frac{2^{256}}{\\text{lowest_hash}} = \\frac{1}{\\lambda}</span></p>\n<p><span class=\"math\">W = \\text{chain_work}</span></p>\n<p><span class=\"math\">\\text{PDF}(1/D) = W e^{-\\frac{W}{D}}</span></p>\n<p>The histogram of <span class=\"math\">\\frac{W}{D}</span> looks like the exponential PDF, the median  sticks around the expected ln(2), and the mean and StdDev are 1 as expected.</p>\n<p>But I expected a different value for D as I described at the beginning:</p>\n<p><span class=\"math\">D' = \\frac{2^{256}}{2 \\cdot \\text{lowest_hash}} = \\frac{1}{\\lambda}</span></p>\n<p>My experiments didn\u2019t assume a constant hashrate or difficulty, but that the difficulty was correctly adjusted for the hashrate (i.e. the expected solvetimes were the block time).</p>\n<p>We use the exponential distribution to simulate solvetimes by using the CDF and solving for solvetime.</p>\n<p><span class=\"math\">\\frac{1}{D} = \\frac{-\\ln(rand(0,1)) }{W}</span></p>\n<p><span class=\"math\">D = \\frac{W}{-\\ln(rand(0,1))}</span></p>\n<p>This results in usually seeing <span class=\"math\">\\frac{D}{W}</span> ratios around 12, and often from 5 to 30, when averaged over many trials of many block histories.  When we integrate this for the middle 60% of samples, the expected value is 1.05. If the 20% lowest hashes are removed (from 20% of the blockchain histories), this average 1.13.  If bitcoin falls into that 80%, chain work could go 3x more before a new lowest hash is found.</p>\n<p><img src=\"https://delvingbitcoin.org/uploads/default/original/2X/e/e17d76ba8b7cebb9c240d74bac28d75ac20037e4.png\" alt=\"image\" data-base62-sha1=\"waMeCidzHhPwg3j18c198BCEuXy\" width=\"356\" height=\"79\"></p>\n<p>The experiment is measuring D for a fixed amount of work. Rarranging the equation to attempt the following doesn\u2019t work because it\u2019s assuming the expected D is known.</p>\n<p><span class=\"math\">W' = -\\ln(rand(0,1)) \\cdot D'</span></p>",
  "post_number": 16,
  "post_type": 1,
  "posts_count": 16,
  "updated_at": "2025-07-12T10:31:45.203Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 4,
  "readers_count": 3,
  "score": 0.8,
  "yours": false,
  "topic_id": 1745,
  "topic_slug": "correcting-the-error-in-getnetworkhashrateps",
  "topic_title": "Correcting the error in getnetworkhashrateps",
  "topic_html_title": "Correcting the error in getnetworkhashrateps",
  "category_id": 7,
  "display_username": "Zawy",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 6,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "I want to find the relation between chain_work and the lowest_hash (an N=1 situation).  The expected hash for given target is half the target, so a guess is that the \"effective target\" for the lifetime of the chain is 2x the lowest hash seen. \n\n$\\text{chain_work} = \\frac{2^{256}}{2 \\cdot \\text{lowest_hash}}$ \n\nThis reasoning seems solid and it's close for Bitcoin: this equation gives 2x the actual chain work. Probably due to dividing by small numbers, experiment indicates this equation after many runs gives average results that are about 3.5x too high, but it varies often from 2x to 7x.\n\nThe problem reminded me of being unable to estimate the expected solvetime (1/&lambda;) from a single solvetime. After playing around with it, it appears they are both based on the exponential distribution:\n\n$D = \\frac{2^{256}}{\\text{lowest_hash}} = \\frac{1}{\\lambda}$\n\n$W = \\text{chain_work}$\n\n$\\text{PDF}(1/D) = W e^{-\\frac{W}{D}}$\n\nThe histogram of $\\frac{W}{D}$ looks like the exponential PDF, the median  sticks around the expected ln(2), and the mean and StdDev are 1 as expected. \n\nBut I expected a different value for D as I described at the beginning:\n\n$D' = \\frac{2^{256}}{2 \\cdot \\text{lowest_hash}} = \\frac{1}{\\lambda}$\n\nMy experiments didn't assume a constant hashrate or difficulty, but that the difficulty was correctly adjusted for the hashrate (i.e. the expected solvetimes were the block time). \n\nWe use the exponential distribution to simulate solvetimes by using the CDF and solving for solvetime.  \n\n$\\frac{1}{D} = \\frac{-\\ln(rand(0,1)) }{W}$\n\n$D = \\frac{W}{-\\ln(rand(0,1))}$\n\nThis results in usually seeing $\\frac{D}{W}$ ratios around 12, and often from 5 to 30, when averaged over many trials of many block histories.  When we integrate this for the middle 60% of samples, the expected value is 1.05. If the 20% lowest hashes are removed (from 20% of the blockchain histories), this average 1.13.  If bitcoin falls into that 80%, chain work could go 3x more before a new lowest hash is found.\n\n![image|356x79](upload://waMeCidzHhPwg3j18c198BCEuXy.png)\n\nThe experiment is measuring D for a fixed amount of work. Rarranging the equation to attempt the following doesn't work because it's assuming the expected D is known.\n\n$W' = -\\ln(rand(0,1)) \\cdot D'$",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 502,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I want to find the relation between chain_work and the lowest_hash (an N=1 situation).  The expected hash for given target is half the target, so a guess is that the \u201ceffective target\u201d for the lifetime of the chain is 2x the lowest hash seen. \n\\text{chain_work} = \\frac{2^{256}}{2 \\cdot \\text{lowest_&hellip;",
  "truncated": true,
  "post_url": "/t/correcting-the-error-in-getnetworkhashrateps/1745/16",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}