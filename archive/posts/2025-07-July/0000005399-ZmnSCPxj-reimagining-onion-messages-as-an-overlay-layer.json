{
  "id": 5399,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2025-07-03T01:06:15.281Z",
  "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"roasbeef\" data-post=\"7\" data-topic=\"1799\" data-full=\"true\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/roasbeef/48/160_2.png\" class=\"avatar\"> roasbeef:</div>\n<blockquote>\n<blockquote>\n<p>As I understand it, the DoS issue here is that I can invent any number of \u201cpublic nodes\u201d by just runnng a cheap CSPRNG and getting 256-bit sections of its output, then inventing a bunch of <code>onion_link_proof</code> messages with myself and my random number, and pump it at the gossip network.</p>\n</blockquote>\n<p>Not quite. Today nodes store a <code>node_announcement</code> if a node has active channels. Going a step further, <code>lnd</code> will also prune out any <code>node_announcement</code> instance that have no channels after we process the set of closed channels in a block.</p>\n<p>As a result, a <code>onion_link_proof</code> (a public one) will only be accepted if both nodes have channels. Clients can opt to filter out further and only accept onion link proofs from a node that has at least <code>N</code> channels with <code>X</code> BTC total across the channels, etc, etc.</p>\n<p>The onion overlay anchors into the <em>existing</em> LN channel graph, but isn\u2019t <em>embedded</em> within it.</p>\n</blockquote>\n</aside>\n<p>Let us say I invent 10 nodes and create 10 \u201cchannels\u201d from my real node to each of my fake nodes.  <code>lnd</code> will now treat those 10 fake nodes as \u201creal\u201d.  I can then have the 10 nodes claim <code>onion_link_proof</code> to each other to create (10 * (10 - 1)) / 2) fake onion links.  That is, for O(n) blockspace and minimum channel size amount, I can push O(n^2) onion links.  Presumably, other nodes who are interested in sending onion messages would need to store those O(n^2) onion links in the very-unlikely case they might send to those nodes.</p>\n<p>(We can of course use shortest-path-tree to prune the graph instead of a full graph, but that becomes fragile)</p>\n<p>That is precisely why we cannot just invent \u201coverlay\u201d links that are not backed by actual UTXOs on the blockchain layer, and precisely why every channel should have a backing UTXO (or if we want to relax that, we want it to be linear on number of backing UTXOs at worst, not quadratic).  For linear cost to me I can create quadratic cost on everyone else.</p>\n<p>We could of course just break that principle, but if we do, we should just allow virtual <em>full</em> channels and have an \u201conion-message-only\u201d flag instead..</p>\n<p>In particular, if even if we do heuristics like \u201cthe node should have some minimum of M satoshis locked in C channels or else we will drop their <code>onion_link_proof</code>\u201d this does not change the fundamental O(n) cost on me vs O(n^2) cost I can impose on others.</p>",
  "post_number": 10,
  "post_type": 1,
  "posts_count": 11,
  "updated_at": "2025-07-03T01:13:14.353Z",
  "reply_count": 1,
  "reply_to_post_number": 7,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 35,
  "readers_count": 34,
  "score": 12.0,
  "yours": false,
  "topic_id": 1799,
  "topic_slug": "reimagining-onion-messages-as-an-overlay-layer",
  "topic_title": "Reimagining Onion Messages as an Overlay Layer",
  "topic_html_title": "Reimagining Onion Messages as an Overlay Layer",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"roasbeef, post:7, topic:1799, full:true\"]\n> As I understand it, the DoS issue here is that I can invent any number of \u201cpublic nodes\u201d by just runnng a cheap CSPRNG and getting 256-bit sections of its output, then inventing a bunch of `onion_link_proof` messages with myself and my random number, and pump it at the gossip network.\n\nNot quite. Today nodes store a `node_announcement` if a node has active channels. Going a step further, `lnd` will also prune out any `node_announcement` instance that have no channels after we process the set of closed channels in a block.\n\nAs a result, a `onion_link_proof` (a public one) will only be accepted if both nodes have channels. Clients can opt to filter out further and only accept onion link proofs from a node that has at least `N` channels with `X` BTC total across the channels, etc, etc.\n\nThe onion overlay anchors into the *existing* LN channel graph, but isn\u2019t *embedded* within it.\n[/quote]\n\nLet us say I invent 10 nodes and create 10 \"channels\" from my real node to each of my fake nodes.  `lnd` will now treat those 10 fake nodes as \"real\".  I can then have the 10 nodes claim `onion_link_proof` to each other to create (10 * (10 - 1)) / 2) fake onion links.  That is, for O(n) blockspace and minimum channel size amount, I can push O(n^2) onion links.  Presumably, other nodes who are interested in sending onion messages would need to store those O(n^2) onion links in the very-unlikely case they might send to those nodes.\n\n(We can of course use shortest-path-tree to prune the graph instead of a full graph, but that becomes fragile)\n\nThat is precisely why we cannot just invent \"overlay\" links that are not backed by actual UTXOs on the blockchain layer, and precisely why every channel should have a backing UTXO (or if we want to relax that, we want it to be linear on number of backing UTXOs at worst, not quadratic).  For linear cost to me I can create quadratic cost on everyone else.\n\nWe could of course just break that principle, but if we do, we should just allow virtual *full* channels and have an \"onion-message-only\" flag instead..\n\nIn particular, if even if we do heuristics like \"the node should have some minimum of M satoshis locked in C channels or else we will drop their `onion_link_proof`\" this does not change the fundamental O(n) cost on me vs O(n^2) cost I can impose on others.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Let us say I invent 10 nodes and create 10 \u201cchannels\u201d from my real node to each of my fake nodes.  lnd will now treat those 10 fake nodes as \u201creal\u201d.  I can then have the 10 nodes claim onion_link_proof to each other to create (10 * (10 - 1)) / 2) fake onion links.  That is, for O(n) blockspace and &hellip;",
  "truncated": true,
  "post_url": "/t/reimagining-onion-messages-as-an-overlay-layer/1799/10",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}