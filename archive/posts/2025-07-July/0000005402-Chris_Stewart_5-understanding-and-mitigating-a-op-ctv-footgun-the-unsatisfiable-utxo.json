{
  "id": 5402,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/user_avatar/delvingbitcoin.org/chris_stewart_5/{size}/296_2.png",
  "created_at": "2025-07-03T20:04:19.360Z",
  "cooked": "<p>Hi everyone,</p>\n<p>A well-known \u201cfootgun\u201d when working with <code>OP_CTV</code> (CheckTemplateVerify) is the scenario where an amount <strong>less</strong> than the expected value is sent to a <code>OP_CTV</code>-locked output. As <code>BIP119</code> (the proposal for <code>OP_CTV</code>) highlights in its discussion on <a href=\"https://github.com/bitcoin/bips/blob/fd1955694b95440bde70890475548dfb59e2e759/bip-0119.mediawiki#forwarding-addresses\" rel=\"noopener nofollow ugc\">\u201cforwarding address contracts\u201d</a>:</p>\n<blockquote>\n<p>Key-reuse with CHECKTEMPLATEVERIFY may be used as a form of \u201cforwarding address contract\u201d. A forwarding address is an address which can automatically execute in a predefined way. For example, an exchange\u2019s hot wallet might use an address which can automatically be moved to a cold storage address after a relative timeout.</p>\n</blockquote>\n<blockquote>\n<p>The issue is that reusing addresses in this way can lead to loss of funds. Suppose one creates a template address which forwards 1 BTC to cold storage. Creating an output to this address with less than 1 BTC will be frozen permanently. Paying more than 1 BTC will lead to the funds in excess of 1BTC to be paid as a large miner fee. CHECKTEMPLATEVERIFY could commit to the exact amount of bitcoin provided by the inputs/amount of fee paid, but as this is a user error and not a malleability issue this is not done. Future soft-forks could introduce opcodes which allow conditionalizing which template or script branches may be used based on inspecting the amount of funds available in a transaction</p>\n</blockquote>\n<p><strong>A Key Realization: The Importance of Multiple Inputs with <code>OP_CTV</code></strong></p>\n<p>A significant realization I had while developing this test case is that it seems fundamentally prudent to <strong>commit to at least two inputs</strong> when constructing an <code>OP_CTV</code> template. I can\u2019t identify any significant benefits to committing to a single input, while the downsides \u2014 specifically the risk of creating permanently unspendable <code>UTXOs</code> \u2014 are substantial.</p>\n<p>If your <code>OP_CTV</code> template is designed to include a minimum of two inputs, you retain the ability to \u201ccraft\u201d a secondary input to perfectly satisfy the total amount locked in the <code>OP_CTV</code> template. I\u2019ve demonstrated this recovery mechanism in a <a href=\"https://github.com/Christewart/bitcoin/blob/6e13681b0b1612c7f796d7a81bb4ac63062be7fd/test/functional/feature_ctv_amount.py#L118\" rel=\"noopener nofollow ugc\">Python test here</a>.</p>\n<p>This capability becomes especially relevant for applications like <strong>vault constructions</strong>, a use case many are excited about for <code>OP_CTV</code>. Vaults often involve locking large amounts of funds within <code>OP_CTV</code> outputs. Given that transaction hashes don\u2019t inherently convey the exact expected amount, having an \u201cescape hatch\u201d in case of an accidental underfunding (or even a slight amount mismatch due to floating-point arithmetic or human error) is incredibly valuable and prudent.</p>\n<p><strong>The Trade-off:</strong></p>\n<p>It\u2019s important to note that designing your <code>OP_CTV</code> template to always require two inputs means your spending transaction will inherently be larger in size and incur a slightly higher transaction fee, even if the primary <code>OP_CTV</code> input was perfectly sized. However, I believe the added peace of mind and the ability to recover otherwise frozen funds in the event of an amount mismatch far outweigh this marginal increase in cost.</p>\n<h3><a name=\"p-5402-future-work-1\" class=\"anchor\" href=\"#p-5402-future-work-1\"></a>Future work</h3>\n<p>This research is part of piece of research on how OP_CTV can work with <a href=\"https://delvingbitcoin.org/t/op-inout-amount/549\">OP_{IN,OUT}_AMOUNT</a> to create safer forwarding addresses and realize the <a href=\"https://github.com/bitcoin/bips/blob/fd1955694b95440bde70890475548dfb59e2e759/bip-0119.mediawiki#op_amountverify\" rel=\"noopener nofollow ugc\">AMOUNTVERIFY</a> idea written in BIP119.</p>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 5,
  "updated_at": "2025-07-03T20:09:21.597Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 12,
  "reads": 17,
  "readers_count": 16,
  "score": 83.2,
  "yours": false,
  "topic_id": 1809,
  "topic_slug": "understanding-and-mitigating-a-op-ctv-footgun-the-unsatisfiable-utxo",
  "topic_title": "Understanding and Mitigating a OP_CTV Footgun: The Unsatisfiable UTXO",
  "topic_html_title": "Understanding and Mitigating a OP_CTV Footgun: The Unsatisfiable UTXO",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Hi everyone,\n\nA well-known \"footgun\" when working with `OP_CTV` (CheckTemplateVerify) is the scenario where an amount **less** than the expected value is sent to a `OP_CTV`-locked output. As `BIP119` (the proposal for `OP_CTV`) highlights in its discussion on [\"forwarding address contracts\"](https://github.com/bitcoin/bips/blob/fd1955694b95440bde70890475548dfb59e2e759/bip-0119.mediawiki#forwarding-addresses):\n\n>Key-reuse with CHECKTEMPLATEVERIFY may be used as a form of \"forwarding address contract\". A forwarding address is an address which can automatically execute in a predefined way. For example, an exchange's hot wallet might use an address which can automatically be moved to a cold storage address after a relative timeout.\n\n>The issue is that reusing addresses in this way can lead to loss of funds. Suppose one creates a template address which forwards 1 BTC to cold storage. Creating an output to this address with less than 1 BTC will be frozen permanently. Paying more than 1 BTC will lead to the funds in excess of 1BTC to be paid as a large miner fee. CHECKTEMPLATEVERIFY could commit to the exact amount of bitcoin provided by the inputs/amount of fee paid, but as this is a user error and not a malleability issue this is not done. Future soft-forks could introduce opcodes which allow conditionalizing which template or script branches may be used based on inspecting the amount of funds available in a transaction\n\n**A Key Realization: The Importance of Multiple Inputs with `OP_CTV`**\n\nA significant realization I had while developing this test case is that it seems fundamentally prudent to **commit to at least two inputs** when constructing an `OP_CTV` template. I can't identify any significant benefits to committing to a single input, while the downsides \u2014 specifically the risk of creating permanently unspendable `UTXOs` \u2014 are substantial.\n\nIf your `OP_CTV` template is designed to include a minimum of two inputs, you retain the ability to \"craft\" a secondary input to perfectly satisfy the total amount locked in the `OP_CTV` template. I've demonstrated this recovery mechanism in a [Python test here](https://github.com/Christewart/bitcoin/blob/6e13681b0b1612c7f796d7a81bb4ac63062be7fd/test/functional/feature_ctv_amount.py#L118).\n\nThis capability becomes especially relevant for applications like **vault constructions**, a use case many are excited about for `OP_CTV`. Vaults often involve locking large amounts of funds within `OP_CTV` outputs. Given that transaction hashes don't inherently convey the exact expected amount, having an \"escape hatch\" in case of an accidental underfunding (or even a slight amount mismatch due to floating-point arithmetic or human error) is incredibly valuable and prudent.\n\n**The Trade-off:**\n\nIt's important to note that designing your `OP_CTV` template to always require two inputs means your spending transaction will inherently be larger in size and incur a slightly higher transaction fee, even if the primary `OP_CTV` input was perfectly sized. However, I believe the added peace of mind and the ability to recover otherwise frozen funds in the event of an amount mismatch far outweigh this marginal increase in cost.\n\n### Future work\n\nThis research is part of piece of research on how OP_CTV can work with [OP_{IN,OUT}_AMOUNT](https://delvingbitcoin.org/t/op-inout-amount/549) to create safer forwarding addresses and realize the [AMOUNTVERIFY](https://github.com/bitcoin/bips/blob/fd1955694b95440bde70890475548dfb59e2e759/bip-0119.mediawiki#op_amountverify) idea written in BIP119.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Hi everyone, \nA well-known \u201cfootgun\u201d when working with OP_CTV (CheckTemplateVerify) is the scenario where an amount less than the expected value is sent to a OP_CTV-locked output. As BIP119 (the proposal for OP_CTV) highlights in its discussion on <a href=\"https://github.com/bitcoin/bips/blob/fd1955694b95440bde70890475548dfb59e2e759/bip-0119.mediawiki#forwarding-addresses\" rel=\"noopener nofollow ugc\">\u201cforwarding address contracts\u201d</a>: \n\nKey-reuse with CHE&hellip;",
  "truncated": true,
  "post_url": "/t/understanding-and-mitigating-a-op-ctv-footgun-the-unsatisfiable-utxo/1809/1",
  "reactions": [
    {
      "id": "eyes",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}