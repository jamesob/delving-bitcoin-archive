{
  "id": 5383,
  "name": "ZmnSCPxj jxPCSnmZ",
  "username": "ZmnSCPxj",
  "avatar_template": "/letter_avatar_proxy/v4/letter/z/ee7513/{size}.png",
  "created_at": "2025-07-01T12:00:57.803Z",
  "cooked": "<aside class=\"quote no-group quote-modified\" data-username=\"roasbeef\" data-post=\"4\" data-topic=\"1799\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/roasbeef/48/160_2.png\" class=\"avatar\"> roasbeef:</div>\n<blockquote>\n<blockquote>\n<p>What your proposal appears to be missing is a way to handle DoS/onion message peer selection in a useful way.</p>\n</blockquote>\n<p>Peers would be free to <em>reject</em> an attempt to create an onion link if the requesting peer doesn\u2019t already have a channel with the responding node.</p>\n<p><em>Requiring</em> that a channel already exists doesn\u2019t necessarily provide DoS protection. It just increases the cost to creating an onion link. The onion link establishment protocol sketched out in the OP can be extended to require an upfront payment, require presenting a UTXO provably locked to a future time, stream funds to maintain link uptime, etc.</p>\n</blockquote>\n</aside>\n<p>As I understand it, the DoS issue here is that I can invent any number of \u201cpublic nodes\u201d by just runnng a cheap CSPRNG and getting 256-bit sections of its output, then inventing a bunch of <code>onion_link_proof</code> messages with myself and my random number, and pump it at the gossip network.</p>\n<p>Third-party nodes (i.e. every node other than me and \u201cpartner\u201d in the <code>onion_link_proof</code>) can only verify that the node exists as an actual entity if there is an onchain trace that pays for blockspace.  Note that a \u201cUTXO provably locked to a future time\u201d is no different from a channel in that regard \u2014 the DoS-protection heuristic is the same, \u201cblockspace was used, so it was not a cheap CSPRNG output\u201d, and would fall victim to your exact objection, that an onchain action (and thus non-cheap blockspace) is necessary.</p>",
  "post_number": 5,
  "post_type": 1,
  "posts_count": 8,
  "updated_at": "2025-07-01T12:00:57.803Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 2,
  "reads": 14,
  "readers_count": 13,
  "score": 17.8,
  "yours": false,
  "topic_id": 1799,
  "topic_slug": "reimagining-onion-messages-as-an-overlay-layer",
  "topic_title": "Reimagining Onion Messages as an Overlay Layer",
  "topic_html_title": "Reimagining Onion Messages as an Overlay Layer",
  "category_id": 7,
  "display_username": "ZmnSCPxj jxPCSnmZ",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"roasbeef, post:4, topic:1799\"]\n> What your proposal appears to be missing is a way to handle DoS/onion message peer selection in a useful way.\n\nPeers would be free to *reject* an attempt to create an onion link if the requesting peer doesn\u2019t already have a channel with the responding node.\n\n*Requiring* that a channel already exists doesn\u2019t necessarily provide DoS protection. It just increases the cost to creating an onion link. The onion link establishment protocol sketched out in the OP can be extended to require an upfront payment, require presenting a UTXO provably locked to a future time, stream funds to maintain link uptime, etc.\n[/quote]\n\nAs I understand it, the DoS issue here is that I can invent any number of \"public nodes\" by just runnng a cheap CSPRNG and getting 256-bit sections of its output, then inventing a bunch of `onion_link_proof` messages with myself and my random number, and pump it at the gossip network.\n\nThird-party nodes (i.e. every node other than me and \"partner\" in the `onion_link_proof`) can only verify that the node exists as an actual entity if there is an onchain trace that pays for blockspace.  Note that a \"UTXO provably locked to a future time\" is no different from a channel in that regard --- the DoS-protection heuristic is the same, \"blockspace was used, so it was not a cheap CSPRNG output\", and would fall victim to your exact objection, that an onchain action (and thus non-cheap blockspace) is necessary.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 104,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "As I understand it, the DoS issue here is that I can invent any number of \u201cpublic nodes\u201d by just runnng a cheap CSPRNG and getting 256-bit sections of its output, then inventing a bunch of onion_link_proof messages with myself and my random number, and pump it at the gossip network. \nThird-party no&hellip;",
  "truncated": true,
  "post_url": "/t/reimagining-onion-messages-as-an-overlay-layer/1799/5",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}