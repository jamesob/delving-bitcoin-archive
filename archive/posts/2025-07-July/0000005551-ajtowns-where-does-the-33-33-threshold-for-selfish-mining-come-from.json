{
  "id": 5551,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/417_2.png",
  "created_at": "2025-07-24T08:35:32.946Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"zawy\" data-post=\"4\" data-topic=\"1757\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/zawy/48/750_2.png\" class=\"avatar\"> zawy:</div>\n<blockquote>\n<p>A timestamp that is too far into the future (compared to arrival time) is provably not an honest (correctly-functioning) node and needs to be rejected more strongly,</p>\n</blockquote>\n</aside>\n<p>I guess there\u2019s two aspects here:</p>\n<ul>\n<li>how do you get consistent consensus behaviour between nodes that have been operating continually for a while and nodes that are just doing IBD now or are otherwise catching up from being offline for a while</li>\n<li>how do you cope gracefully with many people running computers with poor time keeping, and that the cheapest and easiest ways of getting good time keeping (ntp, gps) likely being vulnerable to jamming and corruption?</li>\n</ul>\n<p>For the first, I think it\u2019s probably sufficient to just apply roughly the same rule to IBD \u2013 we do headers first downloading, so have a policy where you start off by setting your tip header to the highest common block amongst your peers, and only update to the actual most work header when you see one whose timestamp is near to the current time.</p>\n<p>The second seems trickier, and causes a few problems. Miners/pools could probably justify spending a few thousand dollars on their own stratum 1 ntp server with a long holdover time. Presuming miners consistently produce blocks with close to the real time, you could perhaps mitigate it by using the timestamps of new blocks as inputs to an algorithm that automatically corrects your system clock, in the event that your tip is consistently lagging the highest-work chain? It seems like you could conceivably do that in a way where the correction doesn\u2019t occur if there\u2019s two chains of similar work, and one of them matches what you think the time is.</p>\n<p>Looking at when one of my nodes has been receiving blocks (first header seen) vs the block timestamps, I see:</p>\n<ul>\n<li>0.7% of blocks with a timestamp &gt;120s in the future (up to 441s in my sample)</li>\n<li>1.9% of blocks with a timestamp 30s-120s in the future</li>\n<li>3.1% of blocks with a timestamp &lt;=30s in the future</li>\n<li>13.0% of blocks with a timestamp &lt;=10s in the past</li>\n<li>67.2% of blocks with a timestamp 10s-30s in the past</li>\n<li>12.3% of blocks with a timestamp 30s-60s in the past</li>\n<li>1.6% of blocks with a timestamp 60s-120s in the past</li>\n<li>0.2% of blocks with a timestamp &gt;120s in the past (up to 524s in my sample)</li>\n</ul>\n<p>So I guess there\u2019d probably need to be a fair bit of work done in the mining ecosystem to lower these numbers significantly before it a strategy like this could be adopted by miners in practice.</p>",
  "post_number": 8,
  "post_type": 1,
  "posts_count": 8,
  "updated_at": "2025-07-24T08:35:32.946Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 1.4,
  "yours": false,
  "topic_id": 1757,
  "topic_slug": "where-does-the-33-33-threshold-for-selfish-mining-come-from",
  "topic_title": "Where does the 33.33% threshold for selfish mining come from?",
  "topic_html_title": "Where does the 33.33% threshold for selfish mining come from?",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "\n[quote=\"zawy, post:4, topic:1757\"]\nA timestamp that is too far into the future (compared to arrival time) is provably not an honest (correctly-functioning) node and needs to be rejected more strongly,\n[/quote]\n\nI guess there's two aspects here:\n\n * how do you get consistent consensus behaviour between nodes that have been operating continually for a while and nodes that are just doing IBD now or are otherwise catching up from being offline for a while\n * how do you cope gracefully with many people running computers with poor time keeping, and that the cheapest and easiest ways of getting good time keeping (ntp, gps) likely being vulnerable to jamming and corruption?\n\nFor the first, I think it's probably sufficient to just apply roughly the same rule to IBD -- we do headers first downloading, so have a policy where you start off by setting your tip header to the highest common block amongst your peers, and only update to the actual most work header when you see one whose timestamp is near to the current time.\n\nThe second seems trickier, and causes a few problems. Miners/pools could probably justify spending a few thousand dollars on their own stratum 1 ntp server with a long holdover time. Presuming miners consistently produce blocks with close to the real time, you could perhaps mitigate it by using the timestamps of new blocks as inputs to an algorithm that automatically corrects your system clock, in the event that your tip is consistently lagging the highest-work chain? It seems like you could conceivably do that in a way where the correction doesn't occur if there's two chains of similar work, and one of them matches what you think the time is.\n\nLooking at when one of my nodes has been receiving blocks (first header seen) vs the block timestamps, I see:\n\n * 0.7% of blocks with a timestamp >120s in the future (up to 441s in my sample)\n * 1.9% of blocks with a timestamp 30s-120s in the future\n * 3.1% of blocks with a timestamp <=30s in the future\n * 13.0% of blocks with a timestamp <=10s in the past\n * 67.2% of blocks with a timestamp 10s-30s in the past\n * 12.3% of blocks with a timestamp 30s-60s in the past\n * 1.6% of blocks with a timestamp 60s-120s in the past\n * 0.2% of blocks with a timestamp >120s in the past (up to 524s in my sample)\n\nSo I guess there'd probably need to be a fair bit of work done in the mining ecosystem to lower these numbers significantly before it a strategy like this could be adopted by miners in practice.",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I guess there\u2019s two aspects here: \n\nhow do you get consistent consensus behaviour between nodes that have been operating continually for a while and nodes that are just doing IBD now or are otherwise catching up from being offline for a while\nhow do you cope gracefully with many people running comp&hellip;",
  "truncated": true,
  "post_url": "/t/where-does-the-33-33-threshold-for-selfish-mining-come-from/1757/8",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}