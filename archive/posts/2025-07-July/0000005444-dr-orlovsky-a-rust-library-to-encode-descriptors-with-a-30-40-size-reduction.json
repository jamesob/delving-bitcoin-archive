{
  "id": 5444,
  "name": "Dr. Maxim Orlovsky",
  "username": "dr-orlovsky",
  "avatar_template": "/user_avatar/delvingbitcoin.org/dr-orlovsky/{size}/677_2.png",
  "created_at": "2025-07-12T10:33:39.955Z",
  "cooked": "<p>Thank you for putting an effort into this!</p>\n<p>Some time ago I understood I am not satisfied with bitcoin descriptors being non-deterministic strings due to a bunch of reasons:</p>\n<ul>\n<li>ambiguity in using <code>'</code>, <code>h</code> (and sometimes even <code>H</code>);</li>\n<li>ambiguity in specifying <code>/*/*</code> or <code>/&lt;0;1&gt;/*</code> in terminal derivation;</li>\n<li>ambiguity in using upper- or lower-case encoding for the master key fingerprint;</li>\n<li>possibility of arbitrary using spaces, newlines etc between descriptor components.</li>\n</ul>\n<p>This all results in the fact that you can\u2019t compare two descriptor strings to be equivalent, nor you can\u2019t use a descriptor checksum as a sort of id.</p>\n<p>Other then the problem with the deteminism, it is quite strange that you can write an syntactically-valid descriptor which is semantically invalid (can\u2019t represent a wallet), for instance when different xpubs in multisig use different derivation options (like one pub having <code>/&lt;0;1&gt;/*</code> and the other <code>/&lt;0;1;2&gt;/*</code>, which is meaningless).</p>\n<p>Finally, multisite descriptors for segwit or taproot may have the same actors repeating the same xpubs in different parts of the descriptor, making it overly bulk and completely human-uncheckable.</p>\n<p>I started to look into a ways of encoding descriptor in a standard deterministic way, and I also came with an idea similar to splitting the descriptor into a template and payload part. I had put some ideas in <a href=\"https://github.com/BP-WG/stingerjet-docs\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - BP-WG/stingerjet-docs: StingerJet: wallet declarative language</a>, and I was also planning working on a binary descriptor encoding and script template library - but never had a time to finish both of these things.</p>\n<p>I have ended up with just using the hash of the first derived scriptpubkey from a descriptor as a deterministic descriptor id.</p>\n<p>Your work gives me a push to complete my work on these ideas; maybe I will be able to re-use some of your library code there - or we can move shared parts into some crate. I will keep you updated on my work in progress.</p>\n<p>(PS. I am the author of <a href=\"https://mycitadel.io\" rel=\"noopener nofollow ugc\">https://mycitadel.io</a>, so I have a wallet where I want to implement all of that; but also have done BP: a rust from-scratch bitcoin library implementation independent from rust-bitcoin and rust-miniscript, which can be found in <a href=\"https://github.com/BP-WG/bp-std\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - BP-WG/bp-std: Modern &amp; lightweight implementation of bitcoin standards without rust-bitcoin/miniscript dependencies</a> and <a href=\"https://github.com/BP-WG/bp-core\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - BP-WG/bp-core: BP Core Lib: consensus data structures and client-side-validation library for bitcoin protocol</a>).</p>",
  "post_number": 2,
  "post_type": 1,
  "posts_count": 2,
  "updated_at": "2025-07-12T10:33:39.955Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 1,
  "readers_count": 0,
  "score": 0,
  "yours": false,
  "topic_id": 1804,
  "topic_slug": "a-rust-library-to-encode-descriptors-with-a-30-40-size-reduction",
  "topic_title": "A rust library to encode descriptors with a 30-40% size reduction",
  "topic_html_title": "A rust library to encode descriptors with a 30-40% size reduction",
  "category_id": 8,
  "display_username": "Dr. Maxim Orlovsky",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Thank you for putting an effort into this!\n\nSome time ago I understood I am not satisfied with bitcoin descriptors being non-deterministic strings due to a bunch of reasons:\n- ambiguity in using `'`, `h` (and sometimes even `H`);\n- ambiguity in specifying `/*/*` or `/<0;1>/*` in terminal derivation;\n- ambiguity in using upper- or lower-case encoding for the master key fingerprint;\n- possibility of arbitrary using spaces, newlines etc between descriptor components.\n\nThis all results in the fact that you can't compare two descriptor strings to be equivalent, nor you can't use a descriptor checksum as a sort of id.\n\nOther then the problem with the deteminism, it is quite strange that you can write an syntactically-valid descriptor which is semantically invalid (can't represent a wallet), for instance when different xpubs in multisig use different derivation options (like one pub having `/<0;1>/*` and the other `/<0;1;2>/*`, which is meaningless).\n\nFinally, multisite descriptors for segwit or taproot may have the same actors repeating the same xpubs in different parts of the descriptor, making it overly bulk and completely human-uncheckable.\n\nI started to look into a ways of encoding descriptor in a standard deterministic way, and I also came with an idea similar to splitting the descriptor into a template and payload part. I had put some ideas in https://github.com/BP-WG/stingerjet-docs, and I was also planning working on a binary descriptor encoding and script template library - but never had a time to finish both of these things.\n\nI have ended up with just using the hash of the first derived scriptpubkey from a descriptor as a deterministic descriptor id.\n\nYour work gives me a push to complete my work on these ideas; maybe I will be able to re-use some of your library code there - or we can move shared parts into some crate. I will keep you updated on my work in progress.\n\n(PS. I am the author of https://mycitadel.io, so I have a wallet where I want to implement all of that; but also have done BP: a rust from-scratch bitcoin library implementation independent from rust-bitcoin and rust-miniscript, which can be found in https://github.com/BP-WG/bp-std and https://github.com/BP-WG/bp-core).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 482,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Thank you for putting an effort into this! \nSome time ago I understood I am not satisfied with bitcoin descriptors being non-deterministic strings due to a bunch of reasons: \n\nambiguity in using &#39;, h (and sometimes even H);\nambiguity in specifying /*/* or /&lt;0;1&gt;/* in terminal derivation;\nambiguity i&hellip;",
  "truncated": true,
  "post_url": "/t/a-rust-library-to-encode-descriptors-with-a-30-40-size-reduction/1804/2",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}