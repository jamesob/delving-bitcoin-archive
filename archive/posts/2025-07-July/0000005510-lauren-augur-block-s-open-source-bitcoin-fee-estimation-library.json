{
  "id": 5510,
  "name": "",
  "username": "lauren",
  "avatar_template": "/user_avatar/delvingbitcoin.org/lauren/{size}/1401_2.png",
  "created_at": "2025-07-16T22:04:13.944Z",
  "cooked": "<h1><a name=\"p-5510-augur-blocks-open-source-bitcoin-fee-estimation-library-1\" class=\"anchor\" href=\"#p-5510-augur-blocks-open-source-bitcoin-fee-estimation-library-1\"></a>Augur: Block\u2019s Open Source Bitcoin Fee Estimation Library</h1>\n<p>At Block, we\u2019ve just open-sourced <a href=\"https://github.com/block/bitcoin-augur\" rel=\"noopener nofollow ugc\">Augur</a>, the Bitcoin fee estimator that powers all of Block\u2019s on-chain transactions. While Block\u2019s engineering blog <a href=\"https://engineering.block.xyz/blog/augur-an-open-source-bitcoin-fee-estimation-library\" rel=\"noopener nofollow ugc\">post</a> covers the broader motivations behind the project, we wanted to share some technical details here - what we built, how it works, how it performs, and what\u2019s next.</p>\n<h2><a name=\"p-5510-what-we-built-2\" class=\"anchor\" href=\"#p-5510-what-we-built-2\"></a>What We Built</h2>\n<p><strong>Augur</strong> is a mempool-based Bitcoin fee estimator designed to generate real-time fee recommendations across a range of confirmation targets and confidence levels.</p>\n<p>Highlights:</p>\n<ul>\n<li><strong>Mempool-driven:</strong> Estimation relies on live mempool data, not historical block data.</li>\n<li><strong>Reference implementation:</strong> A starter Kotlin <a href=\"https://github.com/block/bitcoin-augur-reference\" rel=\"noopener nofollow ugc\">package</a> is available for developers.</li>\n<li><strong>Public API endpoint:</strong> You can query live fee estimates, updated every 30 seconds, at<br>\n<a href=\"https://pricing.bitcoin.block.xyz/fees\" rel=\"noopener nofollow ugc\"><code>https://pricing.bitcoin.block.xyz/fees</code></a></li>\n</ul>\n<p>Here\u2019s a sample response from the API:</p>\n<pre data-code-wrap=\"json\"><code class=\"lang-json\">{\n  \"estimates\": {\n    \"6\": {\n      \"probabilities\": {\n        \"0.50\": { \"fee_rate\": 2.1135 },\n        \"0.80\": { \"fee_rate\": 4.0277 },\n        \"0.95\": { \"fee_rate\": 6.008 }\n      }\n    },\n    \"144\": {\n      \"probabilities\": {\n        \"0.50\": { \"fee_rate\": 1.0101 },\n        \"0.80\": { \"fee_rate\": 1.0202 },\n        \"0.95\": { \"fee_rate\": 1.1052 }\n      }\n    }\n  },\n  \"mempool_update_time\": \"2025-05-27T16:09:18.461Z\"\n}\n</code></pre>\n<p>Interpretation Example: <em>If I pay 1.1052 sat/vB in fees, then I can be 95% confident that my transaction will be confirmed within 144 blocks.</em></p>\n<h2><a name=\"p-5510-how-it-works-3\" class=\"anchor\" href=\"#p-5510-how-it-works-3\"></a>How It Works</h2>\n<p>Augur builds on the mempool-first approach popularized by <a class=\"mention\" href=\"/u/felixweis\">@FelixWeis</a> in <a href=\"https://whatthefee.io\" rel=\"noopener nofollow ugc\">WhatTheFee</a>. Unlike Bitcoin Core that models fee dynamics based on past blocks, Augur considers the current mempool state, transaction arrival rates, and the inherent randomness of Bitcoin mining.</p>\n<ul>\n<li>Current mempool weight: Transactions grouped by fee rate into buckets, tracking total weight at each fee level.</li>\n<li>Transaction inflow rates: Measured over both short (30 min) and long (24 hr) windows to capture recent market dynamics.</li>\n<li>Block production probability: Statistical modeling of how many blocks will likely be found in your target timeframe using a Poisson distribution.</li>\n</ul>\n<p>We took the original WhatTheFee <a href=\"https://github.com/FelixWeis/WhatTheFee--legacy\" rel=\"noopener nofollow ugc\">source code</a> and re-engineered it into a <strong>production-ready Kotlin library</strong>\u2014a somewhat unconventional but practical choice, since much of our internal infrastructure runs on Kotlin. In the process, we changed to updating mempool snapshots and estimates continuously as opposed to just after a new block is mined. We also implemented JetBrains\u2019 <a href=\"https://github.com/JetBrains-Research/viktor\" rel=\"noopener nofollow ugc\">viktor</a> for faster numerical array operations.</p>\n<h2><a name=\"p-5510-how-we-measured-it-4\" class=\"anchor\" href=\"#p-5510-how-we-measured-it-4\"></a>How We Measured It</h2>\n<p>We developed a <strong>custom benchmarking tool</strong> to evaluate Augur\u2019s accuracy and cost-effectiveness against other major fee estimators. Tests were conducted under both high and moderate mempool volatility.</p>\n<p>To benchmark, we compared estimated fees to actual transaction fees confirmed in each block. We chose to use the following thresholds based on <a class=\"mention\" href=\"/u/ismaelsadeeq\">@ismaelsadeeq</a>\u2019s informative <a href=\"https://delvingbitcoin.org/t/mempool-based-fee-estimation-on-bitcoin-core/703/7\">post</a>:</p>\n<ul>\n<li><strong>5th percentile (p5):</strong> The confirmation threshold. Transactions below this fee rate likely wouldn\u2019t have made it into the block.</li>\n<li><strong>75th percentile (p75):</strong> The overestimation threshold. Fees above this level were considered unnecessarily high.</li>\n</ul>\n<p>Using these thresholds, we calculated these metrics:</p>\n<ul>\n<li><strong>Miss Rate:</strong> Percentage of estimates that were too low (i.e., didn\u2019t confirm, below p5)</li>\n<li><strong>Average Overestimate:</strong> How much users overpaid when estimates were high (above p75)</li>\n<li><strong>Total Difference:</strong> Composite score capturing both under and overestimation</li>\n</ul>\n<p>More benchmarking results can be found in Block\u2019s engineering blog <a href=\"https://engineering.block.xyz/blog/augur-an-open-source-bitcoin-fee-estimation-library\" rel=\"noopener nofollow ugc\">post</a>, but below is one example for a 1-3 block target confirmation during a two-week period of normal-to-moderate volatility (May 2-15, 2025).</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Provider</th>\n<th style=\"text-align:left\">Miss Rate</th>\n<th style=\"text-align:left\">Avg Overestimate</th>\n<th style=\"text-align:left\">Total Difference</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>Augur</strong></td>\n<td style=\"text-align:left\">14.1%</td>\n<td style=\"text-align:left\">15.9%</td>\n<td style=\"text-align:left\"><strong>13.6%</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">WhatTheFee</td>\n<td style=\"text-align:left\">14.0%</td>\n<td style=\"text-align:left\">18.7%</td>\n<td style=\"text-align:left\">16.1%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Mempool.space</td>\n<td style=\"text-align:left\">24.4%</td>\n<td style=\"text-align:left\">21.7%</td>\n<td style=\"text-align:left\">16.4%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Bitcoiner.Live</td>\n<td style=\"text-align:left\"><strong>3.6%</strong></td>\n<td style=\"text-align:left\"><strong>65.5%</strong></td>\n<td style=\"text-align:left\">63.2%</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Blockstream (Bitcoin Core)</td>\n<td style=\"text-align:left\">18.7%</td>\n<td style=\"text-align:left\">44.2%</td>\n<td style=\"text-align:left\">35.9%</td>\n</tr>\n</tbody>\n</table>\n</div><p>Bitcoiner.live achieved its low miss rate by <strong>massive overpayment</strong>\u2014users paid over 65% more than necessary. Augur, by contrast, struck a better balance between reliability and cost, delivering acceptable success rates at roughly <strong>1/4 the cost</strong>.</p>\n<h2><a name=\"p-5510-whats-next-5\" class=\"anchor\" href=\"#p-5510-whats-next-5\"></a>What\u2019s Next</h2>\n<p>We\u2019re building an <strong>open-source version</strong> of our benchmarking tool to enable the community to:</p>\n<ul>\n<li>Reproduce our performance metrics</li>\n<li>Backtest other fee estimators using historical fee provider data</li>\n<li>Contribute improvements to Augur or build their own estimators</li>\n</ul>\n<p>We\u2019ll share the benchmarking tool here once it\u2019s ready. In the meantime, feel free to check out <a href=\"https://github.com/block/bitcoin-augur\" rel=\"noopener nofollow ugc\">Augur</a> and its <a href=\"https://github.com/block/bitcoin-augur-reference\" rel=\"noopener nofollow ugc\">reference implementation</a>. <a class=\"mention\" href=\"/u/zpv\">@zpv</a> and I welcome any questions or feedback in our posts and repos.</p>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 1,
  "updated_at": "2025-07-16T22:04:13.944Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 16,
  "readers_count": 15,
  "score": 68.2,
  "yours": false,
  "topic_id": 1848,
  "topic_slug": "augur-block-s-open-source-bitcoin-fee-estimation-library",
  "topic_title": "Augur: Block\u2019s Open Source Bitcoin Fee Estimation Library",
  "topic_html_title": "Augur: Block\u2019s Open Source Bitcoin Fee Estimation Library",
  "category_id": 8,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "# Augur: Block's Open Source Bitcoin Fee Estimation Library\n\nAt Block, we've just open-sourced [Augur](https://github.com/block/bitcoin-augur), the Bitcoin fee estimator that powers all of Block's on-chain transactions. While Block's engineering blog [post](https://engineering.block.xyz/blog/augur-an-open-source-bitcoin-fee-estimation-library) covers the broader motivations behind the project, we wanted to share some technical details here - what we built, how it works, how it performs, and what's next.\n\n## What We Built\n\n**Augur** is a mempool-based Bitcoin fee estimator designed to generate real-time fee recommendations across a range of confirmation targets and confidence levels.\n\nHighlights:\n\n* **Mempool-driven:** Estimation relies on live mempool data, not historical block data.  \n* **Reference implementation:** A starter Kotlin [package](https://github.com/block/bitcoin-augur-reference) is available for developers.  \n* **Public API endpoint:** You can query live fee estimates, updated every 30 seconds, at  \n    [`https://pricing.bitcoin.block.xyz/fees`](https://pricing.bitcoin.block.xyz/fees)\n\nHere's a sample response from the API:\n\n```json\n{\n  \"estimates\": {\n    \"6\": {\n      \"probabilities\": {\n        \"0.50\": { \"fee_rate\": 2.1135 },\n        \"0.80\": { \"fee_rate\": 4.0277 },\n        \"0.95\": { \"fee_rate\": 6.008 }\n      }\n    },\n    \"144\": {\n      \"probabilities\": {\n        \"0.50\": { \"fee_rate\": 1.0101 },\n        \"0.80\": { \"fee_rate\": 1.0202 },\n        \"0.95\": { \"fee_rate\": 1.1052 }\n      }\n    }\n  },\n  \"mempool_update_time\": \"2025-05-27T16:09:18.461Z\"\n}\n```\n\nInterpretation Example: *If I pay 1.1052 sat/vB in fees, then I can be 95% confident that my transaction will be confirmed within 144 blocks.*\n\n## How It Works\n\nAugur builds on the mempool-first approach popularized by @FelixWeis in [WhatTheFee](https://whatthefee.io). Unlike Bitcoin Core that models fee dynamics based on past blocks, Augur considers the current mempool state, transaction arrival rates, and the inherent randomness of Bitcoin mining.\n\n* Current mempool weight: Transactions grouped by fee rate into buckets, tracking total weight at each fee level.  \n* Transaction inflow rates: Measured over both short (30 min) and long (24 hr) windows to capture recent market dynamics.  \n* Block production probability: Statistical modeling of how many blocks will likely be found in your target timeframe using a Poisson distribution.\n\nWe took the original WhatTheFee [source code](https://github.com/FelixWeis/WhatTheFee--legacy) and re-engineered it into a **production-ready Kotlin library**\u2014a somewhat unconventional but practical choice, since much of our internal infrastructure runs on Kotlin. In the process, we changed to updating mempool snapshots and estimates continuously as opposed to just after a new block is mined. We also implemented JetBrains' [viktor](https://github.com/JetBrains-Research/viktor) for faster numerical array operations.\n\n## How We Measured It\n\nWe developed a **custom benchmarking tool** to evaluate Augur's accuracy and cost-effectiveness against other major fee estimators. Tests were conducted under both high and moderate mempool volatility.\n\nTo benchmark, we compared estimated fees to actual transaction fees confirmed in each block. We chose to use the following thresholds based on @ismaelsadeeq\u2019s informative [post](https://delvingbitcoin.org/t/mempool-based-fee-estimation-on-bitcoin-core/703/7):\n\n* **5th percentile (p5):** The confirmation threshold. Transactions below this fee rate likely wouldn't have made it into the block.  \n* **75th percentile (p75):** The overestimation threshold. Fees above this level were considered unnecessarily high.\n\nUsing these thresholds, we calculated these metrics:\n\n* **Miss Rate:** Percentage of estimates that were too low (i.e., didn't confirm, below p5)  \n* **Average Overestimate:** How much users overpaid when estimates were high (above p75)  \n* **Total Difference:** Composite score capturing both under and overestimation\n\nMore benchmarking results can be found in Block's engineering blog [post](https://engineering.block.xyz/blog/augur-an-open-source-bitcoin-fee-estimation-library), but below is one example for a 1-3 block target confirmation during a two-week period of normal-to-moderate volatility (May 2-15, 2025). \n\n| Provider | Miss Rate | Avg Overestimate | Total Difference |\n| :---- | :---- | :---- | :---- |\n| **Augur** | 14.1% | 15.9% | **13.6%** |\n| WhatTheFee | 14.0% | 18.7% | 16.1% |\n| Mempool.space | 24.4% | 21.7% | 16.4% |\n| Bitcoiner.Live | **3.6%** | **65.5%** | 63.2% |\n| Blockstream (Bitcoin Core) | 18.7% | 44.2% | 35.9% |\n\n\nBitcoiner.live achieved its low miss rate by **massive overpayment**\u2014users paid over 65% more than necessary. Augur, by contrast, struck a better balance between reliability and cost, delivering acceptable success rates at roughly **1/4 the cost**.\n\n\n## What's Next\n\nWe're building an **open-source version** of our benchmarking tool to enable the community to:\n\n* Reproduce our performance metrics  \n* Backtest other fee estimators using historical fee provider data  \n* Contribute improvements to Augur or build their own estimators\n\nWe'll share the benchmarking tool here once it's ready. In the meantime, feel free to check out [Augur](https://github.com/block/bitcoin-augur) and its [reference implementation](https://github.com/block/bitcoin-augur-reference). @zpv and I welcome any questions or feedback in our posts and repos.",
  "actions_summary": [
    {
      "id": 2,
      "count": 4
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 854,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "<a name=\"p-5510-augur-blocks-open-source-bitcoin-fee-estimation-library-1\" class=\"anchor\" href=\"#p-5510-augur-blocks-open-source-bitcoin-fee-estimation-library-1\"></a>Augur: Block\u2019s Open Source Bitcoin Fee Estimation Library\nAt Block, we\u2019ve just open-sourced <a href=\"https://github.com/block/bitcoin-augur\" rel=\"noopener nofollow ugc\">Augur</a>, the Bitcoin fee estimator that powers all of Block\u2019s on-chain transactions. While Block\u2019s engineering blog <a href=\"https://engineering.block.xyz/blog/augur-an-open-source-bitcoin-fee-estimation-library\" rel=\"noopener nofollow ugc\">post</a> covers the broader motivations behind the project, we wanted to share some technical deta&hellip;",
  "truncated": true,
  "post_url": "/t/augur-block-s-open-source-bitcoin-fee-estimation-library/1848/1",
  "reactions": [
    {
      "id": "rocket",
      "type": "emoji",
      "count": 3
    },
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 4,
  "current_user_used_main_reaction": false
}