{
  "id": 5405,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/user_avatar/delvingbitcoin.org/chris_stewart_5/{size}/296_2.png",
  "created_at": "2025-07-04T18:07:40.193Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"1440000bytes\" data-post=\"3\" data-topic=\"1809\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/1440000bytes/48/301_2.png\" class=\"avatar\"> 1440000bytes:</div>\n<blockquote>\n<p>Vaults will be used with a notification service or watchtower that can monitor such transactions, notify the user, replace transactions, etc.</p>\n</blockquote>\n</aside>\n<p>Assuming we\u2019re dealing with an <code>OP_CTV</code> template that commits to <strong>exactly one input</strong>, I don\u2019t believe we can \u201creplace\u201d an already created, unsatisfiable <code>UTXO</code> in the way one might replace an unconfirmed transaction via RBF. Once a transaction creating such an underfunded <code>OP_CTV</code> <code>UTXO</code> is confirmed, that <code>UTXO</code> becomes a permanent part of the <code>UTXO</code> set. Its <code>OP_CTV</code> script\u2019s requirements (including the exact amount) are set in stone, effectively locking the funds if the received amount doesn\u2019t match the committed amount precisely.</p>\n<p>A traditional watchtower monitors for <em>spending</em> attempts of the <code>OP_CTV</code> <code>UTXO</code> - this wouldn\u2019t be able to help with an <em>underfunded funding transaction</em> that has already confirmed. The watchtower would only see the <code>OP_CTV</code> <code>UTXO</code> available for spending, but wouldn\u2019t inherently know that it\u2019s unspendable due to an amount mismatch.</p>\n<p>For a watchtower to truly help in this \u201cunderfunding\u201d scenario, it would need to:</p>\n<ol>\n<li><strong>Be aware of the <code>OP_CTV</code> hash preimage at the time of the <code>UTXO</code>\u2019s creation:</strong> This means the watchtower would need to know the <em>exact</em> transaction template that the <code>OP_CTV</code> hash commits to, including the expected input amount, before the funding transaction is even broadcast.</li>\n<li><strong>Monitor the funding transaction:</strong> It would then have to compare the actual amount received by the <code>OP_CTV</code> output in the funding transaction against the expected amount from the preimage.</li>\n<li><strong>Alert the user <em>before confirmation</em>:</strong> The watchtower would need to detect the mismatch and alert the user <em>while the funding transaction is still unconfirmed</em> (if it was an RBF-eligible transaction) so that it could potentially be replaced.</li>\n</ol>\n<p>The challenge here is that the specific amount committed to within the <code>OP_CTV</code> hash is <strong>not readily apparent from data available on-chain</strong> when the <code>OP_CTV</code> <code>UTXO</code> is created. This commitment is only fully revealed when an attempt is made to <em>spend</em> the <code>OP_CTV</code> <code>UTXO</code> by providing the pre-image and the full transaction template as part of the witness. Therefore, a watchtower simply monitoring the blockchain wouldn\u2019t know at the funding stage that the <code>UTXO</code> is unsatisfiable.</p>\n<p>This reinforces my point about committing to at least two inputs in the <code>OP_CTV</code> template. This design choice effectively provides a \u201crescue path\u201d for correcting amount mismatches <em>after</em> the <code>UTXO</code> has been created.</p>",
  "post_number": 4,
  "post_type": 1,
  "posts_count": 5,
  "updated_at": "2025-07-04T18:07:40.193Z",
  "reply_count": 1,
  "reply_to_post_number": 3,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 2,
  "readers_count": 1,
  "score": 5.4,
  "yours": false,
  "topic_id": 1809,
  "topic_slug": "understanding-and-mitigating-a-op-ctv-footgun-the-unsatisfiable-utxo",
  "topic_title": "Understanding and Mitigating a OP_CTV Footgun: The Unsatisfiable UTXO",
  "topic_html_title": "Understanding and Mitigating a OP_CTV Footgun: The Unsatisfiable UTXO",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"1440000bytes, post:3, topic:1809\"]\nVaults will be used with a notification service or watchtower that can monitor such transactions, notify the user, replace transactions, etc.\n[/quote]\n\nAssuming we're dealing with an `OP_CTV` template that commits to **exactly one input**, I don't believe we can \"replace\" an already created, unsatisfiable `UTXO` in the way one might replace an unconfirmed transaction via RBF. Once a transaction creating such an underfunded `OP_CTV` `UTXO` is confirmed, that `UTXO` becomes a permanent part of the `UTXO` set. Its `OP_CTV` script's requirements (including the exact amount) are set in stone, effectively locking the funds if the received amount doesn't match the committed amount precisely.\n\nA traditional watchtower monitors for *spending* attempts of the `OP_CTV` `UTXO` - this wouldn't be able to help with an *underfunded funding transaction* that has already confirmed. The watchtower would only see the `OP_CTV` `UTXO` available for spending, but wouldn't inherently know that it's unspendable due to an amount mismatch.\n\nFor a watchtower to truly help in this \"underfunding\" scenario, it would need to:\n\n1. **Be aware of the `OP_CTV` hash preimage at the time of the `UTXO`'s creation:** This means the watchtower would need to know the *exact* transaction template that the `OP_CTV` hash commits to, including the expected input amount, before the funding transaction is even broadcast.\n2. **Monitor the funding transaction:** It would then have to compare the actual amount received by the `OP_CTV` output in the funding transaction against the expected amount from the preimage.\n3. **Alert the user *before confirmation*:** The watchtower would need to detect the mismatch and alert the user *while the funding transaction is still unconfirmed* (if it was an RBF-eligible transaction) so that it could potentially be replaced.\n\nThe challenge here is that the specific amount committed to within the `OP_CTV` hash is **not readily apparent from data available on-chain** when the `OP_CTV` `UTXO` is created. This commitment is only fully revealed when an attempt is made to *spend* the `OP_CTV` `UTXO` by providing the pre-image and the full transaction template as part of the witness. Therefore, a watchtower simply monitoring the blockchain wouldn't know at the funding stage that the `UTXO` is unsatisfiable.\n\nThis reinforces my point about committing to at least two inputs in the `OP_CTV` template. This design choice effectively provides a \"rescue path\" for correcting amount mismatches *after* the `UTXO` has been created.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "Assuming we\u2019re dealing with an OP_CTV template that commits to exactly one input, I don\u2019t believe we can \u201creplace\u201d an already created, unsatisfiable UTXO in the way one might replace an unconfirmed transaction via RBF. Once a transaction creating such an underfunded OP_CTV UTXO is confirmed, that U&hellip;",
  "truncated": true,
  "post_url": "/t/understanding-and-mitigating-a-op-ctv-footgun-the-unsatisfiable-utxo/1809/4",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}