{
  "id": 5430,
  "name": "Dr. Maxim Orlovsky",
  "username": "dr-orlovsky",
  "avatar_template": "/user_avatar/delvingbitcoin.org/dr-orlovsky/{size}/677_2.png",
  "created_at": "2025-07-10T13:33:40.548Z",
  "cooked": "<p>The LNP/BP Standards Association is excited to announce <strong>the final production-ready release of the RGB smart contracts consensus layer (v0.12)!</strong></p>\n<p>From today, all RGB contract developers and issuers can deploy contracts on both testnet and Bitcoin mainnet using this stable consensus release.</p>\n<p><strong><img src=\"https://delvingbitcoin.org/images/emoji/twitter/warning.png?v=14\" title=\":warning:\" class=\"emoji\" alt=\":warning:\" loading=\"lazy\" width=\"20\" height=\"20\"> Important:</strong> For security and ecosystem consistency, we strongly recommend re-issuing any contracts created with pre-release versions using this final v0.12.</p>\n<p><strong><img src=\"https://delvingbitcoin.org/images/emoji/twitter/hammer_and_wrench.png?v=14\" title=\":hammer_and_wrench:\" class=\"emoji\" alt=\":hammer_and_wrench:\" loading=\"lazy\" width=\"20\" height=\"20\"> Please note:</strong></p>\n<p>This is a consensus layer release. It will be followed by releases of the standard library and applications. The consensus layer is unique among RGB libraries because it defines contract stability: only changes at the consensus level can break backward compatibility for contracts. Therefore, with this final v0.12 release, contracts are now forward-compatible.</p>\n<p>Read the full release details on <a href=\"https://rgb.tech/blog/release-v0-12-consensus/\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">RGB smart contracts</a></p>\n<hr>\n<h2><a name=\"p-5430-whats-new-1\" class=\"anchor\" href=\"#p-5430-whats-new-1\"></a>What\u2019s new</h2>\n<p>The version 0.12 of RGB represents a result of 8 months of protocol re-design,\naimed at the following:</p>\n<ol>\n<li>Make protocol ready for zk-STARK compression;</li>\n<li>Simplify the protocol as much as possible,\nreducing any potential attack surface and helping protocol adoption;</li>\n<li>Ensure security of the protocol with thorough unit and integration test coverage,\nincluding tests for potential attacks;</li>\n<li>Make protocol fully production-ready by freezing consensus level changes and ensuring robustness\nand performance.</li>\n</ol>\n<h3><a name=\"p-5430-h-1-zk-starky-rgb-2\" class=\"anchor\" href=\"#p-5430-h-1-zk-starky-rgb-2\"></a>1. zk-STARKy RGB</h3>\n<p>The new RGB architecture for the first time introduces zk-AluVM, which is a compact and performant\nTuring-complete zk-VM made for client-side validation.\nWhile being universal, it offers a non-von-Neuman architecture with an extra-reduced instruction set,\nmade of just 40 instructions and provides read-once memory compatible with single-use seals.</p>\n<p>The contract state was also transformed. Previously, RGB contracts had three variants of state data:\nfungible (with Pedersen commitments and Bulletproofs), non-fungible structured state and binary\nattachments. To make the contract state zk-compressible, version 12 unified state into a single\ntype, made of finite field elements.</p>\n<p>The whole consensus validation was reduced to just a few hundred lines of code, which can be\nrepresented as an arithmetic circuit for a zk prover, allowing recursive history compression.</p>\n<p>All these changes not just make RGB ready for zk-STARK provers and verifiers, but also allow\nuse of RGB with the future client-side validation layer 1 codenamed <a href=\"https://github.com/LNP-BP/layer1\" rel=\"noopener nofollow ugc\">Prime</a>.</p>\n<h3><a name=\"p-5430-h-2-protocol-simplification-3\" class=\"anchor\" href=\"#p-5430-h-2-protocol-simplification-3\"></a>2. Protocol simplification</h3>\n<p>RGB so far has been notoriously infamous for the protocol complexity.\nVersion 0.12 should shift that impression, since most of the changes in it\nwere an actual simplification of the protocol.</p>\n<p>Overall, we have achieved x4 reduction in the size of the consensus code and\nx2 reduction in standard libraries, as well as a significant reduction in the number of data types,\nand removal of ~30% of generic type parameters in the APIs.</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/2X/0/0501eb24b9c7cefd89c27f3ec8f8bcbb3b9eb343.jpeg\" data-download-href=\"https://delvingbitcoin.org/uploads/default/0501eb24b9c7cefd89c27f3ec8f8bcbb3b9eb343\" title=\"Consensus codebase\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/2X/0/0501eb24b9c7cefd89c27f3ec8f8bcbb3b9eb343_2_690x388.jpeg\" alt=\"Consensus codebase\" data-base62-sha1=\"IiuRtnE2xm1vgY2tSQS5VeLH8v\" width=\"690\" height=\"388\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/2X/0/0501eb24b9c7cefd89c27f3ec8f8bcbb3b9eb343_2_690x388.jpeg, https://delvingbitcoin.org/uploads/default/optimized/2X/0/0501eb24b9c7cefd89c27f3ec8f8bcbb3b9eb343_2_1035x582.jpeg 1.5x, https://delvingbitcoin.org/uploads/default/optimized/2X/0/0501eb24b9c7cefd89c27f3ec8f8bcbb3b9eb343_2_1380x776.jpeg 2x\" data-dominant-color=\"353B40\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">Consensus codebase</span><span class=\"informations\">1920\u00d71080 242 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>Such simplification provides several gains:</p>\n<ul>\n<li>much reduced attack surface;</li>\n<li>better auditability;</li>\n<li>better performance;</li>\n<li>better developer experience;</li>\n<li>which opens a way for building simpler UX with improved user experience.</li>\n</ul>\n<p>Below, we cover some of the technical details of the main simplifications\nwhich has happened in v0.12.</p>\n<h4><a name=\"p-5430-h-21-seal-unification-4\" class=\"anchor\" href=\"#p-5430-h-21-seal-unification-4\"></a>2.1. Seal unification</h4>\n<p>RGB uses single-use seals, a cryptographic primitive, to prevent double-spending by \u201canchoring\u201d\ninto a UTXO-based blockchain or a sidechain.</p>\n<p>Previously, there were two different types of single-use seals, which can be used by an RGB contract:\nso-called <em>tapret</em> and <em>opret</em>-based. <em>Tapret</em> seals can\u2019t be seen inside a bitcoin transaction,\nbut require a taproot wallet, which still is not fully supported by all exchanges,\nhardware wallets or Lightning nodes. <em>Opret</em> is an answer to that; it utilizes old <code>OP_RETURN</code>s\nto put a 32-byte commitment into a bitcoin transaction;\nwhich has many drawbacks (higher transaction price), exposure to chain analysis, etc.,\nbut helps when a wallet or a user can\u2019t use taproot.</p>\n<p>However, the presence of two distinct seal types, where a user chooses one of the variants,\nhad created tremendous complexity, both in code, APIs and in user experience,\nand resulted in a large attack surface.</p>\n<p>In v0.12 we found a beautiful way how to unify two distinct seal types into a single-one,\nyet still supporting <code>OP_RETURN</code> fallback option.</p>\n<h4><a name=\"p-5430-h-22-removal-of-pedersen-commitments-and-bulletproofs-5\" class=\"anchor\" href=\"#p-5430-h-22-removal-of-pedersen-commitments-and-bulletproofs-5\"></a>2.2. Removal of Pedersen commitments and Bulletproofs</h4>\n<p>Since the inception of RGB protocol, it was using confidential assets by Blockstream for providing\ncontracts with a fungible state. While the idea of confidential assets has been great,\nit was lacking an efficient implementation, postponing use of RGB in production.</p>\n<p>The problem was that the original Blockstream implementation of confidential assets for Liquid\n(and the Elements project) used older range proofs instead of bulletproofs,\nwhich are much larger and longer to validate.\nOn the other hand, Bulletproofs were never implemented for the Bitcoin SECP256K1 curve,\nwhile the RGB community and devs have been waiting for this implementation for more than 5 years.</p>\n<p>With the introduction of zkVM and zk-STARK compatibility, Bulletproofs and Pedersen commitments\nhave become unneeded, since zk-STARK can provide much better performance\nand offers a range of ready-to-use implementations.</p>\n<h4><a name=\"p-5430-h-23-state-unification-6\" class=\"anchor\" href=\"#p-5430-h-23-state-unification-6\"></a>2.3. State unification</h4>\n<p>With the removal of Pedersen commitments and Bulletproofs, and the introduction of zkVM,\nwe were able to simplify and unify the state of RGB contracts.\nPreviously, an RGB contract may have three forms of a state:\nfungible, structured (non-fungible) and blob attachments.\nIn v0.12, this state is unified under a single state type, which, again,\nreduces the codebase and the attack surface.</p>\n<h4><a name=\"p-5430-h-24-no-more-schemata-7\" class=\"anchor\" href=\"#p-5430-h-24-no-more-schemata-7\"></a>2.4. No more schemata</h4>\n<p>zk-AluVM has changed a lot: with zk-STARKs, we need to be able to represent everything in the\nconsensus in an arithmetized form.\nThus, we got rid of the old way of writing RGB contracts with schemata and unlocked the real\npotential for smart contract programming with Turing-complete zk-AluVM assembly\nand higher-level languages on top, like Contractum.</p>\n<p>From the point of view of contract issuers, now, instead of importing schemata, interfaces and\nother components, they will be using so-called issuers, provided by the contract developers.\nThe users will be also less confused with an obscure terminology.</p>\n<h4><a name=\"p-5430-h-25-removed-interfaces-and-implementations-8\" class=\"anchor\" href=\"#p-5430-h-25-removed-interfaces-and-implementations-8\"></a>2.5. Removed interfaces and implementations</h4>\n<p>The way how interfaces work was also fully refactored, mostly due to zkVM.\nMost importantly, it has become much simpler.</p>\n<p>Previously, software devs integrating RGB were lost in multiple types related to interfaces:\ninterfaces, standards, implementations, schemata, etc.\nMany of them were also made with generic type parameters, which made it much harder to integrate\nand fully support their functionality.</p>\n<p>Now, with v0.12, the only thing a developer using RGB should know about is so-called contract <em>API</em>:\na simple non-generic object explaining to a wallet how to operate with a contract.</p>\n<p>Interfaces are still present, but not in the standard library:\nthey live solely now in the world of Contractum language and are used only by contract developers,\nand the Contractum compiler will be taking care of compiling them into the contract APIs.</p>\n<h4><a name=\"p-5430-h-26-single-blockchain-protocols-9\" class=\"anchor\" href=\"#p-5430-h-26-single-blockchain-protocols-9\"></a>2.6. Single-blockchain protocols</h4>\n<p>Since v0.11, RGB supported multiple blockchains. In v0.12 we made it simpler: instead of allowing\na contract to operate on multiple blockchains, each blockchain will have its own version of the\ncontract, which significantly reduces possible attack surface and API complexity.</p>\n<h4><a name=\"p-5430-h-27-no-more-blank-state-transitions-10\" class=\"anchor\" href=\"#p-5430-h-27-no-more-blank-state-transitions-10\"></a>2.7. No more blank state transitions</h4>\n<p>One of the concepts that were hard to grasp in RGB was the concept of blank state transitions.\nIn v0.12, because of new and better way to build contract API, they are gone.</p>\n<h3><a name=\"p-5430-h-3-payment-improvements-11\" class=\"anchor\" href=\"#p-5430-h-3-payment-improvements-11\"></a>3. Payment improvements</h3>\n<h4><a name=\"p-5430-h-31-invoicing-12\" class=\"anchor\" href=\"#p-5430-h-31-invoicing-12\"></a>3.1. Invoicing</h4>\n<p>The invoices have become much richer:\nthey may specify any forms of a fungible- and non-fungible state\nand allow providing more accessory information in a better structured way.</p>\n<h4><a name=\"p-5430-h-32-multiple-asset-contracts-13\" class=\"anchor\" href=\"#p-5430-h-32-multiple-asset-contracts-13\"></a>3.2. Multiple-asset contracts</h4>\n<p>Contracts now may expose multiple tokens, which may interact,\nand these tokens can be accessed independently or jointly via both invoices and APIs.</p>\n<h4><a name=\"p-5430-h-33-payment-scripts-14\" class=\"anchor\" href=\"#p-5430-h-33-payment-scripts-14\"></a>3.3. Payment scripts</h4>\n<p>Version v0.12 for the first time introduces a concept of <em>payment scripts</em>,\nwhich is a powerful tool helping to construct and execute complex payments,\nwhich may include multiple beneficiaries, multiple contracts and even multiple consequent\ntransactions or a transaction graph.\nThe functionality helps in:</p>\n<ul>\n<li>multisig wallets;</li>\n<li>coinjoins and payjoins;</li>\n<li>transaction batching at aggregation in wallets and exchanges;</li>\n<li>lighting channel operations;</li>\n<li>future Ark applications.</li>\n</ul>\n<h4><a name=\"p-5430-h-34-re-org-support-15\" class=\"anchor\" href=\"#p-5430-h-34-re-org-support-15\"></a>3.4. Re-org support</h4>\n<p>As any blockchain-based system, RGB depends on what happens there, and one of the main\nissues with blockchain deep reorgs, which may lead to the loss of funds by the users.</p>\n<p>The problem was never properly addressed in RGB,\nuntil in 2024 we discovered a type of attack which can leverage even shallow reorgs.</p>\n<p>For the version v0.12 we have developed and implemented a mathematical model,\nformally proving how the system can be protected from such attacks,\neven if multiple and deep re-orgs happen or got combined.</p>\n<h3><a name=\"p-5430-h-4-performance-16\" class=\"anchor\" href=\"#p-5430-h-4-performance-16\"></a>4. Performance</h3>\n<p>Performance was one of the pain points of the past RGB release.\nIn version 0.12 we did a huge work to bring it up to the production requirements.</p>\n<h4><a name=\"p-5430-h-41-consignment-streams-17\" class=\"anchor\" href=\"#p-5430-h-41-consignment-streams-17\"></a>4.1. Consignment streams</h4>\n<p>Transfer of client-side data during RGB payment is made in the form of a binary data sent\nfrom a payer to a beneficiary, possibly via a relay.\nThese binary data packs are named <em>consignments</em>.</p>\n<p>Before, consignments were distributed in the form of files,\nand, before being validated and accepted, have to be fully read into memory by a receiver.\nSince consignments may span multiple megabytes, this was putting high resource requirements\nand made it nearly impossible to use hardware wallets for verification.</p>\n<p>In v0.12 consignments have become streams, which are never put into the memory and are\nvalidated on the go, as they are received,\nnot ever taking more than a few hundred bytes of memory (!!!).\nThis is much more suitable for mobile wallets, servers, and paves the way for the hardware wallet\napplications.</p>\n<h4><a name=\"p-5430-h-42-consignment-verification-18\" class=\"anchor\" href=\"#p-5430-h-42-consignment-verification-18\"></a>4.2. Consignment verification</h4>\n<p>It is not that the consignments are no more read into the memory;\nduring their validation, the RGB software doesn\u2019t make requests to a blockchain indexer.\nBefore, the consignment validation was slowed manifold due to the requests;\nnow, the blockchain index synchronization is separated from the consignment validation,\nwhich became order of magnitude faster.</p>\n<h4><a name=\"p-5430-h-43-contract-data-are-no-more-kept-in-memory-19\" class=\"anchor\" href=\"#p-5430-h-43-contract-data-are-no-more-kept-in-memory-19\"></a>4.3. Contract data are no more kept in memory</h4>\n<p>RGB runtime was also used to load and keep all the contracts and their data in the memory,\nincluding the whole of the contract history.\nThis was boosting memory usage outside acceptable bounds, especially in server and mobile apps.</p>\n<p>With v0.12, only used contracts are loaded, but even for them, only the index data and state\nare kept in the memory and can be offloaded any time, contract-by-contract.\nThis reduced memory requirements several orders of magnitude.</p>\n<h4><a name=\"p-5430-h-44-persistence-performance-boost-with-nosql-20\" class=\"anchor\" href=\"#p-5430-h-44-persistence-performance-boost-with-nosql-20\"></a>4.4. Persistence performance boost with NoSQL</h4>\n<p>Last, but not least, we have integrated a dedicated append-only NoSQL embedded database to\nkeep the contract history.\nSince the database was designed specifically for the client-side validation needs,\nwhere we do not need some operations like deletion, and many data have a known fixed size,\nits introduction has boosted performance, not just compared to v0.11,\nbut also compared to classical embedded NoSQL databases like Rust Sled and ReDB.</p>\n<h3><a name=\"p-5430-h-5-test-coverage-21\" class=\"anchor\" href=\"#p-5430-h-5-test-coverage-21\"></a>5. Test coverage</h3>\n<p>In version 0.10, RGB for the first time got a full integration test suite.\nHowever, we understood that it is not enough: integration tests,\ndemonstrating just the typical happy-path or shallow attack scenarios are insufficient\nto prove the security of the system.</p>\n<p>Version 0.12 is the first version achieving full consensus test coverage not just with\nintegration, but also with unit tests, which also check known attack scenarios.\nThe unit test coverage has increased several folds\nand exceeds 66.7% for all RGB abstraction levels, reaching &gt;75% in the consensus libraries.</p>\n<hr>\n<h2><a name=\"p-5430-using-the-release-22\" class=\"anchor\" href=\"#p-5430-using-the-release-22\"></a>Using the release</h2>\n<p>The source code of the release is available on <a href=\"https://github.com/RGB-WG/rgb/tree/v0.12.0-rc.1.1\" rel=\"noopener nofollow ugc\">GitHub</a>.</p>\n<p>Those power users who\u2019d like to play with the command line\nmay install it either from the sourcecode or using Rust Cargo command</p>\n<pre data-code-wrap=\"bash\"><code class=\"lang-bash\">cargo install rgb-wallet\n</code></pre>\n<p>Demo &amp; examples can be found here:</p>\n<ul>\n<li><a href=\"https://github.com/RGB-WG/rgb/tree/v0.12.0/examples\" rel=\"noopener nofollow ugc\">https://github.com/RGB-WG/rgb/tree/v0.12.0/examples</a></li>\n<li><a href=\"https://github.com/RGB-WG/rgb-sandbox/blob/e975b885e9d718a0cb2da7739ee942031bc9d2ed/demo.sh\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">rgb-sandbox/demo.sh at e975b885e9d718a0cb2da7739ee942031bc9d2ed \u00b7 RGB-WG/rgb-sandbox \u00b7 GitHub</a></li>\n<li><a href=\"https://github.com/pandora-prime/rgb-issuers/\" class=\"inline-onebox\" rel=\"noopener nofollow ugc\">GitHub - pandora-prime/rgb-issuers: RGB contract issuers by Pandora Prime</a></li>\n</ul>\n<p>To start integrating RGB, please feel free to contract LNP/BP Standards Association\nvia e-mail info at lnp-bp dot org.</p>\n<hr>\n<h2><a name=\"p-5430-whats-next-23\" class=\"anchor\" href=\"#p-5430-whats-next-23\"></a>What\u2019s next</h2>\n<ol>\n<li>\n<p>We plan to update <a href=\"https://rgb.tech\" rel=\"noopener nofollow ugc\">the website</a> and documentation on it in order to reflect all the changes.\nThis will be happening over the course of the next few weeks.</p>\n</li>\n<li>\n<p>We will be supporting developers integrating RGB v0.12 into their products.\nOnce we see the ecosystem adoption, v0.12 release candidate will become a full release.</p>\n</li>\n<li>\n<p>We expect the first products and assets using this version to be released during June.\nWhile it is up to each company to decide when to launch their assets and apps\ninto the mainnet, we hope that will happen during the Summer 2025.</p>\n</li>\n<li>\n<p>Once v0.12 gets to the mainnet and production, a new non-profit, named <strong>RGB Consortium</strong>\nwill be created by the companies using RGB in their products.\nThis organization will ensure the protocol stability and will take care of the codebase maintenance.</p>\n</li>\n</ol>\n<hr>\n<h2><a name=\"p-5430-acknowledgments-24\" class=\"anchor\" href=\"#p-5430-acknowledgments-24\"></a>Acknowledgments</h2>\n<p>The release and v0.12 was designed and implemented by Dr Maxim Orlovsky,\nfinanced by <a href=\"https://pandoraprime.ch/\" rel=\"noopener nofollow ugc\">Pandora Prime Inc.</a>.\n<a href=\"https://bitlightlabs.com/\" rel=\"noopener nofollow ugc\">Bitlight Labs</a>, as one of the major contributors, has completed the integral test coverage,\nensuring the protocol security and scaled community test.\nThe initial three months of development were also financed by <a href=\"https://fulgur.ventures/\" rel=\"noopener nofollow ugc\">Fulgur Ventures</a>.</p>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 1,
  "updated_at": "2025-07-10T13:50:13.532Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 11,
  "readers_count": 10,
  "score": 16.6,
  "yours": false,
  "topic_id": 1822,
  "topic_slug": "rgb-consensus-production-release-v0-12",
  "topic_title": "RGB consensus production release v0.12",
  "topic_html_title": "RGB consensus production release v0.12",
  "category_id": 8,
  "display_username": "Dr. Maxim Orlovsky",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "The LNP/BP Standards Association is excited to announce **the final production-ready release of the RGB smart contracts consensus layer (v0.12)!**\n\nFrom today, all RGB contract developers and issuers can deploy contracts on both testnet and Bitcoin mainnet using this stable consensus release.\n\n**\u26a0\ufe0f Important:** For security and ecosystem consistency, we strongly recommend re-issuing any contracts created with pre-release versions using this final v0.12.\n\n**\ud83d\udee0\ufe0f Please note:**\n\nThis is a consensus layer release. It will be followed by releases of the standard library and applications. The consensus layer is unique among RGB libraries because it defines contract stability: only changes at the consensus level can break backward compatibility for contracts. Therefore, with this final v0.12 release, contracts are now forward-compatible.\n\nRead the full release details on https://rgb.tech/blog/release-v0-12-consensus/\n\n----------------------------------------------------------------------------------------------------\n\nWhat's new\n----------\n\nThe version 0.12 of RGB represents a result of 8 months of protocol re-design,\naimed at the following:\n1. Make protocol ready for zk-STARK compression;\n2. Simplify the protocol as much as possible,\n   reducing any potential attack surface and helping protocol adoption;\n3. Ensure security of the protocol with thorough unit and integration test coverage,\n   including tests for potential attacks;\n4. Make protocol fully production-ready by freezing consensus level changes and ensuring robustness\n   and performance.\n\n### 1. zk-STARKy RGB\n\nThe new RGB architecture for the first time introduces zk-AluVM, which is a compact and performant\nTuring-complete zk-VM made for client-side validation.\nWhile being universal, it offers a non-von-Neuman architecture with an extra-reduced instruction set,\nmade of just 40 instructions and provides read-once memory compatible with single-use seals.\n\nThe contract state was also transformed. Previously, RGB contracts had three variants of state data:\nfungible (with Pedersen commitments and Bulletproofs), non-fungible structured state and binary\nattachments. To make the contract state zk-compressible, version 12 unified state into a single\ntype, made of finite field elements.\n\nThe whole consensus validation was reduced to just a few hundred lines of code, which can be\nrepresented as an arithmetic circuit for a zk prover, allowing recursive history compression.\n\nAll these changes not just make RGB ready for zk-STARK provers and verifiers, but also allow\nuse of RGB with the future client-side validation layer 1 codenamed [Prime].\n\n### 2. Protocol simplification\n\nRGB so far has been notoriously infamous for the protocol complexity.\nVersion 0.12 should shift that impression, since most of the changes in it\nwere an actual simplification of the protocol.\n\nOverall, we have achieved x4 reduction in the size of the consensus code and\nx2 reduction in standard libraries, as well as a significant reduction in the number of data types,\nand removal of ~30% of generic type parameters in the APIs.\n\n![Consensus codebase](upload://IiuRtnE2xm1vgY2tSQS5VeLH8v.jpeg)\n\nSuch simplification provides several gains:\n- much reduced attack surface;\n- better auditability;\n- better performance;\n- better developer experience;\n- which opens a way for building simpler UX with improved user experience.\n\nBelow, we cover some of the technical details of the main simplifications\nwhich has happened in v0.12.\n\n#### 2.1. Seal unification\n\nRGB uses single-use seals, a cryptographic primitive, to prevent double-spending by \"anchoring\"\ninto a UTXO-based blockchain or a sidechain.\n\nPreviously, there were two different types of single-use seals, which can be used by an RGB contract:\nso-called _tapret_ and _opret_-based. _Tapret_ seals can't be seen inside a bitcoin transaction,\nbut require a taproot wallet, which still is not fully supported by all exchanges,\nhardware wallets or Lightning nodes. _Opret_ is an answer to that; it utilizes old `OP_RETURN`s\nto put a 32-byte commitment into a bitcoin transaction;\nwhich has many drawbacks (higher transaction price), exposure to chain analysis, etc.,\nbut helps when a wallet or a user can't use taproot.\n\nHowever, the presence of two distinct seal types, where a user chooses one of the variants,\nhad created tremendous complexity, both in code, APIs and in user experience,\nand resulted in a large attack surface.\n\nIn v0.12 we found a beautiful way how to unify two distinct seal types into a single-one,\nyet still supporting `OP_RETURN` fallback option.\n\n#### 2.2. Removal of Pedersen commitments and Bulletproofs\n\nSince the inception of RGB protocol, it was using confidential assets by Blockstream for providing\ncontracts with a fungible state. While the idea of confidential assets has been great,\nit was lacking an efficient implementation, postponing use of RGB in production.\n\nThe problem was that the original Blockstream implementation of confidential assets for Liquid\n(and the Elements project) used older range proofs instead of bulletproofs,\nwhich are much larger and longer to validate.\nOn the other hand, Bulletproofs were never implemented for the Bitcoin SECP256K1 curve,\nwhile the RGB community and devs have been waiting for this implementation for more than 5 years.\n\nWith the introduction of zkVM and zk-STARK compatibility, Bulletproofs and Pedersen commitments\nhave become unneeded, since zk-STARK can provide much better performance\nand offers a range of ready-to-use implementations.\n\n#### 2.3. State unification\n\nWith the removal of Pedersen commitments and Bulletproofs, and the introduction of zkVM,\nwe were able to simplify and unify the state of RGB contracts.\nPreviously, an RGB contract may have three forms of a state:\nfungible, structured (non-fungible) and blob attachments.\nIn v0.12, this state is unified under a single state type, which, again,\nreduces the codebase and the attack surface.\n\n#### 2.4. No more schemata\n\nzk-AluVM has changed a lot: with zk-STARKs, we need to be able to represent everything in the\nconsensus in an arithmetized form.\nThus, we got rid of the old way of writing RGB contracts with schemata and unlocked the real\npotential for smart contract programming with Turing-complete zk-AluVM assembly\nand higher-level languages on top, like Contractum.\n\nFrom the point of view of contract issuers, now, instead of importing schemata, interfaces and\nother components, they will be using so-called issuers, provided by the contract developers.\nThe users will be also less confused with an obscure terminology.\n\n#### 2.5. Removed interfaces and implementations\n\nThe way how interfaces work was also fully refactored, mostly due to zkVM.\nMost importantly, it has become much simpler.\n\nPreviously, software devs integrating RGB were lost in multiple types related to interfaces:\ninterfaces, standards, implementations, schemata, etc.\nMany of them were also made with generic type parameters, which made it much harder to integrate\nand fully support their functionality.\n\nNow, with v0.12, the only thing a developer using RGB should know about is so-called contract _API_:\na simple non-generic object explaining to a wallet how to operate with a contract.\n\nInterfaces are still present, but not in the standard library:\nthey live solely now in the world of Contractum language and are used only by contract developers,\nand the Contractum compiler will be taking care of compiling them into the contract APIs.\n\n#### 2.6. Single-blockchain protocols\n\nSince v0.11, RGB supported multiple blockchains. In v0.12 we made it simpler: instead of allowing\na contract to operate on multiple blockchains, each blockchain will have its own version of the\ncontract, which significantly reduces possible attack surface and API complexity.\n\n#### 2.7. No more blank state transitions\n\nOne of the concepts that were hard to grasp in RGB was the concept of blank state transitions.\nIn v0.12, because of new and better way to build contract API, they are gone.\n\n### 3. Payment improvements\n\n#### 3.1. Invoicing\n\nThe invoices have become much richer:\nthey may specify any forms of a fungible- and non-fungible state\nand allow providing more accessory information in a better structured way.\n\n#### 3.2. Multiple-asset contracts\n\nContracts now may expose multiple tokens, which may interact,\nand these tokens can be accessed independently or jointly via both invoices and APIs.\n\n#### 3.3. Payment scripts\n\nVersion v0.12 for the first time introduces a concept of _payment scripts_,\nwhich is a powerful tool helping to construct and execute complex payments,\nwhich may include multiple beneficiaries, multiple contracts and even multiple consequent\ntransactions or a transaction graph.\nThe functionality helps in:\n- multisig wallets;\n- coinjoins and payjoins;\n- transaction batching at aggregation in wallets and exchanges;\n- lighting channel operations;\n- future Ark applications.\n\n#### 3.4. Re-org support\n\nAs any blockchain-based system, RGB depends on what happens there, and one of the main\nissues with blockchain deep reorgs, which may lead to the loss of funds by the users.\n\nThe problem was never properly addressed in RGB,\nuntil in 2024 we discovered a type of attack which can leverage even shallow reorgs.\n\nFor the version v0.12 we have developed and implemented a mathematical model,\nformally proving how the system can be protected from such attacks,\neven if multiple and deep re-orgs happen or got combined.\n\n### 4. Performance\n\nPerformance was one of the pain points of the past RGB release.\nIn version 0.12 we did a huge work to bring it up to the production requirements.\n\n#### 4.1. Consignment streams\n\nTransfer of client-side data during RGB payment is made in the form of a binary data sent\nfrom a payer to a beneficiary, possibly via a relay.\nThese binary data packs are named _consignments_.\n\nBefore, consignments were distributed in the form of files,\nand, before being validated and accepted, have to be fully read into memory by a receiver.\nSince consignments may span multiple megabytes, this was putting high resource requirements\nand made it nearly impossible to use hardware wallets for verification.\n\nIn v0.12 consignments have become streams, which are never put into the memory and are\nvalidated on the go, as they are received,\nnot ever taking more than a few hundred bytes of memory (!!!).\nThis is much more suitable for mobile wallets, servers, and paves the way for the hardware wallet\napplications.\n\n#### 4.2. Consignment verification\n\nIt is not that the consignments are no more read into the memory;\nduring their validation, the RGB software doesn't make requests to a blockchain indexer.\nBefore, the consignment validation was slowed manifold due to the requests;\nnow, the blockchain index synchronization is separated from the consignment validation,\nwhich became order of magnitude faster.\n\n#### 4.3. Contract data are no more kept in memory\n\nRGB runtime was also used to load and keep all the contracts and their data in the memory,\nincluding the whole of the contract history.\nThis was boosting memory usage outside acceptable bounds, especially in server and mobile apps.\n\nWith v0.12, only used contracts are loaded, but even for them, only the index data and state\nare kept in the memory and can be offloaded any time, contract-by-contract.\nThis reduced memory requirements several orders of magnitude.\n\n#### 4.4. Persistence performance boost with NoSQL\n\nLast, but not least, we have integrated a dedicated append-only NoSQL embedded database to\nkeep the contract history.\nSince the database was designed specifically for the client-side validation needs,\nwhere we do not need some operations like deletion, and many data have a known fixed size,\nits introduction has boosted performance, not just compared to v0.11,\nbut also compared to classical embedded NoSQL databases like Rust Sled and ReDB.\n\n### 5. Test coverage\n\nIn version 0.10, RGB for the first time got a full integration test suite.\nHowever, we understood that it is not enough: integration tests,\ndemonstrating just the typical happy-path or shallow attack scenarios are insufficient\nto prove the security of the system.\n\nVersion 0.12 is the first version achieving full consensus test coverage not just with\nintegration, but also with unit tests, which also check known attack scenarios.\nThe unit test coverage has increased several folds\nand exceeds 66.7% for all RGB abstraction levels, reaching >75% in the consensus libraries.\n\n----------------------------------------------------------------------------------------------------\n\nUsing the release\n-----------------\n\nThe source code of the release is available on [GitHub](https://github.com/RGB-WG/rgb/tree/v0.12.0-rc.1.1).\n\nThose power users who'd like to play with the command line\nmay install it either from the sourcecode or using Rust Cargo command\n\n```bash\ncargo install rgb-wallet\n```\n\nDemo & examples can be found here:\n- https://github.com/RGB-WG/rgb/tree/v0.12.0/examples\n- https://github.com/RGB-WG/rgb-sandbox/blob/e975b885e9d718a0cb2da7739ee942031bc9d2ed/demo.sh\n- https://github.com/pandora-prime/rgb-issuers/\n\nTo start integrating RGB, please feel free to contract LNP/BP Standards Association\nvia e-mail info at lnp-bp dot org.\n\n----------------------------------------------------------------------------------------------------\n\nWhat's next\n------------\n\n1. We plan to update [the website] and documentation on it in order to reflect all the changes.\n   This will be happening over the course of the next few weeks.\n\n2. We will be supporting developers integrating RGB v0.12 into their products.\n   Once we see the ecosystem adoption, v0.12 release candidate will become a full release.\n\n3. We expect the first products and assets using this version to be released during June.\n   While it is up to each company to decide when to launch their assets and apps\n   into the mainnet, we hope that will happen during the Summer 2025.\n\n4. Once v0.12 gets to the mainnet and production, a new non-profit, named __RGB Consortium__\n   will be created by the companies using RGB in their products.\n   This organization will ensure the protocol stability and will take care of the codebase maintenance.\n\n----------------------------------------------------------------------------------------------------\n\nAcknowledgments\n---------------\n\nThe release and v0.12 was designed and implemented by Dr Maxim Orlovsky,\nfinanced by [Pandora Prime Inc.].\n[Bitlight Labs], as one of the major contributors, has completed the integral test coverage,\nensuring the protocol security and scaled community test.\nThe initial three months of development were also financed by [Fulgur Ventures].\n\n[the website]: https://rgb.tech\n[Pandora Prime Inc.]:  https://pandoraprime.ch/\n[Fulgur Ventures]: https://fulgur.ventures/\n[Bitlight Labs]: https://bitlightlabs.com/\n[Prime]: https://github.com/LNP-BP/layer1",
  "actions_summary": [
    {
      "id": 2,
      "count": 2
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 482,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": "Github link was replaced with a permanent link",
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "The LNP/BP Standards Association is excited to announce the final production-ready release of the RGB smart contracts consensus layer (v0.12)! \nFrom today, all RGB contract developers and issuers can deploy contracts on both testnet and Bitcoin mainnet using this stable consensus release. \n:warning: &hellip;",
  "truncated": true,
  "post_url": "/t/rgb-consensus-production-release-v0-12/1822/1",
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 2
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}