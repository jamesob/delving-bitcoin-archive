{
  "id": 5385,
  "name": "",
  "username": "josh",
  "avatar_template": "/user_avatar/delvingbitcoin.org/josh/{size}/95_2.png",
  "created_at": "2025-07-01T19:59:48.542Z",
  "cooked": "<h2><a name=\"p-5385-tldr-1\" class=\"anchor\" href=\"#p-5385-tldr-1\"></a>TLDR</h2>\n<p><a href=\"https://github.com/joshdoman/descriptor-codec\" rel=\"noopener nofollow ugc\">descriptor-codec</a> is a rust library for encoding and decoding Bitcoin wallet descriptors, achieving a 30-40% size reduction. This can be useful when sharing a descriptor as a QR code, over NFC, or in a data-constrained environment.</p>\n<p>This library is partially inspired by <a href=\"https://github.com/bitcoin/bitcoin/pull/32788#issuecomment-2996271309\" rel=\"noopener nofollow ugc\">this comment</a> by <a class=\"mention\" href=\"/u/sjors\">@sjors</a>, where he suggested that wallets may seek to reduce QR code size. It is based on the encoder I built for <a href=\"https://delvingbitcoin.org/t/rust-descriptor-encrypt-encrypt-any-descriptor-such-that-only-authorized-spenders-can-decrypt/1750\">descriptor-encrypt</a>, with additional support for descriptors with private keys.</p>\n<h2><a name=\"p-5385-features-2\" class=\"anchor\" href=\"#p-5385-features-2\"></a>Features</h2>\n<ul>\n<li>\n<p><strong>Compact Encoding</strong>: Tag-based and variable-length encoding and the avoidance of bech32 and base58 reduces descriptor size by 30-40%</p>\n</li>\n<li>\n<p><strong>Complete Coverage</strong>: Supports all descriptors including those with complex miniscript and private keys</p>\n</li>\n<li>\n<p><strong>QR Code Friendly</strong>: Smaller encodings improve QR code reliability and scanning</p>\n</li>\n<li>\n<p><strong>NFC Compatible</strong>: Fits descriptors within NFC byte limits for hardware wallet communication</p>\n</li>\n</ul>\n<h2><a name=\"p-5385-usage-3\" class=\"anchor\" href=\"#p-5385-usage-3\"></a>Usage</h2>\n<p>The library has a simple API with two <code>encode</code> and <code>decode</code> functions. For demonstration purposes, it can also be used on the command-line with the built-in CLI.</p>\n<pre data-code-wrap=\"rust\"><code class=\"lang-rust\">use descriptor_codec::{encode, decode};\n\nlet descriptor = \"wsh(sortedmulti(2,\\\n    03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,\\\n    036d2b085e9e382ed10b69fc311a03f8641ccfff21574de0927513a49d9a688a00,\\\n    02e8445082a72f29b75ca48748a914df60622a609cacfce8ed0e35804560741d29\\\n))#hfj7wz7l\";\n\nlet encoded = encode(descriptor).unwrap();\nlet decoded = decode(&amp;encoded).unwrap();\nassert_eq!(descriptor, decoded);\n</code></pre>\n<h2><a name=\"p-5385-example-4\" class=\"anchor\" href=\"#p-5385-example-4\"></a>Example</h2>\n<p>Below is a 2-of-3 multisig descriptor, which is 457 characters, or 457 bytes if encoded as ASCII:</p>\n<pre><code class=\"lang-auto\">wsh(sortedmulti(2,[3abf21c8/48'/0'/0'/2']xpub6DYotmPf2kXFYhJMFDpfydjiXG1RzmH1V7Fnn2Z38DgN2oSYruczMyTFZZPz6yXq47Re8anhXWGj4yMzPTA3bjPDdpA96TLUbMehrH3sBna/&lt;0;1&gt;/*,[a1a4bd46/48'/0'/0'/2']xpub6DvXYo8BwnRACos42ME7tNL48JQhLMQ33ENfniLM9KZmeZGbBhyh1Jkfo3hUKmmjW92o3r7BprTPPdrTr4QLQR7aRnSBfz1UFMceW5ibhTc/&lt;0;1&gt;/*,[ed91913d/48'/0'/0'/2']xpub6EQUho4Z4pwh2UQGdPjoPrbtjd6qqseKZCEBLcZbJ7y6c9XBWHRkhERiADJfwRcUs14nQsxF3hvx7aFkbk3tfp4dnKfkcns217kBTVVN5gY/&lt;0;1&gt;/*))#e7m305nf\n</code></pre>\n<p>Encoded the descriptor is ~37% smaller, at 289 bytes:</p>\n<pre><code class=\"lang-auto\">050902032a2404610101050201000102302a2404610101050201000102302a2404610101050201000102303abf21c80488b21e04021f6d1080000002abcdaf8fd02bbec97fec5fd0efb74d259fb0f1ec74ddc81ada76e44c24cd552a039ecdadf9f67914b544825d8ccfa7e09a8a4a069960aef0ba454695b0b3cd53c1a1a4bd460488b21e0435113bd2800000026cf687ad7652cc0141acb9b0dcbd2ee508b47820b99924db919d7f2ee4c611300374ad54281f46da81639ff0556a58126f01cbd0a29f158e0d321478776b92e9e2ed91913d0488b21e0476a1d0b68000000235ec244d7c80352bbce7aa1c2b376b38e56ebe88286b4d458b850cbc6b49269d03d909eec00cb2ab8f120cb7e2ceb8896bbb09010e1e33be8696227c21eed43b05\n</code></pre>\n<h2><a name=\"p-5385-algorithm-5\" class=\"anchor\" href=\"#p-5385-algorithm-5\"></a>Algorithm</h2>\n<p>The encoder splits the descriptor into two parts that are concatenated: a structural <strong>template</strong> and a data <strong>payload</strong>.</p>\n<h3><a name=\"p-5385-template-and-payload-6\" class=\"anchor\" href=\"#p-5385-template-and-payload-6\"></a>Template and Payload</h3>\n<p>The encoding separates the descriptor\u2019s structure from its raw data.</p>\n<ul>\n<li>\n<p><strong>Template</strong>: This part defines the logical structure of the descriptor. It is a sequence of single-byte tags that represent script components (like <code>wsh</code>, <code>pk</code>, <code>older</code>) and structural information. It also contains variable-length encoded integers for derivation paths and multisig <code>k</code>/<code>n</code> parameters.</p>\n</li>\n<li>\n<p><strong>Payload</strong>: This part contains the raw data values from the descriptor, concatenated in the order they are referenced by the template. This includes items like public keys, private keys, key fingerprints, hashes, and timelock values.</p>\n</li>\n</ul>\n<p>When decoding, the template is read first to understand the structure, which then dictates how to parse the subsequent payload data.</p>\n<h3><a name=\"p-5385-variable-length-encoding-7\" class=\"anchor\" href=\"#p-5385-variable-length-encoding-7\"></a>Variable-Length Encoding</h3>\n<p>To save space, unsigned integers are encoded as variable-length LEB128 integers. This is used for:</p>\n<ul>\n<li>Absolute and relative timelocks (<code>after</code>, <code>older</code>).</li>\n<li>The <code>k</code> (threshold) and <code>n</code> (total keys) values in multisig (<code>multi</code>, <code>sortedmulti</code>) and threshold (<code>thresh</code>) scripts.</li>\n<li>The length of derivation paths and the individual child numbers within them.</li>\n<li>Hardened child numbers are encoded as <span class=\"math\">2c+1</span>, where <span class=\"math\">c</span> is the child number. Unhardened child numbers are encoded as <span class=\"math\">2 c</span>.</li>\n</ul>\n<h3><a name=\"p-5385-tags-8\" class=\"anchor\" href=\"#p-5385-tags-8\"></a>Tags</h3>\n<p>Each component of a descriptor is represented by a single-byte tag.</p>\n<div class=\"md-table\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Tag Name</th>\n<th style=\"text-align:left\">Hex Value</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>False</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x00</span></td>\n<td style=\"text-align:left\">Miniscript <code>false</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>True</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x01</span></td>\n<td style=\"text-align:left\">Miniscript <code>true</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Pkh</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x02</span></td>\n<td style=\"text-align:left\">Top-level Pay-to-Public-Key-Hash descriptor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Sh</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x03</span></td>\n<td style=\"text-align:left\">Top-level Pay-to-Script-Hash descriptor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Wpkh</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x04</span></td>\n<td style=\"text-align:left\">Top-level Witness-Pay-to-Public-Key-Hash descriptor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Wsh</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x05</span></td>\n<td style=\"text-align:left\">Top-level Witness-Pay-to-Script-Hash descriptor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Tr</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x06</span></td>\n<td style=\"text-align:left\">Top-level Pay-to-Taproot descriptor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Bare</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x07</span></td>\n<td style=\"text-align:left\">Top-level Bare Script descriptor.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>TapTree</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x08</span></td>\n<td style=\"text-align:left\">A Taproot script path tree or leaf.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>SortedMulti</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x09</span></td>\n<td style=\"text-align:left\">A sorted multisig script.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Alt</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x0A</span></td>\n<td style=\"text-align:left\">Miniscript <code>alt</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Swap</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x0B</span></td>\n<td style=\"text-align:left\">Miniscript <code>swap</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Check</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x0C</span></td>\n<td style=\"text-align:left\">Miniscript <code>check</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>DupIf</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x0D</span></td>\n<td style=\"text-align:left\">Miniscript <code>dupif</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Verify</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x0E</span></td>\n<td style=\"text-align:left\">Miniscript <code>verify</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NonZero</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x0F</span></td>\n<td style=\"text-align:left\">Miniscript <code>nonzero</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ZeroNotEqual</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x10</span></td>\n<td style=\"text-align:left\">Miniscript <code>zeronotequal</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>AndV</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x11</span></td>\n<td style=\"text-align:left\">Miniscript <code>and_v</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>AndB</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x12</span></td>\n<td style=\"text-align:left\">Miniscript <code>and_b</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>AndOr</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x13</span></td>\n<td style=\"text-align:left\">Miniscript <code>andor</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>OrB</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x14</span></td>\n<td style=\"text-align:left\">Miniscript <code>or_b</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>OrC</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x15</span></td>\n<td style=\"text-align:left\">Miniscript <code>or_c</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>OrD</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x16</span></td>\n<td style=\"text-align:left\">Miniscript <code>or_d</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>OrI</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x17</span></td>\n<td style=\"text-align:left\">Miniscript <code>or_i</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Thresh</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x18</span></td>\n<td style=\"text-align:left\">Miniscript <code>thresh</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Multi</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x19</span></td>\n<td style=\"text-align:left\">Miniscript <code>multi</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>MultiA</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x1A</span></td>\n<td style=\"text-align:left\">Miniscript <code>multi_a</code> operator.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>PkK</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x1B</span></td>\n<td style=\"text-align:left\">Miniscript <code>pk_k</code> (CHECKSIG).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>PkH</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x1C</span></td>\n<td style=\"text-align:left\">Miniscript <code>pk_h</code> (CHECKSIG from hash).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>RawPkH</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x1D</span></td>\n<td style=\"text-align:left\">Miniscript <code>raw_pkh</code> (raw public key hash).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>After</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x1E</span></td>\n<td style=\"text-align:left\">Miniscript absolute timelock (<code>after</code>).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Older</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x1F</span></td>\n<td style=\"text-align:left\">Miniscript relative timelock (<code>older</code>).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Sha256</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x20</span></td>\n<td style=\"text-align:left\">A SHA256 hash.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Hash256</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x21</span></td>\n<td style=\"text-align:left\">A double-SHA256 hash.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Ripemd160</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x22</span></td>\n<td style=\"text-align:left\">A RIPEMD-160 hash.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Hash160</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x23</span></td>\n<td style=\"text-align:left\">A HASH160 (SHA256 then RIPEMD-160) hash.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>Origin</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x24</span></td>\n<td style=\"text-align:left\">Indicates a key has an origin (fingerprint + path).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NoOrigin</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x25</span></td>\n<td style=\"text-align:left\">Indicates a key has no origin.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>UncompressedFullKey</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x26</span></td>\n<td style=\"text-align:left\">An uncompressed public key.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>CompressedFullKey</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x27</span></td>\n<td style=\"text-align:left\">A compressed public key.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>XOnly</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x28</span></td>\n<td style=\"text-align:left\">An x-only (Taproot) public key.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>XPub</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x29</span></td>\n<td style=\"text-align:left\">An extended public key (<code>xpub</code>).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>MultiXPub</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x2A</span></td>\n<td style=\"text-align:left\">An <code>xpub</code> with multiple derivation paths.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>UncompressedSinglePriv</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x2B</span></td>\n<td style=\"text-align:left\">An uncompressed private key.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>CompressedSinglePriv</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x2C</span></td>\n<td style=\"text-align:left\">A compressed private key.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>XPriv</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x2D</span></td>\n<td style=\"text-align:left\">An extended private key (<code>xprv</code>).</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>MultiXPriv</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x2E</span></td>\n<td style=\"text-align:left\">An <code>xprv</code> with multiple derivation paths.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NoWildcard</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x2F</span></td>\n<td style=\"text-align:left\">No wildcard <code>/*</code> in a derivation path.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>UnhardenedWildcard</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x30</span></td>\n<td style=\"text-align:left\">Unhardened wildcard <code>/*</code> in a derivation path.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>HardenedWildcard</code></td>\n<td style=\"text-align:left\"><span class=\"math\">0x31</span></td>\n<td style=\"text-align:left\">Hardened wildcard <code>/*h</code> in a derivation path.</td>\n</tr>\n</tbody>\n</table>\n</div><h2><a name=\"p-5385-use-cases-9\" class=\"anchor\" href=\"#p-5385-use-cases-9\"></a>Use Cases</h2>\n<ul>\n<li>Sharing complex multisig configurations via QR codes</li>\n<li>NFC communication with hardware wallets</li>\n<li>Reducing bandwidth in wallet coordination protocols</li>\n<li>Storing descriptors in constrained environments</li>\n</ul>\n<h2><a name=\"p-5385-future-work-10\" class=\"anchor\" href=\"#p-5385-future-work-10\"></a>Future Work</h2>\n<p>This library aims to reduce QR code size wherever descriptors need to be shared. The goal is for it to be used by hardware wallets importing and exporting descriptors and by users that wish to backup their descriptor by printing out a QR code.</p>\n<p>In the future, I plan to replace the encoder in <code>descriptor-encrypt</code> with this library. If new miniscript operators, witness programs, or descriptor types are added in the future, new tags will need to be added to provide support.</p>\n<h2><a name=\"p-5385-links-11\" class=\"anchor\" href=\"#p-5385-links-11\"></a>Links</h2>\n<p>Github: <a href=\"https://github.com/joshdoman/descriptor-codec\" rel=\"noopener nofollow ugc\">https://github.com/joshdoman/descriptor-codec</a></p>\n<p>Docs: <a href=\"https://docs.rs/descriptor-codec/latest/descriptor_codec\" rel=\"noopener nofollow ugc\">https://docs.rs/descriptor-codec/latest/descriptor_codec</a></p>",
  "post_number": 1,
  "post_type": 1,
  "posts_count": 1,
  "updated_at": "2025-07-01T19:59:48.542Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 23,
  "reads": 10,
  "readers_count": 9,
  "score": 117.0,
  "yours": false,
  "topic_id": 1804,
  "topic_slug": "a-rust-library-to-encode-descriptors-with-a-30-40-size-reduction",
  "topic_title": "A rust library to encode descriptors with a 30-40% size reduction",
  "topic_html_title": "A rust library to encode descriptors with a 30-40% size reduction",
  "category_id": 8,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "## TLDR\n\n[descriptor-codec](https://github.com/joshdoman/descriptor-codec) is a rust library for encoding and decoding Bitcoin wallet descriptors, achieving a 30-40% size reduction. This can be useful when sharing a descriptor as a QR code, over NFC, or in a data-constrained environment.\n\nThis library is partially inspired by [this comment](https://github.com/bitcoin/bitcoin/pull/32788#issuecomment-2996271309) by @sjors, where he suggested that wallets may seek to reduce QR code size. It is based on the encoder I built for [descriptor-encrypt](https://delvingbitcoin.org/t/rust-descriptor-encrypt-encrypt-any-descriptor-such-that-only-authorized-spenders-can-decrypt/1750), with additional support for descriptors with private keys.\n\n## Features\n\n* **Compact Encoding**: Tag-based and variable-length encoding and the avoidance of bech32 and base58 reduces descriptor size by 30-40%\n\n* **Complete Coverage**: Supports all descriptors including those with complex miniscript and private keys\n\n* **QR Code Friendly**: Smaller encodings improve QR code reliability and scanning\n\n* **NFC Compatible**: Fits descriptors within NFC byte limits for hardware wallet communication\n\n## Usage\n\nThe library has a simple API with two `encode` and `decode` functions. For demonstration purposes, it can also be used on the command-line with the built-in CLI.\n\n```rust\nuse descriptor_codec::{encode, decode};\n\nlet descriptor = \"wsh(sortedmulti(2,\\\n    03a0434d9e47f3c86235477c7b1ae6ae5d3442d49b1943c2b752a68e2a47e247c7,\\\n    036d2b085e9e382ed10b69fc311a03f8641ccfff21574de0927513a49d9a688a00,\\\n    02e8445082a72f29b75ca48748a914df60622a609cacfce8ed0e35804560741d29\\\n))#hfj7wz7l\";\n\nlet encoded = encode(descriptor).unwrap();\nlet decoded = decode(&encoded).unwrap();\nassert_eq!(descriptor, decoded);\n```\n\n## Example\nBelow is a 2-of-3 multisig descriptor, which is 457 characters, or 457 bytes if encoded as ASCII:\n```\nwsh(sortedmulti(2,[3abf21c8/48'/0'/0'/2']xpub6DYotmPf2kXFYhJMFDpfydjiXG1RzmH1V7Fnn2Z38DgN2oSYruczMyTFZZPz6yXq47Re8anhXWGj4yMzPTA3bjPDdpA96TLUbMehrH3sBna/<0;1>/*,[a1a4bd46/48'/0'/0'/2']xpub6DvXYo8BwnRACos42ME7tNL48JQhLMQ33ENfniLM9KZmeZGbBhyh1Jkfo3hUKmmjW92o3r7BprTPPdrTr4QLQR7aRnSBfz1UFMceW5ibhTc/<0;1>/*,[ed91913d/48'/0'/0'/2']xpub6EQUho4Z4pwh2UQGdPjoPrbtjd6qqseKZCEBLcZbJ7y6c9XBWHRkhERiADJfwRcUs14nQsxF3hvx7aFkbk3tfp4dnKfkcns217kBTVVN5gY/<0;1>/*))#e7m305nf\n```\n\nEncoded the descriptor is ~37% smaller, at 289 bytes:\n```\n050902032a2404610101050201000102302a2404610101050201000102302a2404610101050201000102303abf21c80488b21e04021f6d1080000002abcdaf8fd02bbec97fec5fd0efb74d259fb0f1ec74ddc81ada76e44c24cd552a039ecdadf9f67914b544825d8ccfa7e09a8a4a069960aef0ba454695b0b3cd53c1a1a4bd460488b21e0435113bd2800000026cf687ad7652cc0141acb9b0dcbd2ee508b47820b99924db919d7f2ee4c611300374ad54281f46da81639ff0556a58126f01cbd0a29f158e0d321478776b92e9e2ed91913d0488b21e0476a1d0b68000000235ec244d7c80352bbce7aa1c2b376b38e56ebe88286b4d458b850cbc6b49269d03d909eec00cb2ab8f120cb7e2ceb8896bbb09010e1e33be8696227c21eed43b05\n```\n\n## Algorithm\n\nThe encoder splits the descriptor into two parts that are concatenated: a structural **template** and a data **payload**.\n\n### Template and Payload\n\nThe encoding separates the descriptor's structure from its raw data.\n\n* **Template**: This part defines the logical structure of the descriptor. It is a sequence of single-byte tags that represent script components (like `wsh`, `pk`, `older`) and structural information. It also contains variable-length encoded integers for derivation paths and multisig `k`/`n` parameters.\n\n* **Payload**: This part contains the raw data values from the descriptor, concatenated in the order they are referenced by the template. This includes items like public keys, private keys, key fingerprints, hashes, and timelock values.\n\nWhen decoding, the template is read first to understand the structure, which then dictates how to parse the subsequent payload data.\n\n### Variable-Length Encoding\n\nTo save space, unsigned integers are encoded as variable-length LEB128 integers. This is used for:\n\n* Absolute and relative timelocks (`after`, `older`).\n* The `k` (threshold) and `n` (total keys) values in multisig (`multi`, `sortedmulti`) and threshold (`thresh`) scripts.\n* The length of derivation paths and the individual child numbers within them.\n* Hardened child numbers are encoded as $2c+1$, where $c$ is the child number. Unhardened child numbers are encoded as $2 c$.\n\n### Tags\n\nEach component of a descriptor is represented by a single-byte tag.\n\n|Tag Name | Hex Value | Description|\n|:--- | :--- | :---|\n| `False` | $0x00$ | Miniscript `false` operator. |\n| `True` | $0x01$ | Miniscript `true` operator. |\n| `Pkh` | $0x02$ | Top-level Pay-to-Public-Key-Hash descriptor. |\n| `Sh` | $0x03$ | Top-level Pay-to-Script-Hash descriptor. |\n| `Wpkh` | $0x04$ | Top-level Witness-Pay-to-Public-Key-Hash descriptor. |\n| `Wsh` | $0x05$ | Top-level Witness-Pay-to-Script-Hash descriptor. |\n| `Tr` | $0x06$ | Top-level Pay-to-Taproot descriptor. |\n| `Bare` | $0x07$ | Top-level Bare Script descriptor. |\n| `TapTree` | $0x08$ | A Taproot script path tree or leaf. |\n| `SortedMulti`| $0x09$ | A sorted multisig script. |\n| `Alt` | $0x0A$ | Miniscript `alt` operator. |\n| `Swap` | $0x0B$ | Miniscript `swap` operator. |\n| `Check` | $0x0C$ | Miniscript `check` operator. |\n| `DupIf` | $0x0D$ | Miniscript `dupif` operator. |\n| `Verify` | $0x0E$ | Miniscript `verify` operator. |\n| `NonZero` | $0x0F$ | Miniscript `nonzero` operator. |\n| `ZeroNotEqual`| $0x10$ | Miniscript `zeronotequal` operator. |\n| `AndV` | $0x11$ | Miniscript `and_v` operator. |\n| `AndB` | $0x12$ | Miniscript `and_b` operator. |\n| `AndOr` | $0x13$ | Miniscript `andor` operator. |\n| `OrB` | $0x14$ | Miniscript `or_b` operator. |\n| `OrC` | $0x15$ | Miniscript `or_c` operator. |\n| `OrD` | $0x16$ | Miniscript `or_d` operator. |\n| `OrI` | $0x17$ | Miniscript `or_i` operator. |\n| `Thresh` | $0x18$ | Miniscript `thresh` operator. |\n| `Multi` | $0x19$ | Miniscript `multi` operator. |\n| `MultiA` | $0x1A$ | Miniscript `multi_a` operator. |\n| `PkK` | $0x1B$ | Miniscript `pk_k` (CHECKSIG). |\n| `PkH` | $0x1C$ | Miniscript `pk_h` (CHECKSIG from hash). |\n| `RawPkH` | $0x1D$ | Miniscript `raw_pkh` (raw public key hash). |\n| `After` | $0x1E$ | Miniscript absolute timelock (`after`). |\n| `Older` | $0x1F$ | Miniscript relative timelock (`older`). |\n| `Sha256` | $0x20$ | A SHA256 hash. |\n| `Hash256` | $0x21$ | A double-SHA256 hash. |\n| `Ripemd160` | $0x22$ | A RIPEMD-160 hash. |\n| `Hash160` | $0x23$ | A HASH160 (SHA256 then RIPEMD-160) hash. |\n| `Origin` | $0x24$ | Indicates a key has an origin (fingerprint + path). |\n| `NoOrigin` | $0x25$ | Indicates a key has no origin. |\n| `UncompressedFullKey` | $0x26$ | An uncompressed public key. |\n| `CompressedFullKey` | $0x27$ | A compressed public key. |\n| `XOnly` | $0x28$ | An x-only (Taproot) public key. |\n| `XPub` | $0x29$ | An extended public key (`xpub`). |\n| `MultiXPub` | $0x2A$ | An `xpub` with multiple derivation paths. |\n| `UncompressedSinglePriv`| $0x2B$ | An uncompressed private key. |\n| `CompressedSinglePriv` | $0x2C$ | A compressed private key. |\n| `XPriv` | $0x2D$ | An extended private key (`xprv`). |\n| `MultiXPriv` | $0x2E$ | An `xprv` with multiple derivation paths. |\n| `NoWildcard`| $0x2F$ | No wildcard `/*` in a derivation path. |\n| `UnhardenedWildcard` | $0x30$ | Unhardened wildcard `/*` in a derivation path. |\n| `HardenedWildcard` | $0x31$ | Hardened wildcard `/*h` in a derivation path. |\n\n## Use Cases\n\n* Sharing complex multisig configurations via QR codes\n* NFC communication with hardware wallets\n* Reducing bandwidth in wallet coordination protocols\n* Storing descriptors in constrained environments\n\n## Future Work\n\nThis library aims to reduce QR code size wherever descriptors need to be shared. The goal is for it to be used by hardware wallets importing and exporting descriptors and by users that wish to backup their descriptor by printing out a QR code.\n\nIn the future, I plan to replace the encoder in `descriptor-encrypt` with this library. If new miniscript operators, witness programs, or descriptor types are added in the future, new tags will need to be added to provide support.\n\n## Links\n\nGithub: [https://github.com/joshdoman/descriptor-codec](https://github.com/joshdoman/descriptor-codec)\n\nDocs: [https://docs.rs/descriptor-codec/latest/descriptor_codec](https://docs.rs/descriptor-codec/latest/descriptor_codec)",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 98,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "<a name=\"p-5385-tldr-1\" class=\"anchor\" href=\"#p-5385-tldr-1\"></a>TLDR\n<a href=\"https://github.com/joshdoman/descriptor-codec\" rel=\"noopener nofollow ugc\">descriptor-codec</a> is a rust library for encoding and decoding Bitcoin wallet descriptors, achieving a 30-40% size reduction. This can be useful when sharing a descriptor as a QR code, over NFC, or in a data-constrained environment. \nThis library is partially inspired by <a href=\"https://github.com/bitcoin/bitcoin/pull/32788#issuecomment-2996271309\" rel=\"noopener nofollow ugc\">this comment</a> by <a class=\"mention\" href=\"/u/sjors\">@sjors</a>, w&hellip;",
  "truncated": true,
  "post_url": "/t/a-rust-library-to-encode-descriptors-with-a-30-40-size-reduction/1804/1",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}