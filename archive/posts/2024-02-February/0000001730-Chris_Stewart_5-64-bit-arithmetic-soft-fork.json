{
  "id": 1730,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/user_avatar/delvingbitcoin.org/chris_stewart_5/{size}/296_2.png",
  "created_at": "2024-02-28T13:27:22.675Z",
  "cooked": "<p>I\u2019m going to code this up to confirm ergonomics - so mistakes are likely in this post. Call them out if you see them. Here is my understanding without actually writing the code yet</p>\n<p>If we were to continue with <code>CScriptNum</code>, as <a href=\"https://github.com/Christewart/bitcoin/tree/op-inout-amount\" rel=\"noopener nofollow ugc\">my <code>OP_INOUT_AMOUNT</code> implementation</a> works currently</p>\n<ol>\n<li>Read <code>int64_t</code> representing satoshis from <code>BaseTransactionSignatureChecker.GetTransactionData()</code></li>\n<li>Convert the <code>int64_t</code> into a minimally encoded <code>CScriptNum</code>. I don\u2019t think this necessarily has to be done by an op code, could be done in the impl of <code>OP_INOUT_AMOUNT</code> itself</li>\n<li>Call <code>CScriptNum</code> constructor, <a href=\"https://github.com/Christewart/bitcoin/blob/c617c5c3b0d21499b196184b5279b45627060cb5/src/script/script.h#L265\" rel=\"noopener nofollow ugc\">modifying the <code>nMaxNumSize</code> parameter</a> to support 8 bytes.</li>\n<li>Push <code>CScriptNum</code> onto stack</li>\n<li>Wherever the satoshi value on the stack top is consumed by another op code, we need to figure out how to allow for <code>nMaxNumSize</code> to be 8 bytes.</li>\n</ol>\n<p>As an example for step <code>5</code>, lets assume we are using <em>THE OLD</em> (pre-64bit) numeric op codes</p>\n<p>You see we interpret the stack top as <code>CScriptNum</code>, however that <code>CScriptNum</code> has a <code>nMaxNumSize=4</code> rather than 8 bytes. This leads to an <a href=\"https://github.com/Christewart/bitcoin/blob/c617c5c3b0d21499b196184b5279b45627060cb5/src/script/script.h#L268\" rel=\"noopener nofollow ugc\">overflow exception</a> being thrown by <code>CScriptNum</code>. This same problem applies to any opcode (another example is <code>OP_WITHIN</code>) that uses <code>CScriptNum</code> to interpret the stack top.</p>\n<aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/Christewart/bitcoin/blob/c617c5c3b0d21499b196184b5279b45627060cb5/src/script/interpreter.cpp#L983\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/Christewart/bitcoin/blob/c617c5c3b0d21499b196184b5279b45627060cb5/src/script/interpreter.cpp#L983\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/Christewart/bitcoin/blob/c617c5c3b0d21499b196184b5279b45627060cb5/src/script/interpreter.cpp#L983\" target=\"_blank\" rel=\"noopener nofollow ugc\">Christewart/bitcoin/blob/c617c5c3b0d21499b196184b5279b45627060cb5/src/script/interpreter.cpp#L983</a></h4>\n\n\n\n    <pre class=\"onebox\"><code class=\"lang-cpp\">\n      <ol class=\"start lines\" start=\"973\" style=\"counter-reset: li-counter 972 ;\">\n          <li>case OP_LESSTHAN:</li>\n          <li>case OP_GREATERTHAN:</li>\n          <li>case OP_LESSTHANOREQUAL:</li>\n          <li>case OP_GREATERTHANOREQUAL:</li>\n          <li>case OP_MIN:</li>\n          <li>case OP_MAX:</li>\n          <li>{</li>\n          <li>    // (x1 x2 -- out)</li>\n          <li>    if (stack.size() &lt; 2)</li>\n          <li>        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);</li>\n          <li class=\"selected\">    CScriptNum bn1(stacktop(-2), fRequireMinimal);</li>\n          <li>    CScriptNum bn2(stacktop(-1), fRequireMinimal);</li>\n          <li>    CScriptNum bn(0);</li>\n          <li>    switch (opcode)</li>\n          <li>    {</li>\n          <li>    case OP_ADD:</li>\n          <li>        bn = bn1 + bn2;</li>\n          <li>        break;</li>\n          <li></li>\n          <li>    case OP_SUB:</li>\n          <li>        bn = bn1 - bn2;</li>\n      </ol>\n    </code></pre>\n\n\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n",
  "post_number": 47,
  "post_type": 1,
  "posts_count": 52,
  "updated_at": "2024-02-28T14:12:36.190Z",
  "reply_count": 0,
  "reply_to_post_number": 45,
  "quote_count": 0,
  "incoming_link_count": 2,
  "reads": 45,
  "readers_count": 44,
  "score": 19.0,
  "yours": false,
  "topic_id": 397,
  "topic_slug": "64-bit-arithmetic-soft-fork",
  "topic_title": "64 bit arithmetic soft fork",
  "topic_html_title": "64 bit arithmetic soft fork",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "badges_granted": [],
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "id": 163,
    "username": "halseth",
    "name": "Johan T. Halseth",
    "avatar_template": "/user_avatar/delvingbitcoin.org/halseth/{size}/198_2.png"
  },
  "bookmarked": false,
  "raw": "I'm going to code this up to confirm ergonomics - so mistakes are likely in this post. Call them out if you see them. Here is my understanding without actually writing the code yet\n\nIf we were to continue with `CScriptNum`, as [my `OP_INOUT_AMOUNT` implementation](https://github.com/Christewart/bitcoin/tree/op-inout-amount) works currently\n\n1. Read `int64_t` representing satoshis from `BaseTransactionSignatureChecker.GetTransactionData()`\n2. Convert the `int64_t` into a minimally encoded `CScriptNum`. I don't think this necessarily has to be done by an op code, could be done in the impl of `OP_INOUT_AMOUNT` itself\n3. Call `CScriptNum` constructor, [modifying the `nMaxNumSize` parameter](https://github.com/Christewart/bitcoin/blob/c617c5c3b0d21499b196184b5279b45627060cb5/src/script/script.h#L265) to support 8 bytes.\n4. Push `CScriptNum` onto stack\n5. Wherever the satoshi value on the stack top is consumed by another op code, we need to figure out how to allow for `nMaxNumSize` to be 8 bytes.\n\nAs an example for step `5`, lets assume we are using _THE OLD_ (pre-64bit) numeric op codes\n\nYou see we interpret the stack top as `CScriptNum`, however that `CScriptNum` has a `nMaxNumSize=4` rather than 8 bytes. This leads to an [overflow exception](https://github.com/Christewart/bitcoin/blob/c617c5c3b0d21499b196184b5279b45627060cb5/src/script/script.h#L268) being thrown by `CScriptNum`. This same problem applies to any opcode (another example is `OP_WITHIN`) that uses `CScriptNum` to interpret the stack top.\n\nhttps://github.com/Christewart/bitcoin/blob/c617c5c3b0d21499b196184b5279b45627060cb5/src/script/interpreter.cpp#L983",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 2,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "excerpt": "I\u2019m going to code this up to confirm ergonomics - so mistakes are likely in this post. Call them out if you see them. Here is my understanding without actually writing the code yet \nIf we were to continue with CScriptNum, as <a href=\"https://github.com/Christewart/bitcoin/tree/op-inout-amount\" rel=\"noopener nofollow ugc\">my OP_INOUT_AMOUNT implementation</a> works currently \n\nRead int64_t representi&hellip;",
  "truncated": true,
  "post_url": "/t/64-bit-arithmetic-soft-fork/397/47",
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false,
  "can_accept_answer": false,
  "can_unaccept_answer": false,
  "accepted_answer": false,
  "topic_accepted_answer": null
}