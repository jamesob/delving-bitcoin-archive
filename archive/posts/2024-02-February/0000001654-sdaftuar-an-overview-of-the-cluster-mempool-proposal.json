{
  "id": 1654,
  "name": "Suhas Daftuar",
  "username": "sdaftuar",
  "avatar_template": "/letter_avatar_proxy/v4/letter/s/0ea827/{size}.png",
  "created_at": "2024-02-21T13:59:55.418Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"hebasto\" data-post=\"19\" data-topic=\"393\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/hebasto/48/366_2.png\" class=\"avatar\"> hebasto:</div>\n<blockquote>\n<ol>\n<li>Without knowing a mempool ordering, is it possible for a wallet to construct an RBF transaction candidate that will be guaranteed to be accepted?</li>\n</ol>\n</blockquote>\n</aside>\n<p>I think the short answer is \u201cno\u201d \u2013 philosophically at least, what I\u2019m proposing is that our RBF rules become even more of a black box than they are today.</p>\n<p>When we first implemented RBF in Bitcoin Core (back in 2015), I had suggested that we write up our replacement rules in a BIP (BIP 125) so that wallets would be able to know what the rules are and be able to comply with them.  However, because those rules depend on the feerates and total fees of all conflicting transactions (including descendants of direct conflicts), wallets already need access to a full node\u2019s mempool in order to know how to replace a given transaction.</p>\n<p>Because of this existing complexity, my understanding is that most (all?) wallets today, in practice, just try to keep bumping the fee on a transaction until it is accepted by a full node\u2019s mempool (if access to one is available) or until it confirms.  I\u2019d be curious to know if there are wallets in use that attempt to calculate the BIP 125 requirements for themselves though, and if so, how they achieve it.</p>\n<aside class=\"quote no-group\" data-username=\"hebasto\" data-post=\"19\" data-topic=\"393\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/hebasto/48/366_2.png\" class=\"avatar\"> hebasto:</div>\n<blockquote>\n<ol start=\"2\">\n<li>What kind of a mempool ordering data would be sufficient for a wallet to achieve such a goal?</li>\n</ol>\n</blockquote>\n</aside>\n<p>Let\u2019s say we\u2019re constructing a new transaction <span class=\"math\">T</span>, which would directly conflict with some existing transactions <span class=\"math\">{E_1, ..., E_N}</span>. Then in theory, in order to calculate exactly whether T would be a successful replacement, we\u2019d need to know:</p>\n<ul>\n<li>the existing orderings of the clusters that each <span class=\"math\">E_i</span> is currently in.</li>\n<li>the orderings of the clusters that would be affected by adding <span class=\"math\">T</span> and removing each <span class=\"math\">E_i</span> from the mempool</li>\n<li>the total fees of <span class=\"math\">T</span>, and the total fees of the transactions being removed from the mempool.</li>\n</ul>\n<p>In practice, though, the rules line up largely with what I think users expect.  You can take a look at my draft PR (<a href=\"https://github.com/bitcoin/bitcoin/pull/28676\">https://github.com/bitcoin/bitcoin/pull/28676</a>) and look at the changes that needed to be made to the functional tests \u2013 basically no substantive changes were made to the tests in <code>feature_rbf.py</code>.  So I think that is indicative that the rules aren\u2019t really changing in ways that are unexpected for real-world use cases.</p>",
  "post_number": 20,
  "post_type": 1,
  "updated_at": "2024-02-21T13:59:55.418Z",
  "reply_count": 0,
  "reply_to_post_number": 19,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 14,
  "readers_count": 13,
  "score": 17.6,
  "yours": false,
  "topic_id": 393,
  "topic_slug": "an-overview-of-the-cluster-mempool-proposal",
  "topic_title": "An overview of the cluster mempool proposal",
  "topic_html_title": "An overview of the cluster mempool proposal",
  "category_id": 8,
  "display_username": "Suhas Daftuar",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"hebasto, post:19, topic:393\"]\n1. Without knowing a mempool ordering, is it possible for a wallet to construct an RBF transaction candidate that will be guaranteed to be accepted?\n[/quote]\n\nI think the short answer is \"no\" -- philosophically at least, what I'm proposing is that our RBF rules become even more of a black box than they are today.  \n\nWhen we first implemented RBF in Bitcoin Core (back in 2015), I had suggested that we write up our replacement rules in a BIP (BIP 125) so that wallets would be able to know what the rules are and be able to comply with them.  However, because those rules depend on the feerates and total fees of all conflicting transactions (including descendants of direct conflicts), wallets already need access to a full node's mempool in order to know how to replace a given transaction. \n\nBecause of this existing complexity, my understanding is that most (all?) wallets today, in practice, just try to keep bumping the fee on a transaction until it is accepted by a full node's mempool (if access to one is available) or until it confirms.  I'd be curious to know if there are wallets in use that attempt to calculate the BIP 125 requirements for themselves though, and if so, how they achieve it.\n\n[quote=\"hebasto, post:19, topic:393\"]\n2. What kind of a mempool ordering data would be sufficient for a wallet to achieve such a goal?\n[/quote]\n\nLet's say we're constructing a new transaction $T$, which would directly conflict with some existing transactions ${E_1, ..., E_N}$. Then in theory, in order to calculate exactly whether T would be a successful replacement, we'd need to know:\n- the existing orderings of the clusters that each $E_i$ is currently in.\n- the orderings of the clusters that would be affected by adding $T$ and removing each $E_i$ from the mempool\n- the total fees of $T$, and the total fees of the transactions being removed from the mempool.\n\nIn practice, though, the rules line up largely with what I think users expect.  You can take a look at my draft PR (https://github.com/bitcoin/bitcoin/pull/28676) and look at the changes that needed to be made to the functional tests -- basically no substantive changes were made to the tests in `feature_rbf.py`.  So I think that is indicative that the rules aren't really changing in ways that are unexpected for real-world use cases.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 95,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}