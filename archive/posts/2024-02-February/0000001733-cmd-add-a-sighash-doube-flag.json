{
  "id": 1733,
  "name": "",
  "username": "cmd",
  "avatar_template": "/user_avatar/delvingbitcoin.org/cmd/{size}/388_2.png",
  "created_at": "2024-02-28T22:07:04.083Z",
  "cooked": "<p>Hello. I would like to discuss the feasibility of implementing a SIGHASH_DOUBLE flag, which would sign for two outputs in a transaction.</p>\n<p>I would like this feature as an option when signing transactions, so that I can create a PSBT that can be combined with similar PSBTs in a non-interactive way (similar to SIGHASH_SINGLE), that includes both a payout output and a change output.</p>\n<p>In regards to how one would verify a tx with such a flag present, this would be my naive approach:</p>\n<p>Imagine we have a tx with four inputs, six outputs, and the following config:</p>\n<pre><code class=\"lang-auto\">vin0: SIGHASH_DOUBLE\nvin1: SIGHASH_DOUBLE\nvin2: SIGHASH_SINGLE\nvin3: SIGHASH_ALL\n</code></pre>\n<ol>\n<li>\n<p>Scan all signature flags in a tx, check if SIGHASH_DOUBLE exists.</p>\n</li>\n<li>\n<p>If true, we will count two indices in the output index:</p>\n</li>\n</ol>\n<ul>\n<li>one index starting at 0: (n0).</li>\n<li>one index starting at vin_count + 1: (n4).</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>Initially, treat SIGHASH_DOUBLE inputs similar to SIGHASH_SINGLE, by pairing them with their adjacent output. This gives us consensus on the index of the first output: (vin0/vout0) and (vin1/vout1).</p>\n</li>\n<li>\n<p>For each SIGHASH_DOUBLE input, we will also observe the index starting at vin_count + 1 (n4). This gives us consensus on the second output: (vin0/vout4) and (vin1/vout5).</p>\n</li>\n</ol>\n<p>That\u2019s about it. Essentially we use vin_count to offset a second index for the outputs &gt; vin_count. This should work for SIGHASH_DOUBLE, SIGHASH_TRIPLE, or as high as you want to go.</p>\n<p>I believe this would be simple enough for consensus on validating signatures. It may help to organize inputs/outputs based on their sighash flag, so that when you are consolidating PSBTs:</p>\n<ul>\n<li>SIGHASH_DOUBLE pairs goes first,</li>\n<li>then SIGHASH_SINGLE pairs,</li>\n<li>then remaining inputs,</li>\n<li>then SIGHASH_DOUBLE outputs,</li>\n<li>then remaining outputs.</li>\n</ul>\n<p>Worst-case, your tx gets rejected from the mempool, because you didn\u2019t organize things properly.</p>\n<p>Edit: I forgot to mention the odd case where you contribute inputs without an output. I\u2019m not sure how often that comes up, but I don\u2019t believe these inputs would be compatible with a SIGHASH_DOUBLE flag. Which I think is okay, as the worst-case is still just your tx being rejected from the mempool.</p>\n<p>Edit2: This also wouldn\u2019t work with other PSBTs that consolidate inputs, as they will be contributing more inputs than outputs. Not sure how to get around that, other than making SIGHASH_DOUBLE only compatible with SIGHASH_SINGLE. But maybe there is a way.</p>\n<p>As for how this could be soft-forked into bitcoin, I would look at some way of extending the SIGHASH_NONE flag, so that older nodes will skip validation. I believe taproot introduced a few ways of extending signature validation, though I\u2019m not sure which method would be best to use.</p>\n<p>Another interesting use case for SIGHASH_DOUBLE (with ANYONECANPAY), is that you can have a mempool of single-spend PSBTs. This wouldn\u2019t be for coin laundering, but to save 7-8 vbytes of overhead per tx, as miners could just consolidate these into a final tx when making a block.</p>\n<p>Anyway, it would be a nice feature to have, and it feels like a missing flag option to sign for both a payout and change output in a composable way.</p>\n<p>I haven\u2019t put a terrible amount of thought into this, so any feedback from smart minds would be greatly appreciated.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-02-28T22:34:45.217Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 2.0,
  "yours": false,
  "topic_id": 619,
  "topic_slug": "add-a-sighash-doube-flag",
  "topic_title": "Add a SIGHASH_DOUBE flag",
  "topic_html_title": "Add a SIGHASH_DOUBE flag",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 3,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "Hello. I would like to discuss the feasibility of implementing a SIGHASH_DOUBLE flag, which would sign for two outputs in a transaction.\n\nI would like this feature as an option when signing transactions, so that I can create a PSBT that can be combined with similar PSBTs in a non-interactive way (similar to SIGHASH_SINGLE), that includes both a payout output and a change output.\n\nIn regards to how one would verify a tx with such a flag present, this would be my naive approach:\n\nImagine we have a tx with four inputs, six outputs, and the following config:\n```\nvin0: SIGHASH_DOUBLE\nvin1: SIGHASH_DOUBLE\nvin2: SIGHASH_SINGLE\nvin3: SIGHASH_ALL\n```\n\n1. Scan all signature flags in a tx, check if SIGHASH_DOUBLE exists.\n\n2. If true, we will count two indices in the output index:\n  - one index starting at 0: (n0).\n  - one index starting at vin_count + 1: (n4).\n\n3. Initially, treat SIGHASH_DOUBLE inputs similar to SIGHASH_SINGLE, by pairing them with their adjacent output. This gives us consensus on the index of the first output: (vin0/vout0) and (vin1/vout1).\n\n4. For each SIGHASH_DOUBLE input, we will also observe the index starting at vin_count + 1 (n4). This gives us consensus on the second output: (vin0/vout4) and (vin1/vout5).\n\nThat's about it. Essentially we use vin_count to offset a second index for the outputs > vin_count. This should work for SIGHASH_DOUBLE, SIGHASH_TRIPLE, or as high as you want to go.\n\nI believe this would be simple enough for consensus on validating signatures. It may help to organize inputs/outputs based on their sighash flag, so that when you are consolidating PSBTs:\n\n- SIGHASH_DOUBLE pairs goes first,\n- then SIGHASH_SINGLE pairs,\n- then remaining inputs,\n- then SIGHASH_DOUBLE outputs,\n- then remaining outputs.\n\nWorst-case, your tx gets rejected from the mempool, because you didn't organize things properly.\n\nEdit: I forgot to mention the odd case where you contribute inputs without an output. I'm not sure how often that comes up, but I don't believe these inputs would be compatible with a SIGHASH_DOUBLE flag. Which I think is okay, as the worst-case is still just your tx being rejected from the mempool.\n\nEdit2: This also wouldn't work with other PSBTs that consolidate inputs, as they will be contributing more inputs than outputs. Not sure how to get around that, other than making SIGHASH_DOUBLE only compatible with SIGHASH_SINGLE. But maybe there is a way.\n\nAs for how this could be soft-forked into bitcoin, I would look at some way of extending the SIGHASH_NONE flag, so that older nodes will skip validation. I believe taproot introduced a few ways of extending signature validation, though I'm not sure which method would be best to use.\n\nAnother interesting use case for SIGHASH_DOUBLE (with ANYONECANPAY), is that you can have a mempool of single-spend PSBTs. This wouldn't be for coin laundering, but to save 7-8 vbytes of overhead per tx, as miners could just consolidate these into a final tx when making a block.\n\nAnyway, it would be a nice feature to have, and it feels like a missing flag option to sign for both a payout and change output in a composable way.\n\nI haven't put a terrible amount of thought into this, so any feedback from smart minds would be greatly appreciated.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 322,
  "hidden": false,
  "trust_level": 0,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}