{
  "id": 1623,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/3_2.png",
  "created_at": "2024-02-20T01:47:06.506Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"calle\" data-post=\"2\" data-topic=\"586\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/calle/48/84_2.png\" class=\"avatar\"> calle:</div>\n<blockquote>\n<p>As far as I can see, your construction is missing a crucial part though: the transferrability of these tokens from user to user without the mint being able to link the transfer to the Lightning invoice (i.e., keeping the ecash privacy intact).</p>\n</blockquote>\n</aside>\n<p>If you want to transfer the tokens, you just do a regular ecash transfer (generate a new blinded value and pay the mint to sign it by spending your existing coin) \u2013 the \u201cissuing new ecash\u201d part only reveals blinded values (A and B) to the mint, then the unblinded value (C, K) is what\u2019s used later to authorise transfers.</p>\n<aside class=\"quote no-group\" data-username=\"calle\" data-post=\"2\" data-topic=\"586\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/calle/48/84_2.png\" class=\"avatar\"> calle:</div>\n<blockquote>\n<p>Since the mint does not know the <code>K</code> the user requests a signature on, it\u2019s hard to make sure that the claim of a token remains intact when passed form user to user (and all sorts of other issues arise, such as Alice being able to re-mint a token committing to the same invoice again using a different <code>r</code> after having sent it to another user Carol).</p>\n</blockquote>\n</aside>\n<p>Maybe I\u2019m misunderstanding something; but:</p>\n<ul>\n<li>transfering a token to a new user means telling the mint \u201chere\u2019s <span class=\"math\">C_1,K_1</span> please mark that as spent, and issue me a new blind signature for <span class=\"math\">A_2</span>\u201d</li>\n<li>re-minting the same token with a different <span class=\"math\">r</span> means you\u2019ll end up with the same signature pair <span class=\"math\">C, K</span>; but because the mint tracks spent coins, you\u2019ll only be able to spend it once, despite having paid twice to have it minted, meaning the mint will end up with more bitcoin backing its issued coins than there are coins to be redeemed</li>\n</ul>\n<aside class=\"quote no-group\" data-username=\"calle\" data-post=\"2\" data-topic=\"586\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/calle/48/84_2.png\" class=\"avatar\"> calle:</div>\n<blockquote>\n<p>However, good news: we already have a ZKP implemented as a proof of knowledge of <code>m</code> as a DLEQ proof,</p>\n</blockquote>\n</aside>\n<p>Nice!</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-02-20T01:47:06.506Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 16,
  "readers_count": 15,
  "score": 18.0,
  "yours": false,
  "topic_id": 586,
  "topic_slug": "ecash-and-lightning-via-zkcp",
  "topic_title": "Ecash and lightning via ZKCP",
  "topic_html_title": "Ecash and lightning via ZKCP",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"calle, post:2, topic:586\"]\nAs far as I can see, your construction is missing a crucial part though: the transferrability of these tokens from user to user without the mint being able to link the transfer to the Lightning invoice (i.e., keeping the ecash privacy intact).\n[/quote]\n\nIf you want to transfer the tokens, you just do a regular ecash transfer (generate a new blinded value and pay the mint to sign it by spending your existing coin) -- the \"issuing new ecash\" part only reveals blinded values (A and B) to the mint, then the unblinded value (C, K) is what's used later to authorise transfers.\n\n[quote=\"calle, post:2, topic:586\"]\nSince the mint does not know the `K` the user requests a signature on, it\u2019s hard to make sure that the claim of a token remains intact when passed form user to user (and all sorts of other issues arise, such as Alice being able to re-mint a token committing to the same invoice again using a different `r` after having sent it to another user Carol).\n[/quote]\n\nMaybe I'm misunderstanding something; but:\n\n * transfering a token to a new user means telling the mint \"here's $C_1,K_1$ please mark that as spent, and issue me a new blind signature for $A_2$\"\n * re-minting the same token with a different $r$ means you'll end up with the same signature pair $C, K$; but because the mint tracks spent coins, you'll only be able to spend it once, despite having paid twice to have it minted, meaning the mint will end up with more bitcoin backing its issued coins than there are coins to be redeemed\n\n[quote=\"calle, post:2, topic:586\"]\nHowever, good news: we already have a ZKP implemented as a proof of knowledge of `m` as a DLEQ proof,\n[/quote]\n\nNice!",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}