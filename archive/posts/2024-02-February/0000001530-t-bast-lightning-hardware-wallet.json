{
  "id": 1530,
  "name": "Bastien Teinturier",
  "username": "t-bast",
  "avatar_template": "/user_avatar/delvingbitcoin.org/t-bast/{size}/98_2.png",
  "created_at": "2024-02-13T12:49:23.227Z",
  "cooked": "<p>We\u2019ve thought about this a few times, and even prototyped integration between Phoenix and Ledger for the on-chain operations (funding and splicing). But this is different from what you want to achieve because we still let the channel keys be hot, instead of letting the Ledger device manage them.</p>\n<p>There is a lot of complexity with the approach you want to take. The first one is that the wallet won\u2019t be able to run in the background while the user isn\u2019t monitoring their phone. That\u2019s an important drawback, because most payments are received while the app is not open and is instead woken up on-the-fly by the LSP (and runs in the background).</p>\n<p>The second one is that you will still need the hardware device to be stateful and implement non-trivial policies, similar to what VLS does, because once the user authorizes a payment, there are a lot of different signing operations that may happen for that payment to complete, and you want the hardware device to make sure that a malicious app isn\u2019t trying to exfiltrate funds through those updates.</p>\n<p>There are also a lot of \u201cbackground\u201d operations happening all the time that require signatures (on-the-fly splicing, commitment fee updates, etc). You\u2019ll need to implement a lot of the lightning channel state machine logic <em>inside</em> the hardware device to properly analyze and authorize those without user input. You may end up re-writing a whole lightning implementation inside the hardware wallet, which is a tedious and complex task.</p>\n<p>I\u2019m not trying to scare you, it can still be worthwhile to spend time prototyping that approach, but you shouldn\u2019t underestimate how big of a rabbit hole this will be <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-02-13T12:49:23.227Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 13,
  "readers_count": 12,
  "score": 2.4,
  "yours": false,
  "topic_id": 555,
  "topic_slug": "lightning-hardware-wallet",
  "topic_title": "Lightning Hardware Wallet",
  "topic_html_title": "Lightning Hardware Wallet",
  "category_id": 8,
  "display_username": "Bastien Teinturier",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "We've thought about this a few times, and even prototyped integration between Phoenix and Ledger for the on-chain operations (funding and splicing). But this is different from what you want to achieve because we still let the channel keys be hot, instead of letting the Ledger device manage them.\n\nThere is a lot of complexity with the approach you want to take. The first one is that the wallet won't be able to run in the background while the user isn't monitoring their phone. That's an important drawback, because most payments are received while the app is not open and is instead woken up on-the-fly by the LSP (and runs in the background).\n\nThe second one is that you will still need the hardware device to be stateful and implement non-trivial policies, similar to what VLS does, because once the user authorizes a payment, there are a lot of different signing operations that may happen for that payment to complete, and you want the hardware device to make sure that a malicious app isn't trying to exfiltrate funds through those updates.\n\nThere are also a lot of \"background\" operations happening all the time that require signatures (on-the-fly splicing, commitment fee updates, etc). You'll need to implement a lot of the lightning channel state machine logic *inside* the hardware device to properly analyze and authorize those without user input. You may end up re-writing a whole lightning implementation inside the hardware wallet, which is a tedious and complex task.\n\nI'm not trying to scare you, it can still be worthwhile to spend time prototyping that approach, but you shouldn't underestimate how big of a rabbit hole this will be :slight_smile:",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 101,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "heart",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}