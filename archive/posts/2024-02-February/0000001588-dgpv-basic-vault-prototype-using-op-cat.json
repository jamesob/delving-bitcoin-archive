{
  "id": 1588,
  "name": "",
  "username": "dgpv",
  "avatar_template": "/user_avatar/delvingbitcoin.org/dgpv/{size}/75_2.png",
  "created_at": "2024-02-16T13:07:25.888Z",
  "cooked": "<p>Since I like to try B\u2019SST on any not-entirely-trivial script I stumble upon, I\u2019ve tried it with <code>vault_trigger_withdrawal</code> script from your demo. (B\u2019sst is one of the names of Bastet, the ancient egyptian cat-goddess, so cannot ignore the CAT demo :-))</p>\n<p>I think it might be interesting to look at the report, as it shows what this script does quite concisely, in my opinion.</p>\n<p>The annotated script can be found here: <a href=\"https://gist.github.com/dgpv/f875e021905eb113070a23eb7fa981f6\" class=\"inline-onebox\">purrfect_vault_trigger_withdraw_script_with_bsst_annotations \u00b7 GitHub</a>, you need to call <code>bsst-cli</code> with <code>--explicitly-enabled-opcodes=cat</code></p>\n<p>The report:</p>\n<pre><code class=\"lang-auto\">==============================\nEnforced constraints per path:\n==============================\n\nAll valid paths:\n----------------\n\n        EQUAL(&amp;script_computed_sig, precomputed_sig_sans_last_byte&lt;wit0&gt;.x('00')) @ 77:L104\n        CHECKSIG(precomputed_sig_sans_last_byte&lt;wit0&gt;.x('01'), $G_X) @ END\n\n=================================\nWitness usage and stack contents:\n=================================\n\nAll valid paths:\n----------------\nWitnesses used: 17\n\nStack values:\n        &lt;result&gt; = CHECKSIG(precomputed_sig_sans_last_byte&lt;wit0&gt;.x('01'), $G_X) : one_of(0, 1)\n\n================\nData references:\n================\n\n        outputs_single_hash = SHA256(amount_buffer&lt;wit4&gt;.script_pubkey_buffer&lt;wit3&gt;.$DUST_AMOUNT.target_script_pubkey_buffer&lt;wit5&gt;)\n        spent_scripts_single_hash = SHA256(script_pubkey_buffer&lt;wit3&gt;.fee_script_pubkey_buffer&lt;wit1&gt;)\n        spent_amounts_single_hash = SHA256(amount_buffer&lt;wit4&gt;.fee_amount_buffer&lt;wit2&gt;)\n        sig_hash = epoch&lt;wit16&gt;.control&lt;wit15&gt;.tx_version&lt;wit14&gt;.lock_time&lt;wit13&gt;.prevouts_single_hash&lt;wit12&gt;.&amp;spent_amounts_single_hash.&amp;spent_scripts_single_hash.prev_sequences_single_hash&lt;wit11&gt;.&amp;outputs_single_hash.spend_type&lt;wit10&gt;.input_idx&lt;wit9&gt;.leaf_hash&lt;wit8&gt;.key_version_0&lt;wit7&gt;.code_separator_pos&lt;wit6&gt;\n        tagged_sig_hash = SHA256(SHA256($TAPSIGHASH_TAG).SHA256($TAPSIGHASH_TAG).&amp;sig_hash)\n        s_value = SHA256(SHA256($BIP0340_CHALLENGE_TAG).SHA256($BIP0340_CHALLENGE_TAG).$G_X.$G_X.&amp;tagged_sig_hash)\n        script_computed_sig = $G_X.&amp;s_value\n</code></pre>\n<p>(edit: I wonder if it is possible to make the codeblock to have the text to wrap, it would look better I think)</p>\n<p>There\u2019s one obvious witness size optimization that comes to mind when looking at the report:</p>\n<p><code>epoch&lt;wit16&gt;.control&lt;wit15&gt;.tx_version&lt;wit14&gt;.lock_time&lt;wit13&gt;.prevouts_single_hash&lt;wit12&gt;</code></p>\n<p>and</p>\n<p><code>spend_type&lt;wit10&gt;.input_idx&lt;wit9&gt;.leaf_hash&lt;wit8&gt;.key_version_0&lt;wit7&gt;.code_separator_pos&lt;wit6&gt;</code></p>\n<p>can be given as just two witness values, not as 10 witnesses - this will save a few bytes used to encode witness sizes.</p>",
  "post_number": 2,
  "post_type": 1,
  "updated_at": "2024-02-16T13:27:33.944Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 1,
  "reads": 15,
  "readers_count": 14,
  "score": 22.8,
  "yours": false,
  "topic_id": 576,
  "topic_slug": "basic-vault-prototype-using-op-cat",
  "topic_title": "Basic vault prototype using OP_CAT",
  "topic_html_title": "Basic vault prototype using OP_CAT",
  "category_id": 7,
  "display_username": "",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 4,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": "",
  "bookmarked": false,
  "raw": "Since I like to try B'SST on any not-entirely-trivial script I stumble upon, I've tried it with `vault_trigger_withdrawal` script from your demo. (B'sst is one of the names of Bastet, the ancient egyptian cat-goddess, so cannot ignore the CAT demo :-))\n\nI think it might be interesting to look at the report, as it shows what this script does quite concisely, in my opinion.\n\nThe annotated script can be found here: https://gist.github.com/dgpv/f875e021905eb113070a23eb7fa981f6, you need to call `bsst-cli` with `--explicitly-enabled-opcodes=cat`\n\nThe report:\n\n```\n==============================\nEnforced constraints per path:\n==============================\n\nAll valid paths:\n----------------\n\n        EQUAL(&script_computed_sig, precomputed_sig_sans_last_byte<wit0>.x('00')) @ 77:L104\n        CHECKSIG(precomputed_sig_sans_last_byte<wit0>.x('01'), $G_X) @ END\n\n=================================\nWitness usage and stack contents:\n=================================\n\nAll valid paths:\n----------------\nWitnesses used: 17\n\nStack values:\n        <result> = CHECKSIG(precomputed_sig_sans_last_byte<wit0>.x('01'), $G_X) : one_of(0, 1)\n\n================\nData references:\n================\n\n        outputs_single_hash = SHA256(amount_buffer<wit4>.script_pubkey_buffer<wit3>.$DUST_AMOUNT.target_script_pubkey_buffer<wit5>)\n        spent_scripts_single_hash = SHA256(script_pubkey_buffer<wit3>.fee_script_pubkey_buffer<wit1>)\n        spent_amounts_single_hash = SHA256(amount_buffer<wit4>.fee_amount_buffer<wit2>)\n        sig_hash = epoch<wit16>.control<wit15>.tx_version<wit14>.lock_time<wit13>.prevouts_single_hash<wit12>.&spent_amounts_single_hash.&spent_scripts_single_hash.prev_sequences_single_hash<wit11>.&outputs_single_hash.spend_type<wit10>.input_idx<wit9>.leaf_hash<wit8>.key_version_0<wit7>.code_separator_pos<wit6>\n        tagged_sig_hash = SHA256(SHA256($TAPSIGHASH_TAG).SHA256($TAPSIGHASH_TAG).&sig_hash)\n        s_value = SHA256(SHA256($BIP0340_CHALLENGE_TAG).SHA256($BIP0340_CHALLENGE_TAG).$G_X.$G_X.&tagged_sig_hash)\n        script_computed_sig = $G_X.&s_value\n```\n(edit: I wonder if it is possible to make the codeblock to have the text to wrap, it would look better I think)\n\nThere's one obvious witness size optimization that comes to mind when looking at the report: \n\n`epoch<wit16>.control<wit15>.tx_version<wit14>.lock_time<wit13>.prevouts_single_hash<wit12>`\n\nand \n\n`spend_type<wit10>.input_idx<wit9>.leaf_hash<wit8>.key_version_0<wit7>.code_separator_pos<wit6>`\n\ncan be given as just two witness values, not as 10 witnesses - this will save a few bytes used to encode witness sizes.",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 85,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}