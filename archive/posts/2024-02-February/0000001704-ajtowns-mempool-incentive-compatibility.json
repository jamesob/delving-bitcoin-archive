{
  "id": 1704,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/3_2.png",
  "created_at": "2024-02-27T05:39:39.452Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"sdaftuar\" data-post=\"18\" data-topic=\"553\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/letter_avatar_proxy/v4/letter/s/0ea827/48.png\" class=\"avatar\"> sdaftuar:</div>\n<blockquote>\n<p>Defining what a pin really is seems somewhat difficult to me (curious if anyone has a precise definition we can use?),</p>\n</blockquote>\n</aside>\n<p>Here\u2019s my shot: a pinning tx P, is one that:</p>\n<ul>\n<li>is accepted into the mempool at a low feerate (so will not be mined in the near future)</li>\n<li>conflicts with a high feerate tx, V, but is not RBF-replacable by V</li>\n<li>the fee cost to fix this is excessive, whether by:\n<ul>\n<li>bringing P\u2019s feerate up to a level where it will be mined soon (by CPFP or out of band accelerator payments to miners); or</li>\n<li>bumping V\u2019s fee such that it becomes a valid RBF-replacement; or</li>\n<li>constructing an alternative tx U that has a high feerate and does RBF-replace P</li>\n</ul>\n</li>\n</ul>\n<p>\u201cExcessive\u201d is always a judgement call. I think if you retain the requirement that total fees always increase, then the only way to prevent fees becoming excessive is to require that the total size of txs evicted by replacing P with U is at most only a small multiple of the size of V. That multiple then tells you exactly how much U needs to overpay compared to V, so ideally you choose it based on your own definition of \u201cexcessive\u201d.</p>\n<hr>\n<p>An alternative highly speculative design, that would at minimum require magic new opcodes and might not be possible at all in bitcoin\u2019s model, would be to allow deconstructing the pinning transaction: that is, if you start off with P spending inputs <span class=\"math\">C, I_1, .., I_n</span> and creating outputs <span class=\"math\">X, P_O</span> versus the simpler tx that spends <span class=\"math\">C, V_I</span> and creates outputs <span class=\"math\">X, V_O</span>, you could imagine constructing a new tx U that spends <span class=\"math\">C, V_I</span> and creates outputs <span class=\"math\">X, V_O, M</span>, and another transaction W that spends <span class=\"math\">M, I_1, .., I_n</span> to create the single output <span class=\"math\">P_O</span>, reusing the same signatures for <span class=\"math\">I_1, .., I_n</span> from P. That way miners aren\u2019t losing any total fees, pinning is easily worked around as long as you observe the pin, and everyone\u2019s happy.</p>\n<p>However specifying a constraint for spending C such that all the sibling inputs have signatures that allow C to be replaced by M (but not some other output with the same scriptPubKey and value) and only commit to the output <span class=\"math\">P_O</span> is probably quite tricky, if it\u2019s even possible at all.</p>\n<p>Some pictures. The transaction we\u2019d like, with small size, modest fee, high feerate:</p>\n<pre data-code-height=\"147\" data-code-wrap=\"mermaid\"><code class=\"lang-mermaid\">flowchart LR\n  Contract ---&gt; V ---&gt; Results\n  VI ---&gt; V ---&gt; VO\n</code></pre>\n<p>The pinning transaction, with large size, possible high fee, but low/modest feerate:</p>\n<pre data-code-height=\"322\" data-code-wrap=\"mermaid\"><code class=\"lang-mermaid\">flowchart LR\n  Contract ---&gt; P ---&gt; Results\n  P1 ---&gt; P ---&gt; PO\n  P2 ---&gt; P\n  Pn ---&gt; P\n</code></pre>\n<p>The magic solution; U has small size, modest fee, high feerate, and gets the contract results, while any additional fees from P are still available by mining M, even if its feerate is low/modest.</p>\n<pre data-code-height=\"409\" data-code-wrap=\"mermaid\"><code class=\"lang-mermaid\">flowchart LR\n  Contract ---&gt; U ---&gt; Results\n  VI ---&gt; U ---&gt; VO\n  U ---&gt; M\n  P1 ---&gt; M&lt;---&gt; PO\n  P2 ---&gt; M\n  Pn ---&gt; M\n</code></pre>",
  "post_number": 19,
  "post_type": 1,
  "updated_at": "2024-02-27T05:39:39.452Z",
  "reply_count": 0,
  "reply_to_post_number": 18,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 7,
  "readers_count": 6,
  "score": 1.4,
  "yours": false,
  "topic_id": 553,
  "topic_slug": "mempool-incentive-compatibility",
  "topic_title": "Mempool Incentive Compatibility",
  "topic_html_title": "Mempool Incentive Compatibility",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"sdaftuar, post:18, topic:553\"]\nDefining what a pin really is seems somewhat difficult to me (curious if anyone has a precise definition we can use?),\n[/quote]\n\nHere's my shot: a pinning tx P, is one that:\n\n * is accepted into the mempool at a low feerate (so will not be mined in the near future)\n * conflicts with a high feerate tx, V, but is not RBF-replacable by V\n * the fee cost to fix this is excessive, whether by:\n    * bringing P's feerate up to a level where it will be mined soon (by CPFP or out of band accelerator payments to miners); or\n     * bumping V's fee such that it becomes a valid RBF-replacement; or\n     * constructing an alternative tx U that has a high feerate and does RBF-replace P\n\n\"Excessive\" is always a judgement call. I think if you retain the requirement that total fees always increase, then the only way to prevent fees becoming excessive is to require that the total size of txs evicted by replacing P with U is at most only a small multiple of the size of V. That multiple then tells you exactly how much U needs to overpay compared to V, so ideally you choose it based on your own definition of \"excessive\".\n\n----\n\nAn alternative highly speculative design, that would at minimum require magic new opcodes and might not be possible at all in bitcoin's model, would be to allow deconstructing the pinning transaction: that is, if you start off with P spending inputs $C, I_1, .., I_n$ and creating outputs $X, P_O$ versus the simpler tx that spends $C, V_I$ and creates outputs $X, V_O$, you could imagine constructing a new tx U that spends $C, V_I$ and creates outputs $X, V_O, M$, and another transaction W that spends $M, I_1, .., I_n$ to create the single output $P_O$, reusing the same signatures for $I_1, .., I_n$ from P. That way miners aren't losing any total fees, pinning is easily worked around as long as you observe the pin, and everyone's happy.\n\nHowever specifying a constraint for spending C such that all the sibling inputs have signatures that allow C to be replaced by M (but not some other output with the same scriptPubKey and value) and only commit to the output $P_O$ is probably quite tricky, if it's even possible at all.\n\nSome pictures. The transaction we'd like, with small size, modest fee, high feerate:\n\n```mermaid height=147,auto\nflowchart LR\n  Contract ---> V ---> Results\n  VI ---> V ---> VO\n```\n\nThe pinning transaction, with large size, possible high fee, but low/modest feerate:\n\n```mermaid height=322,auto\nflowchart LR\n  Contract ---> P ---> Results\n  P1 ---> P ---> PO\n  P2 ---> P\n  Pn ---> P\n```\n\nThe magic solution; U has small size, modest fee, high feerate, and gets the contract results, while any additional fees from P are still available by mining M, even if its feerate is low/modest.\n\n```mermaid height=409,auto\nflowchart LR\n  Contract ---> U ---> Results\n  VI ---> U ---> VO\n  U ---> M\n  P1 ---> M<---> PO\n  P2 ---> M\n  Pn ---> M\n```",
  "actions_summary": [],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}