{
  "id": 1702,
  "name": "Suhas Daftuar",
  "username": "sdaftuar",
  "avatar_template": "/letter_avatar_proxy/v4/letter/s/0ea827/{size}.png",
  "created_at": "2024-02-26T19:48:17.991Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"15\" data-topic=\"553\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>FDP \u201cprobably rejects some incentive compatible\u201d is trivially Yes, I think? In a flat mempool a miner should accept a 64 byte tx which pays a greater feerate than a larger tx it replaces. It\u2019s not immediately clear to how we would <em>quantify</em> it, but I suspect that the total fee rule makes FDP less incentive compatible in realistic scenarios than NBP.</p>\n</blockquote>\n</aside>\n<p>I\u2019m going with \u201cProbably\u201d rather than \u201cYes\u201d exactly because we haven\u2019t yet done the work to quantify or characterize the circumstances under which such a replacement would be incentive compatible.  My guess is that in a situation like what you\u2019re describing, the reason our intuition is that the replacement should be taken is because maybe we\u2019re assuming there\u2019s some infinite demand for blockspace at whatever the feerate is you\u2019re talking about, and so miners are literally giving up nothing to accept a higher feerate (but smaller fee) transaction.</p>\n<p>However, I don\u2019t presently have a precise argument about what is needed to justify this conclusion, and I don\u2019t think anyone else does either \u2013 so until someone carefully writes up the assumptions under which this behavior is incentive compatible, I\u2019ll assume there\u2019s some chance our intuition may yet be wrong.  In particular, as I mentioned in the OP, in a world where there is just one miner/mining pool on the network (like <a class=\"mention\" href=\"/u/ajtowns\">@ajtowns</a> described, in a stratumv2 world where everyone expects to gets their hashrate-proportion of all tx fees), it seems reasonable that the natural RBF policy is one that requires total fees to always increase, so there\u2019s some reason to think that the incentives and game theory are more complex than we\u2019re accounting for?</p>\n<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"15\" data-topic=\"553\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>Secondly, DoS resistance is not a binary.</p>\n</blockquote>\n</aside>\n<p>Yes you\u2019re absolutely right that this isn\u2019t a binary thing \u2013 what I had in my head when I typed the \u201cIs DoS resistant?\u201d phrase is a much narrower statement about free relay, which I think I could better phrase as: \u201cDoes the minimum relay feerate bound the ratio between (fees-in-mempool + fees-mined-in-blocks) and vbytes-relayed-on-the-network?\u201d</p>\n<p>With that narrower statement, I think my table would hold.  That raises the question about whether this bound on costs to relay bytes is a <em>useful</em> characterization of relay policies.  I think it is, because (a) it makes it very easy to calculate the costs for generating a given amount of traffic, and (b) it makes it so that all usages of tx relay bandwidth are treated equally.</p>\n<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"15\" data-topic=\"553\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>My main issue with this table, though, is the missing column is the one I care about! That\u2019s the adversarial case.</p>\n</blockquote>\n</aside>\n<p>Can you elaborate on what you mean by this?  My guess would be that you are referring to RBF pinning, and maybe you mean: how can a 3rd party increase the costs of me replacing a transaction I created, in such a way that it does not increase the likelihood of the transaction getting confirmed that is somehow commensurate with the adversary\u2019s costs?</p>\n<p>Defining what a pin really is seems somewhat difficult to me (curious if anyone has a precise definition we can use?), at least in part because if we are just looking at RBF policies like the Feerate Diagram Policy I have proposed here, there is always <em>some</em> fee you can put on a replacement transaction to get it into the mempool. So it\u2019s just a question of whether, in a given situation, you think that is a \u201cfair\u201d number.  But defining fairness here is pretty hard, and I think it exactly comes back to incentive compatibility questions for miners\u2026 To see why, consider that we might need to answer this same question in a different context:</p>\n<p>Imagine that Alice creates a transaction (tx A) that pays Bob, and she\u2019s thinking about relaying a double-spend (tx A\u2019) to send the funds back to herself.  Under what circumstances should the network accept A\u2019 as a replacement for A? In particular, if Bob has issued his own transaction B that spends A, under what circumstances should the network prefer the tx package A+B rather than A\u2019?</p>\n<p>This CPFP vs. RBF choice is fundamental to the question of what our RBF policies should be.  It\u2019s unfair to Bob (and to miners!) if Alice can replace tx A at such a cheap price that miners would have been better off with the A+B package, and similarly it seems unfair to Alice (and to miners!) if the costs of her replacing A+B are far beyond what the incentive compatible amount would be for miners to take tx A\u2019 instead.</p>\n<p>I think, today, we don\u2019t really have a good framework to answer this question. If someone thinks they have assumptions under which we can do better in particular examples, then that would be a great place for us to start working from, and we can decide whether the assumptions are reasonable and what use cases would open up as a result.</p>\n<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"15\" data-topic=\"553\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>And while v3 is a useful hack for CPFP, we <em>don\u2019t want</em> CPFP as fees rise: we want inline fees and we want to stack multiple txs as much as possible to share the fee in/out (presumably using future covenant tech), but this means v3 doesn\u2019t help us <img src=\"https://delvingbitcoin.org/images/emoji/twitter/frowning.png?v=12\" title=\":frowning:\" class=\"emoji\" alt=\":frowning:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n</blockquote>\n</aside>\n<p>I\u2019m surprised by this take on v3: if you think CPFP is bad, then when designing your own protocol you could disallow it, simply by not having any immediately spendable outputs?  Or, for general transaction spends that are not tied to any particular protocol/where you can\u2019t control how the outputs might be spent, we could propose other ideas, such as allowing users to opt-in to a policy where children are either not allowed at all<sup class=\"footnote-ref\"><a href=\"#footnote-1702-1\" id=\"footnote-ref-1702-1\">[1]</a></sup>, or are allowed only under very limited circumstances.</p>\n<p>So the way I\u2019d look at v3 is exactly from the opposite perspective: we all agree that transaction chains are generally <em>bad</em>, and v3 gives us a way (for the first time) to actually limit them, and thereby make RBF more useful.</p>\n<p>One thought experiment that I think is helpful: suppose in Bitcoin\u2019s history, relay of transactions with unconfirmed parents was non-standard by default.  Under what circumstances would we have relaxed that policy to allow for unconfirmed transaction chains?  My guess is that we would only have permitted it for cases that make sense and meet particular use cases, like a single CPFP transaction bumping a single parent (much like v3!), which is easy for users to understand and for mining code to optimize for.</p>\n<p>However, since we started with allowing arbitrary topologies and chains of transactions, we are left going in the other direction, of finding ways to cut back on what topologies are permitted instead.  Our mempool issues would be far, far simpler in a world where clusters were limited to size 1!</p>\n<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"16\" data-topic=\"553\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>You can already play the \u201cfree relay\u201d game at the bottom of the mempool. In this case, there are three outcomes:</p>\n<ol>\n<li>Fees go up, you get evicted, you win a Free Relay.</li>\n<li>Fees go don\u2019t go up, you don\u2019t get to play this round.</li>\n<li>Fees go down for long enough, your tx gets mined, you lose.</li>\n</ol>\n<p>The same game played on the 1-block boundary (with the Next Block Carvout) is worse:</p>\n<ol>\n<li>Fees go up, you get evicted, you win.</li>\n<li>Fees don\u2019t go up, you get mined, you lose.</li>\n</ol>\n</blockquote>\n</aside>\n<p>You\u2019re right that mempool eviction can give rise to free relay, but at any given moment, the number of additional bytes that have been relayed beyond what should have been allowed due to the minimum relay feerate is bounded at most by 101kvb, the maximum size of a descendant package.  This is because (as Greg also pointed out above) the mempool minimum fee rises to ensure that new transactions being relayed will pay sufficient fee so that the last eviction is paid for before the next one takes place.</p>\n<p>However, with the Next Block Policy, you can play the free relay game over and over again.  Exactly how much depends on the distribution of fees in the mempool.  I\u2019ll try to redo the calculation I <a href=\"https://delvingbitcoin.org/t/mempool-incentive-compatibility/553\">wrote about above</a> in the specific context of a Next Block Policy RBF rule.</p>\n<p>For concreteness: let\u2019s say we\u2019re allowing any transaction into the mempool as long as it would go into the next block, and as long as any conflicts are not already in the 1st or 2nd block which would be mined (so this captures one of your suggestions above of requiring some gap in the mempool order between what is accepted and what would be evicted).</p>\n<p>What should we assume the distribution of feerates in the mempool is?  I just grabbed this screen shot from mempool.space to see what the feerate ranges are for the past few and next few blocks:</p>\n<p><div class=\"lightbox-wrapper\"><a class=\"lightbox\" href=\"https://delvingbitcoin.org/uploads/default/original/1X/38dc38842674391d2c1ec3997422812d1303d06f.png\" data-download-href=\"https://delvingbitcoin.org/uploads/default/38dc38842674391d2c1ec3997422812d1303d06f\" title=\"Screen Shot 2024-02-26 at 1.27.38 PM\"><img src=\"https://delvingbitcoin.org/uploads/default/optimized/1X/38dc38842674391d2c1ec3997422812d1303d06f_2_690x148.png\" alt=\"Screen Shot 2024-02-26 at 1.27.38 PM\" data-base62-sha1=\"870yFpMBuu1upxEDufhbjUFahUr\" width=\"690\" height=\"148\" srcset=\"https://delvingbitcoin.org/uploads/default/optimized/1X/38dc38842674391d2c1ec3997422812d1303d06f_2_690x148.png, https://delvingbitcoin.org/uploads/default/optimized/1X/38dc38842674391d2c1ec3997422812d1303d06f_2_1035x222.png 1.5x, https://delvingbitcoin.org/uploads/default/optimized/1X/38dc38842674391d2c1ec3997422812d1303d06f_2_1380x296.png 2x\" data-dominant-color=\"443E50\"><div class=\"meta\"><svg class=\"fa d-icon d-icon-far-image svg-icon\" aria-hidden=\"true\"><use href=\"#far-image\"></use></svg><span class=\"filename\">Screen Shot 2024-02-26 at 1.27.38 PM</span><span class=\"informations\">1994\u00d7428 83.7 KB</span><svg class=\"fa d-icon d-icon-discourse-expand svg-icon\" aria-hidden=\"true\"><use href=\"#discourse-expand\"></use></svg></div></a></div></p>\n<p>I haven\u2019t checked if this data is correct, but it looks like the feerate to get into the next block may not be that much higher than for blocks 3, 4, 5, etc.  So for the sake of argument, let\u2019s assume a hypothetical where a feerate of 20s/vbyte puts you out of the top 2 blocks, and a feerate of 40s/vbyte or higher would put you in the next block, and we\u2019ll see what an attacker could do:</p>\n<p>Let\u2019s say an attacker filled up the mempool from blocks 3 and higher with transactions at 20 sats/vbyte.  I think with my default mempool settings, due to various overhead my node has roughly 80 blocks worth of transactions in it right now (with a basically full mempool), so let\u2019s say the attacker relays 78MvB of transaction data in 780 transactions of size 100kvb<sup class=\"footnote-ref\"><a href=\"#footnote-1702-2\" id=\"footnote-ref-1702-2\">[2]</a></sup> to accomplish this.</p>\n<p>According to this <a href=\"https://bitcoinops.org/en/tools/calc-size/\">transaction size calculator</a>, an attacker can then relay about 45k vbytes of transaction data (using p2tr) that conflict with one input of each of these 780 transactions. Under our assumption, this transaction would evict all 780 transactions as long as the feerate on this new transaction is 40 sats/vbyte, or about 1.8Msats in total<sup class=\"footnote-ref\"><a href=\"#footnote-1702-3\" id=\"footnote-ref-1702-3\">[3]</a></sup>.</p>\n<ul>\n<li>Total vbytes relayed: about 78.5MvB.</li>\n<li>Total fees collected: 1.8M sats.</li>\n</ul>\n<p>This is far below what the minimum relay feerate would imply miners should collect in order for this much data to be relayed.  Or, another way to  look at it is that the attacker was able to drain all but the top 2 blocks in the mempool for just 1.8M sats spent, in the process removing 78MvB * 20 sats/vbyte = 15.6 BTC from the mempool. (Please correct me if I made any numerical errors here.)</p>\n<p>Moreover, the attacker could then repeat this attack, over and over again, tying up CPU and relay bandwidth of 78 blocks worth of data, for just 1.8M sats in cost each time (about 900USD at today\u2019s prices?).  Also note that in the process, the attacker has likely driven up the cost to enter the mempool up to 20 sats/vbyte by filling it up in the first place, but without an actual corresponding increase of fees collected by the miners.</p>\n<p>We could discuss whether this is an attack anyone would have an economic incentive to perform (perhaps one miner attacking another, by draining their mempool?), but regardless I would maintain that this is not something that we should permit to happen, for both anti-DoS and incentive compatibility reasons.</p>\n<hr class=\"footnotes-sep\">\n\n<ol class=\"footnotes-list\">\n<li id=\"footnote-1702-1\" class=\"footnote-item\"><p>This was actually something that was brought up a long time ago on the bitcoin-dev mailing list; see for instance <a href=\"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014678.html\" class=\"inline-onebox\">[bitcoin-dev] BIP proposal: No chaining off replaceable transactions</a>.  The main issue with that particular proposal was that it would have applied to all opt-in-rbf transactions and prevented the ability to CPFP.  However, we could imagine a few variations: (a) the v3 proposal itself, which allows a single small child; (b) only allowing a child if the resulting parent+child package would be included in the next block, but otherwise disallowing children; (c) some variant of v3 where the child transaction size is limited even further, say to 200 vbytes, so that CPFP is still permitted but the number of extra bytes that a replacement might have to pay for is as small as reasonably possible.  See also Greg\u2019s writeup, <a href=\"https://delvingbitcoin.org/t/v3-and-some-possible-futures/523/1\" class=\"inline-onebox\">V3 and some possible futures</a>, which covers some more general ideas that may be possible in a post-cluster-mempool world. <a href=\"#footnote-ref-1702-1\" class=\"footnote-backref\">\u21a9\ufe0e</a></p>\n</li>\n<li id=\"footnote-1702-2\" class=\"footnote-item\"><p>My guess is that it would take on the order of several minutes to get these transactions to relay across the network using Bitcoin Core, but I haven\u2019t modeled it carefully.  I believe we currently relay transactions at 7 tx/second to inbound peers and about 17.5 tx/second to outbound peers.  Not sure what the network\u2019s overall bandwidth looks like for this much data though. <a href=\"#footnote-ref-1702-2\" class=\"footnote-backref\">\u21a9\ufe0e</a></p>\n</li>\n<li id=\"footnote-1702-3\" class=\"footnote-item\"><p>If you object to the number of transactions being evicted at once, since BIP 125 caps the number of conflicts from a single replacement at 100, then just imagine the attacker does this in 8 transactions that are all approximately 1/8th the size \u2013 I don\u2019t think a conflict limit has a meaningful effect on these numbers. <a href=\"#footnote-ref-1702-3\" class=\"footnote-backref\">\u21a9\ufe0e</a></p>\n</li>\n</ol>",
  "post_number": 18,
  "post_type": 1,
  "updated_at": "2024-02-26T20:00:07.587Z",
  "reply_count": 0,
  "reply_to_post_number": 15,
  "quote_count": 2,
  "incoming_link_count": 0,
  "reads": 1,
  "readers_count": 0,
  "score": 0.2,
  "yours": false,
  "topic_id": 553,
  "topic_slug": "mempool-incentive-compatibility",
  "topic_title": "Mempool Incentive Compatibility",
  "topic_html_title": "Mempool Incentive Compatibility",
  "category_id": 7,
  "display_username": "Suhas Daftuar",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"rustyrussell, post:15, topic:553\"]\nFDP \u201cprobably rejects some incentive compatible\u201d is trivially Yes, I think? In a flat mempool a miner should accept a 64 byte tx which pays a greater feerate than a larger tx it replaces. It\u2019s not immediately clear to how we would *quantify* it, but I suspect that the total fee rule makes FDP less incentive compatible in realistic scenarios than NBP.\n[/quote]\n\nI'm going with \"Probably\" rather than \"Yes\" exactly because we haven't yet done the work to quantify or characterize the circumstances under which such a replacement would be incentive compatible.  My guess is that in a situation like what you're describing, the reason our intuition is that the replacement should be taken is because maybe we're assuming there's some infinite demand for blockspace at whatever the feerate is you're talking about, and so miners are literally giving up nothing to accept a higher feerate (but smaller fee) transaction.\n\nHowever, I don't presently have a precise argument about what is needed to justify this conclusion, and I don't think anyone else does either -- so until someone carefully writes up the assumptions under which this behavior is incentive compatible, I'll assume there's some chance our intuition may yet be wrong.  In particular, as I mentioned in the OP, in a world where there is just one miner/mining pool on the network (like @ajtowns described, in a stratumv2 world where everyone expects to gets their hashrate-proportion of all tx fees), it seems reasonable that the natural RBF policy is one that requires total fees to always increase, so there's some reason to think that the incentives and game theory are more complex than we're accounting for?\n\n[quote=\"rustyrussell, post:15, topic:553\"]\nSecondly, DoS resistance is not a binary. \n[/quote]\n\nYes you're absolutely right that this isn't a binary thing -- what I had in my head when I typed the \"Is DoS resistant?\" phrase is a much narrower statement about free relay, which I think I could better phrase as: \"Does the minimum relay feerate bound the ratio between (fees-in-mempool + fees-mined-in-blocks) and vbytes-relayed-on-the-network?\" \n\nWith that narrower statement, I think my table would hold.  That raises the question about whether this bound on costs to relay bytes is a *useful* characterization of relay policies.  I think it is, because (a) it makes it very easy to calculate the costs for generating a given amount of traffic, and (b) it makes it so that all usages of tx relay bandwidth are treated equally.\n\n[quote=\"rustyrussell, post:15, topic:553\"]\nMy main issue with this table, though, is the missing column is the one I care about! That\u2019s the adversarial case.\n[/quote]\n\nCan you elaborate on what you mean by this?  My guess would be that you are referring to RBF pinning, and maybe you mean: how can a 3rd party increase the costs of me replacing a transaction I created, in such a way that it does not increase the likelihood of the transaction getting confirmed that is somehow commensurate with the adversary's costs?  \n\nDefining what a pin really is seems somewhat difficult to me (curious if anyone has a precise definition we can use?), at least in part because if we are just looking at RBF policies like the Feerate Diagram Policy I have proposed here, there is always *some* fee you can put on a replacement transaction to get it into the mempool. So it's just a question of whether, in a given situation, you think that is a \"fair\" number.  But defining fairness here is pretty hard, and I think it exactly comes back to incentive compatibility questions for miners.... To see why, consider that we might need to answer this same question in a different context:\n\nImagine that Alice creates a transaction (tx A) that pays Bob, and she's thinking about relaying a double-spend (tx A') to send the funds back to herself.  Under what circumstances should the network accept A' as a replacement for A? In particular, if Bob has issued his own transaction B that spends A, under what circumstances should the network prefer the tx package A+B rather than A'?\n\nThis CPFP vs. RBF choice is fundamental to the question of what our RBF policies should be.  It's unfair to Bob (and to miners!) if Alice can replace tx A at such a cheap price that miners would have been better off with the A+B package, and similarly it seems unfair to Alice (and to miners!) if the costs of her replacing A+B are far beyond what the incentive compatible amount would be for miners to take tx A' instead.  \n\nI think, today, we don't really have a good framework to answer this question. If someone thinks they have assumptions under which we can do better in particular examples, then that would be a great place for us to start working from, and we can decide whether the assumptions are reasonable and what use cases would open up as a result.\n\n[quote=\"rustyrussell, post:15, topic:553\"]\nAnd while v3 is a useful hack for CPFP, we *don\u2019t want* CPFP as fees rise: we want inline fees and we want to stack multiple txs as much as possible to share the fee in/out (presumably using future covenant tech), but this means v3 doesn\u2019t help us :frowning:\n[/quote]\n\nI'm surprised by this take on v3: if you think CPFP is bad, then when designing your own protocol you could disallow it, simply by not having any immediately spendable outputs?  Or, for general transaction spends that are not tied to any particular protocol/where you can't control how the outputs might be spent, we could propose other ideas, such as allowing users to opt-in to a policy where children are either not allowed at all[^mailing-list], or are allowed only under very limited circumstances.\n\nSo the way I'd look at v3 is exactly from the opposite perspective: we all agree that transaction chains are generally *bad*, and v3 gives us a way (for the first time) to actually limit them, and thereby make RBF more useful.  \n\nOne thought experiment that I think is helpful: suppose in Bitcoin's history, relay of transactions with unconfirmed parents was non-standard by default.  Under what circumstances would we have relaxed that policy to allow for unconfirmed transaction chains?  My guess is that we would only have permitted it for cases that make sense and meet particular use cases, like a single CPFP transaction bumping a single parent (much like v3!), which is easy for users to understand and for mining code to optimize for.  \n\nHowever, since we started with allowing arbitrary topologies and chains of transactions, we are left going in the other direction, of finding ways to cut back on what topologies are permitted instead.  Our mempool issues would be far, far simpler in a world where clusters were limited to size 1!\n\n[quote=\"rustyrussell, post:16, topic:553\"]\nYou can already play the \u201cfree relay\u201d game at the bottom of the mempool. In this case, there are three outcomes:\n\n1. Fees go up, you get evicted, you win a Free Relay.\n2. Fees go don\u2019t go up, you don\u2019t get to play this round.\n3. Fees go down for long enough, your tx gets mined, you lose.\n\nThe same game played on the 1-block boundary (with the Next Block Carvout) is worse:\n\n1. Fees go up, you get evicted, you win.\n2. Fees don\u2019t go up, you get mined, you lose.\n[/quote]\n\nYou're right that mempool eviction can give rise to free relay, but at any given moment, the number of additional bytes that have been relayed beyond what should have been allowed due to the minimum relay feerate is bounded at most by 101kvb, the maximum size of a descendant package.  This is because (as Greg also pointed out above) the mempool minimum fee rises to ensure that new transactions being relayed will pay sufficient fee so that the last eviction is paid for before the next one takes place.\n\nHowever, with the Next Block Policy, you can play the free relay game over and over again.  Exactly how much depends on the distribution of fees in the mempool.  I'll try to redo the calculation I [wrote about above](https://delvingbitcoin.org/t/mempool-incentive-compatibility/553) in the specific context of a Next Block Policy RBF rule.\n\nFor concreteness: let's say we're allowing any transaction into the mempool as long as it would go into the next block, and as long as any conflicts are not already in the 1st or 2nd block which would be mined (so this captures one of your suggestions above of requiring some gap in the mempool order between what is accepted and what would be evicted).\n\nWhat should we assume the distribution of feerates in the mempool is?  I just grabbed this screen shot from mempool.space to see what the feerate ranges are for the past few and next few blocks:\n\n![Screen Shot 2024-02-26 at 1.27.38 PM|690x148](upload://870yFpMBuu1upxEDufhbjUFahUr.png)\n\nI haven't checked if this data is correct, but it looks like the feerate to get into the next block may not be that much higher than for blocks 3, 4, 5, etc.  So for the sake of argument, let's assume a hypothetical where a feerate of 20s/vbyte puts you out of the top 2 blocks, and a feerate of 40s/vbyte or higher would put you in the next block, and we'll see what an attacker could do:\n\nLet's say an attacker filled up the mempool from blocks 3 and higher with transactions at 20 sats/vbyte.  I think with my default mempool settings, due to various overhead my node has roughly 80 blocks worth of transactions in it right now (with a basically full mempool), so let's say the attacker relays 78MvB of transaction data in 780 transactions of size 100kvb[^time] to accomplish this.\n\nAccording to this [transaction size calculator](https://bitcoinops.org/en/tools/calc-size/), an attacker can then relay about 45k vbytes of transaction data (using p2tr) that conflict with one input of each of these 780 transactions. Under our assumption, this transaction would evict all 780 transactions as long as the feerate on this new transaction is 40 sats/vbyte, or about 1.8Msats in total[^rbf_limits].\n\n* Total vbytes relayed: about 78.5MvB.  \n* Total fees collected: 1.8M sats.\n\nThis is far below what the minimum relay feerate would imply miners should collect in order for this much data to be relayed.  Or, another way to  look at it is that the attacker was able to drain all but the top 2 blocks in the mempool for just 1.8M sats spent, in the process removing 78MvB * 20 sats/vbyte = 15.6 BTC from the mempool. (Please correct me if I made any numerical errors here.)\n\nMoreover, the attacker could then repeat this attack, over and over again, tying up CPU and relay bandwidth of 78 blocks worth of data, for just 1.8M sats in cost each time (about 900USD at today's prices?).  Also note that in the process, the attacker has likely driven up the cost to enter the mempool up to 20 sats/vbyte by filling it up in the first place, but without an actual corresponding increase of fees collected by the miners.\n\nWe could discuss whether this is an attack anyone would have an economic incentive to perform (perhaps one miner attacking another, by draining their mempool?), but regardless I would maintain that this is not something that we should permit to happen, for both anti-DoS and incentive compatibility reasons.\n\n[^mailing-list]: This was actually something that was brought up a long time ago on the bitcoin-dev mailing list; see for instance https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014678.html.  The main issue with that particular proposal was that it would have applied to all opt-in-rbf transactions and prevented the ability to CPFP.  However, we could imagine a few variations: (a) the v3 proposal itself, which allows a single small child; (b) only allowing a child if the resulting parent+child package would be included in the next block, but otherwise disallowing children; (c) some variant of v3 where the child transaction size is limited even further, say to 200 vbytes, so that CPFP is still permitted but the number of extra bytes that a replacement might have to pay for is as small as reasonably possible.  See also Greg's writeup, https://delvingbitcoin.org/t/v3-and-some-possible-futures/523/1, which covers some more general ideas that may be possible in a post-cluster-mempool world.\n\n[^time]: My guess is that it would take on the order of several minutes to get these transactions to relay across the network using Bitcoin Core, but I haven't modeled it carefully.  I believe we currently relay transactions at 7 tx/second to inbound peers and about 17.5 tx/second to outbound peers.  Not sure what the network's overall bandwidth looks like for this much data though.\n\n[^rbf_limits]: If you object to the number of transactions being evicted at once, since BIP 125 caps the number of conflicts from a single replacement at 100, then just imagine the attacker does this in 8 transactions that are all approximately 1/8th the size -- I don't think a conflict limit has a meaningful effect on these numbers.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 95,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}