{
  "id": 1561,
  "name": "Pascal Grange",
  "username": "pgrange",
  "avatar_template": "/user_avatar/delvingbitcoin.org/pgrange/{size}/345_2.png",
  "created_at": "2024-02-14T09:22:54.228Z",
  "cooked": "<p>Thank you so much for your feedback <a class=\"mention\" href=\"/u/t-bast\">@t-bast</a> and don\u2019t worry, I\u2019m scared just the appropriate amount <img src=\"https://delvingbitcoin.org/images/emoji/twitter/wink.png?v=12\" title=\":wink:\" class=\"emoji\" alt=\":wink:\" loading=\"lazy\" width=\"20\" height=\"20\"> Your answer doesn\u2019t make it worst yet. On the contrary, it really helps me thinking so it\u2019s really appreciated <img src=\"https://delvingbitcoin.org/images/emoji/twitter/slight_smile.png?v=12\" title=\":slight_smile:\" class=\"emoji\" alt=\":slight_smile:\" loading=\"lazy\" width=\"20\" height=\"20\"></p>\n<blockquote>\n<p>The first one is that the wallet won\u2019t be able to run in the background while the user isn\u2019t monitoring their phone. That\u2019s an important drawback, because most payments are received while the app is not open and is instead woken up on-the-fly by the LSP (and runs in the background).</p>\n</blockquote>\n<p>Indeed, that is a strong difference with the current phoenix operation and probably any non-custodial mobile wallet in fact. Today, as you mention, the app runs in the background, is woken up by the LSP and the payment is received transparently for the user, except a notification to share the good news with them. With my approach, for a payment to be received, we will have to, first, notify the user that a payment is on the way and ask them to connect their ledger to accept it and, then, ask them to validate some transactions on it. I can see how this can make receiving a payment very slow and, maybe even painful for the user. They will have to have their hardware device at hand to be able to receive the payment.</p>\n<p>So there\u2019s at least two impacts on receiving payment: payment technical process itself and user experience.</p>\n<p>For the payment technical process, I\u2019m not sure how different this would be from the situation where the user\u2019s phone is off when they receive a payment. How does the LSP deal with off phone now? Can we get inspiration from that to handle this hardware device complications?</p>\n<p>For the user experience it can well be that it\u2019s just super painful but maybe acceptable in some cases where the stakes are high enough for them to make the extra effort. Also, I have the idea that the user is already often involved today when receiving a Lightning payment. It\u2019s the case when I\u2019m creating an invoice, sharing the invoice with some payer and, the payment being fast with lightning, I just see it arrive on my phone. For that use case, \u00ab synchronous payment \u00bb I can imagine that the impact will be way smaller. The user already has their phone in their hand and they \u00ab just \u00bb need to plug their secure device to validate payment reception.</p>\n<blockquote>\n<p>The second one is that you will still need the hardware device to be stateful and implement non-trivial policies, similar to what VLS does [\u2026]\nThere are also a lot of \u201cbackground\u201d operations happening all the time that require signatures (on-the-fly splicing, commitment fee updates, etc) [\u2026]</p>\n</blockquote>\n<p>That\u2019s a very good point. I believe VLS has strong value for such a wallet I want to create and that, at some point, there needs to be non trivial logic embedded in the hardware. As you noticed, I do not even plan to develop any code embedded in the hardware device for this iteration of the project but only rely on capabilities already exposed by the device. So I would expect quite some drawbacks with this first iteration. Will it be really more secure if the user validates transactions on their hardware device that just look gibberish? Will the user have to spend their time validating meaningless transactions on their device for any protocol update?</p>\n<blockquote>\n<p>you shouldn\u2019t underestimate how big of a rabbit hole this will be</p>\n</blockquote>\n<p>Thank you for the kind warning. Coming from you, it\u2019s a confirmation to be humble, and have the smallest possible scope for the very first iteration of this project. In particular, focusing on integrating with a ledger as it is and see what happens. I can imagine this first application as a testbed upon which we can reflect, learn and build further. Maybe some advanced and motivated users will find some value in trying it already. At least, we\u2019ll be able to observe it, play with it and realize where efforts should be put in priority. Is usability in practice as painful as we might fear now or are there some use cases that are ok-ish? Could we think of an ad-hoc LSP that would be more suited for this use case and ease some of the process? Would we be able to design and propose some BLIP to make this approach more practical?</p>",
  "post_number": 3,
  "post_type": 1,
  "updated_at": "2024-02-14T09:23:43.182Z",
  "reply_count": 0,
  "reply_to_post_number": 2,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 0.6,
  "yours": false,
  "topic_id": 555,
  "topic_slug": "lightning-hardware-wallet",
  "topic_title": "Lightning Hardware Wallet",
  "topic_html_title": "Lightning Hardware Wallet",
  "category_id": 8,
  "display_username": "Pascal Grange",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "reply_to_user": {
    "username": "t-bast",
    "name": "Bastien Teinturier",
    "avatar_template": "/user_avatar/delvingbitcoin.org/t-bast/{size}/98_2.png"
  },
  "bookmarked": false,
  "raw": "\nThank you so much for your feedback @t-bast and don\u2019t worry, I\u2019m scared just the appropriate amount ;) Your answer doesn\u2019t make it worst yet. On the contrary, it really helps me thinking so it\u2019s really appreciated :)\n\n> The first one is that the wallet won\u2019t be able to run in the background while the user isn\u2019t monitoring their phone. That\u2019s an important drawback, because most payments are received while the app is not open and is instead woken up on-the-fly by the LSP (and runs in the background).\n\nIndeed, that is a strong difference with the current phoenix operation and probably any non-custodial mobile wallet in fact. Today, as you mention, the app runs in the background, is woken up by the LSP and the payment is received transparently for the user, except a notification to share the good news with them. With my approach, for a payment to be received, we will have to, first, notify the user that a payment is on the way and ask them to connect their ledger to accept it and, then, ask them to validate some transactions on it. I can see how this can make receiving a payment very slow and, maybe even painful for the user. They will have to have their hardware device at hand to be able to receive the payment.\n\nSo there\u2019s at least two impacts on receiving payment: payment technical process itself and user experience.\n\nFor the payment technical process, I\u2019m not sure how different this would be from the situation where the user\u2019s phone is off when they receive a payment. How does the LSP deal with off phone now? Can we get inspiration from that to handle this hardware device complications?\n\nFor the user experience it can well be that it\u2019s just super painful but maybe acceptable in some cases where the stakes are high enough for them to make the extra effort. Also, I have the idea that the user is already often involved today when receiving a Lightning payment. It\u2019s the case when I\u2019m creating an invoice, sharing the invoice with some payer and, the payment being fast with lightning, I just see it arrive on my phone. For that use case, \u00ab synchronous payment \u00bb I can imagine that the impact will be way smaller. The user already has their phone in their hand and they \u00ab just \u00bb need to plug their secure device to validate payment reception.\n\n> The second one is that you will still need the hardware device to be stateful and implement non-trivial policies, similar to what VLS does [\u2026]\n> There are also a lot of \u201cbackground\u201d operations happening all the time that require signatures (on-the-fly splicing, commitment fee updates, etc) [\u2026]\n\nThat\u2019s a very good point. I believe VLS has strong value for such a wallet I want to create and that, at some point, there needs to be non trivial logic embedded in the hardware. As you noticed, I do not even plan to develop any code embedded in the hardware device for this iteration of the project but only rely on capabilities already exposed by the device. So I would expect quite some drawbacks with this first iteration. Will it be really more secure if the user validates transactions on their hardware device that just look gibberish? Will the user have to spend their time validating meaningless transactions on their device for any protocol update?\n\n> you shouldn\u2019t underestimate how big of a rabbit hole this will be \n\nThank you for the kind warning. Coming from you, it's a confirmation to be humble, and have the smallest possible scope for the very first iteration of this project. In particular, focusing on integrating with a ledger as it is and see what happens. I can imagine this first application as a testbed upon which we can reflect, learn and build further. Maybe some advanced and motivated users will find some value in trying it already. At least, we\u2019ll be able to observe it, play with it and realize where efforts should be put in priority. Is usability in practice as painful as we might fear now or are there some use cases that are ok-ish? Could we think of an ad-hoc LSP that would be more suited for this use case and ease some of the process? Would we be able to design and propose some BLIP to make this approach more practical?",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 286,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}