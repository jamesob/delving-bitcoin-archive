{
  "id": 1534,
  "name": "Robin Linus",
  "username": "RobinLinus",
  "avatar_template": "/user_avatar/delvingbitcoin.org/robinlinus/{size}/130_2.png",
  "created_at": "2024-02-13T16:41:21.599Z",
  "cooked": "<h1><a name=\"perpetually-kycd-coins-using-evil-covenants-1\" class=\"anchor\" href=\"#perpetually-kycd-coins-using-evil-covenants-1\"></a>Perpetually KYC\u2019d Coins Using Evil Covenants</h1>\n<p>Some governments, such as the EU, are working hard on crippling Bitcoin with <a href=\"https://www.coindesk.com/learn/mica-eus-comprehensive-new-crypto-regulation-explained/\" rel=\"noopener nofollow ugc\">excessive KYC laws</a>. This also means that protocol updates could be abused to introduce a \u2018perpetual KYC\u2019 contract. Financial institutions would likely tend to welcome such a mechanism as it simplifies regulatory clarity while preserving the advantages they care about, e.g., quick international settlement and a limited supply.</p>\n<p>Adversarial thinking is what keeps bitcoin secure. So we should explore and become aware of the different ways to implement \u201cevil covenants\u201d. For example, combining the opcodes <code>OP_CTV</code>, <code>OP_CSFS</code>, <code>OP_CAT</code>, and <code>OP_EXPIRE</code> enables such a perpetual KYC contract:</p>\n<ol>\n<li>Every two weeks the government signs the Merkle root of their whitelist. Additionally, that signature signs the current date</li>\n<li>The contract checks the government\u2019s signature using <code>OP_CSFS</code></li>\n<li>The contract verifies the inclusion proof for the recipient\u2019s address using <code>OP_CAT</code></li>\n<li>The contract enforces the covenant using <code>OP_CTV</code></li>\n<li>The contract uses <code>OP_EXPIRE</code> to ensure that the government\u2019s signature is at most 2 weeks old</li>\n</ol>\n<h2><a name=\"features-2\" class=\"anchor\" href=\"#features-2\"></a>Features</h2>\n<ul>\n<li>The whitelist can be updated without having to change the contracts of existing UTXOs</li>\n<li>The government does not have to run a cosigning server</li>\n<li>The government does not have to use a hot key. It can sign offline using air-gapped devices</li>\n<li>The government can add addresses to the whitelist at any time</li>\n<li>The government can remove addresses from the whitelist every two weeks</li>\n<li>The government has to publish only the updates to the list and their new signature on static file servers</li>\n<li>The contract can tighten (or relax) spending limits. E.g., send at most $1000 to non-KYC\u2019d addresses. Or receiving more than $50000 could require more strict KYC processes.</li>\n<li>Self custody becomes much safer as attackers cannot steal KYC\u2019d coins</li>\n<li>The government can force users to update their contracts</li>\n<li>The government can revoke its control of BTC held under this policy by whitelisting some non-covenant address</li>\n</ul>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-02-13T17:10:40.381Z",
  "reply_count": 1,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 184,
  "reads": 26,
  "readers_count": 25,
  "score": 930.0,
  "yours": false,
  "topic_id": 556,
  "topic_slug": "perpetually-kycd-coins-using-evil-covenants",
  "topic_title": "Perpetually KYC'd Coins Using Evil Covenants",
  "topic_html_title": "Perpetually KYC&rsquo;d Coins Using Evil Covenants",
  "category_id": 7,
  "display_username": "Robin Linus",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "# Perpetually KYC'd Coins Using Evil Covenants\n\nSome governments, such as the EU, are working hard on crippling Bitcoin with [excessive KYC laws](https://www.coindesk.com/learn/mica-eus-comprehensive-new-crypto-regulation-explained/). This also means that protocol updates could be abused to introduce a 'perpetual KYC' contract. Financial institutions would likely tend to welcome such a mechanism as it simplifies regulatory clarity while preserving the advantages they care about, e.g., quick international settlement and a limited supply.\n\nAdversarial thinking is what keeps bitcoin secure. So we should explore and become aware of the different ways to implement \"evil covenants\". For example, combining the opcodes `OP_CTV`, `OP_CSFS`, `OP_CAT`, and `OP_EXPIRE` enables such a perpetual KYC contract:\n\n1. Every two weeks the government signs the Merkle root of their whitelist. Additionally, that signature signs the current date\n2. The contract checks the government's signature using `OP_CSFS`\n3. The contract verifies the inclusion proof for the recipient's address using `OP_CAT`\n4. The contract enforces the covenant using `OP_CTV`\n5. The contract uses `OP_EXPIRE` to ensure that the government's signature is at most 2 weeks old\n\n## Features\n- The whitelist can be updated without having to change the contracts of existing UTXOs\n- The government does not have to run a cosigning server\n- The government does not have to use a hot key. It can sign offline using air-gapped devices\n- The government can add addresses to the whitelist at any time\n- The government can remove addresses from the whitelist every two weeks\n- The government has to publish only the updates to the list and their new signature on static file servers\n- The contract can tighten (or relax) spending limits. E.g., send at most $1000 to non-KYC'd addresses. Or receiving more than $50000 could require more strict KYC processes.\n- Self custody becomes much safer as attackers cannot steal KYC'd coins \n- The government can force users to update their contracts\n- The government can revoke its control of BTC held under this policy by whitelisting some non-covenant address",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 131,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 1,
  "current_user_used_main_reaction": false
}