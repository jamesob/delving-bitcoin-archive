{
  "id": 1615,
  "name": "Anthony Towns",
  "username": "ajtowns",
  "avatar_template": "/user_avatar/delvingbitcoin.org/ajtowns/{size}/3_2.png",
  "created_at": "2024-02-19T11:57:37.421Z",
  "cooked": "<p>Is it possible to link ecash mints to the lightning network without losing ecash\u2019s anonymity or adding any additional trust? I believe it is. (This is an expansion of <a href=\"https://twitter.com/ajtowns/status/1748866818067116506\">a tweet</a>)</p>\n<h2><a name=\"background-1\" class=\"anchor\" href=\"#background-1\"></a>Background</h2>\n<p>Lightning uses HTLCs to make atomic payments: that is you have a tuple <span class=\"math\">(H, T, A)</span> of a hash, timeout and amount, that is atomically resolved by revealing a preimage <span class=\"math\">P</span> where <span class=\"math\">H</span> is the result of running sha256 over <span class=\"math\">P</span>.</p>\n<p>Ecash used a blind mint, where the mint issues coins that are backed by its holding of bitcoin, and payments are authorised by revealing a pair <span class=\"math\">(K, S)</span> where <span class=\"math\">S</span> is a blind signature of <span class=\"math\">K</span> calculated as <span class=\"math\">m\\cdot H2C(K)</span> with <span class=\"math\">m</span> being the mint\u2019s private key.</p>\n<p>The mint is trusted in three ways:</p>\n<ol>\n<li>it\u2019s trusted not to lose/spend/steal all the funds backing the coins it issues;</li>\n<li>it\u2019s trusted to correctly use its private key when doing blind signatures; and</li>\n<li>it\u2019s trusted to accept coins it issues either to replace them for new coins when ecash is being transferred to a new owner, or to redeem it for the bitcoin it\u2019s backed by.</li>\n</ol>\n<p>What we\u2019d like is to be able to both pay the mint over lightning for issuing new tokens, and to redeem existing tokens for bitcoin to be received over the lightning network.</p>\n<h2><a name=\"model-2\" class=\"anchor\" href=\"#model-2\"></a>Model</h2>\n<p>Because ecash transactions naturally require the mint to be involved, either to validate the coin has not already been spent or to mint a new coin, we only consider a random bitcoin user interacting with the mint over lightning.</p>\n<p>Because different cryptography schemes are involved (hashing for lightning, blind signatures for ecash) we use a <a href=\"https://bitcoincore.org/en/2016/02/26/zero-knowledge-contingent-payments-announcement/\">zero-knowledge contingent payment</a>.</p>\n<h2><a name=\"issuing-new-ecash-3\" class=\"anchor\" href=\"#issuing-new-ecash-3\"></a>Issuing new ecash</h2>\n<p>First, we\u2019ll consider sending bitcoin over lightning and receiving ecash. For this, the user will first need to calculate a random blinded challenge for the mint as normal (ie, <span class=\"math\">A = H2C(K) + rG</span>). This should be sent to the mint out of band, who will calculate:</p>\n<ul>\n<li><span class=\"math\">B = mA</span></li>\n<li><span class=\"math\">H=SHA256(B)</span></li>\n<li><span class=\"math\">Z</span> a ZKP that it knows a value <span class=\"math\">m</span> such that <span class=\"math\">H=SHA256(mA)</span> and <span class=\"math\">M=mG</span> where <span class=\"math\">M,A,H</span> are public parameters and <span class=\"math\">m</span> is private.</li>\n</ul>\n<p><span class=\"math\">Z</span> is provided back to the user, along with a lightning invoice to pay the HTLC <span class=\"math\">(H,T,A)</span>. If the user pays the invoice, they obtain the preimage <span class=\"math\">B=mA</span> and can unblind the signature (calculating <span class=\"math\">C=B-rM</span>), giving them ecash, and the mint\u2019s bitcoin balance increases by A.</p>\n<p>Because the mint is trusted anyway, it is probably fine for the mint to perform a trusted setup for the zero-knowledge proofs here. After all, if the mint wants to steal funds, it can just spend the bitcoin, and shut all its servers down \u2013 no fancy cryptography required. However, if the zero-knowledge system did not require a trusted setup, I think this would remove the second element of trust in the mint (\u201cit\u2019s trusted to correctly use its private key when doing blind signatures\u201d) \u2013 that is, the mint would not be able to do an invalid blind signature, resulting in an invalid token being held by the user.</p>\n<h2><a name=\"redeeming-ecash-4\" class=\"anchor\" href=\"#redeeming-ecash-4\"></a>Redeeming ecash</h2>\n<p>In order to redeem ecash, you provide <span class=\"math\">C,K</span> and the mint checks that <span class=\"math\">C</span> is a signature for <span class=\"math\">K</span> (ie that <span class=\"math\">C=m\\cdot H2C(K)</span>), and then logs <span class=\"math\">K</span> as having been spent. In order to do use this to atomically release funds over lightning, the following protocol should work:</p>\n<ul>\n<li>user sends an invoice for redeeming the coin denominated by <span class=\"math\">K</span></li>\n<li>mint calculates the correct signature <span class=\"math\">C=m\\cdot H2C(K)</span> and the hash <span class=\"math\">H=SHA256(C)</span></li>\n<li>mint sends an HTLC of <span class=\"math\">(H,T,A)</span> to the user, paying the invoice provided the user does have the correct blinded signature <span class=\"math\">C</span></li>\n<li>user claims funds <span class=\"math\">A</span> by revealing preimage <span class=\"math\">C</span></li>\n<li>once the HTLC resolves, the mint marks <span class=\"math\">K</span> as having been spent (NB: while the HTLC is unresolved, <span class=\"math\">K</span> must be marked as reserved, otherwise there is a risk of a doublespend)</li>\n</ul>\n<p>(No ZKP seems to be required for this direction)</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-02-19T11:57:37.421Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 97,
  "reads": 21,
  "readers_count": 20,
  "score": 499.2,
  "yours": false,
  "topic_id": 586,
  "topic_slug": "ecash-and-lightning-via-zkcp",
  "topic_title": "Ecash and lightning via ZKCP",
  "topic_html_title": "Ecash and lightning via ZKCP",
  "category_id": 7,
  "display_username": "Anthony Towns",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Is it possible to link ecash mints to the lightning network without losing ecash's anonymity or adding any additional trust? I believe it is. (This is an expansion of [a tweet](https://twitter.com/ajtowns/status/1748866818067116506))\n\n## Background\n\nLightning uses HTLCs to make atomic payments: that is you have a tuple $(H, T, A)$ of a hash, timeout and amount, that is atomically resolved by revealing a preimage $P$ where $H$ is the result of running sha256 over $P$.\n\nEcash used a blind mint, where the mint issues coins that are backed by its holding of bitcoin, and payments are authorised by revealing a pair $(K, S)$ where $S$ is a blind signature of $K$ calculated as $m\\cdot H2C(K)$ with $m$ being the mint's private key.\n\nThe mint is trusted in three ways:\n 1. it's trusted not to lose/spend/steal all the funds backing the coins it issues;\n 2. it's trusted to correctly use its private key when doing blind signatures; and\n 3. it's trusted to accept coins it issues either to replace them for new coins when ecash is being transferred to a new owner, or to redeem it for the bitcoin it's backed by.\n\nWhat we'd like is to be able to both pay the mint over lightning for issuing new tokens, and to redeem existing tokens for bitcoin to be received over the lightning network.\n\n## Model\n\nBecause ecash transactions naturally require the mint to be involved, either to validate the coin has not already been spent or to mint a new coin, we only consider a random bitcoin user interacting with the mint over lightning.\n\nBecause different cryptography schemes are involved (hashing for lightning, blind signatures for ecash) we use a [zero-knowledge contingent payment](https://bitcoincore.org/en/2016/02/26/zero-knowledge-contingent-payments-announcement/).\n\n## Issuing new ecash\n\nFirst, we'll consider sending bitcoin over lightning and receiving ecash. For this, the user will first need to calculate a random blinded challenge for the mint as normal (ie, $A = H2C(K) + rG$). This should be sent to the mint out of band, who will calculate:\n\n * $B = mA$\n * $H=SHA256(B)$\n * $Z$ a ZKP that it knows a value $m$ such that $H=SHA256(mA)$ and $M=mG$ where $M,A,H$ are public parameters and $m$ is private.\n\n$Z$ is provided back to the user, along with a lightning invoice to pay the HTLC $(H,T,A)$. If the user pays the invoice, they obtain the preimage $B=mA$ and can unblind the signature (calculating $C=B-rM$), giving them ecash, and the mint's bitcoin balance increases by A.\n\nBecause the mint is trusted anyway, it is probably fine for the mint to perform a trusted setup for the zero-knowledge proofs here. After all, if the mint wants to steal funds, it can just spend the bitcoin, and shut all its servers down -- no fancy cryptography required. However, if the zero-knowledge system did not require a trusted setup, I think this would remove the second element of trust in the mint (\"it's trusted to correctly use its private key when doing blind signatures\") -- that is, the mint would not be able to do an invalid blind signature, resulting in an invalid token being held by the user.\n\n## Redeeming ecash\n\nIn order to redeem ecash, you provide $C,K$ and the mint checks that $C$ is a signature for $K$ (ie that $C=m\\cdot H2C(K)$), and then logs $K$ as having been spent. In order to do use this to atomically release funds over lightning, the following protocol should work:\n\n * user sends an invoice for redeeming the coin denominated by $K$\n * mint calculates the correct signature $C=m\\cdot H2C(K)$ and the hash $H=SHA256(C)$\n * mint sends an HTLC of $(H,T,A)$ to the user, paying the invoice provided the user does have the correct blinded signature $C$\n * user claims funds $A$ by revealing preimage $C$\n * once the HTLC resolves, the mint marks $K$ as having been spent (NB: while the HTLC is unresolved, $K$ must be marked as reserved, otherwise there is a risk of a doublespend)\n\n(No ZKP seems to be required for this direction)",
  "actions_summary": [
    {
      "id": 2,
      "count": 1
    }
  ],
  "moderator": true,
  "admin": true,
  "staff": true,
  "user_id": 3,
  "hidden": false,
  "trust_level": 4,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [
    {
      "id": "+1",
      "type": "emoji",
      "count": 1
    },
    {
      "id": "open_mouth",
      "type": "emoji",
      "count": 1
    }
  ],
  "current_user_reaction": null,
  "reaction_users_count": 2,
  "current_user_used_main_reaction": false
}