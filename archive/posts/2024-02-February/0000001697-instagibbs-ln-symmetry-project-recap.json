{
  "id": 1697,
  "name": "Gregory Sanders",
  "username": "instagibbs",
  "avatar_template": "/user_avatar/delvingbitcoin.org/instagibbs/{size}/28_2.png",
  "created_at": "2024-02-26T14:57:10.543Z",
  "cooked": "<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"13\" data-topic=\"359\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>AFAICT you only need two, assuming you wait for a reply before sending another update? You would always fast-forward to the latest update tx.</p>\n</blockquote>\n</aside>\n<p>Might be talking past each other, but the counter-party may play an old update state to which you\u2019ve forgotten the opening of the taproot commitment to your update. You could remember O(n) fields rather than use the annex, of course.</p>\n<aside class=\"quote no-group\" data-username=\"rustyrussell\" data-post=\"13\" data-topic=\"359\">\n<div class=\"title\">\n<div class=\"quote-controls\"></div>\n<img loading=\"lazy\" alt=\"\" width=\"24\" height=\"24\" src=\"https://delvingbitcoin.org/user_avatar/delvingbitcoin.org/rustyrussell/48/154_2.png\" class=\"avatar\"> rustyrussell:</div>\n<blockquote>\n<p>Adapter signatures is nicer, BUT note that CTV is more optimal than adapter signatures here! However, neither is actually ideal (requiring another tx for fees): what we <em>want</em> is a commitment scheme which lets the spender extract fee from its own output, and/or bring their own fee input.</p>\n</blockquote>\n</aside>\n<p>I like CTV-like approach for another reason: it trivially generalized to multi-party channels. That said, yeah optimally we\u2019d have some sort of TXHASH-like construct for settlement that would allow single tx endo/exo fees depending on how much is locked up in HTLCs and the like.</p>",
  "post_number": 14,
  "post_type": 1,
  "updated_at": "2024-02-26T14:57:10.543Z",
  "reply_count": 0,
  "reply_to_post_number": 13,
  "quote_count": 1,
  "incoming_link_count": 0,
  "reads": 10,
  "readers_count": 9,
  "score": 2.0,
  "yours": false,
  "topic_id": 359,
  "topic_slug": "ln-symmetry-project-recap",
  "topic_title": "LN-Symmetry Project Recap",
  "topic_html_title": "LN-Symmetry Project Recap",
  "category_id": 7,
  "display_username": "Gregory Sanders",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 1,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "[quote=\"rustyrussell, post:13, topic:359\"]\nAFAICT you only need two, assuming you wait for a reply before sending another update? You would always fast-forward to the latest update tx.\n[/quote]\n\nMight be talking past each other, but the counter-party may play an old update state to which you've forgotten the opening of the taproot commitment to your update. You could remember O(n) fields rather than use the annex, of course.\n\n[quote=\"rustyrussell, post:13, topic:359\"]\nAdapter signatures is nicer, BUT note that CTV is more optimal than adapter signatures here! However, neither is actually ideal (requiring another tx for fees): what we *want* is a commitment scheme which lets the spender extract fee from its own output, and/or bring their own fee input.\n[/quote]\n\nI like CTV-like approach for another reason: it trivially generalized to multi-party channels. That said, yeah optimally we'd have some sort of TXHASH-like construct for settlement that would allow single tx endo/exo fees depending on how much is locked up in HTLCs and the like.",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 31,
  "hidden": false,
  "trust_level": 3,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}