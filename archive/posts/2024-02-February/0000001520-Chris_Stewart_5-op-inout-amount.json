{
  "id": 1520,
  "name": "Chris Stewart",
  "username": "Chris_Stewart_5",
  "avatar_template": "/user_avatar/delvingbitcoin.org/chris_stewart_5/{size}/296_2.png",
  "created_at": "2024-02-12T15:00:24.383Z",
  "cooked": "<p>Hi all,</p>\n<p>I\u2019ve attempted to implement <code>OP_INOUT_AMOUNT</code>. The purpose of <code>OP_INOUT_AMOUNT</code> is to push the input value and a set of output values onto the Script interpreter stack.</p>\n<p>Here is my draft BIP:</p>\n<aside class=\"onebox githubblob\" data-onebox-src=\"https://github.com/Christewart/bips/blob/92c108136a0400b3a2fd66ea6c291ec317ee4a01/bip-op-inout-amount.mediawiki\">\n  <header class=\"source\">\n\n      <a href=\"https://github.com/Christewart/bips/blob/92c108136a0400b3a2fd66ea6c291ec317ee4a01/bip-op-inout-amount.mediawiki\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h4><a href=\"https://github.com/Christewart/bips/blob/92c108136a0400b3a2fd66ea6c291ec317ee4a01/bip-op-inout-amount.mediawiki\" target=\"_blank\" rel=\"noopener nofollow ugc\">Christewart/bips/blob/92c108136a0400b3a2fd66ea6c291ec317ee4a01/bip-op-inout-amount.mediawiki</a></h4>\n\n\n      <pre><code class=\"lang-mediawiki\">&lt;pre&gt;\n  BIP: TBD\n  Layer: Consensus (soft fork)\n  Title: 64 bit arithmetic operations\n  Author: Chris Stewart &lt;stewart.chris1234@gmail.com&gt;\n  Comments-Summary: No comments yet.\n  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0364\n  Status: Draft\n  Type: Standards Track\n  Created: 2023-09-11\n  License: BSD-3-Clause\n&lt;/pre&gt;\n\n==Abstract==\n\nThis BIP describes a new op code `OP_INOUT_AMOUNT` that pushes the amount\namount our utxo is funded with and the amount it spending to on the stack.\n\n==Summary==\nThe opcode `OP_INOUT_AMOUNT` pushes the current input index's funding amount onto the stack.\n</code></pre>\n\n\n\n  This file has been truncated. <a href=\"https://github.com/Christewart/bips/blob/92c108136a0400b3a2fd66ea6c291ec317ee4a01/bip-op-inout-amount.mediawiki\" target=\"_blank\" rel=\"noopener nofollow ugc\">show original</a>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>Here is the implementation.</p>\n<aside class=\"onebox githubfolder\" data-onebox-src=\"https://github.com/Christewart/bitcoin/tree/op-inout-amount\">\n  <header class=\"source\">\n      <img src=\"https://github.githubassets.com/favicons/favicon.svg\" class=\"site-icon\" width=\"32\" height=\"32\">\n\n      <a href=\"https://github.com/Christewart/bitcoin/tree/op-inout-amount\" target=\"_blank\" rel=\"noopener nofollow ugc\">github.com</a>\n  </header>\n\n  <article class=\"onebox-body\">\n    <h3><a href=\"https://github.com/Christewart/bitcoin/tree/op-inout-amount\" target=\"_blank\" rel=\"noopener nofollow ugc\">GitHub - Christewart/bitcoin at op-inout-amount</a></h3>\n\n  <p><a href=\"https://github.com/Christewart/bitcoin/tree/op-inout-amount\" target=\"_blank\" rel=\"noopener nofollow ugc\">op-inout-amount</a></p>\n\n  <p><span class=\"label1\">Bitcoin Core integration/staging tree. Contribute to Christewart/bitcoin development by creating an account on GitHub.</span></p>\n\n  </article>\n\n  <div class=\"onebox-metadata\">\n    \n    \n  </div>\n\n  <div style=\"clear: both\"></div>\n</aside>\n\n<p>One purpose of implementing this is to see how this works in conjunction with my <a href=\"https://github.com/bitcoin/bitcoin/pull/29221\" rel=\"noopener nofollow ugc\">64bit op code PR</a>. For more information on this PR see the <a href=\"https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/25\">delving bitcoin discussion here</a>.</p>\n<h3><a name=\"design-questions-1\" class=\"anchor\" href=\"#design-questions-1\"></a>Design questions</h3>\n<p>One limitation of the current implementation is that it only can push the input and output amounts at the <em>current</em> index being verified inside of the Script interpreter. While easiest to implement, I wonder if this should be extended to verifying more than just the input and output at the current input index being verified. It seems like something similar to how <code>SIGHASH</code> flags work would be interesting. Interested in hearing others thoughts.</p>\n<h3><a name=\"implementation-questions-2\" class=\"anchor\" href=\"#implementation-questions-2\"></a>Implementation questions</h3>\n<p>Currently I extend <code>BaseTransactionSignatureChecker</code> to have 2 new methods</p>\n<ul>\n<li><code>GetNIn()</code> - the input index we are currently verifying</li>\n<li><code>GetTransactionData()</code> - gives us access to <code>PreComputedTransactionData</code> so we have access to the output that is funding us, and the set of outputs we are spending to.</li>\n</ul>\n<p>I don\u2019t think this is necessarily the best place to put these methods, but it seemed like the most convenient place for putting these to hack something together. Would be interested in hearing others thoughts of how to structure the implementation.</p>\n<p>My end goal is to use all this stuff in conjunction for <a href=\"https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019419.html\" rel=\"noopener nofollow ugc\">OP_TLUV</a>.</p>",
  "post_number": 1,
  "post_type": 1,
  "updated_at": "2024-02-12T15:05:39.857Z",
  "reply_count": 0,
  "reply_to_post_number": null,
  "quote_count": 0,
  "incoming_link_count": 0,
  "reads": 3,
  "readers_count": 2,
  "score": 0.6,
  "yours": false,
  "topic_id": 549,
  "topic_slug": "op-inout-amount",
  "topic_title": "Op_inout_amount",
  "topic_html_title": "Op_inout_amount",
  "category_id": 7,
  "display_username": "Chris Stewart",
  "primary_group_name": null,
  "flair_name": null,
  "flair_url": null,
  "flair_bg_color": null,
  "flair_color": null,
  "flair_group_id": null,
  "version": 2,
  "can_edit": false,
  "can_delete": false,
  "can_recover": false,
  "can_see_hidden_post": false,
  "can_wiki": false,
  "user_title": null,
  "bookmarked": false,
  "raw": "Hi all,\n\nI've attempted to implement `OP_INOUT_AMOUNT`. The purpose of `OP_INOUT_AMOUNT` is to push the input value and a set of output values onto the Script interpreter stack.\n\nHere is my draft BIP:\n\nhttps://github.com/Christewart/bips/blob/92c108136a0400b3a2fd66ea6c291ec317ee4a01/bip-op-inout-amount.mediawiki\n\nHere is the implementation. \n\nhttps://github.com/Christewart/bitcoin/tree/op-inout-amount\n\nOne purpose of implementing this is to see how this works in conjunction with my [64bit op code PR](https://github.com/bitcoin/bitcoin/pull/29221). For more information on this PR see the [delving bitcoin discussion here](https://delvingbitcoin.org/t/64-bit-arithmetic-soft-fork/397/25).\n\n### Design questions\n\nOne limitation of the current implementation is that it only can push the input and output amounts at the _current_ index being verified inside of the Script interpreter. While easiest to implement, I wonder if this should be extended to verifying more than just the input and output at the current input index being verified. It seems like something similar to how `SIGHASH` flags work would be interesting. Interested in hearing others thoughts.\n\n### Implementation questions\n\nCurrently I extend `BaseTransactionSignatureChecker` to have 2 new methods\n\n- `GetNIn()` - the input index we are currently verifying\n- `GetTransactionData()` - gives us access to `PreComputedTransactionData` so we have access to the output that is funding us, and the set of outputs we are spending to.\n\nI don't think this is necessarily the best place to put these methods, but it seemed like the most convenient place for putting these to hack something together. Would be interested in hearing others thoughts of how to structure the implementation.\n\nMy end goal is to use all this stuff in conjunction for [OP_TLUV](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019419.html).",
  "actions_summary": [],
  "moderator": false,
  "admin": false,
  "staff": false,
  "user_id": 193,
  "hidden": false,
  "trust_level": 1,
  "deleted_at": null,
  "user_deleted": false,
  "edit_reason": null,
  "can_view_edit_history": true,
  "wiki": false,
  "reactions": [],
  "current_user_reaction": null,
  "reaction_users_count": 0,
  "current_user_used_main_reaction": false
}